
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if (typeof $$scope.dirty === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        if (value != null || input.value) {
            input.value = value;
        }
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let stylesheet;
    let active = 0;
    let current_rules = {};
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        if (!current_rules[name]) {
            if (!stylesheet) {
                const style = element('style');
                document.head.appendChild(style);
                stylesheet = style.sheet;
            }
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        node.style.animation = (node.style.animation || '')
            .split(', ')
            .filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        )
            .join(', ');
        if (name && !--active)
            clear_rules();
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            current_rules = {};
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined' ? window : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_outro_and_destroy_block(block, lookup) {
        block.f();
        outro_and_destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error(`Cannot have duplicate keys in a keyed each`);
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(children(options.target));
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.18.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev("SvelteDOMSetProperty", { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe,
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var sugarCore = createCommonjsModule(function (module) {
    /*
     *  Sugar v2.0.6
     *
     *  Freely distributable and licensed under the MIT-style license.
     *  Copyright (c) Andrew Plummer
     *  https://sugarjs.com/
     *
     * ---------------------------- */
    (function() {

      /***
       * @module Core
       * @description Core functionality including the ability to define methods and
       *              extend onto natives.
       *
       ***/

      // The global to export.
      var Sugar;

      // The name of Sugar in the global namespace.
      var SUGAR_GLOBAL = 'Sugar';

      // Natives available on initialization. Letting Object go first to ensure its
      // global is set by the time the rest are checking for chainable Object methods.
      var NATIVE_NAMES = 'Object Number String Array Date RegExp Function';

      // Static method flag
      var STATIC   = 0x1;

      // Instance method flag
      var INSTANCE = 0x2;

      // IE8 has a broken defineProperty but no defineProperties so this saves a try/catch.
      var PROPERTY_DESCRIPTOR_SUPPORT = !!(Object.defineProperty && Object.defineProperties);

      var globalContext = getGlobal();

      // Whether object instance methods can be mapped to the prototype.
      var allowObjectPrototype = false;

      // A map from Array to SugarArray.
      var namespacesByName = {};

      // A map from [object Object] to namespace.
      var namespacesByClassString = {};

      // Defining properties.
      // istanbul ignore next
      var defineProperty = PROPERTY_DESCRIPTOR_SUPPORT ?  Object.defineProperty : definePropertyShim;

      // A default chainable class for unknown types.
      var DefaultChainable = getNewChainableClass('Chainable');


      // Global methods

      function getGlobal() {
        // Get global context by keyword here to avoid issues with libraries
        // that can potentially alter this script's context object.
        return testGlobal(typeof commonjsGlobal !== 'undefined' && commonjsGlobal) ||
               testGlobal(typeof window !== 'undefined' && window);
      }

      function testGlobal(obj) {
        // Note that Rhino uses a different "global" keyword so perform an
        // extra check here to ensure that it's actually the global object.
        return obj && obj.Object === Object ? obj : null;
      }

      function setupGlobal() {
        Sugar = globalContext[SUGAR_GLOBAL];
        // istanbul ignore if
        if (Sugar) {
          // Reuse already defined Sugar global object.
          return;
        }
        Sugar = function(arg) {
          forEachProperty(Sugar, function(sugarNamespace, name) {
            // Although only the only enumerable properties on the global
            // object are Sugar namespaces, environments that can't set
            // non-enumerable properties will step through the utility methods
            // as well here, so use this check to only allow true namespaces.
            if (hasOwn(namespacesByName, name)) {
              sugarNamespace.extend(arg);
            }
          });
          return Sugar;
        };
        // istanbul ignore else
        if ( module.exports) {
          // Node or webpack environment
          module.exports = Sugar;
        } else {
          // Unwrapped browser environment
          try {
            globalContext[SUGAR_GLOBAL] = Sugar;
          } catch (e) {
            // Contexts such as QML have a read-only global context.
          }
        }
        forEachProperty(NATIVE_NAMES.split(' '), function(name) {
          createNamespace(name);
        });
        setGlobalProperties();
      }

      /***
       * @method createNamespace(name)
       * @returns SugarNamespace
       * @namespace Sugar
       * @short Creates a new Sugar namespace.
       * @extra This method is for plugin developers who want to define methods to be
       *        used with natives that Sugar does not handle by default. The new
       *        namespace will appear on the `Sugar` global with all the methods of
       *        normal namespaces, including the ability to define new methods. When
       *        extended, any defined methods will be mapped to `name` in the global
       *        context.
       *
       * @example
       *
       *   Sugar.createNamespace('Boolean');
       *
       * @param {string} name - The namespace name.
       *
       ***/
      function createNamespace(name) {

        // Is the current namespace Object?
        var isObject = name === 'Object';

        // A Sugar namespace is also a chainable class: Sugar.Array, etc.
        var sugarNamespace = getNewChainableClass(name);

        /***
         * @method extend([opts])
         * @returns Sugar
         * @namespace Sugar
         * @short Extends Sugar defined methods onto natives.
         * @extra This method can be called on individual namespaces like
         *        `Sugar.Array` or on the `Sugar` global itself, in which case
         *        [opts] will be forwarded to each `extend` call. For more,
         *        see `extending`.
         *
         * @options
         *
         *   methods           An array of method names to explicitly extend.
         *
         *   except            An array of method names or global namespaces (`Array`,
         *                     `String`) to explicitly exclude. Namespaces should be the
         *                     actual global objects, not strings.
         *
         *   namespaces        An array of global namespaces (`Array`, `String`) to
         *                     explicitly extend. Namespaces should be the actual
         *                     global objects, not strings.
         *
         *   enhance           A shortcut to disallow all "enhance" flags at once
         *                     (flags listed below). For more, see `enhanced methods`.
         *                     Default is `true`.
         *
         *   enhanceString     A boolean allowing String enhancements. Default is `true`.
         *
         *   enhanceArray      A boolean allowing Array enhancements. Default is `true`.
         *
         *   objectPrototype   A boolean allowing Sugar to extend Object.prototype
         *                     with instance methods. This option is off by default
         *                     and should generally not be used except with caution.
         *                     For more, see `object methods`.
         *
         * @example
         *
         *   Sugar.Array.extend();
         *   Sugar.extend();
         *
         * @option {Array<string>} [methods]
         * @option {Array<string|NativeConstructor>} [except]
         * @option {Array<NativeConstructor>} [namespaces]
         * @option {boolean} [enhance]
         * @option {boolean} [enhanceString]
         * @option {boolean} [enhanceArray]
         * @option {boolean} [objectPrototype]
         * @param {ExtendOptions} [opts]
         *
         ***
         * @method extend([opts])
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Extends Sugar defined methods for a specific namespace onto natives.
         * @param {ExtendOptions} [opts]
         *
         ***/
        var extend = function (opts) {

          var nativeClass = globalContext[name], nativeProto = nativeClass.prototype;
          var staticMethods = {}, instanceMethods = {}, methodsByName;

          function objectRestricted(name, target) {
            return isObject && target === nativeProto &&
                   (!allowObjectPrototype || name === 'get' || name === 'set');
          }

          function arrayOptionExists(field, val) {
            var arr = opts[field];
            if (arr) {
              for (var i = 0, el; el = arr[i]; i++) {
                if (el === val) {
                  return true;
                }
              }
            }
            return false;
          }

          function arrayOptionExcludes(field, val) {
            return opts[field] && !arrayOptionExists(field, val);
          }

          function disallowedByFlags(methodName, target, flags) {
            // Disallowing methods by flag currently only applies if methods already
            // exist to avoid enhancing native methods, as aliases should still be
            // extended (i.e. Array#all should still be extended even if Array#every
            // is being disallowed by a flag).
            if (!target[methodName] || !flags) {
              return false;
            }
            for (var i = 0; i < flags.length; i++) {
              if (opts[flags[i]] === false) {
                return true;
              }
            }
          }

          function namespaceIsExcepted() {
            return arrayOptionExists('except', nativeClass) ||
                   arrayOptionExcludes('namespaces', nativeClass);
          }

          function methodIsExcepted(methodName) {
            return arrayOptionExists('except', methodName);
          }

          function canExtend(methodName, method, target) {
            return !objectRestricted(methodName, target) &&
                   !disallowedByFlags(methodName, target, method.flags) &&
                   !methodIsExcepted(methodName);
          }

          opts = opts || {};
          methodsByName = opts.methods;

          if (namespaceIsExcepted()) {
            return;
          } else if (isObject && typeof opts.objectPrototype === 'boolean') {
            // Store "objectPrototype" flag for future reference.
            allowObjectPrototype = opts.objectPrototype;
          }

          forEachProperty(methodsByName || sugarNamespace, function(method, methodName) {
            if (methodsByName) {
              // If we have method names passed in an array,
              // then we need to flip the key and value here
              // and find the method in the Sugar namespace.
              methodName = method;
              method = sugarNamespace[methodName];
            }
            if (hasOwn(method, 'instance') && canExtend(methodName, method, nativeProto)) {
              instanceMethods[methodName] = method.instance;
            }
            if(hasOwn(method, 'static') && canExtend(methodName, method, nativeClass)) {
              staticMethods[methodName] = method;
            }
          });

          // Accessing the extend target each time instead of holding a reference as
          // it may have been overwritten (for example Date by Sinon). Also need to
          // access through the global to allow extension of user-defined namespaces.
          extendNative(nativeClass, staticMethods);
          extendNative(nativeProto, instanceMethods);

          if (!methodsByName) {
            // If there are no method names passed, then
            // all methods in the namespace will be extended
            // to the native. This includes all future defined
            // methods, so add a flag here to check later.
            setProperty(sugarNamespace, 'active', true);
          }
          return sugarNamespace;
        };

        function defineWithOptionCollect(methodName, instance, args) {
          setProperty(sugarNamespace, methodName, function(arg1, arg2, arg3) {
            var opts = collectDefineOptions(arg1, arg2, arg3);
            defineMethods(sugarNamespace, opts.methods, instance, args, opts.last);
            return sugarNamespace;
          });
        }

        /***
         * @method defineStatic(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines static methods on the namespace that can later be extended
         *        onto the native globals.
         * @extra Accepts either a single object mapping names to functions, or name
         *        and function as two arguments. If `extend` was previously called
         *        with no arguments, the method will be immediately mapped to its
         *        native when defined.
         *
         * @example
         *
         *   Sugar.Number.defineStatic({
         *     isOdd: function (num) {
         *       return num % 2 === 1;
         *     }
         *   });
         *
         * @signature defineStatic(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        defineWithOptionCollect('defineStatic', STATIC);

        /***
         * @method defineInstance(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines methods on the namespace that can later be extended as
         *        instance methods onto the native prototype.
         * @extra Accepts either a single object mapping names to functions, or name
         *        and function as two arguments. All functions should accept the
         *        native for which they are mapped as their first argument, and should
         *        never refer to `this`. If `extend` was previously called with no
         *        arguments, the method will be immediately mapped to its native when
         *        defined.
         *
         *        Methods cannot accept more than 4 arguments in addition to the
         *        native (5 arguments total). Any additional arguments will not be
         *        mapped. If the method needs to accept unlimited arguments, use
         *        `defineInstanceWithArguments`. Otherwise if more options are
         *        required, use an options object instead.
         *
         * @example
         *
         *   Sugar.Number.defineInstance({
         *     square: function (num) {
         *       return num * num;
         *     }
         *   });
         *
         * @signature defineInstance(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        defineWithOptionCollect('defineInstance', INSTANCE);

        /***
         * @method defineInstanceAndStatic(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short A shortcut to define both static and instance methods on the namespace.
         * @extra This method is intended for use with `Object` instance methods. Sugar
         *        will not map any methods to `Object.prototype` by default, so defining
         *        instance methods as static helps facilitate their proper use.
         *
         * @example
         *
         *   Sugar.Object.defineInstanceAndStatic({
         *     isAwesome: function (obj) {
         *       // check if obj is awesome!
         *     }
         *   });
         *
         * @signature defineInstanceAndStatic(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        defineWithOptionCollect('defineInstanceAndStatic', INSTANCE | STATIC);


        /***
         * @method defineStaticWithArguments(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines static methods that collect arguments.
         * @extra This method is identical to `defineStatic`, except that when defined
         *        methods are called, they will collect any arguments past `n - 1`,
         *        where `n` is the number of arguments that the method accepts.
         *        Collected arguments will be passed to the method in an array
         *        as the last argument defined on the function.
         *
         * @example
         *
         *   Sugar.Number.defineStaticWithArguments({
         *     addAll: function (num, args) {
         *       for (var i = 0; i < args.length; i++) {
         *         num += args[i];
         *       }
         *       return num;
         *     }
         *   });
         *
         * @signature defineStaticWithArguments(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        defineWithOptionCollect('defineStaticWithArguments', STATIC, true);

        /***
         * @method defineInstanceWithArguments(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines instance methods that collect arguments.
         * @extra This method is identical to `defineInstance`, except that when
         *        defined methods are called, they will collect any arguments past
         *        `n - 1`, where `n` is the number of arguments that the method
         *        accepts. Collected arguments will be passed to the method as the
         *        last argument defined on the function.
         *
         * @example
         *
         *   Sugar.Number.defineInstanceWithArguments({
         *     addAll: function (num, args) {
         *       for (var i = 0; i < args.length; i++) {
         *         num += args[i];
         *       }
         *       return num;
         *     }
         *   });
         *
         * @signature defineInstanceWithArguments(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        defineWithOptionCollect('defineInstanceWithArguments', INSTANCE, true);

        /***
         * @method defineStaticPolyfill(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines static methods that are mapped onto the native if they do
         *        not already exist.
         * @extra Intended only for use creating polyfills that follow the ECMAScript
         *        spec. Accepts either a single object mapping names to functions, or
         *        name and function as two arguments. Note that polyfill methods will
         *        be immediately mapped onto their native prototype regardless of the
         *        use of `extend`.
         *
         * @example
         *
         *   Sugar.Object.defineStaticPolyfill({
         *     keys: function (obj) {
         *       // get keys!
         *     }
         *   });
         *
         * @signature defineStaticPolyfill(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        setProperty(sugarNamespace, 'defineStaticPolyfill', function(arg1, arg2, arg3) {
          var opts = collectDefineOptions(arg1, arg2, arg3);
          extendNative(globalContext[name], opts.methods, true, opts.last);
          return sugarNamespace;
        });

        /***
         * @method defineInstancePolyfill(methods)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Defines instance methods that are mapped onto the native prototype
         *        if they do not already exist.
         * @extra Intended only for use creating polyfills that follow the ECMAScript
         *        spec. Accepts either a single object mapping names to functions, or
         *        name and function as two arguments. This method differs from
         *        `defineInstance` as there is no static signature (as the method
         *        is mapped as-is to the native), so it should refer to its `this`
         *        object. Note that polyfill methods will be immediately mapped onto
         *        their native prototype regardless of the use of `extend`.
         *
         * @example
         *
         *   Sugar.Array.defineInstancePolyfill({
         *     indexOf: function (arr, el) {
         *       // index finding code here!
         *     }
         *   });
         *
         * @signature defineInstancePolyfill(methodName, methodFn)
         * @param {Object} methods - Methods to be defined.
         * @param {string} methodName - Name of a single method to be defined.
         * @param {Function} methodFn - Function body of a single method to be defined.
         ***/
        setProperty(sugarNamespace, 'defineInstancePolyfill', function(arg1, arg2, arg3) {
          var opts = collectDefineOptions(arg1, arg2, arg3);
          extendNative(globalContext[name].prototype, opts.methods, true, opts.last);
          // Map instance polyfills to chainable as well.
          forEachProperty(opts.methods, function(fn, methodName) {
            defineChainableMethod(sugarNamespace, methodName, fn);
          });
          return sugarNamespace;
        });

        /***
         * @method alias(toName, from)
         * @returns SugarNamespace
         * @namespace SugarNamespace
         * @short Aliases one Sugar method to another.
         *
         * @example
         *
         *   Sugar.Array.alias('all', 'every');
         *
         * @signature alias(toName, fn)
         * @param {string} toName - Name for new method.
         * @param {string|Function} from - Method to alias, or string shortcut.
         ***/
        setProperty(sugarNamespace, 'alias', function(name, source) {
          var method = typeof source === 'string' ? sugarNamespace[source] : source;
          setMethod(sugarNamespace, name, method);
          return sugarNamespace;
        });

        // Each namespace can extend only itself through its .extend method.
        setProperty(sugarNamespace, 'extend', extend);

        // Cache the class to namespace relationship for later use.
        namespacesByName[name] = sugarNamespace;
        namespacesByClassString['[object ' + name + ']'] = sugarNamespace;

        mapNativeToChainable(name);
        mapObjectChainablesToNamespace(sugarNamespace);


        // Export
        return Sugar[name] = sugarNamespace;
      }

      function setGlobalProperties() {
        setProperty(Sugar, 'VERSION', '2.0.6');
        setProperty(Sugar, 'extend', Sugar);
        setProperty(Sugar, 'toString', toString);
        setProperty(Sugar, 'createNamespace', createNamespace);

        setProperty(Sugar, 'util', {
          'hasOwn': hasOwn,
          'getOwn': getOwn,
          'setProperty': setProperty,
          'classToString': classToString,
          'defineProperty': defineProperty,
          'forEachProperty': forEachProperty,
          'mapNativeToChainable': mapNativeToChainable
        });
      }

      function toString() {
        return SUGAR_GLOBAL;
      }


      // Defining Methods

      function defineMethods(sugarNamespace, methods, type, args, flags) {
        forEachProperty(methods, function(method, methodName) {
          var instanceMethod, staticMethod = method;
          if (args) {
            staticMethod = wrapMethodWithArguments(method);
          }
          if (flags) {
            staticMethod.flags = flags;
          }

          // A method may define its own custom implementation, so
          // make sure that's not the case before creating one.
          if (type & INSTANCE && !method.instance) {
            instanceMethod = wrapInstanceMethod(method, args);
            setProperty(staticMethod, 'instance', instanceMethod);
          }

          if (type & STATIC) {
            setProperty(staticMethod, 'static', true);
          }

          setMethod(sugarNamespace, methodName, staticMethod);

          if (sugarNamespace.active) {
            // If the namespace has been activated (.extend has been called),
            // then map this method as well.
            sugarNamespace.extend(methodName);
          }
        });
      }

      function collectDefineOptions(arg1, arg2, arg3) {
        var methods, last;
        if (typeof arg1 === 'string') {
          methods = {};
          methods[arg1] = arg2;
          last = arg3;
        } else {
          methods = arg1;
          last = arg2;
        }
        return {
          last: last,
          methods: methods
        };
      }

      function wrapInstanceMethod(fn, args) {
        return args ? wrapMethodWithArguments(fn, true) : wrapInstanceMethodFixed(fn);
      }

      function wrapMethodWithArguments(fn, instance) {
        // Functions accepting enumerated arguments will always have "args" as the
        // last argument, so subtract one from the function length to get the point
        // at which to start collecting arguments. If this is an instance method on
        // a prototype, then "this" will be pushed into the arguments array so start
        // collecting 1 argument earlier.
        var startCollect = fn.length - 1 - (instance ? 1 : 0);
        return function() {
          var args = [], collectedArgs = [], len;
          if (instance) {
            args.push(this);
          }
          len = Math.max(arguments.length, startCollect);
          // Optimized: no leaking arguments
          for (var i = 0; i < len; i++) {
            if (i < startCollect) {
              args.push(arguments[i]);
            } else {
              collectedArgs.push(arguments[i]);
            }
          }
          args.push(collectedArgs);
          return fn.apply(this, args);
        };
      }

      function wrapInstanceMethodFixed(fn) {
        switch(fn.length) {
          // Wrapped instance methods will always be passed the instance
          // as the first argument, but requiring the argument to be defined
          // may cause confusion here, so return the same wrapped function regardless.
          case 0:
          case 1:
            return function() {
              return fn(this);
            };
          case 2:
            return function(a) {
              return fn(this, a);
            };
          case 3:
            return function(a, b) {
              return fn(this, a, b);
            };
          case 4:
            return function(a, b, c) {
              return fn(this, a, b, c);
            };
          case 5:
            return function(a, b, c, d) {
              return fn(this, a, b, c, d);
            };
        }
      }

      // Method helpers

      function extendNative(target, source, polyfill, override) {
        forEachProperty(source, function(method, name) {
          if (polyfill && !override && target[name]) {
            // Method exists, so bail.
            return;
          }
          setProperty(target, name, method);
        });
      }

      function setMethod(sugarNamespace, methodName, method) {
        sugarNamespace[methodName] = method;
        if (method.instance) {
          defineChainableMethod(sugarNamespace, methodName, method.instance);
        }
      }


      // Chainables

      function getNewChainableClass(name) {
        var fn = function SugarChainable(obj, arg) {
          if (!(this instanceof fn)) {
            return new fn(obj, arg);
          }
          if (this.constructor !== fn) {
            // Allow modules to define their own constructors.
            obj = this.constructor.apply(obj, arguments);
          }
          this.raw = obj;
        };
        setProperty(fn, 'toString', function() {
          return SUGAR_GLOBAL + name;
        });
        setProperty(fn.prototype, 'valueOf', function() {
          return this.raw;
        });
        return fn;
      }

      function defineChainableMethod(sugarNamespace, methodName, fn) {
        var wrapped = wrapWithChainableResult(fn), existing, collision, dcp;
        dcp = DefaultChainable.prototype;
        existing = dcp[methodName];

        // If the method was previously defined on the default chainable, then a
        // collision exists, so set the method to a disambiguation function that will
        // lazily evaluate the object and find it's associated chainable. An extra
        // check is required to avoid false positives from Object inherited methods.
        collision = existing && existing !== Object.prototype[methodName];

        // The disambiguation function is only required once.
        if (!existing || !existing.disambiguate) {
          dcp[methodName] = collision ? disambiguateMethod(methodName) : wrapped;
        }

        // The target chainable always receives the wrapped method. Additionally,
        // if the target chainable is Sugar.Object, then map the wrapped method
        // to all other namespaces as well if they do not define their own method
        // of the same name. This way, a Sugar.Number will have methods like
        // isEqual that can be called on any object without having to traverse up
        // the prototype chain and perform disambiguation, which costs cycles.
        // Note that the "if" block below actually does nothing on init as Object
        // goes first and no other namespaces exist yet. However it needs to be
        // here as Object instance methods defined later also need to be mapped
        // back onto existing namespaces.
        sugarNamespace.prototype[methodName] = wrapped;
        if (sugarNamespace === Sugar.Object) {
          mapObjectChainableToAllNamespaces(methodName, wrapped);
        }
      }

      function mapObjectChainablesToNamespace(sugarNamespace) {
        forEachProperty(Sugar.Object && Sugar.Object.prototype, function(val, methodName) {
          if (typeof val === 'function') {
            setObjectChainableOnNamespace(sugarNamespace, methodName, val);
          }
        });
      }

      function mapObjectChainableToAllNamespaces(methodName, fn) {
        forEachProperty(namespacesByName, function(sugarNamespace) {
          setObjectChainableOnNamespace(sugarNamespace, methodName, fn);
        });
      }

      function setObjectChainableOnNamespace(sugarNamespace, methodName, fn) {
        var proto = sugarNamespace.prototype;
        if (!hasOwn(proto, methodName)) {
          proto[methodName] = fn;
        }
      }

      function wrapWithChainableResult(fn) {
        return function() {
          return new DefaultChainable(fn.apply(this.raw, arguments));
        };
      }

      function disambiguateMethod(methodName) {
        var fn = function() {
          var raw = this.raw, sugarNamespace;
          if (raw != null) {
            // Find the Sugar namespace for this unknown.
            sugarNamespace = namespacesByClassString[classToString(raw)];
          }
          if (!sugarNamespace) {
            // If no sugarNamespace can be resolved, then default
            // back to Sugar.Object so that undefined and other
            // non-supported types can still have basic object
            // methods called on them, such as type checks.
            sugarNamespace = Sugar.Object;
          }

          return new sugarNamespace(raw)[methodName].apply(this, arguments);
        };
        fn.disambiguate = true;
        return fn;
      }

      function mapNativeToChainable(name, methodNames) {
        var sugarNamespace = namespacesByName[name],
            nativeProto = globalContext[name].prototype;

        if (!methodNames && ownPropertyNames) {
          methodNames = ownPropertyNames(nativeProto);
        }

        forEachProperty(methodNames, function(methodName) {
          if (nativeMethodProhibited(methodName)) {
            // Sugar chainables have their own constructors as well as "valueOf"
            // methods, so exclude them here. The __proto__ argument should be trapped
            // by the function check below, however simply accessing this property on
            // Object.prototype causes QML to segfault, so pre-emptively excluding it.
            return;
          }
          try {
            var fn = nativeProto[methodName];
            if (typeof fn !== 'function') {
              // Bail on anything not a function.
              return;
            }
          } catch (e) {
            // Function.prototype has properties that
            // will throw errors when accessed.
            return;
          }
          defineChainableMethod(sugarNamespace, methodName, fn);
        });
      }

      function nativeMethodProhibited(methodName) {
        return methodName === 'constructor' ||
               methodName === 'valueOf' ||
               methodName === '__proto__';
      }


      // Util

      // Internal references
      var ownPropertyNames = Object.getOwnPropertyNames,
          internalToString = Object.prototype.toString,
          internalHasOwnProperty = Object.prototype.hasOwnProperty;

      // Defining this as a variable here as the ES5 module
      // overwrites it to patch DONTENUM.
      var forEachProperty = function (obj, fn) {
        for(var key in obj) {
          if (!hasOwn(obj, key)) continue;
          if (fn.call(obj, obj[key], key, obj) === false) break;
        }
      };

      // istanbul ignore next
      function definePropertyShim(obj, prop, descriptor) {
        obj[prop] = descriptor.value;
      }

      function setProperty(target, name, value, enumerable) {
        defineProperty(target, name, {
          value: value,
          enumerable: !!enumerable,
          configurable: true,
          writable: true
        });
      }

      // PERF: Attempts to speed this method up get very Heisenbergy. Quickly
      // returning based on typeof works for primitives, but slows down object
      // types. Even === checks on null and undefined (no typeof) will end up
      // basically breaking even. This seems to be as fast as it can go.
      function classToString(obj) {
        return internalToString.call(obj);
      }

      function hasOwn(obj, prop) {
        return !!obj && internalHasOwnProperty.call(obj, prop);
      }

      function getOwn(obj, prop) {
        if (hasOwn(obj, prop)) {
          return obj[prop];
        }
      }

      setupGlobal();

      // For type checking, etc. Excludes object as this is more nuanced.
      var NATIVE_TYPES = 'Boolean Number String Date RegExp Function Array Error Set Map';

      // Do strings have no keys?
      var NO_KEYS_IN_STRING_OBJECTS = !('0' in Object('a'));

      // WhiteSpace/LineTerminator as defined in ES5.1 plus Unicode characters in the Space, Separator category.
      var TRIM_CHARS = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u2028\u2029\u3000\uFEFF';

      // Common chars
      var HALF_WIDTH_ZERO = 0x30,
          FULL_WIDTH_ZERO = 0xff10,
          HALF_WIDTH_PERIOD   = '.',
          FULL_WIDTH_PERIOD   = '．',
          HALF_WIDTH_COMMA    = ',';

      // Namespace aliases
      var sugarObject   = Sugar.Object,
          sugarArray    = Sugar.Array,
          sugarDate     = Sugar.Date,
          sugarString   = Sugar.String,
          sugarNumber   = Sugar.Number,
          sugarFunction = Sugar.Function,
          sugarRegExp   = Sugar.RegExp;

      // Class checks
      var isBoolean, isNumber, isString,
          isDate, isRegExp, isFunction,
          isArray, isSet, isMap, isError;

      function buildClassChecks() {

        function addCoreTypes() {

          var names = spaceSplit(NATIVE_TYPES);

          isBoolean = buildPrimitiveClassCheck(names[0]);
          isNumber  = buildPrimitiveClassCheck(names[1]);
          isString  = buildPrimitiveClassCheck(names[2]);

          isDate   = buildClassCheck(names[3]);
          isRegExp = buildClassCheck(names[4]);

          // Wanted to enhance performance here by using simply "typeof"
          // but Firefox has two major issues that make this impossible,
          // one fixed, the other not, so perform a full class check here.
          //
          // 1. Regexes can be typeof "function" in FF < 3
          //    https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)
          //
          // 2. HTMLEmbedElement and HTMLObjectElement are be typeof "function"
          //    https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)
          isFunction = buildClassCheck(names[5]);

          // istanbul ignore next
          isArray = Array.isArray || buildClassCheck(names[6]);
          isError = buildClassCheck(names[7]);

          isSet = buildClassCheck(names[8], typeof Set !== 'undefined' && Set);
          isMap = buildClassCheck(names[9], typeof Map !== 'undefined' && Map);
          addKnownType(names[0]);
          addKnownType(names[1]);
          addKnownType(names[2]);
          addKnownType(names[3]);
          addKnownType(names[4]);
          addKnownType(names[6]);

        }

        function addArrayTypes() {
          var types = 'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64';
          forEach(spaceSplit(types), function(str) {
          });
        }

        function addKnownType(className) {
        }

        function buildClassCheck(className, globalObject) {
          // istanbul ignore if
          if (globalObject && isClass(new globalObject, 'Object')) {
            return getConstructorClassCheck(globalObject);
          } else {
            return getToStringClassCheck(className);
          }
        }

        // Map and Set may be [object Object] in certain IE environments.
        // In this case we need to perform a check using the constructor
        // instead of Object.prototype.toString.
        // istanbul ignore next
        function getConstructorClassCheck(obj) {
          var ctorStr = String(obj);
          return function(obj) {
            return String(obj.constructor) === ctorStr;
          };
        }

        function getToStringClassCheck(className) {
          return function(obj, str) {
            // perf: Returning up front on instanceof appears to be slower.
            return isClass(obj, className, str);
          };
        }

        function buildPrimitiveClassCheck(className) {
          var type = className.toLowerCase();
          return function(obj) {
            var t = typeof obj;
            return t === type || t === 'object' && isClass(obj, className);
          };
        }

        addCoreTypes();
        addArrayTypes();

      }

      function isClass(obj, className, str) {
        if (!str) {
          str = classToString(obj);
        }
        return str === '[object '+ className +']';
      }

      // Wrapping the core's "define" methods to
      // save a few bytes in the minified script.
      function wrapNamespace(method) {
        return function(sugarNamespace, arg1, arg2) {
          sugarNamespace[method](arg1, arg2);
        };
      }

      // Method define aliases
      var defineStaticPolyfill        = wrapNamespace('defineStaticPolyfill'),
          defineInstancePolyfill      = wrapNamespace('defineInstancePolyfill');

      function assertCallable(obj) {
        if (!isFunction(obj)) {
          throw new TypeError('Function is not callable');
        }
      }


      // General helpers

      function isDefined(o) {
        return o !== undefined;
      }

      function isPrimitive(obj, type) {
        type = type || typeof obj;
        return obj == null || type === 'string' || type === 'number' || type === 'boolean';
      }

      // Make primtives types like strings into objects.
      function coercePrimitiveToObject(obj) {
        if (isPrimitive(obj)) {
          obj = Object(obj);
        }
        // istanbul ignore next
        if (NO_KEYS_IN_STRING_OBJECTS && isString(obj)) {
          forceStringCoercion(obj);
        }
        return obj;
      }

      // Force strings to have their indexes set in
      // environments that don't do this automatically.
      // istanbul ignore next
      function forceStringCoercion(obj) {
        var i = 0, chr;
        while (chr = obj.charAt(i)) {
          obj[i++] = chr;
        }
      }


      // Array helpers

      function isArrayIndex(n) {
        return n >>> 0 == n && n != 0xFFFFFFFF;
      }

      function iterateOverSparseArray(arr, fn, fromIndex, loop) {
        var indexes = getSparseArrayIndexes(arr, fromIndex, loop), index;
        for (var i = 0, len = indexes.length; i < len; i++) {
          index = indexes[i];
          fn.call(arr, arr[index], index, arr);
        }
        return arr;
      }

      // It's unclear whether or not sparse arrays qualify as "simple enumerables".
      // If they are not, however, the wrapping function will be deoptimized, so
      // isolate here (also to share between es5 and array modules).
      function getSparseArrayIndexes(arr, fromIndex, loop, fromRight) {
        var indexes = [], i;
        for (i in arr) {
          // istanbul ignore next
          if (isArrayIndex(i) && (loop || (fromRight ? i <= fromIndex : i >= fromIndex))) {
            indexes.push(+i);
          }
        }
        indexes.sort(function(a, b) {
          var aLoop = a > fromIndex;
          var bLoop = b > fromIndex;
          // This block cannot be reached unless ES5 methods are being shimmed.
          // istanbul ignore if
          if (aLoop !== bLoop) {
            return aLoop ? -1 : 1;
          }
          return a - b;
        });
        return indexes;
      }

      function spaceSplit(str) {
        return str.split(' ');
      }

      function forEach(arr, fn) {
        for (var i = 0, len = arr.length; i < len; i++) {
          if (!(i in arr)) {
            return iterateOverSparseArray(arr, fn, i);
          }
          fn(arr[i], i);
        }
      }

      // Number helpers

      // istanbul ignore next
      var trunc = Math.trunc || function(n) {
        if (n === 0 || !isFinite(n)) return n;
        return n < 0 ? ceil(n) : floor(n);
      };

      function padNumber(num, place, sign, base, replacement) {
        var str = abs(num).toString(base || 10);
        str = repeatString(replacement || '0', place - str.replace(/\.\d+/, '').length) + str;
        if (sign || num < 0) {
          str = (num < 0 ? '-' : '+') + str;
        }
        return str;
      }

      // Fullwidth number helpers
      var fullWidthNumberMap;

      function buildFullWidthNumber() {
        var fwp = FULL_WIDTH_PERIOD, hwp = HALF_WIDTH_PERIOD, hwc = HALF_WIDTH_COMMA;
        fullWidthNumberMap = {};
        for (var i = 0, digit; i <= 9; i++) {
          digit = chr(i + FULL_WIDTH_ZERO);
          fullWidthNumberMap[digit] = chr(i + HALF_WIDTH_ZERO);
        }
        fullWidthNumberMap[hwc] = '';
        fullWidthNumberMap[fwp] = hwp;
        // Mapping this to itself to capture it easily
        // in stringToNumber to detect decimals later.
        fullWidthNumberMap[hwp] = hwp;
      }

      // Math aliases
      var abs   = Math.abs,
          ceil  = Math.ceil,
          floor = Math.floor;


      // String helpers

      var chr = String.fromCharCode;

      function repeatString(str, num) {
        var result = '';
        str = str.toString();
        while (num > 0) {
          if (num & 1) {
            result += str;
          }
          if (num >>= 1) {
            str += str;
          }
        }
        return result;
      }

      buildClassChecks();
      buildFullWidthNumber();

      /***
       * @module ES5
       * @description Functions and polyfill methods that fix ES5 functionality. This
       *              module is excluded from default builds, and can be included if
       *              you need legacy browser support (IE8 and below).
       *
       ***/

      // Non-enumerable properties on Object.prototype. In early JScript implementations
      // (< IE9) these will shadow object properties and break for..in loops.
      var DONT_ENUM_PROPS = [
        'valueOf',
        'toString',
        'constructor',
        'isPrototypeOf',
        'hasOwnProperty',
        'toLocaleString',
        'propertyIsEnumerable'
      ];

      /***
       * @fix
       * @short Fixes DontEnum bug for iteration methods in < IE9.
       ***/
      function buildDontEnumFix() {
        if (!({toString:1}).propertyIsEnumerable('toString')) {
          var forEachEnumerableProperty = forEachProperty;
          forEachProperty = function(obj, fn) {
            forEachEnumerableProperty(obj, fn);
            for (var i = 0, key; key = DONT_ENUM_PROPS[i]; i++) {
              if (hasOwn(obj, key)) {
                if(fn.call(obj, obj[key], key, obj) === false) break;
              }
            }
          };
        }
      }

      /***
       * @fix
       * @short Adds native methods to chainables in < IE9.
       ***/
      function buildChainableNativeMethodsFix() {
        if (!Object.getOwnPropertyNames) {
          defineNativeMethodsOnChainable();
        }
      }

      // Polyfilled methods will automatically be added to the chainable prototype.
      // However, Object.getOwnPropertyNames cannot be shimmed for non-enumerable
      // properties, so if it does not exist, then the only way to access native
      // methods previous to ES5 is to provide them as a list of tokens here.
      function defineNativeMethodsOnChainable() {

        var nativeTokens = {
          'Function': 'apply,call',
          'RegExp':   'compile,exec,test',
          'Number':   'toExponential,toFixed,toLocaleString,toPrecision',
          'Object':   'hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString',
          'Array':    'concat,join,pop,push,reverse,shift,slice,sort,splice,toLocaleString,unshift',
          'Date':     'getTime,getTimezoneOffset,setTime,toDateString,toGMTString,toLocaleDateString,toLocaleString,toLocaleTimeString,toTimeString,toUTCString',
          'String':   'anchor,big,blink,bold,charAt,charCodeAt,concat,fixed,fontcolor,fontsize,indexOf,italics,lastIndexOf,link,localeCompare,match,replace,search,slice,small,split,strike,sub,substr,substring,sup,toLocaleLowerCase,toLocaleUpperCase,toLowerCase,toUpperCase'
        };

        var dateTokens = 'FullYear,Month,Date,Hours,Minutes,Seconds,Milliseconds'.split(',');

        function addDateTokens(prefix, arr) {
          for (var i = 0; i < dateTokens.length; i++) {
            arr.push(prefix + dateTokens[i]);
          }
        }

        forEachProperty(nativeTokens, function(str, name) {
          var tokens = str.split(',');
          if (name === 'Date') {
            addDateTokens('get', tokens);
            addDateTokens('set', tokens);
            addDateTokens('getUTC', tokens);
            addDateTokens('setUTC', tokens);
          }
          tokens.push('toString');
          mapNativeToChainable(name, tokens);
        });

      }


      buildDontEnumFix();
      buildChainableNativeMethodsFix();


      /*** @namespace Object ***/

      function assertNonNull(obj) {
        if (obj == null) {
          throw new TypeError('Object required');
        }
      }

      defineStaticPolyfill(sugarObject, {

        'keys': function(obj) {
          var keys = [];
          assertNonNull(obj);
          forEachProperty(coercePrimitiveToObject(obj), function(val, key) {
            keys.push(key);
          });
          return keys;
        }

      });


      /*** @namespace Array ***/

      function arrayIndexOf(arr, search, fromIndex, fromRight) {
        var length = arr.length, defaultFromIndex, index, increment;

        increment = fromRight ? -1 : 1;
        defaultFromIndex = fromRight ? length - 1 : 0;
        fromIndex = trunc(fromIndex);
        if (!fromIndex && fromIndex !== 0) {
          fromIndex = defaultFromIndex;
        }
        if (fromIndex < 0) {
          fromIndex = length + fromIndex;
        }
        if ((!fromRight && fromIndex < 0) || (fromRight && fromIndex >= length)) {
          fromIndex = defaultFromIndex;
        }

        index = fromIndex;

        while((fromRight && index >= 0) || (!fromRight && index < length)) {
          if (!(index in arr)) {
            return sparseIndexOf(arr, search, fromIndex, fromRight);
          }
          if (isArrayIndex(index) && arr[index] === search) {
            return index;
          }
          index += increment;
        }
        return -1;
      }

      function sparseIndexOf(arr, search, fromIndex, fromRight) {
        var indexes = getSparseArrayIndexes(arr, fromIndex, false, fromRight), index;
        indexes.sort(function(a, b) {
          return fromRight ? b - a : a - b;
        });
        while ((index = indexes.shift()) !== undefined) {
          if (arr[index] === search) {
            return +index;
          }
        }
        return -1;
      }

      function arrayReduce(arr, fn, initialValue, fromRight) {
        var length = arr.length, count = 0, defined = isDefined(initialValue), result, index;
        assertCallable(fn);
        if (length == 0 && !defined) {
          throw new TypeError('Reduce called on empty array with no initial value');
        } else if (defined) {
          result = initialValue;
        } else {
          result = arr[fromRight ? length - 1 : count];
          count++;
        }
        while(count < length) {
          index = fromRight ? length - count - 1 : count;
          if (index in arr) {
            result = fn(result, arr[index], index, arr);
          }
          count++;
        }
        return result;
      }

      defineStaticPolyfill(sugarArray, {

        /***
         *
         * @method isArray(obj)
         * @returns Boolean
         * @polyfill ES5
         * @static
         * @short Returns true if `obj` is an Array.
         *
         * @example
         *
         *   Array.isArray(3)        -> false
         *   Array.isArray(true)     -> false
         *   Array.isArray('wasabi') -> false
         *   Array.isArray([1,2,3])  -> true
         *
         ***/
        'isArray': function(obj) {
          return isArray(obj);
        }

      });

      defineInstancePolyfill(sugarArray, {

        'every': function(fn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(fn);
          while(index < length) {
            if (index in this && !fn.call(context, this[index], index, this)) {
              return false;
            }
            index++;
          }
          return true;
        },

        'some': function(fn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(fn);
          while(index < length) {
            if (index in this && fn.call(context, this[index], index, this)) {
              return true;
            }
            index++;
          }
          return false;
        },

        'map': function(fn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          var length = this.length, index = 0, result = new Array(length);
          assertCallable(fn);
          while(index < length) {
            if (index in this) {
              result[index] = fn.call(context, this[index], index, this);
            }
            index++;
          }
          return result;
        },

        'filter': function(fn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          var length = this.length, index = 0, result = [];
          assertCallable(fn);
          while(index < length) {
            if (index in this && fn.call(context, this[index], index, this)) {
              result.push(this[index]);
            }
            index++;
          }
          return result;
        },

        /***
         * @method indexOf(search, [fromIndex] = 0)
         * @returns Number
         * @polyfill ES5
         * @short Searches the array and returns the first index where `search` occurs,
         *        or `-1` if the element is not found.
         * @extra [fromIndex] is the index from which to begin the search. This
         *        method performs a simple strict equality comparison on `search`.
         *        Sugar does not enhance this method to support `enhanced matching`.
         *        For such functionality, use the `findIndex` method instead.
         *
         * @example
         *
         *   [1,2,3].indexOf(3) -> 1
         *   [1,2,3].indexOf(7) -> -1
         *
         ***/
        'indexOf': function(search) {
          // Force compiler to respect argument length.
          var fromIndex = arguments[1];
          if (isString(this)) return this.indexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex);
        },

        /***
         * @method lastIndexOf(search, [fromIndex] = array.length - 1)
         * @returns Number
         * @polyfill ES5
         * @short Searches the array from the end and returns the first index where
         *        `search` occurs, or `-1` if the element is not found.
         * @extra [fromIndex] is the index from which to begin the search. This method
         *        performs a simple strict equality comparison on `search`.
         *        Sugar does not enhance this method to support `enhanced matching`.
         *
         * @example
         *
         *   [1,2,1].lastIndexOf(1) -> 2
         *   [1,2,1].lastIndexOf(7) -> -1
         *
         ***/
        'lastIndexOf': function(search) {
          // Force compiler to respect argument length.
          var fromIndex = arguments[1];
          if (isString(this)) return this.lastIndexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex, true);
        },

        /***
         * @method forEach([eachFn], [context])
         * @polyfill ES5
         * @short Iterates over the array, calling [eachFn] on each loop.
         * @extra [context] becomes the `this` object.
         *
         * @callback eachFn
         *
         *   el   The element of the current iteration.
         *   i    The index of the current iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   ['a','b','c'].forEach(function(a) {
         *     // Called 3 times: 'a','b','c'
         *   });
         *
         ***/
        'forEach': function(eachFn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(eachFn);
          while(index < length) {
            if (index in this) {
              eachFn.call(context, this[index], index, this);
            }
            index++;
          }
        },

        /***
         * @method reduce(reduceFn, [init])
         * @returns Mixed
         * @polyfill ES5
         * @short Reduces the array to a single result.
         * @extra This operation is sometimes called "accumulation", as it takes the
         *        result of the last iteration of `reduceFn` and passes it as the first
         *        argument to the next iteration, "accumulating" that value as it goes.
         *        The return value of this method will be the return value of the final
         *        iteration of `reduceFn`. If [init] is passed, it will be the initial
         *        "accumulator" (the first argument). If [init] is not passed, then it
         *        will take the first element in the array, and `reduceFn` will not be
         *        called for that element.
         *
         * @callback reduceFn
         *
         *   acc  The "accumulator". Either [init], the result of the last iteration
         *        of `reduceFn`, or the first element of the array.
         *   el   The current element for this iteration.
         *   idx  The current index for this iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   [1,2,3].reduce(function(a, b) {
         *     return a - b; // 1 - 2 - 3
         *   });
         *
         *   [1,2,3].reduce(function(a, b) {
         *     return a - b; // 100 - 1 - 2 - 3
         *   }, 100);
         *
         ***/
        'reduce': function(reduceFn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          return arrayReduce(this, reduceFn, context);
        },

        /***
         * @method reduceRight([reduceFn], [init])
         * @returns Mixed
         * @polyfill ES5
         * @short Similar to `Array#reduce`, but operates on the elements in reverse.
         *
         * @callback reduceFn
         *
         *   acc  The "accumulator", either [init], the result of the last iteration
         *        of `reduceFn`, or the last element of the array.
         *   el   The current element for this iteration.
         *   idx  The current index for this iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   [1,2,3].reduceRight(function(a, b) {
         *     return a - b; // 3 - 2 - 1
         *   });
         *
         *   [1,2,3].reduceRight(function(a, b) {
         *     return a - b; // 100 - 3 - 2 - 1
         *   }, 100);
         *
         *
         ***/
        'reduceRight': function(reduceFn) {
          // Force compiler to respect argument length.
          var context = arguments[1];
          return arrayReduce(this, reduceFn, context, true);
        }

      });


      /*** @namespace String ***/

      var TRIM_REG = RegExp('^[' + TRIM_CHARS + ']+|['+ TRIM_CHARS +']+$', 'g');

      defineInstancePolyfill(sugarString, {
        /***
         * @method trim()
         * @returns String
         * @polyfill ES5
         * @short Removes leading and trailing whitespace from the string.
         * @extra Whitespace is defined as line breaks, tabs, and any character in the
         *        "Space, Separator" Unicode category, conforming to the the ES5 spec.
         *
         * @example
         *
         *   '   wasabi   '.trim()      -> 'wasabi'
         *   '   wasabi   '.trimLeft()  -> 'wasabi   '
         *   '   wasabi   '.trimRight() -> '   wasabi'
         *
         ***/
        'trim': function() {
          return this.toString().replace(TRIM_REG, '');
        }
      });


      /*** @namespace Function ***/

      defineInstancePolyfill(sugarFunction, {

         /***
         * @method bind(context, [arg1], ...)
         * @returns Function
         * @polyfill ES5
         * @short Binds `context` as the `this` object for the function when it is
         *        called. Also allows currying an unlimited number of parameters.
         * @extra "currying" means setting parameters ([arg1], [arg2], etc.) ahead of
         *        time so that they are passed when the function is called later. If
         *        you pass additional parameters when the function is actually called,
         *        they will be added to the end of the curried parameters.
         *
         * @example
         *
         *   logThis.bind('woof')()   -> logs 'woof' as its this object
         *   addArgs.bind(1, 2, 3)()  -> returns 5 with 1 as the this object
         *   addArgs.bind(1)(2, 3, 4) -> returns 9
         *
         ***/
        'bind': function(context) {
          // Optimized: no leaking arguments
          var boundArgs = []; for(var $i = 1, $len = arguments.length; $i < $len; $i++) boundArgs.push(arguments[$i]);
          var fn = this, bound;
          assertCallable(this);
          bound = function() {
            // Optimized: no leaking arguments
            var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);
            return fn.apply(fn.prototype && this instanceof fn ? this : context, boundArgs.concat(args));
          };
          bound.prototype = this.prototype;
          return bound;
        }

      });


      /*** @namespace Date ***/

      defineStaticPolyfill(sugarDate, {

         /***
         * @method now()
         * @returns String
         * @polyfill ES5
         * @static
         * @short Returns the current time as a Unix timestamp.
         * @extra The number of milliseconds since January 1st, 1970 00:00:00 (UTC).
         *
         * @example
         *
         *   Date.now() -> ex. 1311938296231
         *
         ***/
        'now': function() {
          return new Date().getTime();
        }

      });

      function hasISOSupport() {
        var d = new Date(Date.UTC(2000, 0));
        return !!d.toISOString && d.toISOString() === '2000-01-01T00:00:00.000Z';
      }

      defineInstancePolyfill(sugarDate, {

         /***
         * @method toISOString()
         * @returns String
         * @polyfill ES5
         * @short Formats the string to ISO8601 format.
         * @extra This will always format as UTC time.
         *
         * @example
         *
         *   Date.create().toISOString() -> ex. 2011-07-05 12:24:55.528Z
         *
         ***/
        'toISOString': function() {
          return padNumber(this.getUTCFullYear(), 4) + '-' +
                 padNumber(this.getUTCMonth() + 1, 2) + '-' +
                 padNumber(this.getUTCDate(), 2) + 'T' +
                 padNumber(this.getUTCHours(), 2) + ':' +
                 padNumber(this.getUTCMinutes(), 2) + ':' +
                 padNumber(this.getUTCSeconds(), 2) + '.' +
                 padNumber(this.getUTCMilliseconds(), 3) + 'Z';
        },

         /***
         * @method toJSON([key])
         * @returns String
         * @polyfill ES5
         * @short Returns a JSON representation of the date.
         * @extra This is effectively an alias for `toISOString`. Will always return
         *        the date in UTC time. [key] is ignored.
         *
         * @example
         *
         *   Date.create().toJSON() -> ex. 2011-07-05 12:24:55.528Z
         *
         ***/
        'toJSON': function(key) {
          return this.toISOString(key);
        }

      }, !hasISOSupport());

    }).call(commonjsGlobal);
    });

    function isArrayIndex(n) {
      return n >>> 0 == n && n != 0xFFFFFFFF;
    }

    var isArrayIndex_1 = isArrayIndex;

    function getSparseArrayIndexes(arr, fromIndex, loop, fromRight) {
      var indexes = [], i;
      for (i in arr) {
        // istanbul ignore next
        if (isArrayIndex_1(i) && (loop || (fromRight ? i <= fromIndex : i >= fromIndex))) {
          indexes.push(+i);
        }
      }
      indexes.sort(function(a, b) {
        var aLoop = a > fromIndex;
        var bLoop = b > fromIndex;
        // This block cannot be reached unless ES5 methods are being shimmed.
        // istanbul ignore if
        if (aLoop !== bLoop) {
          return aLoop ? -1 : 1;
        }
        return a - b;
      });
      return indexes;
    }

    var getSparseArrayIndexes_1 = getSparseArrayIndexes;

    function iterateOverSparseArray(arr, fn, fromIndex, loop) {
      var indexes = getSparseArrayIndexes_1(arr, fromIndex, loop), index;
      for (var i = 0, len = indexes.length; i < len; i++) {
        index = indexes[i];
        fn.call(arr, arr[index], index, arr);
      }
      return arr;
    }

    var iterateOverSparseArray_1 = iterateOverSparseArray;

    function forEach(arr, fn) {
      for (var i = 0, len = arr.length; i < len; i++) {
        if (!(i in arr)) {
          return iterateOverSparseArray_1(arr, fn, i);
        }
        fn(arr[i], i);
      }
    }

    var forEach_1 = forEach;

    var NATIVE_TYPES = 'Boolean Number String Date RegExp Function Array Error Set Map';

    var coreUtilityAliases = {
      hasOwn: sugarCore.util.hasOwn,
      getOwn: sugarCore.util.getOwn,
      setProperty: sugarCore.util.setProperty,
      classToString: sugarCore.util.classToString,
      defineProperty: sugarCore.util.defineProperty,
      forEachProperty: sugarCore.util.forEachProperty,
      mapNativeToChainable: sugarCore.util.mapNativeToChainable
    };

    var classToString = coreUtilityAliases.classToString;

    function isClass(obj, className, str) {
      if (!str) {
        str = classToString(obj);
      }
      return str === '[object '+ className +']';
    }

    var isClass_1 = isClass;

    function spaceSplit(str) {
      return str.split(' ');
    }

    var spaceSplit_1 = spaceSplit;

    function isObjectType(obj, type) {
      return !!obj && (type || typeof obj) === 'object';
    }

    var isObjectType_1 = isObjectType;

    var hasOwn = coreUtilityAliases.hasOwn;

    function hasOwnEnumeratedProperties(obj) {
      // Plain objects are generally defined as having enumerated properties
      // all their own, however in early IE environments without defineProperty,
      // there may also be enumerated methods in the prototype chain, so check
      // for both of these cases.
      var objectProto = Object.prototype;
      for (var key in obj) {
        var val = obj[key];
        if (!hasOwn(obj, key) && val !== objectProto[key]) {
          return false;
        }
      }
      return true;
    }

    var hasOwnEnumeratedProperties_1 = hasOwnEnumeratedProperties;

    var hasOwn$1 = coreUtilityAliases.hasOwn;

    function hasValidPlainObjectPrototype(obj) {
      var hasToString = 'toString' in obj;
      var hasConstructor = 'constructor' in obj;
      // An object created with Object.create(null) has no methods in the
      // prototype chain, so check if any are missing. The additional hasToString
      // check is for false positives on some host objects in old IE which have
      // toString but no constructor. If the object has an inherited constructor,
      // then check if it is Object (the "isPrototypeOf" tapdance here is a more
      // robust way of ensuring this if the global has been hijacked). Note that
      // accessing the constructor directly (without "in" or "hasOwnProperty")
      // will throw a permissions error in IE8 on cross-domain windows.
      return (!hasConstructor && !hasToString) ||
              (hasConstructor && !hasOwn$1(obj, 'constructor') &&
               hasOwn$1(obj.constructor.prototype, 'isPrototypeOf'));
    }

    var hasValidPlainObjectPrototype_1 = hasValidPlainObjectPrototype;

    function isPlainObject(obj, className) {
      return isObjectType_1(obj) &&
             isClass_1(obj, 'Object', className) &&
             hasValidPlainObjectPrototype_1(obj) &&
             hasOwnEnumeratedProperties_1(obj);
    }

    var isPlainObject_1 = isPlainObject;

    var isSerializable,
        isBoolean, isNumber, isString,
        isDate, isRegExp, isFunction,
        isArray, isSet, isMap, isError;

    function buildClassChecks() {

      var knownTypes = {};

      function addCoreTypes() {

        var names = spaceSplit_1(NATIVE_TYPES);

        isBoolean = buildPrimitiveClassCheck(names[0]);
        isNumber  = buildPrimitiveClassCheck(names[1]);
        isString  = buildPrimitiveClassCheck(names[2]);

        isDate   = buildClassCheck(names[3]);
        isRegExp = buildClassCheck(names[4]);

        // Wanted to enhance performance here by using simply "typeof"
        // but Firefox has two major issues that make this impossible,
        // one fixed, the other not, so perform a full class check here.
        //
        // 1. Regexes can be typeof "function" in FF < 3
        //    https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)
        //
        // 2. HTMLEmbedElement and HTMLObjectElement are be typeof "function"
        //    https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)
        isFunction = buildClassCheck(names[5]);

        // istanbul ignore next
        isArray = Array.isArray || buildClassCheck(names[6]);
        isError = buildClassCheck(names[7]);

        isSet = buildClassCheck(names[8], typeof Set !== 'undefined' && Set);
        isMap = buildClassCheck(names[9], typeof Map !== 'undefined' && Map);

        // Add core types as known so that they can be checked by value below,
        // notably excluding Functions and adding Arguments and Error.
        addKnownType('Arguments');
        addKnownType(names[0]);
        addKnownType(names[1]);
        addKnownType(names[2]);
        addKnownType(names[3]);
        addKnownType(names[4]);
        addKnownType(names[6]);

      }

      function addArrayTypes() {
        var types = 'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64';
        forEach_1(spaceSplit_1(types), function(str) {
          addKnownType(str + 'Array');
        });
      }

      function addKnownType(className) {
        var str = '[object '+ className +']';
        knownTypes[str] = true;
      }

      function isKnownType(className) {
        return knownTypes[className];
      }

      function buildClassCheck(className, globalObject) {
        // istanbul ignore if
        if (globalObject && isClass_1(new globalObject, 'Object')) {
          return getConstructorClassCheck(globalObject);
        } else {
          return getToStringClassCheck(className);
        }
      }

      // Map and Set may be [object Object] in certain IE environments.
      // In this case we need to perform a check using the constructor
      // instead of Object.prototype.toString.
      // istanbul ignore next
      function getConstructorClassCheck(obj) {
        var ctorStr = String(obj);
        return function(obj) {
          return String(obj.constructor) === ctorStr;
        };
      }

      function getToStringClassCheck(className) {
        return function(obj, str) {
          // perf: Returning up front on instanceof appears to be slower.
          return isClass_1(obj, className, str);
        };
      }

      function buildPrimitiveClassCheck(className) {
        var type = className.toLowerCase();
        return function(obj) {
          var t = typeof obj;
          return t === type || t === 'object' && isClass_1(obj, className);
        };
      }

      addCoreTypes();
      addArrayTypes();

      isSerializable = function(obj, className) {
        // Only known objects can be serialized. This notably excludes functions,
        // host objects, Symbols (which are matched by reference), and instances
        // of classes. The latter can arguably be matched by value, but
        // distinguishing between these and host objects -- which should never be
        // compared by value -- is very tricky so not dealing with it here.
        return isKnownType(className) || isPlainObject_1(obj, className);
      };

    }

    buildClassChecks();

    var classChecks = {
      isSerializable: isSerializable,
      isBoolean: isBoolean,
      isNumber: isNumber,
      isString: isString,
      isDate: isDate,
      isRegExp: isRegExp,
      isFunction: isFunction,
      isArray: isArray,
      isSet: isSet,
      isMap: isMap,
      isError: isError
    };

    function getNormalizedIndex(index, length, loop) {
      if (index && loop) {
        index = index % length;
      }
      if (index < 0) index = length + index;
      return index;
    }

    var getNormalizedIndex_1 = getNormalizedIndex;

    function entryAtIndex(obj, index, length, loop, isString) {
      index = getNormalizedIndex_1(index, length, loop);
      return isString ? obj.charAt(index) : obj[index];
    }

    var entryAtIndex_1 = entryAtIndex;

    var isArray$1 = classChecks.isArray;

    function getEntriesForIndexes(obj, find, loop, isString) {
      var result, length = obj.length;
      if (!isArray$1(find)) {
        return entryAtIndex_1(obj, find, length, loop, isString);
      }
      result = new Array(find.length);
      forEach_1(find, function(index, i) {
        result[i] = entryAtIndex_1(obj, index, length, loop, isString);
      });
      return result;
    }

    var getEntriesForIndexes_1 = getEntriesForIndexes;

    sugarCore.String.defineInstance({

      'at': function(str, index, loop) {
        return getEntriesForIndexes_1(str, index, loop, true);
      }

    });

    var at = sugarCore.String.at;

    var CAMELIZE_REG = /(^|_)([^_]+)/g;

    var Inflections = {};

    function getAcronym(str) {
      // istanbul ignore next
      return Inflections.acronyms ;
    }

    var getAcronym_1 = getAcronym;

    function stringUnderscore(str) {
      return str
        .replace(/[-\s]+/g, '_')
        .replace(/([A-Z\d]+)([A-Z][a-z])/g,'$1_$2')
        .replace(/([a-z\d])([A-Z])/g,'$1_$2')
        .toLowerCase();
    }

    var stringUnderscore_1 = stringUnderscore;

    var CAPITALIZE_REG = /[^\u0000-\u0040\u005B-\u0060\u007B-\u007F]+('s)?/g;

    function simpleCapitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    var simpleCapitalize_1 = simpleCapitalize;

    function stringCapitalize(str, downcase, all) {
      if (downcase) {
        str = str.toLowerCase();
      }
      return all ? str.replace(CAPITALIZE_REG, simpleCapitalize_1) : simpleCapitalize_1(str);
    }

    var stringCapitalize_1 = stringCapitalize;

    function stringCamelize(str, upper) {
      str = stringUnderscore_1(str);
      return str.replace(CAMELIZE_REG, function(match, pre, word, index) {
        var cap = upper !== false || index > 0, acronym;
        acronym = getAcronym_1();
        // istanbul ignore if
        if (acronym && cap) {
          return acronym;
        }
        return cap ? stringCapitalize_1(word, true) : word;
      });
    }

    var stringCamelize_1 = stringCamelize;

    sugarCore.String.defineInstance({

      'camelize': function(str, upper) {
        return stringCamelize_1(str, upper);
      }

    });

    var camelize = sugarCore.String.camelize;

    sugarCore.String.defineInstance({

      'capitalize': function(str, lower, all) {
        return stringCapitalize_1(str, lower, all);
      }

    });

    var capitalize = sugarCore.String.capitalize;

    function isDefined(o) {
      return o !== undefined;
    }

    var isDefined_1 = isDefined;

    var isString$1 = classChecks.isString;

    function escapeRegExp(str) {
      if (!isString$1(str)) str = String(str);
      return str.replace(/([\\/'*+?|()[\]{}.^$-])/g,'\\$1');
    }

    var escapeRegExp_1 = escapeRegExp;

    function getRegExpFlags(reg, add) {
      var flags = '';
      add = add || '';
      function checkFlag(prop, flag) {
        if (prop || add.indexOf(flag) > -1) {
          flags += flag;
        }
      }
      checkFlag(reg.global, 'g');
      checkFlag(reg.ignoreCase, 'i');
      checkFlag(reg.multiline, 'm');
      checkFlag(reg.sticky, 'y');
      return flags;
    }

    var getRegExpFlags_1 = getRegExpFlags;

    function runGlobalMatch(str, reg) {
      var result = [], match, lastLastIndex;
      while ((match = reg.exec(str)) != null) {
        if (reg.lastIndex === lastLastIndex) {
          reg.lastIndex += 1;
        } else {
          result.push(match[0]);
        }
        lastLastIndex = reg.lastIndex;
      }
      return result;
    }

    var runGlobalMatch_1 = runGlobalMatch;

    var isString$2 = classChecks.isString,
        isRegExp$1 = classChecks.isRegExp,
        isFunction$1 = classChecks.isFunction;

    function stringEach(str, search, fn) {
      var chunks, chunk, reg, result = [];
      if (isFunction$1(search)) {
        fn = search;
        reg = /[\s\S]/g;
      } else if (!search) {
        reg = /[\s\S]/g;
      } else if (isString$2(search)) {
        reg = RegExp(escapeRegExp_1(search), 'gi');
      } else if (isRegExp$1(search)) {
        reg = RegExp(search.source, getRegExpFlags_1(search, 'g'));
      }
      // Getting the entire array of chunks up front as we need to
      // pass this into the callback function as an argument.
      chunks = runGlobalMatch_1(str, reg);

      if (chunks) {
        for(var i = 0, len = chunks.length, r; i < len; i++) {
          chunk = chunks[i];
          result[i] = chunk;
          if (fn) {
            r = fn.call(str, chunk, i, chunks);
            if (r === false) {
              break;
            } else if (isDefined_1(r)) {
              result[i] = r;
            }
          }
        }
      }
      return result;
    }

    var stringEach_1 = stringEach;

    sugarCore.String.defineInstance({

      'chars': function(str, search, eachCharFn) {
        return stringEach_1(str, search, eachCharFn);
      }

    });

    var chars = sugarCore.String.chars;

    function stringCodes(str, fn) {
      var codes = new Array(str.length), i, len;
      for(i = 0, len = str.length; i < len; i++) {
        var code = str.charCodeAt(i);
        codes[i] = code;
        if (fn) {
          fn.call(str, code, i, str);
        }
      }
      return codes;
    }

    var stringCodes_1 = stringCodes;

    sugarCore.String.defineInstance({

      'codes': function(str, eachCodeFn) {
        return stringCodes_1(str, eachCodeFn);
      }

    });

    var codes = sugarCore.String.codes;

    function trim(str) {
      return str.trim();
    }

    var trim_1 = trim;

    sugarCore.String.defineInstance({

      'compact': function(str) {
        return trim_1(str).replace(/([\r\n\s　])+/g, function(match, whitespace) {
          return whitespace === '　' ? whitespace : ' ';
        });
      }

    });

    var compact = sugarCore.String.compact;

    sugarCore.String.defineInstance({

      'dasherize': function(str) {
        return stringUnderscore_1(str).replace(/_/g, '-');
      }

    });

    var dasherize = sugarCore.String.dasherize;

    var chr = String.fromCharCode;

    var encodeBase64, decodeBase64;

    function buildBase64() {
      var encodeAscii, decodeAscii;

      // istanbul ignore next
      function catchEncodingError(fn) {
        return function(str) {
          try {
            return fn(str);
          } catch(e) {
            return '';
          }
        };
      }

      // istanbul ignore if
      if (typeof Buffer !== 'undefined') {
        encodeBase64 = function(str) {
          return Buffer.from(str).toString('base64');
        };
        decodeBase64 = function(str) {
          return Buffer.from(str, 'base64').toString('utf8');
        };
        return;
      }

      // istanbul ignore if
      if (typeof btoa !== 'undefined') {
        encodeAscii = catchEncodingError(btoa);
        decodeAscii = catchEncodingError(atob);
      } else {
        var key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var base64reg = /[^A-Za-z0-9\+\/\=]/g;
        encodeAscii = function(str) {
          var output = '';
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          do {
            chr1 = str.charCodeAt(i++);
            chr2 = str.charCodeAt(i++);
            chr3 = str.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }
            output += key.charAt(enc1);
            output += key.charAt(enc2);
            output += key.charAt(enc3);
            output += key.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
          } while (i < str.length);
          return output;
        };
        decodeAscii = function(input) {
          var output = '';
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          if (input.match(base64reg)) {
            return '';
          }
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
          do {
            enc1 = key.indexOf(input.charAt(i++));
            enc2 = key.indexOf(input.charAt(i++));
            enc3 = key.indexOf(input.charAt(i++));
            enc4 = key.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + chr(chr1);
            if (enc3 != 64) {
              output = output + chr(chr2);
            }
            if (enc4 != 64) {
              output = output + chr(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
          } while (i < input.length);
          return output;
        };
      }
      encodeBase64 = function(str) {
        return encodeAscii(unescape(encodeURIComponent(str)));
      };
      decodeBase64 = function(str) {
        return decodeURIComponent(escape(decodeAscii(str)));
      };
    }

    buildBase64();

    var base64 = {
      encodeBase64: encodeBase64,
      decodeBase64: decodeBase64
    };

    var decodeBase64$1 = base64.decodeBase64;

    sugarCore.String.defineInstance({

      'decodeBase64': function(str) {
        return decodeBase64$1(str);
      }

    });

    var decodeBase64_1 = sugarCore.String.decodeBase64;

    var encodeBase64$1 = base64.encodeBase64;

    sugarCore.String.defineInstance({

      'encodeBase64': function(str) {
        return encodeBase64$1(str);
      }

    });

    var encodeBase64_1 = sugarCore.String.encodeBase64;

    var HTML_ESCAPE_REG = /[&<>]/g;

    var HTMLFromEntityMap = {
      'lt':    '<',
      'gt':    '>',
      'amp':   '&',
      'nbsp':  ' ',
      'quot':  '"',
      'apos':  "'"
    };

    var HTMLFromEntityMap_1 = HTMLFromEntityMap;

    var forEachProperty = coreUtilityAliases.forEachProperty;

    var HTMLToEntityMap;

    function buildEntities() {
      HTMLToEntityMap = {};
      forEachProperty(HTMLFromEntityMap_1, function(val, key) {
        HTMLToEntityMap[val] = '&' + key + ';';
      });
    }

    buildEntities();

    var HTMLToEntityMap_1 = HTMLToEntityMap;

    var getOwn = coreUtilityAliases.getOwn;

    sugarCore.String.defineInstance({

      'escapeHTML': function(str) {
        return str.replace(HTML_ESCAPE_REG, function(chr) {
          return getOwn(HTMLToEntityMap_1, chr);
        });
      }

    });

    var escapeHTML = sugarCore.String.escapeHTML;

    sugarCore.String.defineInstance({

      'escapeURL': function(str, param) {
        return param ? encodeURIComponent(str) : encodeURI(str);
      }

    });

    var escapeURL = sugarCore.String.escapeURL;

    function isUndefined(o) {
      return o === undefined;
    }

    var isUndefined_1 = isUndefined;

    sugarCore.String.defineInstance({

      'first': function(str, num) {
        if (isUndefined_1(num)) num = 1;
        return str.substr(0, num);
      }

    });

    var first = sugarCore.String.first;

    sugarCore.String.defineInstance({

      'forEach': function(str, search, eachFn) {
        return stringEach_1(str, search, eachFn);
      }

    });

    var forEach$1 = sugarCore.String.forEach;

    var PROPERTY_RANGE_REG = /^(.*?)\[([-\d]*)\.\.([-\d]*)\](.*)$/;

    var CommonChars = {
      HALF_WIDTH_ZERO: 0x30,
      FULL_WIDTH_ZERO: 0xff10,
      HALF_WIDTH_PERIOD: '.',
      FULL_WIDTH_PERIOD: '．',
      HALF_WIDTH_COMMA: ',',
      OPEN_BRACE: '{',
      CLOSE_BRACE: '}'
    };

    function map(arr, fn) {
      // perf: Not using fixed array len here as it may be sparse.
      var result = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        if (i in arr) {
          result.push(fn(arr[i], i));
        }
      }
      return result;
    }

    var map_1 = map;

    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;

    function periodSplit(str) {
      return str.split(HALF_WIDTH_PERIOD);
    }

    var periodSplit_1 = periodSplit;

    var isArray$2 = classChecks.isArray;

    function assertArray(obj) {
      if (!isArray$2(obj)) {
        throw new TypeError('Array required');
      }
    }

    var assertArray_1 = assertArray;

    function isPrimitive(obj, type) {
      type = type || typeof obj;
      return obj == null || type === 'string' || type === 'number' || type === 'boolean';
    }

    var isPrimitive_1 = isPrimitive;

    function assertWritable(obj) {
      if (isPrimitive_1(obj)) {
        // If strict mode is active then primitives will throw an
        // error when attempting to write properties. We can't be
        // sure if strict mode is available, so pre-emptively
        // throw an error here to ensure consistent behavior.
        throw new TypeError('Property cannot be written');
      }
    }

    var assertWritable_1 = assertWritable;

    var isString$3 = classChecks.isString,
        hasOwn$2 = coreUtilityAliases.hasOwn,
        HALF_WIDTH_PERIOD$1 = CommonChars.HALF_WIDTH_PERIOD;

    function handleDeepProperty(obj, key, any, has, fill, fillLast, val) {
      var ns, bs, ps, cbi, set, isLast, isPush, isIndex, nextIsIndex, exists;
      ns = obj;
      if (key == null) return;

      if (isObjectType_1(key)) {
        // Allow array and array-like accessors
        bs = [key];
      } else {
        key = String(key);
        if (key.indexOf('..') !== -1) {
          return handleArrayIndexRange(obj, key, any, val);
        }
        bs = key.split('[');
      }

      set = isDefined_1(val);

      for (var i = 0, blen = bs.length; i < blen; i++) {
        ps = bs[i];

        if (isString$3(ps)) {
          ps = periodSplit_1(ps);
        }

        for (var j = 0, plen = ps.length; j < plen; j++) {
          key = ps[j];

          // Is this the last key?
          isLast = i === blen - 1 && j === plen - 1;

          // Index of the closing ]
          cbi = key.indexOf(']');

          // Is the key an array index?
          isIndex = cbi !== -1;

          // Is this array push syntax "[]"?
          isPush = set && cbi === 0;

          // If the bracket split was successful and this is the last element
          // in the dot split, then we know the next key will be an array index.
          nextIsIndex = blen > 1 && j === plen - 1;

          if (isPush) {
            // Set the index to the end of the array
            key = ns.length;
          } else if (isIndex) {
            // Remove the closing ]
            key = key.slice(0, -1);
          }

          // If the array index is less than 0, then
          // add its length to allow negative indexes.
          if (isIndex && key < 0) {
            key = +key + ns.length;
          }

          // Bracket keys may look like users[5] or just [5], so the leading
          // characters are optional. We can enter the namespace if this is the
          // 2nd part, if there is only 1 part, or if there is an explicit key.
          if (i || key || blen === 1) {

            // TODO: need to be sure this check handles ''.length when
            // we refactor.
            exists = any ? key in Object(ns) : hasOwn$2(ns, key);

            // Non-existent namespaces are only filled if they are intermediate
            // (not at the end) or explicitly filling the last.
            if (fill && (!isLast || fillLast) && !exists) {
              // For our purposes, last only needs to be an array.
              ns = ns[key] = nextIsIndex || (fillLast && isLast) ? [] : {};
              continue;
            }

            if (has) {
              if (isLast || !exists) {
                return exists;
              }
            } else if (set && isLast) {
              assertWritable_1(ns);
              ns[key] = val;
            }

            ns = exists ? ns[key] : undefined;
          }

        }
      }
      return ns;
    }

    function handleArrayIndexRange(obj, key, any, val) {
      var match, start, end, leading, trailing, arr, set;
      match = key.match(PROPERTY_RANGE_REG);
      if (!match) {
        return;
      }

      set = isDefined_1(val);
      leading = match[1];

      if (leading) {
        arr = handleDeepProperty(obj, leading, any, false, set ? true : false, true);
      } else {
        arr = obj;
      }

      assertArray_1(arr);

      trailing = match[4];
      start    = match[2] ? +match[2] : 0;
      end      = match[3] ? +match[3] : arr.length;

      // A range of 0..1 is inclusive, so we need to add 1 to the end. If this
      // pushes the index from -1 to 0, then set it to the full length of the
      // array, otherwise it will return nothing.
      end = end === -1 ? arr.length : end + 1;

      if (set) {
        for (var i = start; i < end; i++) {
          handleDeepProperty(arr, i + trailing, any, false, true, false, val);
        }
      } else {
        arr = arr.slice(start, end);

        // If there are trailing properties, then they need to be mapped for each
        // element in the array.
        if (trailing) {
          if (trailing.charAt(0) === HALF_WIDTH_PERIOD$1) {
            // Need to chomp the period if one is trailing after the range. We
            // can't do this at the regex level because it will be required if
            // we're setting the value as it needs to be concatentated together
            // with the array index to be set.
            trailing = trailing.slice(1);
          }
          return map_1(arr, function(el) {
            return handleDeepProperty(el, trailing);
          });
        }
      }
      return arr;
    }

    var handleDeepProperty_1 = handleDeepProperty;

    function deepGetProperty(obj, key, any) {
      return handleDeepProperty_1(obj, key, any, false);
    }

    var deepGetProperty_1 = deepGetProperty;

    var STRING_FORMAT_REG = /([{}])\1|{([^}]*)}|(%)%|(%(\w*))/g;

    var INTERNAL_MEMOIZE_LIMIT = 1000;

    var hasOwn$3 = coreUtilityAliases.hasOwn;

    function memoizeFunction(fn) {
      var memo = {}, counter = 0;

      return function(key) {
        if (hasOwn$3(memo, key)) {
          return memo[key];
        }
        // istanbul ignore if
        if (counter === INTERNAL_MEMOIZE_LIMIT) {
          memo = {};
          counter = 0;
        }
        counter++;
        return memo[key] = fn(key);
      };
    }

    var memoizeFunction_1 = memoizeFunction;

    var OPEN_BRACE = CommonChars.OPEN_BRACE,
        CLOSE_BRACE = CommonChars.CLOSE_BRACE;

    function createFormatMatcher(bracketMatcher, percentMatcher, precheck) {

      var reg = STRING_FORMAT_REG;
      var compileMemoized = memoizeFunction_1(compile);

      function getToken(format, match) {
        var get, token, literal, fn;
        var bKey = match[2];
        var pLit = match[3];
        var pKey = match[5];
        if (match[4] && percentMatcher) {
          token = pKey;
          get = percentMatcher;
        } else if (bKey) {
          token = bKey;
          get = bracketMatcher;
        } else if (pLit && percentMatcher) {
          literal = pLit;
        } else {
          literal = match[1] || match[0];
        }
        if (get) {
          assertPassesPrecheck(precheck, bKey, pKey);
          fn = function(obj, opt) {
            return get(obj, token, opt);
          };
        }
        format.push(fn || getLiteral(literal));
      }

      function getSubstring(format, str, start, end) {
        if (end > start) {
          var sub = str.slice(start, end);
          assertNoUnmatched(sub, OPEN_BRACE);
          assertNoUnmatched(sub, CLOSE_BRACE);
          format.push(function() {
            return sub;
          });
        }
      }

      function getLiteral(str) {
        return function() {
          return str;
        };
      }

      function assertPassesPrecheck(precheck, bt, pt) {
        if (precheck && !precheck(bt, pt)) {
          throw new TypeError('Invalid token '+ (bt || pt) +' in format string');
        }
      }

      function assertNoUnmatched(str, chr) {
        if (str.indexOf(chr) !== -1) {
          throw new TypeError('Unmatched '+ chr +' in format string');
        }
      }

      function compile(str) {
        var format = [], lastIndex = 0, match;
        reg.lastIndex = 0;
        while(match = reg.exec(str)) {
          getSubstring(format, str, lastIndex, match.index);
          getToken(format, match);
          lastIndex = reg.lastIndex;
        }
        getSubstring(format, str, lastIndex, str.length);
        return format;
      }

      return function(str, obj, opt) {
        var format = compileMemoized(str), result = '';
        for (var i = 0; i < format.length; i++) {
          result += format[i](obj, opt);
        }
        return result;
      };
    }

    var createFormatMatcher_1 = createFormatMatcher;

    var stringFormatMatcher = createFormatMatcher_1(deepGetProperty_1);

    sugarCore.String.defineInstanceWithArguments({

      'format': function(str, args) {
        var arg1 = args[0] && args[0].valueOf();
        // Unwrap if a single object is passed in.
        if (args.length === 1 && isObjectType_1(arg1)) {
          args = arg1;
        }
        return stringFormatMatcher(str, args);
      }

    });

    var format = sugarCore.String.format;

    var isString$4 = classChecks.isString;

    function numberOrIndex(str, n, from) {
      if (isString$4(n)) {
        n = str.indexOf(n);
        if (n === -1) {
          n = from ? str.length : 0;
        }
      }
      return n;
    }

    var numberOrIndex_1 = numberOrIndex;

    sugarCore.String.defineInstance({

      'from': function(str, from) {
        return str.slice(numberOrIndex_1(str, from, true));
      }

    });

    var from_1 = sugarCore.String.from;

    var ENHANCEMENTS_FLAG = 'enhance';

    var STRING_ENHANCEMENTS_FLAG = 'enhanceString';

    function fixArgumentLength(fn) {
      var staticFn = function(a) {
        var args = arguments;
        return fn(a, args[1], args[2], args.length - 1);
      };
      staticFn.instance = function(b) {
        var args = arguments;
        return fn(this, b, args[1], args.length);
      };
      return staticFn;
    }

    var fixArgumentLength_1 = fixArgumentLength;

    var nativeIncludes = String.prototype.includes;

    var isRegExp$2 = classChecks.isRegExp;

    function callIncludesWithRegexSupport(str, search, position) {
      if (!isRegExp$2(search)) {
        return nativeIncludes.call(str, search, position);
      }
      if (position) {
        str = str.slice(position);
      }
      return search.test(str);
    }

    var callIncludesWithRegexSupport_1 = callIncludesWithRegexSupport;

    sugarCore.String.defineInstance({

      'includes': fixArgumentLength_1(callIncludesWithRegexSupport_1)

    }, [ENHANCEMENTS_FLAG, STRING_ENHANCEMENTS_FLAG]);

    var includes = sugarCore.String.includes;

    sugarCore.String.defineInstance({

      'insert': function(str, substr, index) {
        index = isUndefined_1(index) ? str.length : index;
        return str.slice(0, index) + substr + str.slice(index);
      }

    });

    var insert$1 = sugarCore.String.insert;

    sugarCore.String.defineInstance({

      'isBlank': function(str) {
        return trim_1(str).length === 0;
      }

    });

    var isBlank = sugarCore.String.isBlank;

    sugarCore.String.defineInstance({

      'isEmpty': function(str) {
        return str.length === 0;
      }

    });

    var isEmpty = sugarCore.String.isEmpty;

    sugarCore.String.defineInstance({

      'last': function(str, num) {
        if (isUndefined_1(num)) num = 1;
        var start = str.length - num < 0 ? 0 : str.length - num;
        return str.substr(start);
      }

    });

    var last = sugarCore.String.last;

    sugarCore.String.defineInstance({

      'lines': function(str, eachLineFn) {
        return stringEach_1(trim_1(str), /^.*$/gm, eachLineFn);
      }

    });

    var lines = sugarCore.String.lines;

    function repeatString(str, num) {
      var result = '';
      str = str.toString();
      while (num > 0) {
        if (num & 1) {
          result += str;
        }
        if (num >>= 1) {
          str += str;
        }
      }
      return result;
    }

    var repeatString_1 = repeatString;

    function padString(num, padding) {
      return repeatString_1(isDefined_1(padding) ? padding : ' ', num);
    }

    var padString_1 = padString;

    var mathAliases = {
      abs: Math.abs,
      pow: Math.pow,
      min: Math.min,
      max: Math.max,
      ceil: Math.ceil,
      floor: Math.floor,
      round: Math.round
    };

    var ceil = mathAliases.ceil,
        floor = mathAliases.floor;

    var trunc = Math.trunc || function(n) {
      if (n === 0 || !isFinite(n)) return n;
      return n < 0 ? ceil(n) : floor(n);
    };

    var trunc_1 = trunc;

    var isNumber$1 = classChecks.isNumber;

    function coercePositiveInteger(n) {
      n = +n || 0;
      if (n < 0 || !isNumber$1(n) || !isFinite(n)) {
        throw new RangeError('Invalid number');
      }
      return trunc_1(n);
    }

    var coercePositiveInteger_1 = coercePositiveInteger;

    var max = mathAliases.max,
        ceil$1 = mathAliases.ceil,
        floor$1 = mathAliases.floor;

    sugarCore.String.defineInstance({

      'pad': function(str, num, padding) {
        var half, front, back;
        num   = coercePositiveInteger_1(num);
        half  = max(0, num - str.length) / 2;
        front = floor$1(half);
        back  = ceil$1(half);
        return padString_1(front, padding) + str + padString_1(back, padding);
      }

    });

    var pad = sugarCore.String.pad;

    var max$1 = mathAliases.max;

    sugarCore.String.defineInstance({

      'padLeft': function(str, num, padding) {
        num = coercePositiveInteger_1(num);
        return padString_1(max$1(0, num - str.length), padding) + str;
      }

    });

    var padLeft = sugarCore.String.padLeft;

    var max$2 = mathAliases.max;

    sugarCore.String.defineInstance({

      'padRight': function(str, num, padding) {
        num = coercePositiveInteger_1(num);
        return str + padString_1(max$2(0, num - str.length), padding);
      }

    });

    var padRight = sugarCore.String.padRight;

    function stringParameterize(str, separator) {
      if (separator === undefined) separator = '-';
      str = str.replace(/[^a-z0-9\-_]+/gi, separator);
      if (separator) {
        var reg = RegExp('^{s}+|{s}+$|({s}){s}+'.split('{s}').join(escapeRegExp_1(separator)), 'g');
        str = str.replace(reg, '$1');
      }
      return encodeURI(str.toLowerCase());
    }

    var stringParameterize_1 = stringParameterize;

    sugarCore.String.defineInstance({

      'parameterize': function(str, separator) {
        return stringParameterize_1(str, separator);
      }

    });

    var parameterize = sugarCore.String.parameterize;

    sugarCore.String.defineInstance({

      'remove': function(str, f) {
        return str.replace(f, '');
      }

    });

    var remove = sugarCore.String.remove;

    var isString$5 = classChecks.isString;

    function stringReplaceAll(str, f, replace) {
      var i = 0, tokens;
      if (isString$5(f)) {
        f = RegExp(escapeRegExp_1(f), 'g');
      } else if (f && !f.global) {
        f = RegExp(f.source, getRegExpFlags_1(f, 'g'));
      }
      if (!replace) {
        replace = '';
      } else {
        tokens = replace;
        replace = function() {
          var t = tokens[i++];
          return t != null ? t : '';
        };
      }
      return str.replace(f, replace);
    }

    var stringReplaceAll_1 = stringReplaceAll;

    sugarCore.String.defineInstance({

      'removeAll': function(str, f) {
        return stringReplaceAll_1(str, f);
      }

    });

    var removeAll = sugarCore.String.removeAll;

    var HTML_VOID_ELEMENTS = [
      'area','base','br','col','command','embed','hr','img',
      'input','keygen','link','meta','param','source','track','wbr'
    ];

    var HTML_VOID_ELEMENTS_1 = HTML_VOID_ELEMENTS;

    function indexOf(arr, el) {
      for (var i = 0, len = arr.length; i < len; i++) {
        if (i in arr && arr[i] === el) return i;
      }
      return -1;
    }

    var indexOf_1 = indexOf;

    function tagIsVoid(tag) {
      return indexOf_1(HTML_VOID_ELEMENTS_1, tag.toLowerCase()) !== -1;
    }

    var tagIsVoid_1 = tagIsVoid;

    var isString$6 = classChecks.isString;

    function runTagReplacements(str, reg, strip, replacement, fullString) {

      var match;
      var result = '';
      var currentIndex = 0;
      var openTagName;
      var openTagAttributes;
      var openTagCount = 0;

      function processTag(index, tagName, attributes, tagLength, isVoid) {
        var content = str.slice(currentIndex, index), s = '', r = '';
        if (isString$6(replacement)) {
          r = replacement;
        } else if (replacement) {
          r = replacement.call(fullString, tagName, content, attributes, fullString) || '';
        }
        if (strip) {
          s = r;
        } else {
          content = r;
        }
        if (content) {
          content = runTagReplacements(content, reg, strip, replacement, fullString);
        }
        result += s + content + (isVoid ? '' : s);
        currentIndex = index + (tagLength || 0);
      }

      fullString = fullString || str;
      reg = RegExp(reg.source, 'gi');

      while(match = reg.exec(str)) {

        var tagName         = match[2];
        var attributes      = (match[3]|| '').slice(1);
        var isClosingTag    = !!match[1];
        var isSelfClosing   = !!match[4];
        var tagLength       = match[0].length;
        var isVoid          = tagIsVoid_1(tagName);
        var isOpeningTag    = !isClosingTag && !isSelfClosing && !isVoid;
        var isSameAsCurrent = tagName === openTagName;

        if (!openTagName) {
          result += str.slice(currentIndex, match.index);
          currentIndex = match.index;
        }

        if (isOpeningTag) {
          if (!openTagName) {
            openTagName = tagName;
            openTagAttributes = attributes;
            openTagCount++;
            currentIndex += tagLength;
          } else if (isSameAsCurrent) {
            openTagCount++;
          }
        } else if (isClosingTag && isSameAsCurrent) {
          openTagCount--;
          if (openTagCount === 0) {
            processTag(match.index, openTagName, openTagAttributes, tagLength, isVoid);
            openTagName       = null;
            openTagAttributes = null;
          }
        } else if (!openTagName) {
          processTag(match.index, tagName, attributes, tagLength, isVoid);
        }
      }
      if (openTagName) {
        processTag(str.length, openTagName, openTagAttributes);
      }
      result += str.slice(currentIndex);
      return result;
    }

    var runTagReplacements_1 = runTagReplacements;

    var isString$7 = classChecks.isString;

    function replaceTags(str, find, replacement, strip) {
      var tags = isString$7(find) ? [find] : find, reg, src;
      tags = map_1(tags || [], function(t) {
        return escapeRegExp_1(t);
      }).join('|');
      src = tags.replace('all', '') || '[^\\s>]+';
      src = '<(\\/)?(' + src + ')(\\s+[^<>]*?)?\\s*(\\/)?>';
      reg = RegExp(src, 'gi');
      return runTagReplacements_1(str.toString(), reg, strip, replacement);
    }

    var replaceTags_1 = replaceTags;

    sugarCore.String.defineInstance({

      'removeTags': function(str, tag, replace) {
        return replaceTags_1(str, tag, replace, false);
      }

    });

    var removeTags = sugarCore.String.removeTags;

    sugarCore.String.defineInstanceWithArguments({

      'replaceAll': function(str, f, args) {
        return stringReplaceAll_1(str, f, args);
      }

    });

    var replaceAll = sugarCore.String.replaceAll;

    function reverseString(str) {
      return str.split('').reverse().join('');
    }

    var reverseString_1 = reverseString;

    sugarCore.String.defineInstance({

      'reverse': function(str) {
        return reverseString_1(str);
      }

    });

    var reverse = sugarCore.String.reverse;

    sugarCore.String.defineInstance({

      'shift': function(str, n) {
        var result = '';
        n = n || 0;
        stringCodes_1(str, function(c) {
          result += chr(c + n);
        });
        return result;
      }

    });

    var shift = sugarCore.String.shift;

    function stringSpacify(str) {
      return stringUnderscore_1(str).replace(/_/g, ' ');
    }

    var stringSpacify_1 = stringSpacify;

    sugarCore.String.defineInstance({

      'spacify': function(str) {
        return stringSpacify_1(str);
      }

    });

    var spacify = sugarCore.String.spacify;

    sugarCore.String.defineInstance({

      'stripTags': function(str, tag, replace) {
        return replaceTags_1(str, tag, replace, true);
      }

    });

    var stripTags = sugarCore.String.stripTags;

    var DOWNCASED_WORDS = [
      'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at',
      'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over',
      'with', 'for'
    ];

    var DOWNCASED_WORDS_1 = DOWNCASED_WORDS;

    function eachWord(str, fn) {
      return stringEach_1(trim_1(str), /\S+/g, fn);
    }

    var eachWord_1 = eachWord;

    function runHumanRules(str) {
      // istanbul ignore next
      return  str;
    }

    var runHumanRules_1 = runHumanRules;

    function stringTitleize(str) {
      var fullStopPunctuation = /[.:;!]$/, lastHadPunctuation;
      str = runHumanRules_1(str);
      str = stringSpacify_1(str);
      return eachWord_1(str, function(word, index, words) {
        word =  word;
        word =  word;
        var hasPunctuation, isFirstOrLast;
        var first = index == 0, last = index == words.length - 1;
        hasPunctuation = fullStopPunctuation.test(word);
        isFirstOrLast = first || last || hasPunctuation || lastHadPunctuation;
        lastHadPunctuation = hasPunctuation;
        if (isFirstOrLast || indexOf_1(DOWNCASED_WORDS_1, word) === -1) {
          return stringCapitalize_1(word, false, true);
        } else {
          return word;
        }
      }).join(' ');
    }

    var stringTitleize_1 = stringTitleize;

    sugarCore.String.defineInstance({

      'titleize': function(str) {
        return stringTitleize_1(str);
      }

    });

    var titleize = sugarCore.String.titleize;

    sugarCore.String.defineInstance({

      'to': function(str, to) {
        if (isUndefined_1(to)) to = str.length;
        return str.slice(0, numberOrIndex_1(str, to));
      }

    });

    var to = sugarCore.String.to;

    function allCharsReg(src) {
      return RegExp('[' + src + ']', 'g');
    }

    var allCharsReg_1 = allCharsReg;

    var HALF_WIDTH_ZERO = CommonChars.HALF_WIDTH_ZERO,
        FULL_WIDTH_ZERO = CommonChars.FULL_WIDTH_ZERO,
        HALF_WIDTH_PERIOD$2 = CommonChars.HALF_WIDTH_PERIOD,
        FULL_WIDTH_PERIOD = CommonChars.FULL_WIDTH_PERIOD,
        HALF_WIDTH_COMMA = CommonChars.HALF_WIDTH_COMMA;

    var fullWidthNumberReg, fullWidthNumberMap, fullWidthNumbers;

    function buildFullWidthNumber() {
      var fwp = FULL_WIDTH_PERIOD, hwp = HALF_WIDTH_PERIOD$2, hwc = HALF_WIDTH_COMMA, fwn = '';
      fullWidthNumberMap = {};
      for (var i = 0, digit; i <= 9; i++) {
        digit = chr(i + FULL_WIDTH_ZERO);
        fwn += digit;
        fullWidthNumberMap[digit] = chr(i + HALF_WIDTH_ZERO);
      }
      fullWidthNumberMap[hwc] = '';
      fullWidthNumberMap[fwp] = hwp;
      // Mapping this to itself to capture it easily
      // in stringToNumber to detect decimals later.
      fullWidthNumberMap[hwp] = hwp;
      fullWidthNumberReg = allCharsReg_1(fwn + fwp + hwc + hwp);
      fullWidthNumbers = fwn;
    }

    buildFullWidthNumber();

    var fullwidthNumberHelpers = {
      fullWidthNumberReg: fullWidthNumberReg,
      fullWidthNumberMap: fullWidthNumberMap,
      fullWidthNumbers: fullWidthNumbers
    };

    var fullWidthNumberReg$1 = fullwidthNumberHelpers.fullWidthNumberReg,
        fullWidthNumberMap$1 = fullwidthNumberHelpers.fullWidthNumberMap,
        getOwn$1 = coreUtilityAliases.getOwn,
        HALF_WIDTH_PERIOD$3 = CommonChars.HALF_WIDTH_PERIOD;

    function stringToNumber(str, base) {
      var sanitized, isDecimal;
      sanitized = str.replace(fullWidthNumberReg$1, function(chr) {
        var replacement = getOwn$1(fullWidthNumberMap$1, chr);
        if (replacement === HALF_WIDTH_PERIOD$3) {
          isDecimal = true;
        }
        return replacement;
      });
      return isDecimal ? parseFloat(sanitized) : parseInt(sanitized, base || 10);
    }

    var stringToNumber_1 = stringToNumber;

    sugarCore.String.defineInstance({

      'toNumber': function(str, base) {
        return stringToNumber_1(str, base);
      }

    });

    var toNumber = sugarCore.String.toNumber;

    var TRIM_CHARS = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u2028\u2029\u3000\uFEFF';

    var LEFT_TRIM_REG = RegExp('^['+ TRIM_CHARS +']+');

    sugarCore.String.defineInstance({

      'trimLeft': function(str) {
        return str.replace(LEFT_TRIM_REG, '');
      }

    });

    var trimLeft = sugarCore.String.trimLeft;

    var RIGHT_TRIM_REG = RegExp('['+ TRIM_CHARS +']+$');

    sugarCore.String.defineInstance({

      'trimRight': function(str) {
        return str.replace(RIGHT_TRIM_REG, '');
      }

    });

    var trimRight = sugarCore.String.trimRight;

    var TRUNC_REG = RegExp('(?=[' + TRIM_CHARS + '])');

    function filter(arr, fn) {
      var result = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        var el = arr[i];
        if (i in arr && fn(el, i)) {
          result.push(el);
        }
      }
      return result;
    }

    var filter_1 = filter;

    function truncateOnWord(str, limit, fromLeft) {
      if (fromLeft) {
        return reverseString_1(truncateOnWord(reverseString_1(str), limit));
      }
      var words = str.split(TRUNC_REG);
      var count = 0;
      return filter_1(words, function(word) {
        count += word.length;
        return count <= limit;
      }).join('');
    }

    var truncateOnWord_1 = truncateOnWord;

    var ceil$2 = mathAliases.ceil,
        floor$2 = mathAliases.floor;

    function truncateString(str, length, from, ellipsis, split) {
      var str1, str2, len1, len2;
      if (str.length <= length) {
        return str.toString();
      }
      ellipsis = isUndefined_1(ellipsis) ? '...' : ellipsis;
      switch(from) {
        case 'left':
          str2 = split ? truncateOnWord_1(str, length, true) : str.slice(str.length - length);
          return ellipsis + str2;
        case 'middle':
          len1 = ceil$2(length / 2);
          len2 = floor$2(length / 2);
          str1 = split ? truncateOnWord_1(str, len1) : str.slice(0, len1);
          str2 = split ? truncateOnWord_1(str, len2, true) : str.slice(str.length - len2);
          return str1 + ellipsis + str2;
        default:
          str1 = split ? truncateOnWord_1(str, length) : str.slice(0, length);
          return str1 + ellipsis;
      }
    }

    var truncateString_1 = truncateString;

    sugarCore.String.defineInstance({

      'truncate': function(str, length, from, ellipsis) {
        return truncateString_1(str, length, from, ellipsis);
      }

    });

    var truncate = sugarCore.String.truncate;

    sugarCore.String.defineInstance({

      'truncateOnWord': function(str, length, from, ellipsis) {
        return truncateString_1(str, length, from, ellipsis, true);
      }

    });

    var truncateOnWord$1 = sugarCore.String.truncateOnWord;

    sugarCore.String.defineInstance({

      'underscore': function(str) {
        return stringUnderscore_1(str);
      }

    });

    var underscore = sugarCore.String.underscore;

    var HTML_ENTITY_REG = /&#?(x)?([\w\d]{0,5});/gi;

    function unescapeHTML(str) {
      return str.replace(HTML_ENTITY_REG, function(full, hex, code) {
        var special = HTMLFromEntityMap_1[code];
        return special || chr(hex ? parseInt(code, 16) : +code);
      });
    }

    var unescapeHTML_1 = unescapeHTML;

    sugarCore.String.defineInstance({

      'unescapeHTML': function(str) {
        return unescapeHTML_1(str);
      }

    });

    var unescapeHTML_1$1 = sugarCore.String.unescapeHTML;

    sugarCore.String.defineInstance({

      'unescapeURL': function(str, param) {
        return param ? decodeURI(str) : decodeURIComponent(str);
      }

    });

    var unescapeURL = sugarCore.String.unescapeURL;

    sugarCore.String.defineInstance({

      'words': function(str, eachWordFn) {
        return stringEach_1(trim_1(str), /\S+/g, eachWordFn);
      }

    });

    var words = sugarCore.String.words;

    var min = mathAliases.min,
        max$3 = mathAliases.max;

    sugarCore.Number.defineStatic({

      'random': function(n1, n2) {
        var minNum, maxNum;
        if (arguments.length == 1) n2 = n1, n1 = 0;
        minNum = min(n1 || 0, isUndefined_1(n2) ? 1 : n2);
        maxNum = max$3(n1 || 0, isUndefined_1(n2) ? 1 : n2) + 1;
        return trunc_1((Math.random() * (maxNum - minNum)) + minNum);
      }

    });

    var random = sugarCore.Number.random;

    var AbbreviationUnits = {
      BASIC_UNITS: '|kmbt',
      MEMORY_UNITS: '|KMGTPE',
      MEMORY_BINARY_UNITS: '|,Ki,Mi,Gi,Ti,Pi,Ei',
      METRIC_UNITS_SHORT: 'nμm|k',
      METRIC_UNITS_FULL: 'yzafpnμm|KMGTPEZY'
    };

    var HALF_WIDTH_COMMA$1 = CommonChars.HALF_WIDTH_COMMA;

    function commaSplit(str) {
      return str.split(HALF_WIDTH_COMMA$1);
    }

    var commaSplit_1 = commaSplit;

    var abs = mathAliases.abs,
        pow = mathAliases.pow,
        round = mathAliases.round;

    function withPrecision(val, precision, fn) {
      var multiplier = pow(10, abs(precision || 0));
      fn = fn || round;
      if (precision < 0) multiplier = 1 / multiplier;
      return fn(val * multiplier) / multiplier;
    }

    var withPrecision_1 = withPrecision;

    var HALF_WIDTH_PERIOD$4 = CommonChars.HALF_WIDTH_PERIOD,
        HALF_WIDTH_COMMA$2 = CommonChars.HALF_WIDTH_COMMA;

    var NUMBER_OPTIONS = {
      'decimal': HALF_WIDTH_PERIOD$4,
      'thousands': HALF_WIDTH_COMMA$2
    };

    var NUMBER_OPTIONS_1 = NUMBER_OPTIONS;

    var namespaceAliases = {
      sugarObject: sugarCore.Object,
      sugarArray: sugarCore.Array,
      sugarDate: sugarCore.Date,
      sugarString: sugarCore.String,
      sugarNumber: sugarCore.Number,
      sugarFunction: sugarCore.Function,
      sugarRegExp: sugarCore.RegExp
    };

    var forEachProperty$1 = coreUtilityAliases.forEachProperty;

    function simpleMerge(target, source) {
      forEachProperty$1(source, function(val, key) {
        target[key] = val;
      });
      return target;
    }

    var simpleMerge_1 = simpleMerge;

    function simpleClone(obj) {
      return simpleMerge_1({}, obj);
    }

    var simpleClone_1 = simpleClone;

    var setProperty = coreUtilityAliases.setProperty;

    function defineAccessor(namespace, name, fn) {
      setProperty(namespace, name, fn);
    }

    var defineAccessor_1 = defineAccessor;

    var forEachProperty$2 = coreUtilityAliases.forEachProperty;

    function defineOptionsAccessor(namespace, defaults) {
      var obj = simpleClone_1(defaults);

      function getOption(name) {
        return obj[name];
      }

      function setOption(arg1, arg2) {
        var options;
        if (arguments.length === 1) {
          options = arg1;
        } else {
          options = {};
          options[arg1] = arg2;
        }
        forEachProperty$2(options, function(val, name) {
          if (val === null) {
            val = defaults[name];
          }
          obj[name] = val;
        });
      }

      defineAccessor_1(namespace, 'getOption', getOption);
      defineAccessor_1(namespace, 'setOption', setOption);
      return getOption;
    }

    var defineOptionsAccessor_1 = defineOptionsAccessor;

    var sugarNumber = namespaceAliases.sugarNumber;

    var _numberOptions = defineOptionsAccessor_1(sugarNumber, NUMBER_OPTIONS_1);

    var isNumber$2 = classChecks.isNumber,
        max$4 = mathAliases.max;

    function numberFormat(num, place) {
      var result = '', thousands, decimal, fraction, integer, split, str;

      decimal   = _numberOptions('decimal');
      thousands = _numberOptions('thousands');

      if (isNumber$2(place)) {
        str = withPrecision_1(num, place || 0).toFixed(max$4(place, 0));
      } else {
        str = num.toString();
      }

      str = str.replace(/^-/, '');
      split    = periodSplit_1(str);
      integer  = split[0];
      fraction = split[1];
      if (/e/.test(str)) {
        result = str;
      } else {
        for(var i = integer.length; i > 0; i -= 3) {
          if (i < integer.length) {
            result = thousands + result;
          }
          result = integer.slice(max$4(0, i - 3), i) + result;
        }
      }
      if (fraction) {
        result += decimal + repeatString_1('0', (place || 0) - fraction.length) + fraction;
      }
      return (num < 0 ? '-' : '') + result;
    }

    var numberFormat_1 = numberFormat;

    var abs$1 = mathAliases.abs,
        pow$1 = mathAliases.pow,
        min$1 = mathAliases.min,
        max$5 = mathAliases.max,
        floor$3 = mathAliases.floor;

    function abbreviateNumber(num, precision, ustr, bytes) {
      var fixed        = num.toFixed(20),
          decimalPlace = fixed.search(/\./),
          numeralPlace = fixed.search(/[1-9]/),
          significant  = decimalPlace - numeralPlace,
          units, unit, mid, i, divisor;
      if (significant > 0) {
        significant -= 1;
      }
      units = commaSplit_1(ustr);
      if (units.length === 1) {
        units = ustr.split('');
      }
      mid = units.indexOf('|');
      if (mid === -1) {
        // Skipping the placeholder means the units should start from zero,
        // otherwise assume they end at zero.
        mid = units[0] === '_' ? 0 : units.length;
      }
      i = max$5(min$1(floor$3(significant / 3), units.length - mid - 1), -mid);
      unit = units[i + mid];
      while (unit === '_') {
        i += i < 0 ? -1 : 1;
        unit = units[i + mid];
      }
      if (unit === '|') {
        unit = '';
      }
      if (significant < -9) {
        precision = abs$1(significant) - 9;
      }
      divisor = bytes ? pow$1(2, 10 * i) : pow$1(10, i * 3);
      return numberFormat_1(withPrecision_1(num / divisor, precision || 0)) + unit;
    }

    var abbreviateNumber_1 = abbreviateNumber;

    var BASIC_UNITS = AbbreviationUnits.BASIC_UNITS;

    sugarCore.Number.defineInstance({

      'abbr': function(n, precision) {
        return abbreviateNumber_1(n, precision, BASIC_UNITS);
      }

    });

    var abbr = sugarCore.Number.abbr;

    function wrapNamespace(method) {
      return function(sugarNamespace, arg1, arg2) {
        sugarNamespace[method](arg1, arg2);
      };
    }

    var wrapNamespace_1 = wrapNamespace;

    var methodDefineAliases = {
      alias: wrapNamespace_1('alias'),
      defineStatic: wrapNamespace_1('defineStatic'),
      defineInstance: wrapNamespace_1('defineInstance'),
      defineStaticPolyfill: wrapNamespace_1('defineStaticPolyfill'),
      defineInstancePolyfill: wrapNamespace_1('defineInstancePolyfill'),
      defineInstanceAndStatic: wrapNamespace_1('defineInstanceAndStatic'),
      defineInstanceWithArguments: wrapNamespace_1('defineInstanceWithArguments')
    };

    var isString$8 = classChecks.isString;

    function collectSimilarMethods(set, fn) {
      var methods = {};
      if (isString$8(set)) {
        set = spaceSplit_1(set);
      }
      forEach_1(set, function(el, i) {
        fn(methods, el, i);
      });
      return methods;
    }

    var collectSimilarMethods_1 = collectSimilarMethods;

    var defineInstance = methodDefineAliases.defineInstance;

    function defineInstanceSimilar(sugarNamespace, set, fn, flags) {
      defineInstance(sugarNamespace, collectSimilarMethods_1(set, fn), flags);
    }

    var defineInstanceSimilar_1 = defineInstanceSimilar;

    var sugarNumber$1 = namespaceAliases.sugarNumber;

    function buildMathAliases() {
      defineInstanceSimilar_1(sugarNumber$1, 'abs pow sin asin cos acos tan atan exp pow sqrt', function(methods, name) {
        methods[name] = function(n, arg) {
          // Note that .valueOf() here is only required due to a
          // very strange bug in iOS7 that only occurs occasionally
          // in which Math.abs() called on non-primitive numbers
          // returns a completely different number (Issue #400)
          return Math[name](n.valueOf(), arg);
        };
      });
    }

    var buildMathAliases_1 = buildMathAliases;

    buildMathAliases_1();

    var abs$2 = sugarCore.Number.abs;

    var acos = sugarCore.Number.acos;

    var asin = sugarCore.Number.asin;

    var atan = sugarCore.Number.atan;

    var MEMORY_UNITS = AbbreviationUnits.MEMORY_UNITS,
        MEMORY_BINARY_UNITS = AbbreviationUnits.MEMORY_BINARY_UNITS;

    sugarCore.Number.defineInstance({

      'bytes': function(n, precision, binary, units) {
        if (units === 'binary' || (!units && binary)) {
          units = MEMORY_BINARY_UNITS;
        } else if(units === 'si' || !units) {
          units = MEMORY_UNITS;
        }
        return abbreviateNumber_1(n, precision, units, binary) + 'B';
      }

    });

    var bytes = sugarCore.Number.bytes;

    function createRoundingFunction(fn) {
      return function(n, precision) {
        return precision ? withPrecision_1(n, precision, fn) : fn(n);
      };
    }

    var createRoundingFunction_1 = createRoundingFunction;

    var ceil$3 = mathAliases.ceil;

    sugarCore.Number.defineInstance({

      'ceil': createRoundingFunction_1(ceil$3)

    });

    var ceil_1 = sugarCore.Number.ceil;

    sugarCore.Number.defineInstance({

      'chr': function(n) {
        return chr(n);
      }

    });

    var chr_1 = sugarCore.Number.chr;

    var cos = sugarCore.Number.cos;

    var exp = sugarCore.Number.exp;

    var floor$4 = mathAliases.floor;

    sugarCore.Number.defineInstance({

      'floor': createRoundingFunction_1(floor$4)

    });

    var floor_1 = sugarCore.Number.floor;

    sugarCore.Number.defineInstance({

      'format': function(n, place) {
        return numberFormat_1(n, place);
      }

    });

    var format$1 = sugarCore.Number.format;

    var abs$3 = mathAliases.abs;

    function padNumber(num, place, sign, base, replacement) {
      var str = abs$3(num).toString(base || 10);
      str = repeatString_1(replacement || '0', place - str.replace(/\.\d+/, '').length) + str;
      if (sign || num < 0) {
        str = (num < 0 ? '-' : '+') + str;
      }
      return str;
    }

    var padNumber_1 = padNumber;

    sugarCore.Number.defineInstance({

      'hex': function(n, pad) {
        return padNumber_1(n, pad || 1, false, 16);
      }

    });

    var hex = sugarCore.Number.hex;

    function isMultipleOf(n1, n2) {
      return n1 % n2 === 0;
    }

    var isMultipleOf_1 = isMultipleOf;

    sugarCore.Number.defineInstance({

      'isEven': function(n) {
        return isMultipleOf_1(n, 2);
      }

    });

    var isEven = sugarCore.Number.isEven;

    function isInteger(n) {
      return n % 1 === 0;
    }

    var isInteger_1 = isInteger;

    sugarCore.Number.defineInstance({

      'isInteger': function(n) {
        return isInteger_1(n);
      }

    });

    var isInteger_1$1 = sugarCore.Number.isInteger;

    sugarCore.Number.defineInstance({

      'isMultipleOf': function(n, num) {
        return isMultipleOf_1(n, num);
      }

    });

    var isMultipleOf_1$1 = sugarCore.Number.isMultipleOf;

    sugarCore.Number.defineInstance({

      'isOdd': function(n) {
        return isInteger_1(n) && !isMultipleOf_1(n, 2);
      }

    });

    var isOdd = sugarCore.Number.isOdd;

    sugarCore.Number.defineInstance({

      'log': function(n, base) {
        return Math.log(n) / (base ? Math.log(base) : 1);
      }

    });

    var log = sugarCore.Number.log;

    var METRIC_UNITS_SHORT = AbbreviationUnits.METRIC_UNITS_SHORT,
        METRIC_UNITS_FULL = AbbreviationUnits.METRIC_UNITS_FULL;

    sugarCore.Number.defineInstance({

      'metric': function(n, precision, units) {
        if (units === 'all') {
          units = METRIC_UNITS_FULL;
        } else if (!units) {
          units = METRIC_UNITS_SHORT;
        }
        return abbreviateNumber_1(n, precision, units);
      }

    });

    var metric = sugarCore.Number.metric;

    function getOrdinalSuffix(num) {
      if (num >= 11 && num <= 13) {
        return 'th';
      } else {
        switch(num % 10) {
          case 1:  return 'st';
          case 2:  return 'nd';
          case 3:  return 'rd';
          default: return 'th';
        }
      }
    }

    var getOrdinalSuffix_1 = getOrdinalSuffix;

    var abs$4 = mathAliases.abs;

    sugarCore.Number.defineInstance({

      'ordinalize': function(n) {
        var num = abs$4(n), last = +num.toString().slice(-2);
        return n + getOrdinalSuffix_1(last);
      }

    });

    var ordinalize = sugarCore.Number.ordinalize;

    sugarCore.Number.defineInstance({

      'pad': function(n, place, sign, base) {
        return padNumber_1(n, place, sign, base);
      }

    });

    var pad$1 = sugarCore.Number.pad;

    var pow$2 = sugarCore.Number.pow;

    var round$1 = mathAliases.round;

    sugarCore.Number.defineInstance({

      'round': createRoundingFunction_1(round$1)

    });

    var round_1 = sugarCore.Number.round;

    var sin = sugarCore.Number.sin;

    var sqrt = sugarCore.Number.sqrt;

    var tan = sugarCore.Number.tan;

    sugarCore.Number.defineInstance({

      'times': function(n, indexMapFn) {
        var arr, result;
        for(var i = 0; i < n; i++) {
          result = indexMapFn.call(n, i);
          if (isDefined_1(result)) {
            if (!arr) {
              arr = [];
            }
            arr.push(result);
          }
        }
        return arr;
      }

    });

    var times = sugarCore.Number.times;

    sugarCore.Number.defineInstance({

      'toNumber': function(n) {
        return n.valueOf();
      }

    });

    var toNumber$1 = sugarCore.Number.toNumber;

    var getOption = sugarCore.Number.getOption;

    var setOption = sugarCore.Number.setOption;

    sugarCore.Array.defineStatic({

      'construct': function(n, indexMapFn) {
        n = coercePositiveInteger_1(n);
        return Array.from(new Array(n), function(el, i) {
          return indexMapFn && indexMapFn(i);
        });
      }

    });

    var construct = sugarCore.Array.construct;

    function arrayClone(arr) {
      var clone = new Array(arr.length);
      forEach_1(arr, function(el, i) {
        clone[i] = el;
      });
      return clone;
    }

    var arrayClone_1 = arrayClone;

    var isArray$3 = classChecks.isArray;

    function isArrayOrInherited(obj) {
      return obj && obj.constructor && isArray$3(obj.constructor.prototype);
    }

    var isArrayOrInherited_1 = isArrayOrInherited;

    var isString$9 = classChecks.isString;

    function arrayCreate(obj, clone) {
      var arr;
      if (isArrayOrInherited_1(obj)) {
        arr = clone ? arrayClone_1(obj) : obj;
      } else if (isObjectType_1(obj) || isString$9(obj)) {
        arr = Array.from(obj);
      } else if (isDefined_1(obj)) {
        arr = [obj];
      }
      return arr || [];
    }

    var arrayCreate_1 = arrayCreate;

    function setChainableConstructor(sugarNamespace, createFn) {
      sugarNamespace.prototype.constructor = function() {
        return createFn.apply(this, arguments);
      };
    }

    var setChainableConstructor_1 = setChainableConstructor;

    var sugarArray = namespaceAliases.sugarArray;

    function setArrayChainableConstructor() {
      setChainableConstructor_1(sugarArray, arrayCreate_1);
    }

    var setArrayChainableConstructor_1 = setArrayChainableConstructor;

    setArrayChainableConstructor_1();

    sugarCore.Array.defineStatic({

      'create': function(obj, clone) {
        return arrayCreate_1(obj, clone);
      }

    });

    var create = sugarCore.Array.create;

    function arrayAppend(arr, el, index) {
      var spliceArgs;
      index = +index;
      if (isNaN(index)) {
        index = arr.length;
      }
      spliceArgs = [index, 0];
      if (isDefined_1(el)) {
        spliceArgs = spliceArgs.concat(el);
      }
      arr.splice.apply(arr, spliceArgs);
      return arr;
    }

    var arrayAppend_1 = arrayAppend;

    sugarCore.Array.defineInstance({

      'add': function(arr, item, index) {
        return arrayAppend_1(arrayClone_1(arr), item, index);
      }

    });

    var add = sugarCore.Array.add;

    sugarCore.Array.defineInstance({

      'append': function(arr, item, index) {
        return arrayAppend_1(arr, item, index);
      }

    });

    var append$1 = sugarCore.Array.append;

    sugarCore.Array.defineInstance({

      'at': function(arr, index, loop) {
        return getEntriesForIndexes_1(arr, index, loop);
      }

    });

    var at$1 = sugarCore.Array.at;

    sugarCore.Array.defineInstance({

      'clone': function(arr) {
        return arrayClone_1(arr);
      }

    });

    var clone = sugarCore.Array.clone;

    function arrayCompact(arr, all) {
      return filter_1(arr, function(el) {
        return el || (!all && el != null && el.valueOf() === el.valueOf());
      });
    }

    var arrayCompact_1 = arrayCompact;

    sugarCore.Array.defineInstance({

      'compact': function(arr, all) {
        return arrayCompact_1(arr, all);
      }

    });

    var compact$1 = sugarCore.Array.compact;

    function dateMatcher(d) {
      var ms = d.getTime();
      return function(el) {
        return !!(el && el.getTime) && el.getTime() === ms;
      };
    }

    var dateMatcher_1 = dateMatcher;

    function regexMatcher(reg) {
      reg = RegExp(reg);
      return function(el) {
        return reg.test(el);
      };
    }

    var regexMatcher_1 = regexMatcher;

    function getKeys(obj) {
      return Object.keys(obj);
    }

    var getKeys_1 = getKeys;

    function setToArray(set) {
      var arr = new Array(set.size), i = 0;
      set.forEach(function(val) {
        arr[i++] = val;
      });
      return arr;
    }

    var setToArray_1 = setToArray;

    function mapToArray(map) {
      var arr = new Array(map.size), i = 0;
      map.forEach(function(val, key) {
        arr[i++] = [key, val];
      });
      return arr;
    }

    var mapToArray_1 = mapToArray;

    var forEachProperty$3 = coreUtilityAliases.forEachProperty;

    function iterateWithCyclicCheck(obj, sortedKeys, stack, fn) {

      function next(val, key) {
        var cyc = false;

        // Allowing a step into the structure before triggering this check to save
        // cycles on standard JSON structures and also to try as hard as possible to
        // catch basic properties that may have been modified.
        if (stack.length > 1) {
          var i = stack.length;
          while (i--) {
            if (stack[i] === val) {
              cyc = true;
            }
          }
        }

        stack.push(val);
        fn(key, val, cyc, stack);
        stack.pop();
      }

      function iterateWithSortedKeys() {
        // Sorted keys is required for serialization, where object order
        // does not matter but stringified order does.
        var arr = getKeys_1(obj).sort(), key;
        for (var i = 0; i < arr.length; i++) {
          key = arr[i];
          next(obj[key], arr[i]);
        }
      }

      // This method for checking for cyclic structures was egregiously stolen from
      // the ingenious method by @kitcambridge from the Underscore script:
      // https://github.com/documentcloud/underscore/issues/240
      if (!stack) {
        stack = [];
      }

      if (sortedKeys) {
        iterateWithSortedKeys();
      } else {
        forEachProperty$3(obj, next);
      }
    }

    var iterateWithCyclicCheck_1 = iterateWithCyclicCheck;

    var classToString$1 = coreUtilityAliases.classToString,
        isSerializable$1 = classChecks.isSerializable,
        isSet$1 = classChecks.isSet,
        isMap$1 = classChecks.isMap,
        isError$1 = classChecks.isError;

    function isEqual(a, b, stack) {
      var aClass, bClass;
      if (a === b) {
        // Return quickly up front when matched by reference,
        // but be careful about 0 !== -0.
        return a !== 0 || 1 / a === 1 / b;
      }
      aClass = classToString$1(a);
      bClass = classToString$1(b);
      if (aClass !== bClass) {
        return false;
      }

      if (isSerializable$1(a, aClass) && isSerializable$1(b, bClass)) {
        return objectIsEqual(a, b, aClass, stack);
      } else if (isSet$1(a, aClass) && isSet$1(b, bClass)) {
        return a.size === b.size && isEqual(setToArray_1(a), setToArray_1(b), stack);
      } else if (isMap$1(a, aClass) && isMap$1(b, bClass)) {
        return a.size === b.size && isEqual(mapToArray_1(a), mapToArray_1(b), stack);
      } else if (isError$1(a, aClass) && isError$1(b, bClass)) {
        return a.toString() === b.toString();
      }

      return false;
    }

    function objectIsEqual(a, b, aClass, stack) {
      var aType = typeof a, bType = typeof b, propsEqual, count;
      if (aType !== bType) {
        return false;
      }
      if (isObjectType_1(a.valueOf())) {
        if (a.length !== b.length) {
          // perf: Quickly returning up front for arrays.
          return false;
        }
        count = 0;
        propsEqual = true;
        iterateWithCyclicCheck_1(a, false, stack, function(key, val, cyc, stack) {
          if (!cyc && (!(key in b) || !isEqual(val, b[key], stack))) {
            propsEqual = false;
          }
          count++;
          return propsEqual;
        });
        if (!propsEqual || count !== getKeys_1(b).length) {
          return false;
        }
      }
      // Stringifying the value handles NaN, wrapped primitives, dates, and errors in one go.
      return a.valueOf().toString() === b.valueOf().toString();
    }

    var isEqual_1 = isEqual;

    function defaultMatcher(f) {
      return function(el) {
        return isEqual_1(el, f);
      };
    }

    var defaultMatcher_1 = defaultMatcher;

    function functionMatcher(fn) {
      return function(el, i, arr) {
        // Return true up front if match by reference
        return el === fn || fn.call(arr, el, i, arr);
      };
    }

    var functionMatcher_1 = functionMatcher;

    var getOwn$2 = coreUtilityAliases.getOwn,
        classToString$2 = coreUtilityAliases.classToString,
        forEachProperty$4 = coreUtilityAliases.forEachProperty,
        isDate$1 = classChecks.isDate,
        isRegExp$3 = classChecks.isRegExp,
        isFunction$2 = classChecks.isFunction;

    function getMatcher(f) {
      if (!isPrimitive_1(f)) {
        var className = classToString$2(f);
        if (isRegExp$3(f, className)) {
          return regexMatcher_1(f);
        } else if (isDate$1(f, className)) {
          return dateMatcher_1(f);
        } else if (isFunction$2(f, className)) {
          return functionMatcher_1(f);
        } else if (isPlainObject_1(f, className)) {
          return fuzzyMatcher(f);
        }
      }
      // Default is standard isEqual
      return defaultMatcher_1(f);
    }

    function fuzzyMatcher(obj) {
      var matchers = {};
      return function(el, i, arr) {
        var matched = true;
        if (!isObjectType_1(el)) {
          return false;
        }
        forEachProperty$4(obj, function(val, key) {
          matchers[key] = getOwn$2(matchers, key) || getMatcher(val);
          if (matchers[key].call(arr, el[key], i, arr) === false) {
            matched = false;
          }
          return matched;
        });
        return matched;
      };
    }

    var getMatcher_1 = getMatcher;

    function arrayExclude(arr, f) {
      var result = [], matcher = getMatcher_1(f);
      for (var i = 0; i < arr.length; i++) {
        if (!matcher(arr[i], i, arr)) {
          result.push(arr[i]);
        }
      }
      return result;
    }

    var arrayExclude_1 = arrayExclude;

    sugarCore.Array.defineInstance({

      'exclude': function(arr, f) {
        return arrayExclude_1(arr, f);
      }

    });

    var exclude = sugarCore.Array.exclude;

    sugarCore.Array.defineInstance({

      'first': function(arr, num) {
        if (isUndefined_1(num)) return arr[0];
        if (num < 0) num = 0;
        return arr.slice(0, num);
      }

    });

    var first$1 = sugarCore.Array.first;

    var isArray$4 = classChecks.isArray;

    function arrayFlatten(arr, level, current) {
      var result = [];
      level = level || Infinity;
      current = current || 0;
      forEach_1(arr, function(el) {
        if (isArray$4(el) && current < level) {
          result = result.concat(arrayFlatten(el, level, current + 1));
        } else {
          result.push(el);
        }
      });
      return result;
    }

    var arrayFlatten_1 = arrayFlatten;

    sugarCore.Array.defineInstance({

      'flatten': function(arr, limit) {
        return arrayFlatten_1(arr, limit);
      }

    });

    var flatten = sugarCore.Array.flatten;

    sugarCore.Array.defineInstance({

      'from': function(arr, num) {
        return arr.slice(num);
      }

    });

    var from_1$1 = sugarCore.Array.from;

    var isFunction$3 = classChecks.isFunction,
        isArray$5 = classChecks.isArray;

    function mapWithShortcuts(el, f, context, mapArgs) {
      if (!f) {
        return el;
      } else if (f.apply) {
        return f.apply(context, mapArgs);
      } else if (isArray$5(f)) {
        return map_1(f, function(m) {
          return mapWithShortcuts(el, m, context, mapArgs);
        });
      } else if (isFunction$3(el[f])) {
        return el[f].call(el);
      } else {
        return deepGetProperty_1(el, f, true);
      }
    }

    var mapWithShortcuts_1 = mapWithShortcuts;

    var hasOwn$4 = coreUtilityAliases.hasOwn,
        forEachProperty$5 = coreUtilityAliases.forEachProperty;

    function arrayGroupBy(arr, map, fn) {
      var result = {}, key;
      forEach_1(arr, function(el, i) {
        key = mapWithShortcuts_1(el, map, arr, [el, i, arr]);
        if (!hasOwn$4(result, key)) {
          result[key] = [];
        }
        result[key].push(el);
      });
      if (fn) {
        forEachProperty$5(result, fn);
      }
      return result;
    }

    var arrayGroupBy_1 = arrayGroupBy;

    sugarCore.Array.defineInstance({

      'groupBy': function(arr, map, groupFn) {
        return arrayGroupBy_1(arr, map, groupFn);
      }

    });

    var groupBy = sugarCore.Array.groupBy;

    function simpleRepeat(n, fn) {
      for (var i = 0; i < n; i++) {
        fn(i);
      }
    }

    var simpleRepeat_1 = simpleRepeat;

    var ceil$4 = mathAliases.ceil;

    sugarCore.Array.defineInstance({

      'inGroups': function(arr, num, padding) {
        var pad = isDefined_1(padding);
        var result = new Array(num);
        var divisor = ceil$4(arr.length / num);
        simpleRepeat_1(num, function(i) {
          var index = i * divisor;
          var group = arr.slice(index, index + divisor);
          if (pad && group.length < divisor) {
            simpleRepeat_1(divisor - group.length, function() {
              group.push(padding);
            });
          }
          result[i] = group;
        });
        return result;
      }

    });

    var inGroups = sugarCore.Array.inGroups;

    var ceil$5 = mathAliases.ceil;

    sugarCore.Array.defineInstance({

      'inGroupsOf': function(arr, num, padding) {
        var result = [], len = arr.length, group;
        if (len === 0 || num === 0) return arr;
        if (isUndefined_1(num)) num = 1;
        if (isUndefined_1(padding)) padding = null;
        simpleRepeat_1(ceil$5(len / num), function(i) {
          group = arr.slice(num * i, num * i + num);
          while(group.length < num) {
            group.push(padding);
          }
          result.push(group);
        });
        return result;
      }

    });

    var inGroupsOf = sugarCore.Array.inGroupsOf;

    function arrayWrap(obj) {
      var arr = [];
      arr.push(obj);
      return arr;
    }

    var arrayWrap_1 = arrayWrap;

    function isRealNaN(obj) {
      // This is only true of NaN
      return obj != null && obj !== obj;
    }

    var isRealNaN_1 = isRealNaN;

    var classToString$3 = coreUtilityAliases.classToString,
        isSerializable$2 = classChecks.isSerializable;

    function serializeInternal(obj, refs, stack) {
      var type = typeof obj, sign = '', className, value, ref;

      // Return up front on
      if (1 / obj === -Infinity) {
        sign = '-';
      }

      // Return quickly for primitives to save cycles
      if (isPrimitive_1(obj, type) && !isRealNaN_1(obj)) {
        return type + sign + obj;
      }

      className = classToString$3(obj);

      if (!isSerializable$2(obj, className)) {
        ref = indexOf_1(refs, obj);
        if (ref === -1) {
          ref = refs.length;
          refs.push(obj);
        }
        return ref;
      } else if (isObjectType_1(obj)) {
        value = serializeDeep(obj, refs, stack) + obj.toString();
      } else if (obj.valueOf) {
        value = obj.valueOf();
      }
      return type + className + sign + value;
    }

    function serializeDeep(obj, refs, stack) {
      var result = '';
      iterateWithCyclicCheck_1(obj, true, stack, function(key, val, cyc, stack) {
        result += cyc ? 'CYC' : key + serializeInternal(val, refs, stack);
      });
      return result;
    }

    var serializeInternal_1 = serializeInternal;

    var isArray$6 = classChecks.isArray,
        hasOwn$5 = coreUtilityAliases.hasOwn;

    function arrayIntersectOrSubtract(arr1, arr2, subtract) {
      var result = [], obj = {}, refs = [];
      if (!isArray$6(arr2)) {
        arr2 = arrayWrap_1(arr2);
      }
      forEach_1(arr2, function(el) {
        obj[serializeInternal_1(el, refs)] = true;
      });
      forEach_1(arr1, function(el) {
        var key = serializeInternal_1(el, refs);
        if (hasOwn$5(obj, key) !== subtract) {
          delete obj[key];
          result.push(el);
        }
      });
      return result;
    }

    var arrayIntersectOrSubtract_1 = arrayIntersectOrSubtract;

    sugarCore.Array.defineInstance({

      'intersect': function(arr1, arr2) {
        return arrayIntersectOrSubtract_1(arr1, arr2, false);
      }

    });

    var intersect = sugarCore.Array.intersect;

    sugarCore.Array.defineInstance({

      'isEmpty': function(arr) {
        return arr.length === 0;
      }

    });

    var isEmpty$1 = sugarCore.Array.isEmpty;

    sugarCore.Array.defineInstance({

      'isEqual': function(a, b) {
        return isEqual_1(a, b);
      }

    });

    var isEqual_1$1 = sugarCore.Array.isEqual;

    sugarCore.Array.defineInstance({

      'last': function(arr, num) {
        if (isUndefined_1(num)) return arr[arr.length - 1];
        var start = arr.length - num < 0 ? 0 : arr.length - num;
        return arr.slice(start);
      }

    });

    var last$1 = sugarCore.Array.last;

    function arrayRemove(arr, f) {
      var matcher = getMatcher_1(f), i = 0;
      while(i < arr.length) {
        if (matcher(arr[i], i, arr)) {
          arr.splice(i, 1);
        } else {
          i++;
        }
      }
      return arr;
    }

    var arrayRemove_1 = arrayRemove;

    sugarCore.Array.defineInstance({

      'remove': function(arr, f) {
        return arrayRemove_1(arr, f);
      }

    });

    var remove$1 = sugarCore.Array.remove;

    sugarCore.Array.defineInstance({

      'removeAt': function(arr, start, end) {
        if (isUndefined_1(start)) return arr;
        if (isUndefined_1(end))   end = start;
        arr.splice(start, end - start + 1);
        return arr;
      }

    });

    var removeAt = sugarCore.Array.removeAt;

    var isBoolean$1 = classChecks.isBoolean,
        min$2 = mathAliases.min;

    sugarCore.Array.defineInstance({

      'sample': function(arr, arg1, arg2) {
        var result = [], num, remove, single;
        if (isBoolean$1(arg1)) {
          remove = arg1;
        } else {
          num = arg1;
          remove = arg2;
        }
        if (isUndefined_1(num)) {
          num = 1;
          single = true;
        }
        if (!remove) {
          arr = arrayClone_1(arr);
        }
        num = min$2(num, arr.length);
        for (var i = 0, index; i < num; i++) {
          index = trunc_1(Math.random() * arr.length);
          result.push(arr[index]);
          arr.splice(index, 1);
        }
        return single ? result[0] : result;
      }

    });

    var sample = sugarCore.Array.sample;

    function arrayShuffle(arr) {
      arr = arrayClone_1(arr);
      var i = arr.length, j, x;
      while(i) {
        j = (Math.random() * i) | 0;
        x = arr[--i];
        arr[i] = arr[j];
        arr[j] = x;
      }
      return arr;
    }

    var arrayShuffle_1 = arrayShuffle;

    sugarCore.Array.defineInstance({

      'shuffle': function(arr) {
        return arrayShuffle_1(arr);
      }

    });

    var shuffle = sugarCore.Array.shuffle;

    function getSortOrder() {
      var order = 'AÁÀÂÃĄBCĆČÇDĎÐEÉÈĚÊËĘFGĞHıIÍÌİÎÏJKLŁMNŃŇÑOÓÒÔPQRŘSŚŠŞTŤUÚÙŮÛÜVWXYÝZŹŻŽÞÆŒØÕÅÄÖ';
      return map_1(order.split(''), function(str) {
        return str + str.toLowerCase();
      }).join('');
    }

    var getSortOrder_1 = getSortOrder;

    var HALF_WIDTH_NINE = 0x39;

    var FULL_WIDTH_NINE = 0xff19;

    var HALF_WIDTH_ZERO$1 = CommonChars.HALF_WIDTH_ZERO,
        FULL_WIDTH_ZERO$1 = CommonChars.FULL_WIDTH_ZERO;

    function codeIsNumeral(code) {
      return (code >= HALF_WIDTH_ZERO$1 && code <= HALF_WIDTH_NINE) ||
             (code >= FULL_WIDTH_ZERO$1 && code <= FULL_WIDTH_NINE);
    }

    var codeIsNumeral_1 = codeIsNumeral;

    function getSortOrderIndex(chr, sortOrder) {
      if (!chr) {
        return null;
      } else {
        return sortOrder.indexOf(chr);
      }
    }

    var getSortOrderIndex_1 = getSortOrderIndex;

    function getSortEquivalents() {
      var equivalents = {};
      forEach_1(spaceSplit_1('AÁÀÂÃÄ CÇ EÉÈÊË IÍÌİÎÏ OÓÒÔÕÖ Sß UÚÙÛÜ'), function(set) {
        var first = set.charAt(0);
        forEach_1(set.slice(1).split(''), function(chr) {
          equivalents[chr] = first;
          equivalents[chr.toLowerCase()] = first.toLowerCase();
        });
      });
      return equivalents;
    }

    var getSortEquivalents_1 = getSortEquivalents;

    var getOwn$3 = coreUtilityAliases.getOwn;

    function getCollationCharacter(str, index, sortEquivalents) {
      var chr = str.charAt(index);
      return getOwn$3(sortEquivalents, chr) || chr;
    }

    var getCollationCharacter_1 = getCollationCharacter;

    function getCollationReadyString(str, sortIgnore, sortIgnoreCase) {
      if (sortIgnoreCase) {
        str = str.toLowerCase();
      }
      if (sortIgnore) {
        str = str.replace(sortIgnore, '');
      }
      return str;
    }

    var getCollationReadyString_1 = getCollationReadyString;

    var sugarArray$1 = namespaceAliases.sugarArray;

    var ARRAY_OPTIONS = {
      'sortIgnore':      null,
      'sortNatural':     true,
      'sortIgnoreCase':  true,
      'sortOrder':       getSortOrder_1(),
      'sortCollate':     collateStrings,
      'sortEquivalents': getSortEquivalents_1()
    };

    var _arrayOptions = defineOptionsAccessor_1(sugarArray$1, ARRAY_OPTIONS);

    function collateStrings(a, b) {
      var aValue, bValue, aChar, bChar, aEquiv, bEquiv, index = 0, tiebreaker = 0;

      var sortOrder       = _arrayOptions('sortOrder');
      var sortIgnore      = _arrayOptions('sortIgnore');
      var sortNatural     = _arrayOptions('sortNatural');
      var sortIgnoreCase  = _arrayOptions('sortIgnoreCase');
      var sortEquivalents = _arrayOptions('sortEquivalents');

      a = getCollationReadyString_1(a, sortIgnore, sortIgnoreCase);
      b = getCollationReadyString_1(b, sortIgnore, sortIgnoreCase);

      do {

        aChar  = getCollationCharacter_1(a, index, sortEquivalents);
        bChar  = getCollationCharacter_1(b, index, sortEquivalents);
        aValue = getSortOrderIndex_1(aChar, sortOrder);
        bValue = getSortOrderIndex_1(bChar, sortOrder);

        if (aValue === -1 || bValue === -1) {
          aValue = a.charCodeAt(index) || null;
          bValue = b.charCodeAt(index) || null;
          if (sortNatural && codeIsNumeral_1(aValue) && codeIsNumeral_1(bValue)) {
            aValue = stringToNumber_1(a.slice(index));
            bValue = stringToNumber_1(b.slice(index));
          }
        } else {
          aEquiv = aChar !== a.charAt(index);
          bEquiv = bChar !== b.charAt(index);
          if (aEquiv !== bEquiv && tiebreaker === 0) {
            tiebreaker = aEquiv - bEquiv;
          }
        }
        index += 1;
      } while(aValue != null && bValue != null && aValue === bValue);
      if (aValue === bValue) return tiebreaker;
      return aValue - bValue;
    }

    var ARRAY_OPTIONS_1 = {
      ARRAY_OPTIONS: ARRAY_OPTIONS,
      _arrayOptions: _arrayOptions
    };

    var isString$a = classChecks.isString,
        isArray$7 = classChecks.isArray,
        _arrayOptions$1 = ARRAY_OPTIONS_1._arrayOptions;

    function compareValue(aVal, bVal) {
      var cmp, i, collate;
      if (isString$a(aVal) && isString$a(bVal)) {
        collate = _arrayOptions$1('sortCollate');
        return collate(aVal, bVal);
      } else if (isArray$7(aVal) && isArray$7(bVal)) {
        if (aVal.length < bVal.length) {
          return -1;
        } else if (aVal.length > bVal.length) {
          return 1;
        } else {
          for(i = 0; i < aVal.length; i++) {
            cmp = compareValue(aVal[i], bVal[i]);
            if (cmp !== 0) {
              return cmp;
            }
          }
          return 0;
        }
      }
      return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
    }

    var compareValue_1 = compareValue;

    sugarCore.Array.defineInstance({

      'sortBy': function(arr, map, desc) {
        arr.sort(function(a, b) {
          var aProperty = mapWithShortcuts_1(a, map, arr, [a]);
          var bProperty = mapWithShortcuts_1(b, map, arr, [b]);
          return compareValue_1(aProperty, bProperty) * (desc ? -1 : 1);
        });
        return arr;
      }

    });

    var sortBy = sugarCore.Array.sortBy;

    sugarCore.Array.defineInstance({

      'subtract': function(arr, item) {
        return arrayIntersectOrSubtract_1(arr, item, true);
      }

    });

    var subtract = sugarCore.Array.subtract;

    sugarCore.Array.defineInstance({

      'to': function(arr, num) {
        if (isUndefined_1(num)) num = arr.length;
        return arr.slice(0, num);
      }

    });

    var to$1 = sugarCore.Array.to;

    var hasOwn$6 = coreUtilityAliases.hasOwn;

    function arrayUnique(arr, map) {
      var result = [], obj = {}, refs = [];
      forEach_1(arr, function(el, i) {
        var transformed = map ? mapWithShortcuts_1(el, map, arr, [el, i, arr]) : el;
        var key = serializeInternal_1(transformed, refs);
        if (!hasOwn$6(obj, key)) {
          result.push(el);
          obj[key] = true;
        }
      });
      return result;
    }

    var arrayUnique_1 = arrayUnique;

    var HAS_CONCAT_BUG = !('0' in [].concat(undefined).concat());

    var isArray$8 = classChecks.isArray;

    function arraySafeConcat(arr, arg) {
      var result = arrayClone_1(arr), len = result.length, arr2;
      arr2 = isArray$8(arg) ? arg : [arg];
      result.length += arr2.length;
      forEach_1(arr2, function(el, i) {
        result[len + i] = el;
      });
      return result;
    }

    var arraySafeConcat_1 = arraySafeConcat;

    function arrayConcat(arr1, arr2) {
      // istanbul ignore if
      if (HAS_CONCAT_BUG) {
        return arraySafeConcat_1(arr1, arr2);
      }
      return arr1.concat(arr2);
    }

    var arrayConcat_1 = arrayConcat;

    sugarCore.Array.defineInstance({

      'union': function(arr1, arr2) {
        return arrayUnique_1(arrayConcat_1(arr1, arr2));
      }

    });

    var union = sugarCore.Array.union;

    sugarCore.Array.defineInstance({

      'unique': function(arr, map) {
        return arrayUnique_1(arr, map);
      }

    });

    var unique = sugarCore.Array.unique;

    sugarCore.Array.defineInstanceWithArguments({

      'zip': function(arr, args) {
        return map_1(arr, function(el, i) {
          return [el].concat(map_1(args, function(k) {
            return (i in k) ? k[i] : null;
          }));
        });
      }

    });

    var zip = sugarCore.Array.zip;

    sugarCore.Array.alias('insert', 'append');

    var insert$2 = sugarCore.Array.insert;

    var getOption$1 = sugarCore.Array.getOption;

    var setOption$1 = sugarCore.Array.setOption;

    var isArray$9 = classChecks.isArray,
        forEachProperty$6 = coreUtilityAliases.forEachProperty;

    function enumerateWithMapping(obj, map, fn) {
      var arrayIndexes = isArray$9(obj);
      forEachProperty$6(obj, function(val, key) {
        if (arrayIndexes) {
          if (!isArrayIndex_1(key)) {
            return;
          }
          key = +key;
        }
        var mapped = mapWithShortcuts_1(val, map, obj, [val, key, obj]);
        fn(mapped, key);
      });
    }

    var enumerateWithMapping_1 = enumerateWithMapping;

    function average(obj, map) {
      var sum = 0, count = 0;
      enumerateWithMapping_1(obj, map, function(val) {
        sum += val;
        count++;
      });
      // Prevent divide by 0
      return sum / (count || 1);
    }

    var average_1 = average;

    sugarCore.Object.defineInstanceAndStatic({

      'average': function(obj, map) {
        return average_1(obj, map);
      }

    });

    var average_1$1 = sugarCore.Object.average;

    var forEachProperty$7 = coreUtilityAliases.forEachProperty;

    function objectCount(obj, f) {
      var matcher = getMatcher_1(f), count = 0;
      forEachProperty$7(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          count++;
        }
      });
      return count;
    }

    var objectCount_1 = objectCount;

    sugarCore.Object.defineInstanceAndStatic({

      'count': function(obj, f) {
        return objectCount_1(obj, f);
      }

    });

    var count = sugarCore.Object.count;

    function wrapObjectMatcher(name) {
      var nativeFn = Array.prototype[name];
      return function(obj, f) {
        var matcher = getMatcher_1(f);
        return nativeFn.call(getKeys_1(obj), function(key) {
          return matcher(obj[key], key, obj);
        });
      };
    }

    var wrapObjectMatcher_1 = wrapObjectMatcher;

    var objectMatchers = {
      objectSome: wrapObjectMatcher_1('some'),
      objectFind: wrapObjectMatcher_1('find'),
      objectEvery: wrapObjectMatcher_1('every')
    };

    var objectEvery = objectMatchers.objectEvery;

    sugarCore.Object.defineInstanceAndStatic({

      'every': objectEvery

    });

    var every = sugarCore.Object.every;

    var forEachProperty$8 = coreUtilityAliases.forEachProperty;

    function objectFilter(obj, f) {
      var matcher = getMatcher_1(f), result = {};
      forEachProperty$8(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          result[key] = val;
        }
      });
      return result;
    }

    var objectFilter_1 = objectFilter;

    sugarCore.Object.defineInstanceAndStatic({

      'filter': function(obj, f) {
        return objectFilter_1(obj, f);
      }

    });

    var filter$1 = sugarCore.Object.filter;

    var objectFind = objectMatchers.objectFind;

    sugarCore.Object.defineInstanceAndStatic({

      'find': objectFind

    });

    var find = sugarCore.Object.find;

    var isFunction$4 = classChecks.isFunction;

    function assertCallable(obj) {
      if (!isFunction$4(obj)) {
        throw new TypeError('Function is not callable');
      }
    }

    var assertCallable_1 = assertCallable;

    var forEachProperty$9 = coreUtilityAliases.forEachProperty;

    function objectForEach(obj, fn) {
      assertCallable_1(fn);
      forEachProperty$9(obj, function(val, key) {
        fn(val, key, obj);
      });
      return obj;
    }

    var objectForEach_1 = objectForEach;

    sugarCore.Object.defineInstanceAndStatic({

      'forEach': function(obj, eachFn) {
        return objectForEach_1(obj, eachFn);
      }

    });

    var forEach$2 = sugarCore.Object.forEach;

    function getReducedMinMaxResult(result, obj, all, asObject) {
      if (asObject && all) {
        // The method has returned an array of keys so use this array
        // to build up the resulting object in the form we want it in.
        return result.reduce(function(o, key) {
          o[key] = obj[key];
          return o;
        }, {});
      } else if (result && !all) {
        result = result[0];
      }
      return result;
    }

    var getReducedMinMaxResult_1 = getReducedMinMaxResult;

    var isBoolean$2 = classChecks.isBoolean;

    function getMinOrMax(obj, arg1, arg2, max, asObject) {
      var result = [], pushVal, edge, all, map;
      if (isBoolean$2(arg1)) {
        all = arg1;
        map = arg2;
      } else {
        map = arg1;
      }
      enumerateWithMapping_1(obj, map, function(val, key) {
        if (isUndefined_1(val)) {
          throw new TypeError('Cannot compare with undefined');
        }
        pushVal = asObject ? key : obj[key];
        if (val === edge) {
          result.push(pushVal);
        } else if (isUndefined_1(edge) || (max && val > edge) || (!max && val < edge)) {
          result = [pushVal];
          edge = val;
        }
      });
      return getReducedMinMaxResult_1(result, obj, all, asObject);
    }

    var getMinOrMax_1 = getMinOrMax;

    var isBoolean$3 = classChecks.isBoolean,
        getOwn$4 = coreUtilityAliases.getOwn,
        forEachProperty$a = coreUtilityAliases.forEachProperty;

    function getLeastOrMost(obj, arg1, arg2, most, asObject) {
      var group = {}, refs = [], minMaxResult, result, all, map;
      if (isBoolean$3(arg1)) {
        all = arg1;
        map = arg2;
      } else {
        map = arg1;
      }
      enumerateWithMapping_1(obj, map, function(val, key) {
        var groupKey = serializeInternal_1(val, refs);
        var arr = getOwn$4(group, groupKey) || [];
        arr.push(asObject ? key : obj[key]);
        group[groupKey] = arr;
      });
      minMaxResult = getMinOrMax_1(group, !!all, 'length', most, true);
      if (all) {
        result = [];
        // Flatten result
        forEachProperty$a(minMaxResult, function(val) {
          result = result.concat(val);
        });
      } else {
        result = getOwn$4(group, minMaxResult);
      }
      return getReducedMinMaxResult_1(result, obj, all, asObject);
    }

    var getLeastOrMost_1 = getLeastOrMost;

    sugarCore.Object.defineInstanceAndStatic({

      'least': function(obj, all, map) {
        return getLeastOrMost_1(obj, all, map, false, true);
      }

    });

    var least = sugarCore.Object.least;

    var forEachProperty$b = coreUtilityAliases.forEachProperty;

    function objectMap(obj, map) {
      var result = {};
      forEachProperty$b(obj, function(val, key) {
        result[key] = mapWithShortcuts_1(val, map, obj, [val, key, obj]);
      });
      return result;
    }

    var objectMap_1 = objectMap;

    sugarCore.Object.defineInstanceAndStatic({

      'map': function(obj, map) {
        return objectMap_1(obj, map);
      }

    });

    var map$1 = sugarCore.Object.map;

    sugarCore.Object.defineInstanceAndStatic({

      'max': function(obj, all, map) {
        return getMinOrMax_1(obj, all, map, true, true);
      }

    });

    var max$6 = sugarCore.Object.max;

    function median(obj, map) {
      var result = [], middle, len;
      enumerateWithMapping_1(obj, map, function(val) {
        result.push(val);
      });
      len = result.length;
      if (!len) return 0;
      result.sort(function(a, b) {
        // IE7 will throw errors on non-numbers!
        return (a || 0) - (b || 0);
      });
      middle = trunc_1(len / 2);
      return len % 2 ? result[middle] : (result[middle - 1] + result[middle]) / 2;
    }

    var median_1 = median;

    sugarCore.Object.defineInstanceAndStatic({

      'median': function(obj, map) {
        return median_1(obj, map);
      }

    });

    var median_1$1 = sugarCore.Object.median;

    sugarCore.Object.defineInstanceAndStatic({

      'min': function(obj, all, map) {
        return getMinOrMax_1(obj, all, map, false, true);
      }

    });

    var min$3 = sugarCore.Object.min;

    sugarCore.Object.defineInstanceAndStatic({

      'most': function(obj, all, map) {
        return getLeastOrMost_1(obj, all, map, true, true);
      }

    });

    var most = sugarCore.Object.most;

    var objectSome = objectMatchers.objectSome;

    function objectNone(obj, f) {
      return !objectSome(obj, f);
    }

    var objectNone_1 = objectNone;

    sugarCore.Object.defineInstanceAndStatic({

      'none': function(obj, f) {
        return objectNone_1(obj, f);
      }

    });

    var none = sugarCore.Object.none;

    var forEachProperty$c = coreUtilityAliases.forEachProperty;

    function objectReduce(obj, fn, acc) {
      var init = isDefined_1(acc);
      forEachProperty$c(obj, function(val, key) {
        if (!init) {
          acc = val;
          init = true;
          return;
        }
        acc = fn(acc, val, key, obj);
      });
      return acc;
    }

    var objectReduce_1 = objectReduce;

    sugarCore.Object.defineInstanceAndStatic({

      'reduce': function(obj, fn, init) {
        return objectReduce_1(obj, fn, init);
      }

    });

    var reduce = sugarCore.Object.reduce;

    var objectSome$1 = objectMatchers.objectSome;

    sugarCore.Object.defineInstanceAndStatic({

      'some': objectSome$1

    });

    var some = sugarCore.Object.some;

    function sum(obj, map) {
      var sum = 0;
      enumerateWithMapping_1(obj, map, function(val) {
        sum += val;
      });
      return sum;
    }

    var sum_1 = sum;

    sugarCore.Object.defineInstanceAndStatic({

      'sum': function(obj, map) {
        return sum_1(obj, map);
      }

    });

    var sum_1$1 = sugarCore.Object.sum;

    sugarCore.Array.defineInstance({

      'average': function(arr, map) {
        return average_1(arr, map);
      }

    });

    var average_1$2 = sugarCore.Array.average;

    var isFunction$5 = classChecks.isFunction;

    function enhancedMatching(f) {
      var matcher;
      if (isFunction$5(f)) {
        return f;
      }
      matcher = getMatcher_1(f);
      return function(el, i, arr) {
        return matcher(el, i, arr);
      };
    }

    var enhancedMatching_1 = enhancedMatching;

    function assertArgument(exists) {
      if (!exists) {
        throw new TypeError('Argument required');
      }
    }

    var assertArgument_1 = assertArgument;

    function wrapNativeArrayMethod(methodName, wrapper) {
      var nativeFn = Array.prototype[methodName];
      return function(arr, f, context, argsLen) {
        var args = new Array(2);
        assertArgument_1(argsLen > 0);
        args[0] = wrapper(f, context);
        args[1] = context;
        return nativeFn.apply(arr, args);
      };
    }

    var wrapNativeArrayMethod_1 = wrapNativeArrayMethod;

    function buildEnhancedMatching(name) {
      return wrapNativeArrayMethod_1(name, enhancedMatching_1);
    }

    var buildEnhancedMatching_1 = buildEnhancedMatching;

    var enhancedMatcherMethods = {
      enhancedFind: buildEnhancedMatching_1('find'),
      enhancedSome: buildEnhancedMatching_1('some'),
      enhancedEvery: buildEnhancedMatching_1('every'),
      enhancedFilter: buildEnhancedMatching_1('filter'),
      enhancedFindIndex: buildEnhancedMatching_1('findIndex')
    };

    var enhancedFilter = enhancedMatcherMethods.enhancedFilter;

    function arrayCount(arr, f) {
      if (isUndefined_1(f)) {
        return arr.length;
      }
      return enhancedFilter.apply(this, arguments).length;
    }

    var arrayCount_1 = arrayCount;

    sugarCore.Array.defineInstance({

      'count': fixArgumentLength_1(arrayCount_1)

    });

    var count$1 = sugarCore.Array.count;

    var ARRAY_ENHANCEMENTS_FLAG = 'enhanceArray';

    var enhancedEvery = enhancedMatcherMethods.enhancedEvery;

    sugarCore.Array.defineInstance({

      'every': fixArgumentLength_1(enhancedEvery)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var every$1 = sugarCore.Array.every;

    var isFunction$6 = classChecks.isFunction;

    function enhancedMapping(map, context) {
      if (isFunction$6(map)) {
        return map;
      } else if (map) {
        return function(el, i, arr) {
          return mapWithShortcuts_1(el, map, context, [el, i, arr]);
        };
      }
    }

    var enhancedMapping_1 = enhancedMapping;

    var forEachProperty$d = coreUtilityAliases.forEachProperty,
        defineInstanceWithArguments = methodDefineAliases.defineInstanceWithArguments,
        sugarArray$2 = namespaceAliases.sugarArray,
        min$4 = mathAliases.min,
        max$7 = mathAliases.max,
        isBoolean$4 = classChecks.isBoolean;

    function buildFromIndexMethods() {

      var methods = {
        'forEach': {
          base: forEachAsNative
        },
        'map': {
          wrapper: enhancedMapping_1
        },
        'some every': {
          wrapper: enhancedMatching_1
        },
        'findIndex': {
          wrapper: enhancedMatching_1,
          result: indexResult
        },
        'reduce': {
          apply: applyReduce
        },
        'filter find': {
          wrapper: enhancedMatching_1
        },
        'reduceRight': {
          apply: applyReduce,
          slice: sliceArrayFromRight,
          clamp: clampStartIndexFromRight
        }
      };

      forEachProperty$d(methods, function(opts, key) {
        forEach_1(spaceSplit_1(key), function(baseName) {
          var methodName = baseName + 'FromIndex';
          var fn = createFromIndexWithOptions(baseName, opts);
          defineInstanceWithArguments(sugarArray$2, methodName, fn);
        });
      });

      function forEachAsNative(fn) {
        forEach_1(this, fn);
      }

      // Methods like filter and find have a direct association between the value
      // returned by the callback and the element of the current iteration. This
      // means that when looping, array elements must match the actual index for
      // which they are being called, so the array must be sliced. This is not the
      // case for methods like forEach and map, which either do not use return
      // values or use them in a way that simply getting the element at a shifted
      // index will not affect the final return value. However, these methods will
      // still fail on sparse arrays, so always slicing them here. For example, if
      // "forEachFromIndex" were to be called on [1,,2] from index 1, although the
      // actual index 1 would itself would be skipped, when the array loops back to
      // index 0, shifting it by adding 1 would result in the element for that
      // iteration being undefined. For shifting to work, all gaps in the array
      // between the actual index and the shifted index would have to be accounted
      // for. This is infeasible and is easily solved by simply slicing the actual
      // array instead so that gaps align. Note also that in the case of forEach,
      // we are using the internal function which handles sparse arrays in a way
      // that does not increment the index, and so is highly optimized compared to
      // the others here, which are simply going through the native implementation.
      function sliceArrayFromLeft(arr, startIndex, loop) {
        var result = arr;
        if (startIndex) {
          result = arr.slice(startIndex);
          if (loop) {
            result = result.concat(arr.slice(0, startIndex));
          }
        }
        return result;
      }

      // When iterating from the right, indexes are effectively shifted by 1.
      // For example, iterating from the right from index 2 in an array of 3
      // should also include the last element in the array. This matches the
      // "lastIndexOf" method which also iterates from the right.
      function sliceArrayFromRight(arr, startIndex, loop) {
        if (!loop) {
          startIndex += 1;
          arr = arr.slice(0, max$7(0, startIndex));
        }
        return arr;
      }

      function clampStartIndex(startIndex, len) {
        return min$4(len, max$7(0, startIndex));
      }

      // As indexes are shifted by 1 when starting from the right, clamping has to
      // go down to -1 to accommodate the full range of the sliced array.
      function clampStartIndexFromRight(startIndex, len) {
        return min$4(len, max$7(-1, startIndex));
      }

      function applyReduce(arr, startIndex, fn, context, len, loop) {
        return function(acc, val, i) {
          i = getNormalizedIndex_1(i + startIndex, len, loop);
          return fn.call(arr, acc, val, i, arr);
        };
      }

      function applyEach(arr, startIndex, fn, context, len, loop) {
        return function(el, i) {
          i = getNormalizedIndex_1(i + startIndex, len, loop);
          return fn.call(context, arr[i], i, arr);
        };
      }

      function indexResult(result, startIndex, len) {
        if (result !== -1) {
          result = (result + startIndex) % len;
        }
        return result;
      }

      function createFromIndexWithOptions(methodName, opts) {

        var baseFn = opts.base || Array.prototype[methodName],
            applyCallback = opts.apply || applyEach,
            sliceArray = opts.slice || sliceArrayFromLeft,
            clampIndex = opts.clamp || clampStartIndex,
            getResult = opts.result,
            wrapper = opts.wrapper;

        return function(arr, startIndex, args) {
          var callArgs = [], argIndex = 0, lastArg, result, len, loop, fn;
          len = arr.length;
          if (isBoolean$4(args[0])) {
            loop = args[argIndex++];
          }
          fn = args[argIndex++];
          lastArg = args[argIndex];
          if (startIndex < 0) {
            startIndex += len;
          }
          startIndex = clampIndex(startIndex, len);
          assertArgument_1(args.length);
          fn = wrapper ? wrapper(fn, lastArg) : fn;
          callArgs.push(applyCallback(arr, startIndex, fn, lastArg, len, loop));
          if (lastArg) {
            callArgs.push(lastArg);
          }
          result = baseFn.apply(sliceArray(arr, startIndex, loop), callArgs);
          if (getResult) {
            result = getResult(result, startIndex, len);
          }
          return result;
        };
      }
    }

    var buildFromIndexMethods_1 = buildFromIndexMethods;

    buildFromIndexMethods_1();

    var everyFromIndex = sugarCore.Array.everyFromIndex;

    var enhancedFilter$1 = enhancedMatcherMethods.enhancedFilter;

    sugarCore.Array.defineInstance({

      'filter': fixArgumentLength_1(enhancedFilter$1)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var filter$2 = sugarCore.Array.filter;

    var filterFromIndex = sugarCore.Array.filterFromIndex;

    var enhancedFind = enhancedMatcherMethods.enhancedFind;

    sugarCore.Array.defineInstance({

      'find': fixArgumentLength_1(enhancedFind)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var find$1 = sugarCore.Array.find;

    var findFromIndex = sugarCore.Array.findFromIndex;

    var enhancedFindIndex = enhancedMatcherMethods.enhancedFindIndex;

    sugarCore.Array.defineInstance({

      'findIndex': fixArgumentLength_1(enhancedFindIndex)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var findIndex = sugarCore.Array.findIndex;

    var findIndexFromIndex = sugarCore.Array.findIndexFromIndex;

    var forEachFromIndex = sugarCore.Array.forEachFromIndex;

    sugarCore.Array.defineInstance({

      'least': function(arr, all, map) {
        return getLeastOrMost_1(arr, all, map);
      }

    });

    var least$1 = sugarCore.Array.least;

    function buildEnhancedMapping(name) {
      return wrapNativeArrayMethod_1(name, enhancedMapping_1);
    }

    var buildEnhancedMapping_1 = buildEnhancedMapping;

    var enhancedMap = buildEnhancedMapping_1('map');

    sugarCore.Array.defineInstance({

      'map': fixArgumentLength_1(enhancedMap)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var map$2 = sugarCore.Array.map;

    var mapFromIndex = sugarCore.Array.mapFromIndex;

    sugarCore.Array.defineInstance({

      'max': function(arr, all, map) {
        return getMinOrMax_1(arr, all, map, true);
      }

    });

    var max$8 = sugarCore.Array.max;

    sugarCore.Array.defineInstance({

      'median': function(arr, map) {
        return median_1(arr, map);
      }

    });

    var median_1$2 = sugarCore.Array.median;

    sugarCore.Array.defineInstance({

      'min': function(arr, all, map) {
        return getMinOrMax_1(arr, all, map);
      }

    });

    var min$5 = sugarCore.Array.min;

    sugarCore.Array.defineInstance({

      'most': function(arr, all, map) {
        return getLeastOrMost_1(arr, all, map, true);
      }

    });

    var most$1 = sugarCore.Array.most;

    var enhancedSome = enhancedMatcherMethods.enhancedSome;

    function arrayNone() {
      return !enhancedSome.apply(this, arguments);
    }

    var arrayNone_1 = arrayNone;

    sugarCore.Array.defineInstance({

      'none': fixArgumentLength_1(arrayNone_1)

    });

    var none$1 = sugarCore.Array.none;

    var reduceFromIndex = sugarCore.Array.reduceFromIndex;

    var reduceRightFromIndex = sugarCore.Array.reduceRightFromIndex;

    var enhancedSome$1 = enhancedMatcherMethods.enhancedSome;

    sugarCore.Array.defineInstance({

      'some': fixArgumentLength_1(enhancedSome$1)

    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);

    var some$1 = sugarCore.Array.some;

    var someFromIndex = sugarCore.Array.someFromIndex;

    sugarCore.Array.defineInstance({

      'sum': function(arr, map) {
        return sum_1(arr, map);
      }

    });

    var sum_1$2 = sugarCore.Array.sum;

    var getOwnPropertyNames = Object.getOwnPropertyNames;

    var classToString$4 = coreUtilityAliases.classToString,
        isDate$2 = classChecks.isDate,
        isRegExp$4 = classChecks.isRegExp,
        isArray$a = classChecks.isArray;

    function getNewObjectForMerge(source) {
      var klass = classToString$4(source);
      // Primitive types, dates, and regexes have no "empty" state. If they exist
      // at all, then they have an associated value. As we are only creating new
      // objects when they don't exist in the target, these values can come alone
      // for the ride when created.
      if (isArray$a(source, klass)) {
        return [];
      } else if (isPlainObject_1(source, klass)) {
        return {};
      } else if (isDate$2(source, klass)) {
        return new Date(source.getTime());
      } else if (isRegExp$4(source, klass)) {
        return RegExp(source.source, getRegExpFlags_1(source));
      } else if (isPrimitive_1(source && source.valueOf())) {
        return source;
      }
      // If the object is not of a known type, then simply merging its
      // properties into a plain object will result in something different
      // (it will not respond to instanceof operator etc). Similarly we don't
      // want to call a constructor here as we can't know for sure what the
      // original constructor was called with (Events etc), so throw an
      // error here instead. Non-standard types can be handled if either they
      // already exist and simply have their properties merged, if the merge
      // is not deep so their references will simply be copied over, or if a
      // resolve function is used to assist the merge.
      throw new TypeError('Must be a basic data type');
    }

    var getNewObjectForMerge_1 = getNewObjectForMerge;

    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

    function iterateOverKeys(getFn, obj, fn, hidden) {
      var keys = getFn(obj), desc;
      for (var i = 0, key; key = keys[i]; i++) {
        desc = getOwnPropertyDescriptor(obj, key);
        if (desc.enumerable || hidden) {
          fn(obj[key], key);
        }
      }
    }

    var iterateOverKeys_1 = iterateOverKeys;

    var getOwnPropertySymbols = Object.getOwnPropertySymbols;

    var forEachProperty$e = coreUtilityAliases.forEachProperty;

    function iterateOverProperties(hidden, obj, fn) {
      if (getOwnPropertyNames && hidden) {
        iterateOverKeys_1(getOwnPropertyNames, obj, fn, hidden);
      } else {
        forEachProperty$e(obj, fn);
      }
      if (getOwnPropertySymbols) {
        iterateOverKeys_1(getOwnPropertySymbols, obj, fn, hidden);
      }
    }

    var iterateOverProperties_1 = iterateOverProperties;

    var NO_KEYS_IN_STRING_OBJECTS = !('0' in Object('a'));

    function forceStringCoercion(obj) {
      var i = 0, chr;
      while (chr = obj.charAt(i)) {
        obj[i++] = chr;
      }
    }

    var forceStringCoercion_1 = forceStringCoercion;

    var isString$b = classChecks.isString;

    function coercePrimitiveToObject(obj) {
      if (isPrimitive_1(obj)) {
        obj = Object(obj);
      }
      // istanbul ignore next
      if (NO_KEYS_IN_STRING_OBJECTS && isString$b(obj)) {
        forceStringCoercion_1(obj);
      }
      return obj;
    }

    var coercePrimitiveToObject_1 = coercePrimitiveToObject;

    var defineProperty = coreUtilityAliases.defineProperty;

    function mergeByPropertyDescriptor(target, source, prop, sourceVal) {
      var descriptor = getOwnPropertyDescriptor(source, prop);
      if (isDefined_1(descriptor.value)) {
        descriptor.value = sourceVal;
      }
      defineProperty(target, prop, descriptor);
    }

    var mergeByPropertyDescriptor_1 = mergeByPropertyDescriptor;

    var isDate$3 = classChecks.isDate,
        isRegExp$5 = classChecks.isRegExp,
        isFunction$7 = classChecks.isFunction,
        getOwn$5 = coreUtilityAliases.getOwn;

    function objectMerge(target, source, deep, resolve, hidden, descriptor) {
      var resolveByFunction = isFunction$7(resolve), resolveConflicts = resolve !== false;

      if (isUndefined_1(target)) {
        target = getNewObjectForMerge_1(source);
      } else if (resolveConflicts && isDate$3(target) && isDate$3(source)) {
        // A date's timestamp is a property that can only be reached through its
        // methods, so actively set it up front if both are dates.
        target.setTime(source.getTime());
      }

      if (isPrimitive_1(target)) {
        // Will not merge into a primitive type, so simply override.
        return source;
      }

      // If the source object is a primitive
      // type then coerce it into an object.
      if (isPrimitive_1(source)) {
        source = coercePrimitiveToObject_1(source);
      }

      iterateOverProperties_1(hidden, source, function(val, key) {
        var sourceVal, targetVal, resolved, goDeep, result;

        sourceVal = source[key];

        // We are iterating over properties of the source, so hasOwnProperty on
        // it is guaranteed to always be true. However, the target may happen to
        // have properties in its prototype chain that should not be considered
        // as conflicts.
        targetVal = getOwn$5(target, key);

        if (resolveByFunction) {
          result = resolve(key, targetVal, sourceVal, target, source);
          if (isUndefined_1(result)) {
            // Result is undefined so do not merge this property.
            return;
          } else if (isDefined_1(result) && result !== sugarCore) {
            // If the source returns anything except undefined, then the conflict
            // has been resolved, so don't continue traversing into the object. If
            // the returned value is the Sugar global object, then allowing Sugar
            // to resolve the conflict, so continue on.
            sourceVal = result;
            resolved = true;
          }
        } else if (isUndefined_1(sourceVal)) {
          // Will not merge undefined.
          return;
        }

        // Regex properties are read-only, so intentionally disallowing deep
        // merging for now. Instead merge by reference even if deep.
        goDeep = !resolved && deep && isObjectType_1(sourceVal) && !isRegExp$5(sourceVal);

        if (!goDeep && !resolveConflicts && isDefined_1(targetVal)) {
          return;
        }

        if (goDeep) {
          sourceVal = objectMerge(targetVal, sourceVal, deep, resolve, hidden, descriptor);
        }

        // getOwnPropertyNames is standing in as
        // a test for property descriptor support
        if (getOwnPropertyNames && descriptor) {
          mergeByPropertyDescriptor_1(target, source, key, sourceVal);
        } else {
          target[key] = sourceVal;
        }

      });
      return target;
    }

    var objectMerge_1 = objectMerge;

    function clone$1(source, deep) {
      var target = getNewObjectForMerge_1(source);
      return objectMerge_1(target, source, deep, true, true, true);
    }

    var clone_1 = clone$1;

    function mergeWithOptions(target, source, opts) {
      opts = opts || {};
      return objectMerge_1(target, source, opts.deep, opts.resolve, opts.hidden, opts.descriptor);
    }

    var mergeWithOptions_1 = mergeWithOptions;

    sugarCore.Object.defineInstanceAndStatic({

      'add': function(obj1, obj2, opts) {
        return mergeWithOptions_1(clone_1(obj1), obj2, opts);
      }

    });

    var add$1 = sugarCore.Object.add;

    var isArray$b = classChecks.isArray;

    function mergeAll(target, sources, opts) {
      if (!isArray$b(sources)) {
        sources = [sources];
      }
      forEach_1(sources, function(source) {
        return mergeWithOptions_1(target, source, opts);
      });
      return target;
    }

    var mergeAll_1 = mergeAll;

    sugarCore.Object.defineInstanceAndStatic({

      'addAll': function(obj, sources, opts) {
        return mergeAll_1(clone_1(obj), sources, opts);
      }

    });

    var addAll = sugarCore.Object.addAll;

    sugarCore.Object.defineInstanceAndStatic({

      'clone': function(obj, deep) {
        return clone_1(obj, deep);
      }

    });

    var clone_1$1 = sugarCore.Object.clone;

    function defaults(target, sources, opts) {
      opts = opts || {};
      opts.resolve = opts.resolve || false;
      return mergeAll_1(target, sources, opts);
    }

    var defaults_1 = defaults;

    sugarCore.Object.defineInstanceAndStatic({

      'defaults': function(target, sources, opts) {
        return defaults_1(target, sources, opts);
      }

    });

    var defaults_1$1 = sugarCore.Object.defaults;

    var forEachProperty$f = coreUtilityAliases.forEachProperty;

    function objectExclude(obj, f) {
      var result = {};
      var matcher = getMatcher_1(f);
      forEachProperty$f(obj, function(val, key) {
        if (!matcher(val, key, obj)) {
          result[key] = val;
        }
      });
      return result;
    }

    var objectExclude_1 = objectExclude;

    sugarCore.Object.defineInstanceAndStatic({

      'exclude': function(obj, f) {
        return objectExclude_1(obj, f);
      }

    });

    var exclude$1 = sugarCore.Object.exclude;

    var DEEP_QUERY_STRING_REG = /^(.+?)(\[.*\])$/;

    var NON_DECIMAL_REG = /[^\d.-]/;

    function stringIsDecimal(str) {
      return str !== '' && !NON_DECIMAL_REG.test(str);
    }

    var stringIsDecimal_1 = stringIsDecimal;

    var getOwn$6 = coreUtilityAliases.getOwn,
        isArray$c = classChecks.isArray;

    function getQueryValueAuto(obj, key, val) {
      if (!val) {
        return null;
      } else if (val === 'true') {
        return true;
      } else if (val === 'false') {
        return false;
      }
      var num = +val;
      if (!isNaN(num) && stringIsDecimal_1(val)) {
        return num;
      }
      var existing = getOwn$6(obj, key);
      if (val && existing) {
        return isArray$c(existing) ? existing.concat(val) : [existing, val];
      }
      return val;
    }

    var getQueryValueAuto_1 = getQueryValueAuto;

    function setQueryProperty(obj, key, val, auto, transform) {
      var fnValue;
      if (transform) {
        fnValue = transform(val, key, obj);
      }
      if (isDefined_1(fnValue)) {
        val = fnValue;
      } else if (auto) {
        val = getQueryValueAuto_1(obj, key, val);
      }
      obj[key] = val;
    }

    var setQueryProperty_1 = setQueryProperty;

    function mapQuerySeparatorToKeys(key, separator) {
      var split = key.split(separator), result = split[0];
      for (var i = 1, len = split.length; i < len; i++) {
        result += '[' + split[i] + ']';
      }
      return result;
    }

    var mapQuerySeparatorToKeys_1 = mapQuerySeparatorToKeys;

    var hasOwn$7 = coreUtilityAliases.hasOwn,
        getOwn$7 = coreUtilityAliases.getOwn;

    function parseDeepQueryComponent(obj, match, val, deep, auto, separator, transform) {
      var key = match[1];
      var inner = match[2].slice(1, -1).split('][');
      forEach_1(inner, function(k) {
        if (!hasOwn$7(obj, key)) {
          obj[key] = k ? {} : [];
        }
        obj = getOwn$7(obj, key);
        key = k ? k : obj.length.toString();
      });
      setQueryProperty_1(obj, key, val, auto, transform);
    }

    var parseDeepQueryComponent_1 = parseDeepQueryComponent;

    function parseQueryComponent(obj, key, val, deep, auto, separator, transform) {
      var match;
      if (separator) {
        key = mapQuerySeparatorToKeys_1(key, separator);
        deep = true;
      }
      if (deep === true && (match = key.match(DEEP_QUERY_STRING_REG))) {
        parseDeepQueryComponent_1(obj, match, val, deep, auto, separator, transform);
      } else {
        setQueryProperty_1(obj, key, val, auto, transform);
      }
    }

    var parseQueryComponent_1 = parseQueryComponent;

    function fromQueryStringWithOptions(obj, opts) {
      var str = String(obj || '').replace(/^.*?\?/, ''), result = {}, auto;
      opts = opts || {};
      if (str) {
        forEach_1(str.split('&'), function(p) {
          var split = p.split('=');
          var key = decodeURIComponent(split[0]);
          var val = split.length === 2 ? decodeURIComponent(split[1]) : '';
          auto = opts.auto !== false;
          parseQueryComponent_1(result, key, val, opts.deep, auto, opts.separator, opts.transform);
        });
      }
      return result;
    }

    var fromQueryStringWithOptions_1 = fromQueryStringWithOptions;

    sugarCore.Object.defineStatic({

      'fromQueryString': function(obj, options) {
        return fromQueryStringWithOptions_1(obj, options);
      }

    });

    var fromQueryString = sugarCore.Object.fromQueryString;

    sugarCore.Object.defineInstanceAndStatic({

      'get': function(obj, key, any) {
        return deepGetProperty_1(obj, key, any);
      }

    });

    var get = sugarCore.Object.get;

    function deepHasProperty(obj, key, any) {
      return handleDeepProperty_1(obj, key, any, true);
    }

    var deepHasProperty_1 = deepHasProperty;

    sugarCore.Object.defineInstanceAndStatic({

      'has': function(obj, key, any) {
        return deepHasProperty_1(obj, key, any);
      }

    });

    var has = sugarCore.Object.has;

    function objectIntersectOrSubtract(obj1, obj2, subtract) {
      if (!isObjectType_1(obj1)) {
        return subtract ? obj1 : {};
      }
      obj2 = coercePrimitiveToObject_1(obj2);
      function resolve(key, val, val1) {
        var exists = key in obj2 && isEqual_1(val1, obj2[key]);
        if (exists !== subtract) {
          return val1;
        }
      }
      return objectMerge_1({}, obj1, false, resolve);
    }

    var objectIntersectOrSubtract_1 = objectIntersectOrSubtract;

    sugarCore.Object.defineInstanceAndStatic({

      'intersect': function(obj1, obj2) {
        return objectIntersectOrSubtract_1(obj1, obj2, false);
      }

    });

    var intersect$1 = sugarCore.Object.intersect;

    var hasOwn$8 = coreUtilityAliases.hasOwn,
        forEachProperty$g = coreUtilityAliases.forEachProperty;

    sugarCore.Object.defineInstanceAndStatic({

      'invert': function(obj, multi) {
        var result = {};
        multi = multi === true;
        forEachProperty$g(obj, function(val, key) {
          if (hasOwn$8(result, val) && multi) {
            result[val].push(key);
          } else if (multi) {
            result[val] = [key];
          } else {
            result[val] = key;
          }
        });
        return result;
      }

    });

    var invert = sugarCore.Object.invert;

    function hasProperty(obj, prop) {
      return !isPrimitive_1(obj) && prop in obj;
    }

    var hasProperty_1 = hasProperty;

    var classToString$5 = coreUtilityAliases.classToString;

    function isArguments(obj, className) {
      className = className || classToString$5(obj);
      // .callee exists on Arguments objects in < IE8
      return hasProperty_1(obj, 'length') && (className === '[object Arguments]' || !!obj.callee);
    }

    var isArguments_1 = isArguments;

    sugarCore.Object.defineInstanceAndStatic({

      'isArguments': function(obj) {
        return isArguments_1(obj);
      }

    });

    var isArguments_1$1 = sugarCore.Object.isArguments;

    var defineInstanceAndStatic = methodDefineAliases.defineInstanceAndStatic;

    function defineInstanceAndStaticSimilar(sugarNamespace, set, fn, flags) {
      defineInstanceAndStatic(sugarNamespace, collectSimilarMethods_1(set, fn), flags);
    }

    var defineInstanceAndStaticSimilar_1 = defineInstanceAndStaticSimilar;

    var isBoolean$5 = classChecks.isBoolean,
        isNumber$3 = classChecks.isNumber,
        isString$c = classChecks.isString,
        isDate$4 = classChecks.isDate,
        isRegExp$6 = classChecks.isRegExp,
        isFunction$8 = classChecks.isFunction,
        isArray$d = classChecks.isArray,
        isSet$2 = classChecks.isSet,
        isMap$2 = classChecks.isMap,
        isError$2 = classChecks.isError,
        sugarObject = namespaceAliases.sugarObject;

    function buildClassCheckMethods() {
      var checks = [isBoolean$5, isNumber$3, isString$c, isDate$4, isRegExp$6, isFunction$8, isArray$d, isError$2, isSet$2, isMap$2];
      defineInstanceAndStaticSimilar_1(sugarObject, NATIVE_TYPES, function(methods, name, i) {
        methods['is' + name] = checks[i];
      });
    }

    var buildClassCheckMethods_1 = buildClassCheckMethods;

    buildClassCheckMethods_1();

    var isArray$e = sugarCore.Object.isArray;

    var isBoolean$6 = sugarCore.Object.isBoolean;

    var isDate$5 = sugarCore.Object.isDate;

    function getKeysWithObjectCoercion(obj) {
      return getKeys_1(coercePrimitiveToObject_1(obj));
    }

    var getKeysWithObjectCoercion_1 = getKeysWithObjectCoercion;

    function objectSize(obj) {
      return getKeysWithObjectCoercion_1(obj).length;
    }

    var objectSize_1 = objectSize;

    sugarCore.Object.defineInstanceAndStatic({

      'isEmpty': function(obj) {
        return objectSize_1(obj) === 0;
      }

    });

    var isEmpty$2 = sugarCore.Object.isEmpty;

    sugarCore.Object.defineInstanceAndStatic({

      'isEqual': function(obj1, obj2) {
        return isEqual_1(obj1, obj2);
      }

    });

    var isEqual_1$2 = sugarCore.Object.isEqual;

    var isError$3 = sugarCore.Object.isError;

    var isFunction$9 = sugarCore.Object.isFunction;

    var isMap$3 = sugarCore.Object.isMap;

    var isNumber$4 = sugarCore.Object.isNumber;

    sugarCore.Object.defineInstanceAndStatic({

      'isObject': function(obj) {
        return isPlainObject_1(obj);
      }

    });

    var isObject = sugarCore.Object.isObject;

    var isRegExp$7 = sugarCore.Object.isRegExp;

    var isSet$3 = sugarCore.Object.isSet;

    var isString$d = sugarCore.Object.isString;

    sugarCore.Object.defineInstanceAndStatic({

      'merge': function(target, source, opts) {
        return mergeWithOptions_1(target, source, opts);
      }

    });

    var merge = sugarCore.Object.merge;

    sugarCore.Object.defineInstanceAndStatic({

      'mergeAll': function(target, sources, opts) {
        return mergeAll_1(target, sources, opts);
      }

    });

    var mergeAll_1$1 = sugarCore.Object.mergeAll;

    var isRegExp$8 = classChecks.isRegExp;

    function matchInObject(match, key) {
      if (isRegExp$8(match)) {
        return match.test(key);
      } else if (isObjectType_1(match)) {
        return key in match;
      } else {
        return key === String(match);
      }
    }

    var matchInObject_1 = matchInObject;

    var forEachProperty$h = coreUtilityAliases.forEachProperty;

    function selectFromObject(obj, f, select) {
      var match, result = {};
      f = [].concat(f);
      forEachProperty$h(obj, function(val, key) {
        match = false;
        for (var i = 0; i < f.length; i++) {
          if (matchInObject_1(f[i], key)) {
            match = true;
          }
        }
        if (match === select) {
          result[key] = val;
        }
      });
      return result;
    }

    var selectFromObject_1 = selectFromObject;

    function objectReject(obj, f) {
      return selectFromObject_1(obj, f, false);
    }

    var objectReject_1 = objectReject;

    sugarCore.Object.defineInstanceAndStatic({

      'reject': function(obj, f) {
        return objectReject_1(obj, f);
      }

    });

    var reject = sugarCore.Object.reject;

    var forEachProperty$i = coreUtilityAliases.forEachProperty;

    function objectRemove(obj, f) {
      var matcher = getMatcher_1(f);
      forEachProperty$i(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          delete obj[key];
        }
      });
      return obj;
    }

    var objectRemove_1 = objectRemove;

    sugarCore.Object.defineInstanceAndStatic({

      'remove': function(obj, f) {
        return objectRemove_1(obj, f);
      }

    });

    var remove$2 = sugarCore.Object.remove;

    function objectSelect(obj, f) {
      return selectFromObject_1(obj, f, true);
    }

    var objectSelect_1 = objectSelect;

    sugarCore.Object.defineInstanceAndStatic({

      'select': function(obj, f) {
        return objectSelect_1(obj, f);
      }

    });

    var select = sugarCore.Object.select;

    function deepSetProperty(obj, key, val) {
      handleDeepProperty_1(obj, key, false, false, true, false, val);
      return obj;
    }

    var deepSetProperty_1 = deepSetProperty;

    sugarCore.Object.defineInstanceAndStatic({

      'set': function(obj, key, val) {
        return deepSetProperty_1(obj, key, val);
      }

    });

    var set = sugarCore.Object.set;

    sugarCore.Object.defineInstanceAndStatic({

      'size': function(obj) {
        return objectSize_1(obj);
      }

    });

    var size = sugarCore.Object.size;

    sugarCore.Object.defineInstanceAndStatic({

      'subtract': function(obj1, obj2) {
        return objectIntersectOrSubtract_1(obj1, obj2, true);
      }

    });

    var subtract$1 = sugarCore.Object.subtract;

    var isFunction$a = classChecks.isFunction;

    function tap(obj, arg) {
      var fn = arg;
      if (!isFunction$a(arg)) {
        fn = function() {
          if (arg) obj[arg]();
        };
      }
      fn.call(obj, obj);
      return obj;
    }

    var tap_1 = tap;

    sugarCore.Object.defineInstanceAndStatic({

      'tap': function(obj, arg) {
        return tap_1(obj, arg);
      }

    });

    var tap_1$1 = sugarCore.Object.tap;

    var internalToString = Object.prototype.toString;

    function sanitizeURIComponent(obj) {
      // undefined, null, and NaN are represented as a blank string,
      // while false and 0 are stringified.
      return !obj && obj !== false && obj !== 0 ? '' : encodeURIComponent(obj);
    }

    var sanitizeURIComponent_1 = sanitizeURIComponent;

    var isDate$6 = classChecks.isDate;

    function getURIComponentValue(obj, prefix, transform) {
      var value;
      if (transform) {
        value = transform(obj, prefix);
      } else if (isDate$6(obj)) {
        value = obj.getTime();
      } else {
        value = obj;
      }
      return sanitizeURIComponent_1(prefix) + '=' + sanitizeURIComponent_1(value);
    }

    var getURIComponentValue_1 = getURIComponentValue;

    var isArray$f = classChecks.isArray,
        forEachProperty$j = coreUtilityAliases.forEachProperty;

    function toQueryString(obj, deep, transform, prefix, separator) {
      if (isArray$f(obj)) {
        return collectArrayAsQueryString(obj, deep, transform, prefix, separator);
      } else if (isObjectType_1(obj) && obj.toString === internalToString) {
        return collectObjectAsQueryString(obj, deep, transform, prefix, separator);
      } else if (prefix) {
        return getURIComponentValue_1(obj, prefix, transform);
      }
      return '';
    }

    function collectArrayAsQueryString(arr, deep, transform, prefix, separator) {
      var el, qc, key, result = [];
      // Intentionally treating sparse arrays as dense here by avoiding map,
      // otherwise indexes will shift during the process of serialization.
      for (var i = 0, len = arr.length; i < len; i++) {
        el = arr[i];
        key = prefix + (prefix && deep ? '[]' : '');
        if (!key && !isObjectType_1(el)) {
          // If there is no key, then the values of the array should be
          // considered as null keys, so use them instead;
          qc = sanitizeURIComponent_1(el);
        } else {
          qc = toQueryString(el, deep, transform, key, separator);
        }
        result.push(qc);
      }
      return result.join('&');
    }

    function collectObjectAsQueryString(obj, deep, transform, prefix, separator) {
      var result = [];
      forEachProperty$j(obj, function(val, key) {
        var fullKey;
        if (prefix && deep) {
          fullKey = prefix + '[' + key + ']';
        } else if (prefix) {
          fullKey = prefix + separator + key;
        } else {
          fullKey = key;
        }
        result.push(toQueryString(val, deep, transform, fullKey, separator));
      });
      return result.join('&');
    }

    var toQueryString_1 = toQueryString;

    function toQueryStringWithOptions(obj, opts) {
      opts = opts || {};
      if (isUndefined_1(opts.separator)) {
        opts.separator = '_';
      }
      return toQueryString_1(obj, opts.deep, opts.transform, opts.prefix || '', opts.separator);
    }

    var toQueryStringWithOptions_1 = toQueryStringWithOptions;

    sugarCore.Object.defineInstanceAndStatic({

      'toQueryString': function(obj, options) {
        return toQueryStringWithOptions_1(obj, options);
      }

    });

    var toQueryString$1 = sugarCore.Object.toQueryString;

    var forEachProperty$k = coreUtilityAliases.forEachProperty;

    function getValues(obj) {
      var values = [];
      forEachProperty$k(obj, function(val) {
        values.push(val);
      });
      return values;
    }

    var getValues_1 = getValues;

    sugarCore.Object.defineInstanceAndStatic({

      'values': function(obj) {
        return getValues_1(obj);
      }

    });

    var values = sugarCore.Object.values;

    sugarCore.Object.defineInstance({

      'keys': function(obj) {
        return getKeys_1(obj);
      }

    });

    var keys = sugarCore.Object.keys;

    var EnglishLocaleBaseDefinition = {
      'code': 'en',
      'plural': true,
      'timeMarkers': 'at',
      'ampm': 'AM|A.M.|a,PM|P.M.|p',
      'units': 'millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s',
      'months': 'Jan:uary|,Feb:ruary|,Mar:ch|,Apr:il|,May,Jun:e|,Jul:y|,Aug:ust|,Sep:tember|t|,Oct:ober|,Nov:ember|,Dec:ember|',
      'weekdays': 'Sun:day|,Mon:day|,Tue:sday|,Wed:nesday|,Thu:rsday|,Fri:day|,Sat:urday|+weekend',
      'numerals': 'zero,one|first,two|second,three|third,four:|th,five|fifth,six:|th,seven:|th,eight:|h,nin:e|th,ten:|th',
      'articles': 'a,an,the',
      'tokens': 'the,st|nd|rd|th,of|in,a|an,on',
      'time': '{H}:{mm}',
      'past': '{num} {unit} {sign}',
      'future': '{num} {unit} {sign}',
      'duration': '{num} {unit}',
      'modifiers': [
        { 'name': 'half',   'src': 'half', 'value': .5 },
        { 'name': 'midday', 'src': 'noon', 'value': 12 },
        { 'name': 'midday', 'src': 'midnight', 'value': 24 },
        { 'name': 'day',    'src': 'yesterday', 'value': -1 },
        { 'name': 'day',    'src': 'today|tonight', 'value': 0 },
        { 'name': 'day',    'src': 'tomorrow', 'value': 1 },
        { 'name': 'sign',   'src': 'ago|before', 'value': -1 },
        { 'name': 'sign',   'src': 'from now|after|from|in|later', 'value': 1 },
        { 'name': 'edge',   'src': 'first day|first|beginning', 'value': -2 },
        { 'name': 'edge',   'src': 'last day', 'value': 1 },
        { 'name': 'edge',   'src': 'end|last', 'value': 2 },
        { 'name': 'shift',  'src': 'last', 'value': -1 },
        { 'name': 'shift',  'src': 'the|this', 'value': 0 },
        { 'name': 'shift',  'src': 'next', 'value': 1 }
      ],
      'parse': [
        '(?:just)? now',
        '{shift} {unit:5-7}',
        '{months?} {year}',
        '{midday} {4?} {day|weekday}',
        '{months},?[-.\\/\\s]?{year?}',
        '{edge} of (?:day)? {day|weekday}',
        '{0} {num}{1?} {weekday} {2} {months},? {year?}',
        '{shift?} {day?} {weekday?} (?:at)? {midday}',
        '{sign?} {3?} {half} {3?} {unit:3-4|unit:7} {sign?}',
        '{0?} {edge} {weekday?} {2} {shift?} {unit:4-7?} {months?},? {year?}'
      ],
      'timeParse': [
        '{day|weekday}',
        '{shift} {unit:5?} {weekday}',
        '{0?} {date}{1?} {2?} {months?}',
        '{weekday} {2?} {shift} {unit:5}',
        '{0?} {num} {2?} {months}\\.?,? {year?}',
        '{num?} {unit:4-5} {sign} {day|weekday}',
        '{0|months} {date?}{1?} of {shift} {unit:6-7}',
        '{0?} {num}{1?} {weekday} of {shift} {unit:6}',
        '{year?}[-.\\/\\s]?{months}[-.\\/\\s]{date}',
        '{date}[-.\\/\\s]{months}(?:[-.\\/\\s]{year|yy})?',
        '{weekday?}\\.?,? {months}\\.?,? {date}{1?},? {year?}',
        '{weekday?}\\.?,? {date} {months} {year}'
      ],
      'timeFrontParse': [
        '{sign} {num} {unit}',
        '{num} {unit} {sign}',
        '{4?} {day|weekday}'
      ]
    };

    var EnglishLocaleBaseDefinition_1 = EnglishLocaleBaseDefinition;

    function getEnglishVariant(v) {
      return simpleMerge_1(simpleClone_1(EnglishLocaleBaseDefinition_1), v);
    }

    var getEnglishVariant_1 = getEnglishVariant;

    var BritishEnglishDefinition = getEnglishVariant_1({
      'short':  '{dd}/{MM}/{yyyy}',
      'medium': '{d} {Month} {yyyy}',
      'long':   '{d} {Month} {yyyy} {H}:{mm}',
      'full':   '{Weekday}, {d} {Month}, {yyyy} {time}',
      'stamp':  '{Dow} {d} {Mon} {yyyy} {time}'
    });

    var BritishEnglishDefinition_1 = BritishEnglishDefinition;

    var AmericanEnglishDefinition = getEnglishVariant_1({
      'mdy': true,
      'firstDayOfWeek': 0,
      'firstDayOfWeekYear': 1,
      'short':  '{MM}/{dd}/{yyyy}',
      'medium': '{Month} {d}, {yyyy}',
      'long':   '{Month} {d}, {yyyy} {time}',
      'full':   '{Weekday}, {Month} {d}, {yyyy} {time}',
      'stamp':  '{Dow} {Mon} {d} {yyyy} {time}',
      'time':   '{h}:{mm} {TT}'
    });

    var AmericanEnglishDefinition_1 = AmericanEnglishDefinition;

    var CanadianEnglishDefinition = getEnglishVariant_1({
      'short':  '{yyyy}-{MM}-{dd}',
      'medium': '{d} {Month}, {yyyy}',
      'long':   '{d} {Month}, {yyyy} {H}:{mm}',
      'full':   '{Weekday}, {d} {Month}, {yyyy} {time}',
      'stamp':  '{Dow} {d} {Mon} {yyyy} {time}'
    });

    var CanadianEnglishDefinition_1 = CanadianEnglishDefinition;

    var LazyLoadedLocales = {
      'en-US': AmericanEnglishDefinition_1,
      'en-GB': BritishEnglishDefinition_1,
      'en-AU': BritishEnglishDefinition_1,
      'en-CA': CanadianEnglishDefinition_1
    };

    var LazyLoadedLocales_1 = LazyLoadedLocales;

    var LOCALE_ARRAY_FIELDS = [
      'months', 'weekdays', 'units', 'numerals', 'placeholders',
      'articles', 'tokens', 'timeMarkers', 'ampm', 'timeSuffixes',
      'parse', 'timeParse', 'timeFrontParse', 'modifiers'
    ];

    var LOCALE_ARRAY_FIELDS_1 = LOCALE_ARRAY_FIELDS;

    var ISODefaults = {
      ISO_FIRST_DAY_OF_WEEK: 1,
      ISO_FIRST_DAY_OF_WEEK_YEAR: 4
    };

    var CoreParsingTokens = {
      'yyyy': {
        param: 'year',
        src: '[-−+]?\\d{4,6}'
      },
      'yy': {
        param: 'year',
        src: '\\d{2}'
      },
      'y': {
        param: 'year',
        src: '\\d'
      },
      'ayy': {
        param: 'year',
        src: '\'\\d{2}'
      },
      'MM': {
        param: 'month',
        src: '(?:1[012]|0?[1-9])'
      },
      'dd': {
        param: 'date',
        src: '(?:3[01]|[12][0-9]|0?[1-9])'
      },
      'hh': {
        param: 'hour',
        src: '(?:2[0-4]|[01]?[0-9])'
      },
      'mm': {
        param: 'minute',
        src: '[0-5]\\d'
      },
      'ss': {
        param: 'second',
        src: '[0-5]\\d(?:[,.]\\d+)?'
      },
      'tzHour': {
        src: '[-−+](?:2[0-4]|[01]?[0-9])'
      },
      'tzMinute': {
        src: '[0-5]\\d'
      },
      'iyyyy': {
        param: 'year',
        src: '(?:[-−+]?\\d{4}|[-−+]\\d{5,6})'
      },
      'ihh': {
        param: 'hour',
        src: '(?:2[0-4]|[01][0-9])(?:[,.]\\d+)?'
      },
      'imm': {
        param: 'minute',
        src: '[0-5]\\d(?:[,.]\\d+)?'
      },
      'GMT': {
        param: 'utc',
        src: 'GMT'
      },
      'Z': {
        param: 'utc',
        src: 'Z'
      },
      'timestamp': {
        src: '\\d+'
      }
    };

    var CoreParsingTokens_1 = CoreParsingTokens;

    var CoreParsingFormats = [
      {
        // 12-1978
        // 08-1978 (MDY)
        src: '{MM}[-.\\/]{yyyy}'
      },
      {
        // 12/08/1978
        // 08/12/1978 (MDY)
        time: true,
        src: '{dd}[-\\/]{MM}(?:[-\\/]{yyyy|yy|y})?',
        mdy: '{MM}[-\\/]{dd}(?:[-\\/]{yyyy|yy|y})?'
      },
      {
        // 12.08.1978
        // 08.12.1978 (MDY)
        time: true,
        src: '{dd}\\.{MM}(?:\\.{yyyy|yy|y})?',
        mdy: '{MM}\\.{dd}(?:\\.{yyyy|yy|y})?',
        localeCheck: function(loc) {
          // Do not allow this format if the locale
          // uses a period as a time separator.
          return loc.timeSeparator !== '.';
        }
      },
      {
        // 1975-08-25
        time: true,
        src: '{yyyy}[-.\\/]{MM}(?:[-.\\/]{dd})?'
      },
      {
        // .NET JSON
        src: '\\\\/Date\\({timestamp}(?:[-+]\\d{4,4})?\\)\\\\/'
      },
      {
        // ISO-8601
        src: '{iyyyy}(?:-?{MM}(?:-?{dd}(?:T{ihh}(?::?{imm}(?::?{ss})?)?)?)?)?{tzOffset?}'
      }
    ];

    var CoreParsingFormats_1 = CoreParsingFormats;

    var LocalizedParsingTokens = {
      'year': {
        base: 'yyyy|ayy',
        requiresSuffix: true
      },
      'month': {
        base: 'MM',
        requiresSuffix: true
      },
      'date': {
        base: 'dd',
        requiresSuffix: true
      },
      'hour': {
        base: 'hh',
        requiresSuffixOr: ':'
      },
      'minute': {
        base: 'mm'
      },
      'second': {
        base: 'ss'
      },
      'num': {
        src: '\\d+',
        requiresNumerals: true
      }
    };

    var LocalizedParsingTokens_1 = LocalizedParsingTokens;

    function getArrayWithOffset(arr, n, alternate, offset) {
      var val;
      if (alternate > 1) {
        val = arr[n + (alternate - 1) * offset];
      }
      return val || arr[n];
    }

    var getArrayWithOffset_1 = getArrayWithOffset;

    function getRegNonCapturing(src, opt) {
      if (src.length > 1) {
        src = '(?:' + src + ')';
      }
      if (opt) {
        src += '?';
      }
      return src;
    }

    var getRegNonCapturing_1 = getRegNonCapturing;

    var PRIVATE_PROP_PREFIX = '_sugar_';

    var setProperty$1 = coreUtilityAliases.setProperty;

    function privatePropertyAccessor(key) {
      var privateKey = PRIVATE_PROP_PREFIX + key;
      return function(obj, val) {
        if (arguments.length > 1) {
          setProperty$1(obj, privateKey, val);
          return obj;
        }
        return obj[privateKey];
      };
    }

    var privatePropertyAccessor_1 = privatePropertyAccessor;

    var _utc = privatePropertyAccessor_1('utc');

    function callDateGet(d, method) {
      return d['get' + (_utc(d) ? 'UTC' : '') + method]();
    }

    var callDateGet_1 = callDateGet;

    function getYear(d) {
      return callDateGet_1(d, 'FullYear');
    }

    var getYear_1 = getYear;

    function getMonth(d) {
      return callDateGet_1(d, 'Month');
    }

    var getMonth_1 = getMonth;

    function getDaysInMonth(d) {
      return 32 - callDateGet_1(new Date(getYear_1(d), getMonth_1(d), 32), 'Date');
    }

    var getDaysInMonth_1 = getDaysInMonth;

    var DateUnits = [
      {
        name: 'millisecond',
        method: 'Milliseconds',
        multiplier: 1,
        start: 0,
        end: 999
      },
      {
        name: 'second',
        method: 'Seconds',
        multiplier: 1000,
        start: 0,
        end: 59
      },
      {
        name: 'minute',
        method: 'Minutes',
        multiplier: 60 * 1000,
        start: 0,
        end: 59
      },
      {
        name: 'hour',
        method: 'Hours',
        multiplier: 60 * 60 * 1000,
        start: 0,
        end: 23
      },
      {
        name: 'day',
        alias: 'date',
        method: 'Date',
        ambiguous: true,
        multiplier: 24 * 60 * 60 * 1000,
        start: 1,
        end: function(d) {
          return getDaysInMonth_1(d);
        }
      },
      {
        name: 'week',
        method: 'ISOWeek',
        ambiguous: true,
        multiplier: 7 * 24 * 60 * 60 * 1000
      },
      {
        name: 'month',
        method: 'Month',
        ambiguous: true,
        multiplier: 30.4375 * 24 * 60 * 60 * 1000,
        start: 0,
        end: 11
      },
      {
        name: 'year',
        method: 'FullYear',
        ambiguous: true,
        multiplier: 365.25 * 24 * 60 * 60 * 1000,
        start: 0
      }
    ];

    var DateUnits_1 = DateUnits;

    var DateUnitIndexes = {
      HOURS_INDEX: 3,
      DAY_INDEX: 4,
      WEEK_INDEX: 5,
      MONTH_INDEX: 6,
      YEAR_INDEX: 7
    };

    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;

    function iterateOverDateUnits(fn, startIndex, endIndex) {
      endIndex = endIndex || 0;
      if (isUndefined_1(startIndex)) {
        startIndex = YEAR_INDEX;
      }
      for (var index = startIndex; index >= endIndex; index--) {
        if (fn(DateUnits_1[index], index) === false) {
          break;
        }
      }
    }

    var iterateOverDateUnits_1 = iterateOverDateUnits;

    function arrayToRegAlternates(arr) {
      var joined = arr.join('');
      if (!arr || !arr.length) {
        return '';
      }
      if (joined.length === arr.length) {
        return '[' + joined + ']';
      }
      // map handles sparse arrays so no need to compact the array here.
      return map_1(arr, escapeRegExp_1).join('|');
    }

    var arrayToRegAlternates_1 = arrayToRegAlternates;

    var abs$5 = mathAliases.abs;

    function getAdjustedUnit(ms, fn) {
      var unitIndex = 0, value = 0;
      iterateOverDateUnits_1(function(unit, i) {
        value = abs$5(fn(unit));
        if (value >= 1) {
          unitIndex = i;
          return false;
        }
      });
      return [value, unitIndex, ms];
    }

    var getAdjustedUnit_1 = getAdjustedUnit;

    function getAdjustedUnitForNumber(ms) {
      return getAdjustedUnit_1(ms, function(unit) {
        return trunc_1(withPrecision_1(ms / unit.multiplier, 1));
      });
    }

    var getAdjustedUnitForNumber_1 = getAdjustedUnitForNumber;

    function getParsingTokenWithSuffix(field, src, suffix) {
      var token = LocalizedParsingTokens_1[field];
      if (token.requiresSuffix) {
        src = getRegNonCapturing_1(src + getRegNonCapturing_1(suffix));
      } else if (token.requiresSuffixOr) {
        src += getRegNonCapturing_1(token.requiresSuffixOr + '|' + suffix);
      } else {
        src += getRegNonCapturing_1(suffix, true);
      }
      return src;
    }

    var getParsingTokenWithSuffix_1 = getParsingTokenWithSuffix;

    var map$3 = map_1;

    var hasOwn$9 = coreUtilityAliases.hasOwn,
        getOwn$8 = coreUtilityAliases.getOwn,
        forEachProperty$l = coreUtilityAliases.forEachProperty,
        fullWidthNumberMap$2 = fullwidthNumberHelpers.fullWidthNumberMap,
        fullWidthNumbers$1 = fullwidthNumberHelpers.fullWidthNumbers,
        pow$3 = mathAliases.pow,
        max$9 = mathAliases.max,
        ISO_FIRST_DAY_OF_WEEK = ISODefaults.ISO_FIRST_DAY_OF_WEEK,
        ISO_FIRST_DAY_OF_WEEK_YEAR = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR,
        isString$e = classChecks.isString,
        isFunction$b = classChecks.isFunction;

    function getNewLocale(def) {

      function Locale(def) {
        this.init(def);
      }

      Locale.prototype = {

        getMonthName: function(n, alternate) {
          if (this.monthSuffix) {
            return (n + 1) + this.monthSuffix;
          }
          return getArrayWithOffset_1(this.months, n, alternate, 12);
        },

        getWeekdayName: function(n, alternate) {
          return getArrayWithOffset_1(this.weekdays, n, alternate, 7);
        },

        // TODO: rename to parse in next major version
        parseValue: function(str, param) {
          var map = this[param + 'Map'];
          if (hasOwn$9(map, str)) {
            return map[str];
          }
          return this.parseNumber(str, param);
        },

        // TODO: analyze performance of parsing first vs checking
        // numeralMap first.
        parseNumber: function(str, param) {
          var val;

          // Simple numerals such as "one" are mapped directly in
          // the numeral map so catch up front if there is a match.
          if (hasOwn$9(this.numeralMap, str)) {
            val = this.numeralMap[str];
          }

          // TODO: perf test isNaN vs other methods
          if (isNaN(val)) {
            val = this.parseRegularNumerals(str);
          }

          if (isNaN(val)) {
            val = this.parseIrregularNumerals(str);
          }

          if (param === 'month') {
            // Months are the only numeric date field
            // whose value is not the same as its number.
            val -= 1;
          }

          return val;
        },

        // TODO: perf test returning up front if no regular decimals exist
        parseRegularNumerals: function(str) {
          // Allow decimals as commas and the minus-sign as per ISO-8601.
          str = str.replace(/^−/, '-').replace(/,/, '.');

          // The unary plus operator here shows better performance and handles
          // every format that parseFloat does with the exception of trailing
          // characters, which are guaranteed not to be in our string at this point.
          return +str;
        },

        parseIrregularNumerals: function(str) {
          var place = 1, num = 0, lastWasPlace, isPlace, numeral, digit, arr;

          // Note that "numerals" that need to be converted through this method are
          // all considered to be single characters in order to handle CJK. This
          // method is by no means unique to CJK, but the complexity of handling
          // inflections in non-CJK languages adds too much overhead for not enough
          // value, so avoiding for now.
          arr = str.split('');
          for (var i = arr.length - 1; numeral = arr[i]; i--) {
            digit = getOwn$8(this.numeralMap, numeral);
            if (isUndefined_1(digit)) {
              digit = getOwn$8(fullWidthNumberMap$2, numeral) || 0;
            }
            isPlace = digit > 0 && digit % 10 === 0;
            if (isPlace) {
              if (lastWasPlace) {
                num += place;
              }
              if (i) {
                place = digit;
              } else {
                num += digit;
              }
            } else {
              num += digit * place;
              place *= 10;
            }
            lastWasPlace = isPlace;
          }
          return num;
        },

        getOrdinal: function(n) {
          var suffix = this.ordinalSuffix;
          return suffix || getOrdinalSuffix_1(n);
        },

        getRelativeFormat: function(adu, type) {
          return this.convertAdjustedToFormat(adu, type);
        },

        getDuration: function(ms) {
          return this.convertAdjustedToFormat(getAdjustedUnitForNumber_1(max$9(0, ms)), 'duration');
        },

        getFirstDayOfWeek: function() {
          var val = this.firstDayOfWeek;
          return isDefined_1(val) ? val : ISO_FIRST_DAY_OF_WEEK;
        },

        getFirstDayOfWeekYear: function() {
          return this.firstDayOfWeekYear || ISO_FIRST_DAY_OF_WEEK_YEAR;
        },

        convertAdjustedToFormat: function(adu, type) {
          var sign, unit, mult,
              num    = adu[0],
              u      = adu[1],
              ms     = adu[2],
              format = this[type] || this.relative;
          if (isFunction$b(format)) {
            return format.call(this, num, u, ms, type);
          }
          mult = !this.plural || num === 1 ? 0 : 1;
          unit = this.units[mult * 8 + u] || this.units[u];
          sign = this[ms > 0 ? 'fromNow' : 'ago'];
          return format.replace(/\{(.*?)\}/g, function(full, match) {
            switch(match) {
              case 'num': return num;
              case 'unit': return unit;
              case 'sign': return sign;
            }
          });
        },

        cacheFormat: function(dif, i) {
          this.compiledFormats.splice(i, 1);
          this.compiledFormats.unshift(dif);
        },

        addFormat: function(format) {
          var loc = this, src, to;

          function getTokenSrc(token) {
            var suffix, src, tmp,
                opt   = token.match(/\?$/),
                nc    = token.match(/^(\d+)\??$/),
                slice = token.match(/(\d)(?:-(\d))?/),
                param = token.replace(/[^a-z]+$/i, '');

            // Allowing alias tokens such as {time}
            if (tmp = getOwn$8(loc.parsingAliases, param)) {
              src = formatToSrc(tmp);
              if (opt) {
                src = getRegNonCapturing_1(src, true);
              }
              return src;
            }

            if (nc) {
              src = loc.tokens[nc[1]];
            } else if (tmp = getOwn$8(CoreParsingTokens_1, param)) {
              src = tmp.src;
              param = tmp.param || param;
            } else {
              tmp = getOwn$8(loc.parsingTokens, param) || getOwn$8(loc, param);

              // Both the "months" array and the "month" parsing token can be accessed
              // by either {month} or {months}, falling back as necessary, however
              // regardless of whether or not a fallback occurs, the final field to
              // be passed to addRawFormat must be normalized as singular.
              param = param.replace(/s$/, '');

              if (!tmp) {
                tmp = getOwn$8(loc.parsingTokens, param) || getOwn$8(loc, param + 's');
              }

              if (isString$e(tmp)) {
                src = tmp;
                suffix = loc[param + 'Suffix'];
              } else {

                // This is a hack to temporarily disallow parsing of single character
                // weekdays until the format can be changed to allow for this.
                if (param === 'weekday' && loc.code === 'ko') {
                  tmp = filter_1(tmp, function(str) {
                    return str.length > 1;
                  });
                }

                if (slice) {
                  tmp = filter_1(tmp, function(m, i) {
                    var mod = i % (loc.units ? 8 : tmp.length);
                    return mod >= slice[1] && mod <= (slice[2] || slice[1]);
                  });
                }
                src = arrayToRegAlternates_1(tmp);
              }
            }
            if (!src) {
              return '';
            }
            if (nc) {
              // Non-capturing tokens like {0}
              src = getRegNonCapturing_1(src);
            } else {
              // Capturing group and add to parsed tokens
              to.push(param);
              src = '(' + src + ')';
            }
            if (suffix) {
              // Date/time suffixes such as those in CJK
              src = getParsingTokenWithSuffix_1(param, src, suffix);
            }
            if (opt) {
              src += '?';
            }
            return src;
          }

          function formatToSrc(str) {

            // Make spaces optional
            str = str.replace(/ /g, ' ?');

            str = str.replace(/\{([^,]+?)\}/g, function(match, token) {
              var tokens = token.split('|');
              if (tokens.length > 1) {
                return getRegNonCapturing_1(map$3(tokens, getTokenSrc).join('|'));
              } else {
                return getTokenSrc(token);
              }
            });

            return str;
          }

          function parseInputFormat() {
            to = [];
            src = formatToSrc(format);
          }

          parseInputFormat();
          loc.addRawFormat(src, to);
        },

        addRawFormat: function(format, to) {
          this.compiledFormats.unshift({
            reg: RegExp('^ *' + format + ' *$', 'i'),
            to: to
          });
        },

        init: function(def) {
          var loc = this;

          // -- Initialization helpers

          function initFormats() {
            loc.compiledFormats = [];
            loc.parsingAliases = {};
            loc.parsingTokens = {};
          }

          function initDefinition() {
            simpleMerge_1(loc, def);
          }

          function initArrayFields() {
            forEach_1(LOCALE_ARRAY_FIELDS_1, function(name) {
              var val = loc[name];
              if (isString$e(val)) {
                loc[name] = commaSplit_1(val);
              } else if (!val) {
                loc[name] = [];
              }
            });
          }

          // -- Value array build helpers

          function buildValueArray(name, mod, map, fn) {
            var field = name, all = [], setMap;
            if (!loc[field]) {
              field += 's';
            }
            if (!map) {
              map = {};
              setMap = true;
            }
            forAllAlternates(field, function(alt, j, i) {
              var idx = j * mod + i, val;
              val = fn ? fn(i) : i;
              map[alt] = val;
              map[alt.toLowerCase()] = val;
              all[idx] = alt;
            });
            loc[field] = all;
            if (setMap) {
              loc[name + 'Map'] = map;
            }
          }

          function forAllAlternates(field, fn) {
            forEach_1(loc[field], function(str, i) {
              forEachAlternate(str, function(alt, j) {
                fn(alt, j, i);
              });
            });
          }

          function forEachAlternate(str, fn) {
            var arr = map$3(str.split('+'), function(split) {
              return split.replace(/(.+):(.+)$/, function(full, base, suffixes) {
                return map$3(suffixes.split('|'), function(suffix) {
                  return base + suffix;
                }).join('|');
              });
            }).join('|');
            forEach_1(arr.split('|'), fn);
          }

          function buildNumerals() {
            var map = {};
            buildValueArray('numeral', 10, map);
            buildValueArray('article', 1, map, function() {
              return 1;
            });
            buildValueArray('placeholder', 4, map, function(n) {
              return pow$3(10, n + 1);
            });
            loc.numeralMap = map;
          }

          function buildTimeFormats() {
            loc.parsingAliases['time'] = getTimeFormat();
            loc.parsingAliases['tzOffset'] = getTZOffsetFormat();
          }

          function getTimeFormat(standalone) {
            var src, sep;
            sep = getTimeSeparatorSrc();
            if (loc.ampmFront) {
              // "ampmFront" exists mostly for CJK locales, which also presume that
              // time suffixes exist, allowing this to be a simpler regex.
              src = '{ampm?} {hour} (?:{minute} (?::?{second})?)?';
            } else if(loc.ampm.length) {
              src = '{hour}(?:'+sep+'{minute?}(?:'+sep+'{second?})? {ampm?}| {ampm})';
            } else {
              src = '{hour}(?:'+sep+'{minute?}(?:'+sep+'{second?})?)';
            }
            return src;
          }

          function getTimeSeparatorSrc() {
            if (loc.timeSeparator) {
              return '[:' + loc.timeSeparator + ']';
            } else {
              return ':';
            }
          }

          function getTZOffsetFormat() {
            return '(?:{Z}|{GMT?}(?:{tzHour}(?::?{tzMinute}(?: \\([\\w\\s]+\\))?)?)?)?';
          }

          function buildParsingTokens() {
            forEachProperty$l(LocalizedParsingTokens_1, function(token, name) {
              var src = token.base ? getCoreTokensForBase(token.base) : token.src, arr;
              if (token.requiresNumerals || loc.numeralUnits) {
                src += getNumeralSrc();
              }
              arr = loc[name + 's'];
              if (arr && arr.length) {
                src += '|' + arrayToRegAlternates_1(arr);
              }
              loc.parsingTokens[name] = src;
            });
          }

          function getCoreTokensForBase(base) {
            return map$3(base.split('|'), function(key) {
              return CoreParsingTokens_1[key].src;
            }).join('|');
          }

          function getNumeralSrc() {
            var all, src = '';
            all = loc.numerals.concat(loc.placeholders).concat(loc.articles);
            if (loc.allowsFullWidth) {
              all = all.concat(fullWidthNumbers$1.split(''));
            }
            if (all.length) {
              src = '|(?:' + arrayToRegAlternates_1(all) + ')+';
            }
            return src;
          }

          function buildTimeSuffixes() {
            iterateOverDateUnits_1(function(unit, i) {
              var token = loc.timeSuffixes[i];
              if (token) {
                loc[(unit.alias || unit.name) + 'Suffix'] = token;
              }
            });
          }

          function buildModifiers() {
            forEach_1(loc.modifiers, function(modifier) {
              var name = modifier.name, mapKey = name + 'Map', map;
              map = loc[mapKey] || {};
              forEachAlternate(modifier.src, function(alt, j) {
                var token = getOwn$8(loc.parsingTokens, name), val = modifier.value;
                map[alt] = val;
                loc.parsingTokens[name] = token ? token + '|' + alt : alt;
                if (modifier.name === 'sign' && j === 0) {
                  // Hooking in here to set the first "fromNow" or "ago" modifier
                  // directly on the locale, so that it can be reused in the
                  // relative format.
                  loc[val === 1 ? 'fromNow' : 'ago'] = alt;
                }
              });
              loc[mapKey] = map;
            });
          }

          // -- Format adding helpers

          function addCoreFormats() {
            forEach_1(CoreParsingFormats_1, function(df) {
              var src = df.src;
              if (df.localeCheck && !df.localeCheck(loc)) {
                return;
              }
              if (df.mdy && loc.mdy) {
                // Use the mm/dd/yyyy variant if it
                // exists and the locale requires it
                src = df.mdy;
              }
              if (df.time) {
                // Core formats that allow time require the time
                // reg on both sides, so add both versions here.
                loc.addFormat(getFormatWithTime(src, true));
                loc.addFormat(getFormatWithTime(src));
              } else {
                loc.addFormat(src);
              }
            });
            loc.addFormat('{time}');
          }

          function addLocaleFormats() {
            addFormatSet('parse');
            addFormatSet('timeParse', true);
            addFormatSet('timeFrontParse', true, true);
          }

          function addFormatSet(field, allowTime, timeFront) {
            forEach_1(loc[field], function(format) {
              if (allowTime) {
                format = getFormatWithTime(format, timeFront);
              }
              loc.addFormat(format);
            });
          }

          function getFormatWithTime(baseFormat, timeBefore) {
            if (timeBefore) {
              return getTimeBefore() + baseFormat;
            }
            return baseFormat + getTimeAfter();
          }

          function getTimeBefore() {
            return getRegNonCapturing_1('{time}[,\\s\\u3000]', true);
          }

          function getTimeAfter() {
            var markers = ',?[\\s\\u3000]', localized;
            localized = arrayToRegAlternates_1(loc.timeMarkers);
            if (localized) {
              markers += '| (?:' + localized + ') ';
            }
            markers = getRegNonCapturing_1(markers, loc.timeMarkerOptional);
            return getRegNonCapturing_1(markers + '{time}{tzOffset}', true);
          }

          initFormats();
          initDefinition();
          initArrayFields();

          buildValueArray('month', 12);
          buildValueArray('weekday', 7);
          buildValueArray('unit', 8);
          buildValueArray('ampm', 2);

          buildNumerals();
          buildTimeFormats();
          buildParsingTokens();
          buildTimeSuffixes();
          buildModifiers();

          // The order of these formats is important. Order is reversed so formats
          // that are initialized later will take precedence. Generally, this means
          // that more specific formats should come later.
          addCoreFormats();
          addLocaleFormats();

        }

      };

      return new Locale(def);
    }

    var getNewLocale_1 = getNewLocale;

    var English, localeManager;

    function buildLocales() {

      function LocaleManager(loc) {
        this.locales = {};
        this.add(loc);
      }

      LocaleManager.prototype = {

        get: function(code, fallback) {
          var loc = this.locales[code];
          if (!loc && LazyLoadedLocales_1[code]) {
            loc = this.add(code, LazyLoadedLocales_1[code]);
          } else if (!loc && code) {
            loc = this.locales[code.slice(0, 2)];
          }
          return loc || fallback === false ? loc : this.current;
        },

        getAll: function() {
          return this.locales;
        },

        set: function(code) {
          var loc = this.get(code, false);
          if (!loc) {
            throw new TypeError('Invalid Locale: ' + code);
          }
          return this.current = loc;
        },

        add: function(code, def) {
          if (!def) {
            def = code;
            code = def.code;
          } else {
            def.code = code;
          }
          var loc = def.compiledFormats ? def : getNewLocale_1(def);
          this.locales[code] = loc;
          if (!this.current) {
            this.current = loc;
          }
          return loc;
        },

        remove: function(code) {
          if (this.current.code === code) {
            this.current = this.get('en');
          }
          return delete this.locales[code];
        }

      };

      // Sorry about this guys...
      English = getNewLocale_1(AmericanEnglishDefinition_1);
      localeManager = new LocaleManager(English);
    }

    buildLocales();

    var LocaleHelpers = {
      English: English,
      localeManager: localeManager
    };

    var localeManager$1 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'addLocale': function(code, set) {
        return localeManager$1.add(code, set);
      }

    });

    var addLocale = sugarCore.Date.addLocale;

    var MINUTES = 60 * 1000;

    var ABBREVIATED_YEAR_REG = /^'?(\d{1,2})$/;

    function tzOffset(d) {
      return d.getTimezoneOffset();
    }

    var tzOffset_1 = tzOffset;

    function callDateSet(d, method, value, safe) {
      // "Safe" denotes not setting the date if the value is the same as what is
      // currently set. In theory this should be a noop, however it will cause
      // timezone shifts when in the middle of a DST fallback. This is unavoidable
      // as the notation itself is ambiguous (i.e. there are two "1:00ams" on
      // November 1st, 2015 in northern hemisphere timezones that follow DST),
      // however when advancing or rewinding dates this can throw off calculations
      // so avoiding this unintentional shifting on an opt-in basis.
      if (safe && value === callDateGet_1(d, method)) {
        return;
      }
      d['set' + (_utc(d) ? 'UTC' : '') + method](value);
    }

    var callDateSet_1 = callDateSet;

    var HOURS_INDEX = DateUnitIndexes.HOURS_INDEX,
        DAY_INDEX = DateUnitIndexes.DAY_INDEX,
        WEEK_INDEX = DateUnitIndexes.WEEK_INDEX,
        MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;

    function getLowerUnitIndex(index) {
      if (index === MONTH_INDEX) {
        return DAY_INDEX;
      } else if (index === WEEK_INDEX) {
        return HOURS_INDEX;
      }
      return index - 1;
    }

    var getLowerUnitIndex_1 = getLowerUnitIndex;

    function walkUnitDown(unitIndex, fn) {
      while (unitIndex >= 0) {
        if (fn(DateUnits_1[unitIndex], unitIndex) === false) {
          break;
        }
        unitIndex = getLowerUnitIndex_1(unitIndex);
      }
    }

    var walkUnitDown_1 = walkUnitDown;

    var isFunction$c = classChecks.isFunction;

    function setUnitAndLowerToEdge(d, startIndex, stopIndex, end) {
      walkUnitDown_1(startIndex, function(unit, i) {
        var val = end ? unit.end : unit.start;
        if (isFunction$c(val)) {
          val = val(d);
        }
        callDateSet_1(d, unit.method, val);
        return !isDefined_1(stopIndex) || i > stopIndex;
      });
      return d;
    }

    var setUnitAndLowerToEdge_1 = setUnitAndLowerToEdge;

    var HOURS_INDEX$1 = DateUnitIndexes.HOURS_INDEX;

    function resetTime(d) {
      return setUnitAndLowerToEdge_1(d, HOURS_INDEX$1);
    }

    var resetTime_1 = resetTime;

    function defaultNewDate() {
      return new Date;
    }

    var defaultNewDate_1 = defaultNewDate;

    var DATE_OPTIONS = {
      'newDateInternal': defaultNewDate_1
    };

    var DATE_OPTIONS_1 = DATE_OPTIONS;

    var sugarDate = namespaceAliases.sugarDate;

    var _dateOptions = defineOptionsAccessor_1(sugarDate, DATE_OPTIONS_1);

    function getNewDate() {
      return _dateOptions('newDateInternal')();
    }

    var getNewDate_1 = getNewDate;

    function setDate(d, val) {
      callDateSet_1(d, 'Date', val);
    }

    var setDate_1 = setDate;

    function getDate(d) {
      return callDateGet_1(d, 'Date');
    }

    var getDate_1 = getDate;

    function getWeekday(d) {
      return callDateGet_1(d, 'Day');
    }

    var getWeekday_1 = getWeekday;

    var isNumber$5 = classChecks.isNumber,
        abs$6 = mathAliases.abs;

    function setWeekday(d, dow, dir) {
      if (!isNumber$5(dow)) return;
      var currentWeekday = getWeekday_1(d);
      if (dir) {
        // Allow a "direction" parameter to determine whether a weekday can
        // be set beyond the current weekday in either direction.
        var ndir = dir > 0 ? 1 : -1;
        var offset = dow % 7 - currentWeekday;
        if (offset && offset / abs$6(offset) !== ndir) {
          dow += 7 * ndir;
        }
      }
      setDate_1(d, getDate_1(d) + dow - currentWeekday);
      return d.getTime();
    }

    var setWeekday_1 = setWeekday;

    function resetLowerUnits(d, unitIndex) {
      return setUnitAndLowerToEdge_1(d, getLowerUnitIndex_1(unitIndex));
    }

    var resetLowerUnits_1 = resetLowerUnits;

    var DAY_INDEX$1 = DateUnitIndexes.DAY_INDEX,
        MONTH_INDEX$1 = DateUnitIndexes.MONTH_INDEX;

    function getHigherUnitIndex(index) {
      return index === DAY_INDEX$1 ? MONTH_INDEX$1 : index + 1;
    }

    var getHigherUnitIndex_1 = getHigherUnitIndex;

    function setYear(d, val) {
      callDateSet_1(d, 'FullYear', val);
    }

    var setYear_1 = setYear;

    function setMonth(d, val) {
      callDateSet_1(d, 'Month', val);
    }

    var setMonth_1 = setMonth;

    function cloneDate(d) {
      // Rhino environments have a bug where new Date(d) truncates
      // milliseconds so need to call getTime() here.
      var clone = new Date(d.getTime());
      _utc(clone, !!_utc(d));
      return clone;
    }

    var cloneDate_1 = cloneDate;

    var floor$5 = mathAliases.floor;

    function moveToBeginningOfWeek(d, firstDayOfWeek) {
      setWeekday_1(d, floor$5((getWeekday_1(d) - firstDayOfWeek) / 7) * 7 + firstDayOfWeek);
      return d;
    }

    var moveToBeginningOfWeek_1 = moveToBeginningOfWeek;

    var MONTH_INDEX$2 = DateUnitIndexes.MONTH_INDEX;

    function moveToFirstDayOfWeekYear(d, firstDayOfWeek, firstDayOfWeekYear) {
      setUnitAndLowerToEdge_1(d, MONTH_INDEX$2);
      setDate_1(d, firstDayOfWeekYear);
      moveToBeginningOfWeek_1(d, firstDayOfWeek);
    }

    var moveToFirstDayOfWeekYear_1 = moveToFirstDayOfWeekYear;

    var isNumber$6 = classChecks.isNumber,
        ISO_FIRST_DAY_OF_WEEK$1 = ISODefaults.ISO_FIRST_DAY_OF_WEEK,
        ISO_FIRST_DAY_OF_WEEK_YEAR$1 = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR;

    function setISOWeekNumber(d, num) {
      if (isNumber$6(num)) {
        // Intentionally avoiding updateDate here to prevent circular dependencies.
        var isoWeek = cloneDate_1(d), dow = getWeekday_1(d);
        moveToFirstDayOfWeekYear_1(isoWeek, ISO_FIRST_DAY_OF_WEEK$1, ISO_FIRST_DAY_OF_WEEK_YEAR$1);
        setDate_1(isoWeek, getDate_1(isoWeek) + 7 * (num - 1));
        setYear_1(d, getYear_1(isoWeek));
        setMonth_1(d, getMonth_1(isoWeek));
        setDate_1(d, getDate_1(isoWeek));
        setWeekday_1(d, dow || 7);
      }
      return d.getTime();
    }

    var setISOWeekNumber_1 = setISOWeekNumber;

    function callDateSetWithWeek(d, method, value, safe) {
      if (method === 'ISOWeek') {
        setISOWeekNumber_1(d, value);
      } else {
        callDateSet_1(d, method, value, safe);
      }
    }

    var callDateSetWithWeek_1 = callDateSetWithWeek;

    var hasOwn$a = coreUtilityAliases.hasOwn;

    function getOwnKey(obj, key) {
      if (hasOwn$a(obj, key)) {
        return key;
      }
    }

    var getOwnKey_1 = getOwnKey;

    function getDateParamKey(params, key) {
      return getOwnKey_1(params, key) ||
             getOwnKey_1(params, key + 's') ||
             (key === 'day' && getOwnKey_1(params, 'date'));
    }

    var getDateParamKey_1 = getDateParamKey;

    var getOwn$9 = coreUtilityAliases.getOwn;

    function getDateParam(params, key) {
      return getOwn$9(params, getDateParamKey_1(params, key));
    }

    var getDateParam_1 = getDateParam;

    var DAY_INDEX$2 = DateUnitIndexes.DAY_INDEX;

    function iterateOverDateParams(params, fn, startIndex, endIndex) {

      function run(name, unit, i) {
        var val = getDateParam_1(params, name);
        if (isDefined_1(val)) {
          fn(name, val, unit, i);
        }
      }

      iterateOverDateUnits_1(function (unit, i) {
        var result = run(unit.name, unit, i);
        if (result !== false && i === DAY_INDEX$2) {
          // Check for "weekday", which has a distinct meaning
          // in the context of setting a date, but has the same
          // meaning as "day" as a unit of time.
          result = run('weekday', unit, i);
        }
        return result;
      }, startIndex, endIndex);

    }

    var iterateOverDateParams_1 = iterateOverDateParams;

    var DAY_INDEX$3 = DateUnitIndexes.DAY_INDEX,
        WEEK_INDEX$1 = DateUnitIndexes.WEEK_INDEX,
        MONTH_INDEX$3 = DateUnitIndexes.MONTH_INDEX,
        YEAR_INDEX$1 = DateUnitIndexes.YEAR_INDEX,
        round$2 = mathAliases.round,
        isNumber$7 = classChecks.isNumber;

    function updateDate(d, params, reset, advance, prefer, weekdayDir, contextDate) {
      var upperUnitIndex;

      function setUpperUnit(unitName, unitIndex) {
        if (prefer && !upperUnitIndex) {
          if (unitName === 'weekday') {
            upperUnitIndex = WEEK_INDEX$1;
          } else {
            upperUnitIndex = getHigherUnitIndex_1(unitIndex);
          }
        }
      }

      function setSpecificity(unitIndex) {
        // Other functions may preemptively set the specificity before arriving
        // here so concede to them if they have already set more specific units.
        if (unitIndex > params.specificity) {
          return;
        }
        params.specificity = unitIndex;
      }

      function canDisambiguate() {
        if (!upperUnitIndex || upperUnitIndex > YEAR_INDEX$1) {
          return;
        }

        switch(prefer) {
          case -1: return d >= (contextDate || getNewDate_1());
          case  1: return d <= (contextDate || getNewDate_1());
        }
      }

      function disambiguateHigherUnit() {
        var unit = DateUnits_1[upperUnitIndex];
        advance = prefer;
        setUnit(unit.name, 1, unit, upperUnitIndex);
      }

      function handleFraction(unit, unitIndex, fraction) {
        if (unitIndex) {
          var lowerUnit = DateUnits_1[getLowerUnitIndex_1(unitIndex)];
          var val = round$2(unit.multiplier / lowerUnit.multiplier * fraction);
          params[lowerUnit.name] = val;
        }
      }

      function monthHasShifted(d, targetMonth) {
        if (targetMonth < 0) {
          targetMonth = targetMonth % 12 + 12;
        }
        return targetMonth % 12 !== getMonth_1(d);
      }

      function setUnit(unitName, value, unit, unitIndex) {
        var method = unit.method, checkMonth, fraction;

        setUpperUnit(unitName, unitIndex);
        setSpecificity(unitIndex);

        fraction = value % 1;
        if (fraction) {
          handleFraction(unit, unitIndex, fraction);
          value = trunc_1(value);
        }

        if (unitName === 'weekday') {
          if (!advance) {
            // Weekdays are always considered absolute units so simply set them
            // here even if it is an "advance" operation. This is to help avoid
            // ambiguous meanings in "advance" as well as to neatly allow formats
            // like "Wednesday of next week" without more complex logic.
            setWeekday_1(d, value, weekdayDir);
          }
          return;
        }
        checkMonth = unitIndex === MONTH_INDEX$3 && getDate_1(d) > 28;

        // If we are advancing or rewinding, then we need we need to set the
        // absolute time if the unit is "hours" or less. This is due to the fact
        // that setting by method is ambiguous during DST shifts. For example,
        // 1:00am on November 1st 2015 occurs twice in North American timezones
        // with DST, the second time being after the clocks are rolled back at
        // 2:00am. When springing forward this is automatically handled as there
        // is no 2:00am so the date automatically jumps to 3:00am. However, when
        // rolling back, setHours(2) will always choose the first "2am" even if
        // the date is currently set to the second, causing unintended jumps.
        // This ambiguity is unavoidable when setting dates as the notation is
        // ambiguous. However when advancing, we clearly want the resulting date
        // to be an acutal hour ahead, which can only be accomplished by setting
        // the absolute time. Conversely, any unit higher than "hours" MUST use
        // the internal set methods, as they are ambiguous as absolute units of
        // time. Years may be 365 or 366 days depending on leap years, months are
        // all over the place, and even days may be 23-25 hours depending on DST
        // shifts. Finally, note that the kind of jumping described above will
        // occur when calling ANY "set" method on the date and will occur even if
        // the value being set is identical to the one currently set (i.e.
        // setHours(2) on a date at 2am may not be a noop). This is precarious,
        // so avoiding this situation in callDateSet by checking up front that
        // the value is not the same before setting.
        if (advance && !unit.ambiguous) {
          d.setTime(d.getTime() + (value * advance * unit.multiplier));
          return;
        } else if (advance) {
          if (unitIndex === WEEK_INDEX$1) {
            value *= 7;
            method = DateUnits_1[DAY_INDEX$3].method;
          }
          value = (value * advance) + callDateGet_1(d, method);
        }
        callDateSetWithWeek_1(d, method, value, advance);
        if (checkMonth && monthHasShifted(d, value)) {
          // As we are setting the units in reverse order, there is a chance that
          // our date may accidentally traverse into a new month, such as setting
          // { month: 1, date 15 } on January 31st. Check for this here and reset
          // the date to the last day of the previous month if this has happened.
          setDate_1(d, 0);
        }
      }

      if (isNumber$7(params) && advance) {
        // If param is a number and advancing, the number is in milliseconds.
        params = { millisecond: params };
      } else if (isNumber$7(params)) {
        // Otherwise just set the timestamp and return.
        d.setTime(params);
        return d;
      }

      iterateOverDateParams_1(params, setUnit);

      if (reset && params.specificity) {
        resetLowerUnits_1(d, params.specificity);
      }

      // If past or future is preferred, then the process of "disambiguation" will
      // ensure that an ambiguous time/date ("4pm", "thursday", "June", etc.) will
      // be in the past or future. Weeks are only considered ambiguous if there is
      // a weekday, i.e. "thursday" is an ambiguous week, but "the 4th" is an
      // ambiguous month.
      if (canDisambiguate()) {
        disambiguateHigherUnit();
      }
      return d;
    }

    var updateDate_1 = updateDate;

    function advanceDate(d, unit, num, reset) {
      var set = {};
      set[unit] = num;
      return updateDate_1(d, set, reset, 1);
    }

    var advanceDate_1 = advanceDate;

    function dateIsValid(d) {
      return !isNaN(d.getTime());
    }

    var dateIsValid_1 = dateIsValid;

    var ceil$6 = mathAliases.ceil;

    function moveToEndOfWeek(d, firstDayOfWeek) {
      var target = firstDayOfWeek - 1;
      setWeekday_1(d, ceil$6((getWeekday_1(d) - target) / 7) * 7 + target);
      return d;
    }

    var moveToEndOfWeek_1 = moveToEndOfWeek;

    var WEEK_INDEX$2 = DateUnitIndexes.WEEK_INDEX,
        localeManager$2 = LocaleHelpers.localeManager;

    function moveToEndOfUnit(d, unitIndex, localeCode, stopIndex) {
      if (unitIndex === WEEK_INDEX$2) {
        moveToEndOfWeek_1(d, localeManager$2.get(localeCode).getFirstDayOfWeek());
      }
      return setUnitAndLowerToEdge_1(d, getLowerUnitIndex_1(unitIndex), stopIndex, true);
    }

    var moveToEndOfUnit_1 = moveToEndOfUnit;

    function deleteDateParam(params, key) {
      delete params[getDateParamKey_1(params, key)];
    }

    var deleteDateParam_1 = deleteDateParam;

    var WEEK_INDEX$3 = DateUnitIndexes.WEEK_INDEX,
        localeManager$3 = LocaleHelpers.localeManager;

    function moveToBeginningOfUnit(d, unitIndex, localeCode) {
      if (unitIndex === WEEK_INDEX$3) {
        moveToBeginningOfWeek_1(d, localeManager$3.get(localeCode).getFirstDayOfWeek());
      }
      return setUnitAndLowerToEdge_1(d, getLowerUnitIndex_1(unitIndex));
    }

    var moveToBeginningOfUnit_1 = moveToBeginningOfUnit;

    var abs$7 = mathAliases.abs;

    function getYearFromAbbreviation(str, d, prefer) {
      // Following IETF here, adding 1900 or 2000 depending on the last two digits.
      // Note that this makes no accordance for what should happen after 2050, but
      // intentionally ignoring this for now. https://www.ietf.org/rfc/rfc2822.txt
      var val = +str, delta;
      val += val < 50 ? 2000 : 1900;
      if (prefer) {
        delta = val - getYear_1(d);
        if (delta / abs$7(delta) !== prefer) {
          val += prefer * 100;
        }
      }
      return val;
    }

    var getYearFromAbbreviation_1 = getYearFromAbbreviation;

    var DAY_INDEX$4 = DateUnitIndexes.DAY_INDEX,
        YEAR_INDEX$2 = DateUnitIndexes.YEAR_INDEX;

    function iterateOverHigherDateParams(params, fn) {
      iterateOverDateParams_1(params, fn, YEAR_INDEX$2, DAY_INDEX$4);
    }

    var iterateOverHigherDateParams_1 = iterateOverHigherDateParams;

    var isNumber$8 = classChecks.isNumber,
        isString$f = classChecks.isString,
        isDate$7 = classChecks.isDate,
        getOwn$a = coreUtilityAliases.getOwn,
        English$1 = LocaleHelpers.English,
        localeManager$4 = LocaleHelpers.localeManager,
        DAY_INDEX$5 = DateUnitIndexes.DAY_INDEX,
        WEEK_INDEX$4 = DateUnitIndexes.WEEK_INDEX,
        MONTH_INDEX$4 = DateUnitIndexes.MONTH_INDEX,
        YEAR_INDEX$3 = DateUnitIndexes.YEAR_INDEX;

    function getExtendedDate(contextDate, d, opt, forceClone) {

      // Locals
      var date, set, loc, afterCallbacks, relative, weekdayDir;

      // Options
      var optPrefer, optLocale, optFromUTC, optSetUTC, optParams, optClone;

      afterCallbacks = [];

      setupOptions(opt);

      function setupOptions(opt) {
        opt = isString$f(opt) ? { locale: opt } : opt || {};
        optPrefer  = +!!getOwn$a(opt, 'future') - +!!getOwn$a(opt, 'past');
        optLocale  = getOwn$a(opt, 'locale');
        optFromUTC = getOwn$a(opt, 'fromUTC');
        optSetUTC  = getOwn$a(opt, 'setUTC');
        optParams  = getOwn$a(opt, 'params');
        optClone   = getOwn$a(opt, 'clone');
      }

      function parseFormatValues(match, dif) {
        var set = optParams || {};
        forEach_1(dif.to, function(param, i) {
          var str = match[i + 1], val;
          if (!str) return;

          val = parseIrregular(str, param);

          if (isUndefined_1(val)) {
            val = loc.parseValue(str, param);
          }

          set[param] = val;
        });
        return set;
      }

      function parseIrregular(str, param) {
        if (param === 'utc') {
          return 1;
        } else if (param === 'year') {
          var match = str.match(ABBREVIATED_YEAR_REG);
          if (match) {
            return getYearFromAbbreviation_1(match[1], date, optPrefer);
          }
        }
      }

      // Force the UTC flags to be true if the source date
      // date is UTC, as they will be overwritten later.
      function cloneDateByFlag(d, clone) {
        if (_utc(d) && !isDefined_1(optFromUTC)) {
          optFromUTC = true;
        }
        if (_utc(d) && !isDefined_1(optSetUTC)) {
          optSetUTC = true;
        }
        if (clone) {
          d = new Date(d.getTime());
        }
        return d;
      }

      function afterDateSet(fn) {
        afterCallbacks.push(fn);
      }

      function fireCallbacks() {
        forEach_1(afterCallbacks, function(fn) {
          fn.call();
        });
      }

      function parseStringDate(str) {

        str = str.toLowerCase();

        // The act of getting the locale will initialize
        // if it is missing and add the required formats.
        loc = localeManager$4.get(optLocale);

        for (var i = 0, dif, match; dif = loc.compiledFormats[i]; i++) {
          match = str.match(dif.reg);
          if (match) {

            // Note that caching the format will modify the compiledFormats array
            // which is not a good idea to do inside its for loop, however we
            // know at this point that we have a matched format and that we will
            // break out below, so simpler to do it here.
            loc.cacheFormat(dif, i);

            set = parseFormatValues(match, dif);

            if (isDefined_1(set.timestamp)) {
              date.setTime(set.timestamp);
              break;
            }

            if (isDefined_1(set.ampm)) {
              handleAmpm(set.ampm);
            }

            if (set.utc || isDefined_1(set.tzHour)) {
              handleTimezoneOffset(set.tzHour, set.tzMinute);
            }

            if (isDefined_1(set.shift) && isUndefined_1(set.unit)) {
              // "next january", "next monday", etc
              handleUnitlessShift();
            }

            if (isDefined_1(set.num) && isUndefined_1(set.unit)) {
              // "the second of January", etc
              handleUnitlessNum(set.num);
            }

            if (set.midday) {
              // "noon" and "midnight"
              handleMidday(set.midday);
            }

            if (isDefined_1(set.day)) {
              // Relative day localizations such as "today" and "tomorrow".
              handleRelativeDay(set.day);
            }

            if (isDefined_1(set.unit)) {
              // "3 days ago", etc
              handleRelativeUnit(set.unit);
            }

            if (set.edge) {
              // "the end of January", etc
              handleEdge(set.edge, set);
            }

            break;
          }
        }

        if (!set) {
          // TODO: remove in next major version
          // Fall back to native parsing
          date = new Date(str);
          if (optFromUTC && dateIsValid_1(date)) {
            // Falling back to system date here which cannot be parsed as UTC,
            // so if we're forcing UTC then simply add the offset.
            date.setTime(date.getTime() + (tzOffset_1(date) * MINUTES));
          }
        } else if (relative) {
          updateDate_1(date, set, false, 1);
        } else {
          updateDate_1(date, set, true, 0, optPrefer, weekdayDir, contextDate);
        }
        fireCallbacks();
        return date;
      }

      function handleAmpm(ampm) {
        if (ampm === 1 && set.hour < 12) {
          // If the time is 1pm-11pm advance the time by 12 hours.
          set.hour += 12;
        } else if (ampm === 0 && set.hour === 12) {
          // If it is 12:00am then set the hour to 0.
          set.hour = 0;
        }
      }

      function handleTimezoneOffset(tzHour, tzMinute) {
        // Adjust for timezone offset
        _utc(date, true);

        // Sign is parsed as part of the hour, so flip
        // the minutes if it's negative.

        if (tzHour < 0) {
          tzMinute *= -1;
        }

        var offset = tzHour * 60 + (tzMinute || 0);
        if (offset) {
          set.minute = (set.minute || 0) - offset;
        }
      }

      function handleUnitlessShift() {
        if (isDefined_1(set.month)) {
          // "next January"
          set.unit = YEAR_INDEX$3;
        } else if (isDefined_1(set.weekday)) {
          // "next Monday"
          set.unit = WEEK_INDEX$4;
        }
      }

      function handleUnitlessNum(num) {
        if (isDefined_1(set.weekday)) {
          // "The second Tuesday of March"
          setOrdinalWeekday(num);
        } else if (isDefined_1(set.month)) {
          // "The second of March"
          set.date = set.num;
        }
      }

      function handleMidday(hour) {
        set.hour = hour % 24;
        if (hour > 23) {
          // If the date has hours past 24, we need to prevent it from traversing
          // into a new day as that would make it being part of a new week in
          // ambiguous dates such as "Monday".
          afterDateSet(function() {
            advanceDate_1(date, 'date', trunc_1(hour / 24));
          });
        }
      }

      function handleRelativeDay() {
        resetTime_1(date);
        if (isUndefined_1(set.unit)) {
          set.unit = DAY_INDEX$5;
          set.num  = set.day;
          delete set.day;
        }
      }

      function handleRelativeUnit(unitIndex) {
        var num;

        if (isDefined_1(set.num)) {
          num = set.num;
        } else if (isDefined_1(set.edge) && isUndefined_1(set.shift)) {
          num = 0;
        } else {
          num = 1;
        }

        // If a weekday is defined, there are 3 possible formats being applied:
        //
        // 1. "the day after monday": unit is days
        // 2. "next monday": short for "next week monday", unit is weeks
        // 3. "the 2nd monday of next month": unit is months
        //
        // In the first case, we need to set the weekday up front, as the day is
        // relative to it. The second case also needs to be handled up front for
        // formats like "next monday at midnight" which will have its weekday reset
        // if not set up front. The last case will set up the params necessary to
        // shift the weekday and allow separateAbsoluteUnits below to handle setting
        // it after the date has been shifted.
        if(isDefined_1(set.weekday)) {
          if(unitIndex === MONTH_INDEX$4) {
            setOrdinalWeekday(num);
            num = 1;
          } else {
            updateDate_1(date, { weekday: set.weekday }, true);
            delete set.weekday;
          }
        }

        if (set.half) {
          // Allow localized "half" as a standalone colloquialism. Purposely avoiding
          // the locale number system to reduce complexity. The units "month" and
          // "week" are purposely excluded in the English date formats below, as
          // "half a week" and "half a month" are meaningless as exact dates.
          num *= set.half;
        }

        if (isDefined_1(set.shift)) {
          // Shift and unit, ie "next month", "last week", etc.
          num *= set.shift;
        } else if (set.sign) {
          // Unit and sign, ie "months ago", "weeks from now", etc.
          num *= set.sign;
        }

        if (isDefined_1(set.day)) {
          // "the day after tomorrow"
          num += set.day;
          delete set.day;
        }

        // Formats like "the 15th of last month" or "6:30pm of next week"
        // contain absolute units in addition to relative ones, so separate
        // them here, remove them from the params, and set up a callback to
        // set them after the relative ones have been set.
        separateAbsoluteUnits(unitIndex);

        // Finally shift the unit.
        set[English$1.units[unitIndex]] = num;
        relative = true;
      }

      function handleEdge(edge, params) {
        var edgeIndex = params.unit, weekdayOfMonth;
        if (!edgeIndex) {
          // If we have "the end of January", then we need to find the unit index.
          iterateOverHigherDateParams_1(params, function(unitName, val, unit, i) {
            if (unitName === 'weekday' && isDefined_1(params.month)) {
              // If both a month and weekday exist, then we have a format like
              // "the last tuesday in November, 2012", where the "last" is still
              // relative to the end of the month, so prevent the unit "weekday"
              // from taking over.
              return;
            }
            edgeIndex = i;
          });
        }
        if (edgeIndex === MONTH_INDEX$4 && isDefined_1(params.weekday)) {
          // If a weekday in a month exists (as described above),
          // then set it up to be set after the date has been shifted.
          weekdayOfMonth = params.weekday;
          delete params.weekday;
        }
        afterDateSet(function() {
          var stopIndex;
          // "edge" values that are at the very edge are "2" so the beginning of the
          // year is -2 and the end of the year is 2. Conversely, the "last day" is
          // actually 00:00am so it is 1. -1 is reserved but unused for now.
          if (edge < 0) {
            moveToBeginningOfUnit_1(date, edgeIndex, optLocale);
          } else if (edge > 0) {
            if (edge === 1) {
              stopIndex = DAY_INDEX$5;
              moveToBeginningOfUnit_1(date, DAY_INDEX$5);
            }
            moveToEndOfUnit_1(date, edgeIndex, optLocale, stopIndex);
          }
          if (isDefined_1(weekdayOfMonth)) {
            setWeekday_1(date, weekdayOfMonth, -edge);
            resetTime_1(date);
          }
        });
        if (edgeIndex === MONTH_INDEX$4) {
          params.specificity = DAY_INDEX$5;
        } else {
          params.specificity = edgeIndex - 1;
        }
      }

      function setOrdinalWeekday(num) {
        // If we have "the 2nd Tuesday of June", then pass the "weekdayDir"
        // flag along to updateDate so that the date does not accidentally traverse
        // into the previous month. This needs to be independent of the "prefer"
        // flag because we are only ensuring that the weekday is in the future, not
        // the entire date.
        set.weekday = 7 * (num - 1) + set.weekday;
        set.date = 1;
        weekdayDir = 1;
      }

      function separateAbsoluteUnits(unitIndex) {
        var params;

        iterateOverDateParams_1(set, function(name, val, unit, i) {
          // If there is a time unit set that is more specific than
          // the matched unit we have a string like "5:30am in 2 minutes",
          // which is meaningless, so invalidate the date...
          if (i >= unitIndex) {
            date.setTime(NaN);
            return false;
          } else if (i < unitIndex) {
            // ...otherwise set the params to set the absolute date
            // as a callback after the relative date has been set.
            params = params || {};
            params[name] = val;
            deleteDateParam_1(set, name);
          }
        });
        if (params) {
          afterDateSet(function() {
            updateDate_1(date, params, true, 0, false, weekdayDir);
            if (optParams) {
              simpleMerge_1(optParams, params);
            }
          });
          if (set.edge) {
            // "the end of March of next year"
            handleEdge(set.edge, params);
            delete set.edge;
          }
        }
      }

      if (contextDate && d) {
        // If a context date is passed ("get" and "unitsFromNow"),
        // then use it as the starting point.
        date = cloneDateByFlag(contextDate, true);
      } else {
        date = getNewDate_1();
      }

      _utc(date, optFromUTC);

      if (isString$f(d)) {
        date = parseStringDate(d);
      } else if (isDate$7(d)) {
        date = cloneDateByFlag(d, optClone || forceClone);
      } else if (isObjectType_1(d)) {
        set = simpleClone_1(d);
        updateDate_1(date, set, true);
      } else if (isNumber$8(d) || d === null) {
        date.setTime(d);
      }
      // A date created by parsing a string presumes that the format *itself* is
      // UTC, but not that the date, once created, should be manipulated as such. In
      // other words, if you are creating a date object from a server time
      // "2012-11-15T12:00:00Z", in the majority of cases you are using it to create
      // a date that will, after creation, be manipulated as local, so reset the utc
      // flag here unless "setUTC" is also set.
      _utc(date, !!optSetUTC);
      return {
        set: set,
        date: date
      };
    }

    var getExtendedDate_1 = getExtendedDate;

    function createDate(d, options, forceClone) {
      return getExtendedDate_1(null, d, options, forceClone).date;
    }

    var createDate_1 = createDate;

    var sugarDate$1 = namespaceAliases.sugarDate;

    function setDateChainableConstructor() {
      setChainableConstructor_1(sugarDate$1, createDate_1);
    }

    var setDateChainableConstructor_1 = setDateChainableConstructor;

    setDateChainableConstructor_1();

    sugarCore.Date.defineStatic({

      'create': function(d, options) {
        return createDate_1(d, options);
      }

    });

    var create$1 = sugarCore.Date.create;

    var localeManager$5 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'getAllLocaleCodes': function() {
        return getKeys_1(localeManager$5.getAll());
      }

    });

    var getAllLocaleCodes = sugarCore.Date.getAllLocaleCodes;

    var localeManager$6 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'getAllLocales': function() {
        return localeManager$6.getAll();
      }

    });

    var getAllLocales = sugarCore.Date.getAllLocales;

    var localeManager$7 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'getLocale': function(code) {
        return localeManager$7.get(code, !code);
      }

    });

    var getLocale = sugarCore.Date.getLocale;

    var localeManager$8 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'removeLocale': function(code) {
        return localeManager$8.remove(code);
      }

    });

    var removeLocale = sugarCore.Date.removeLocale;

    var localeManager$9 = LocaleHelpers.localeManager;

    sugarCore.Date.defineStatic({

      'setLocale': function(code) {
        return localeManager$9.set(code);
      }

    });

    var setLocale = sugarCore.Date.setLocale;

    var sugarNumber$2 = namespaceAliases.sugarNumber,
        round$3 = mathAliases.round;

    function buildNumberUnitMethods() {
      defineInstanceSimilar_1(sugarNumber$2, DateUnits_1, function(methods, unit) {
        var name = unit.name, base, after, before;
        base = function(n) {
          return round$3(n * unit.multiplier);
        };
        after = function(n, d, options) {
          return advanceDate_1(createDate_1(d, options, true), name, n);
        };
        before = function(n, d, options) {
          return advanceDate_1(createDate_1(d, options, true), name, -n);
        };
        methods[name] = base;
        methods[name + 's'] = base;
        methods[name + 'Before'] = before;
        methods[name + 'sBefore'] = before;
        methods[name + 'Ago'] = before;
        methods[name + 'sAgo'] = before;
        methods[name + 'After'] = after;
        methods[name + 'sAfter'] = after;
        methods[name + 'FromNow'] = after;
        methods[name + 'sFromNow'] = after;
      });
    }

    var buildNumberUnitMethods_1 = buildNumberUnitMethods;

    buildNumberUnitMethods_1();

    var day = sugarCore.Number.day;

    var dayAfter = sugarCore.Number.dayAfter;

    var dayAgo = sugarCore.Number.dayAgo;

    var dayBefore = sugarCore.Number.dayBefore;

    var dayFromNow = sugarCore.Number.dayFromNow;

    var days = sugarCore.Number.days;

    var daysAfter = sugarCore.Number.daysAfter;

    var daysAgo = sugarCore.Number.daysAgo;

    var daysBefore = sugarCore.Number.daysBefore;

    var daysFromNow = sugarCore.Number.daysFromNow;

    var localeManager$a = LocaleHelpers.localeManager;

    sugarCore.Number.defineInstance({

      'duration': function(n, localeCode) {
        return localeManager$a.get(localeCode).getDuration(n);
      }

    });

    var duration = sugarCore.Number.duration;

    var hour = sugarCore.Number.hour;

    var hourAfter = sugarCore.Number.hourAfter;

    var hourAgo = sugarCore.Number.hourAgo;

    var hourBefore = sugarCore.Number.hourBefore;

    var hourFromNow = sugarCore.Number.hourFromNow;

    var hours = sugarCore.Number.hours;

    var hoursAfter = sugarCore.Number.hoursAfter;

    var hoursAgo = sugarCore.Number.hoursAgo;

    var hoursBefore = sugarCore.Number.hoursBefore;

    var hoursFromNow = sugarCore.Number.hoursFromNow;

    var millisecond = sugarCore.Number.millisecond;

    var millisecondAfter = sugarCore.Number.millisecondAfter;

    var millisecondAgo = sugarCore.Number.millisecondAgo;

    var millisecondBefore = sugarCore.Number.millisecondBefore;

    var millisecondFromNow = sugarCore.Number.millisecondFromNow;

    var milliseconds = sugarCore.Number.milliseconds;

    var millisecondsAfter = sugarCore.Number.millisecondsAfter;

    var millisecondsAgo = sugarCore.Number.millisecondsAgo;

    var millisecondsBefore = sugarCore.Number.millisecondsBefore;

    var millisecondsFromNow = sugarCore.Number.millisecondsFromNow;

    var minute = sugarCore.Number.minute;

    var minuteAfter = sugarCore.Number.minuteAfter;

    var minuteAgo = sugarCore.Number.minuteAgo;

    var minuteBefore = sugarCore.Number.minuteBefore;

    var minuteFromNow = sugarCore.Number.minuteFromNow;

    var minutes = sugarCore.Number.minutes;

    var minutesAfter = sugarCore.Number.minutesAfter;

    var minutesAgo = sugarCore.Number.minutesAgo;

    var minutesBefore = sugarCore.Number.minutesBefore;

    var minutesFromNow = sugarCore.Number.minutesFromNow;

    var month = sugarCore.Number.month;

    var monthAfter = sugarCore.Number.monthAfter;

    var monthAgo = sugarCore.Number.monthAgo;

    var monthBefore = sugarCore.Number.monthBefore;

    var monthFromNow = sugarCore.Number.monthFromNow;

    var months = sugarCore.Number.months;

    var monthsAfter = sugarCore.Number.monthsAfter;

    var monthsAgo = sugarCore.Number.monthsAgo;

    var monthsBefore = sugarCore.Number.monthsBefore;

    var monthsFromNow = sugarCore.Number.monthsFromNow;

    var second = sugarCore.Number.second;

    var secondAfter = sugarCore.Number.secondAfter;

    var secondAgo = sugarCore.Number.secondAgo;

    var secondBefore = sugarCore.Number.secondBefore;

    var secondFromNow = sugarCore.Number.secondFromNow;

    var seconds = sugarCore.Number.seconds;

    var secondsAfter = sugarCore.Number.secondsAfter;

    var secondsAgo = sugarCore.Number.secondsAgo;

    var secondsBefore = sugarCore.Number.secondsBefore;

    var secondsFromNow = sugarCore.Number.secondsFromNow;

    var week = sugarCore.Number.week;

    var weekAfter = sugarCore.Number.weekAfter;

    var weekAgo = sugarCore.Number.weekAgo;

    var weekBefore = sugarCore.Number.weekBefore;

    var weekFromNow = sugarCore.Number.weekFromNow;

    var weeks = sugarCore.Number.weeks;

    var weeksAfter = sugarCore.Number.weeksAfter;

    var weeksAgo = sugarCore.Number.weeksAgo;

    var weeksBefore = sugarCore.Number.weeksBefore;

    var weeksFromNow = sugarCore.Number.weeksFromNow;

    var year = sugarCore.Number.year;

    var yearAfter = sugarCore.Number.yearAfter;

    var yearAgo = sugarCore.Number.yearAgo;

    var yearBefore = sugarCore.Number.yearBefore;

    var yearFromNow = sugarCore.Number.yearFromNow;

    var years = sugarCore.Number.years;

    var yearsAfter = sugarCore.Number.yearsAfter;

    var yearsAgo = sugarCore.Number.yearsAgo;

    var yearsBefore = sugarCore.Number.yearsBefore;

    var yearsFromNow = sugarCore.Number.yearsFromNow;

    var MONTH_INDEX$5 = DateUnitIndexes.MONTH_INDEX;

    function compareDate(date, d, margin, localeCode, options) {
      var loMargin = 0, hiMargin = 0, timezoneShift, compareEdges, override, min, max, p, t;

      function getTimezoneShift() {
        // If there is any specificity in the date then we're implicitly not
        // checking absolute time, so ignore timezone shifts.
        if (p.set && p.set.specificity) {
          return 0;
        }
        return (tzOffset_1(p.date) - tzOffset_1(date)) * MINUTES;
      }

      function addSpecificUnit() {
        var unit = DateUnits_1[p.set.specificity];
        return advanceDate_1(cloneDate_1(p.date), unit.name, 1).getTime() - 1;
      }

      if (_utc(date)) {
        options = options || {};
        options.fromUTC = true;
        options.setUTC = true;
      }

      p = getExtendedDate_1(null, d, options, true);

      if (margin > 0) {
        loMargin = hiMargin = margin;
        override = true;
      }
      if (!dateIsValid_1(p.date)) return false;
      if (p.set && p.set.specificity) {
        if (isDefined_1(p.set.edge) || isDefined_1(p.set.shift)) {
          compareEdges = true;
          moveToBeginningOfUnit_1(p.date, p.set.specificity, localeCode);
        }
        if (compareEdges || p.set.specificity === MONTH_INDEX$5) {
          max = moveToEndOfUnit_1(cloneDate_1(p.date), p.set.specificity, localeCode).getTime();
        } else {
          max = addSpecificUnit();
        }
        if (!override && isDefined_1(p.set.sign) && p.set.specificity) {
          // If the time is relative, there can occasionally be an disparity between
          // the relative date and "now", which it is being compared to, so set an
          // extra margin to account for this.
          loMargin = 50;
          hiMargin = -50;
        }
      }
      t   = date.getTime();
      min = p.date.getTime();
      max = max || min;
      timezoneShift = getTimezoneShift();
      // istanbul ignore if
      if (timezoneShift) {
        min -= timezoneShift;
        max -= timezoneShift;
      }
      return t >= (min - loMargin) && t <= (max + hiMargin);
    }

    var compareDate_1 = compareDate;

    function getTimeDistanceForUnit(d1, d2, unit) {
      var fwd = d2 > d1, num, tmp;
      if (!fwd) {
        tmp = d2;
        d2  = d1;
        d1  = tmp;
      }
      num = d2 - d1;
      if (unit.multiplier > 1) {
        num = trunc_1(num / unit.multiplier);
      }
      // For higher order with potential ambiguity, use the numeric calculation
      // as a starting point, then iterate until we pass the target date. Decrement
      // starting point by 1 to prevent overshooting the date due to inconsistencies
      // in ambiguous units numerically. For example, calculating the number of days
      // from the beginning of the year to August 5th at 11:59:59 by doing a simple
      // d2 - d1 will produce different results depending on whether or not a
      // timezone shift was encountered due to DST, however that should not have an
      // effect on our calculation here, so subtract by 1 to ensure that the
      // starting point has not already overshot our target date.
      if (unit.ambiguous) {
        d1 = cloneDate_1(d1);
        if (num) {
          num -= 1;
          advanceDate_1(d1, unit.name, num);
        }
        while (d1 < d2) {
          advanceDate_1(d1, unit.name, 1);
          if (d1 > d2) {
            break;
          }
          num += 1;
        }
      }
      return fwd ? -num : num;
    }

    var getTimeDistanceForUnit_1 = getTimeDistanceForUnit;

    var sugarDate$2 = namespaceAliases.sugarDate,
        HOURS_INDEX$2 = DateUnitIndexes.HOURS_INDEX,
        DAY_INDEX$6 = DateUnitIndexes.DAY_INDEX;

    function buildDateUnitMethods() {

      defineInstanceSimilar_1(sugarDate$2, DateUnits_1, function(methods, unit, index) {
        var name = unit.name, caps = simpleCapitalize_1(name);

        if (index > DAY_INDEX$6) {
          forEach_1(['Last','This','Next'], function(shift) {
            methods['is' + shift + caps] = function(d, localeCode) {
              return compareDate_1(d, shift + ' ' + name, 0, localeCode, { locale: 'en' });
            };
          });
        }
        if (index > HOURS_INDEX$2) {
          methods['beginningOf' + caps] = function(d, localeCode) {
            return moveToBeginningOfUnit_1(d, index, localeCode);
          };
          methods['endOf' + caps] = function(d, localeCode) {
            return moveToEndOfUnit_1(d, index, localeCode);
          };
        }

        methods['add' + caps + 's'] = function(d, num, reset) {
          return advanceDate_1(d, name, num, reset);
        };

        var since = function(date, d, options) {
          return getTimeDistanceForUnit_1(date, createDate_1(d, options, true), unit);
        };
        var until = function(date, d, options) {
          return getTimeDistanceForUnit_1(createDate_1(d, options, true), date, unit);
        };

        methods[name + 'sAgo']   = methods[name + 'sUntil']   = until;
        methods[name + 'sSince'] = methods[name + 'sFromNow'] = since;

      });

    }

    var buildDateUnitMethods_1 = buildDateUnitMethods;

    buildDateUnitMethods_1();

    var addDays = sugarCore.Date.addDays;

    var addHours = sugarCore.Date.addHours;

    var addMilliseconds = sugarCore.Date.addMilliseconds;

    var addMinutes = sugarCore.Date.addMinutes;

    var addMonths = sugarCore.Date.addMonths;

    var addSeconds = sugarCore.Date.addSeconds;

    var addWeeks = sugarCore.Date.addWeeks;

    var addYears = sugarCore.Date.addYears;

    function getDateParamsFromString(str) {
      var match, num, params = {};
      match = str.match(/^(-?\d*[\d.]\d*)?\s?(\w+?)s?$/i);
      if (match) {
        if (isUndefined_1(num)) {
          num = match[1] ? +match[1] : 1;
        }
        params[match[2].toLowerCase()] = num;
      }
      return params;
    }

    var getDateParamsFromString_1 = getDateParamsFromString;

    var YEAR_INDEX$4 = DateUnitIndexes.YEAR_INDEX;

    function collectDateParamsFromArguments(args) {
      var params = {}, index = 0;
      walkUnitDown_1(YEAR_INDEX$4, function(unit) {
        var arg = args[index++];
        if (isDefined_1(arg)) {
          params[unit.name] = arg;
        }
      });
      return params;
    }

    var collectDateParamsFromArguments_1 = collectDateParamsFromArguments;

    var isNumber$9 = classChecks.isNumber,
        isString$g = classChecks.isString;

    function collectUpdateDateArguments(args, allowDuration) {
      var arg1 = args[0], arg2 = args[1], params, reset;
      if (allowDuration && isString$g(arg1)) {
        params = getDateParamsFromString_1(arg1);
        reset  = arg2;
      } else if (isNumber$9(arg1) && isNumber$9(arg2)) {
        params = collectDateParamsFromArguments_1(args);
      } else {
        params = isObjectType_1(arg1) ? simpleClone_1(arg1) : arg1;
        reset  = arg2;
      }
      return [params, reset];
    }

    var collectUpdateDateArguments_1 = collectUpdateDateArguments;

    function advanceDateWithArgs(d, args, dir) {
      args = collectUpdateDateArguments_1(args, true);
      return updateDate_1(d, args[0], args[1], dir);
    }

    var advanceDateWithArgs_1 = advanceDateWithArgs;

    sugarCore.Date.defineInstanceWithArguments({

      'advance': function(d, args) {
        return advanceDateWithArgs_1(d, args, 1);
      }

    });

    var advance = sugarCore.Date.advance;

    var beginningOfDay = sugarCore.Date.beginningOfDay;

    sugarCore.Date.defineInstance({

      'beginningOfISOWeek': function(date) {
        var day = getWeekday_1(date);
        if (day === 0) {
          day = -6;
        } else if (day !== 1) {
          day = 1;
        }
        setWeekday_1(date, day);
        return resetTime_1(date);
      }

    });

    var beginningOfISOWeek = sugarCore.Date.beginningOfISOWeek;

    var beginningOfMonth = sugarCore.Date.beginningOfMonth;

    var beginningOfWeek = sugarCore.Date.beginningOfWeek;

    var beginningOfYear = sugarCore.Date.beginningOfYear;

    sugarCore.Date.defineInstance({

      'clone': function(date) {
        return cloneDate_1(date);
      }

    });

    var clone$2 = sugarCore.Date.clone;

    var daysAgo$1 = sugarCore.Date.daysAgo;

    var daysFromNow$1 = sugarCore.Date.daysFromNow;

    sugarCore.Date.defineInstance({

      'daysInMonth': function(date) {
        return getDaysInMonth_1(date);
      }

    });

    var daysInMonth = sugarCore.Date.daysInMonth;

    var daysSince = sugarCore.Date.daysSince;

    var daysUntil = sugarCore.Date.daysUntil;

    var endOfDay = sugarCore.Date.endOfDay;

    var DAY_INDEX$7 = DateUnitIndexes.DAY_INDEX;

    sugarCore.Date.defineInstance({

      'endOfISOWeek': function(date) {
        if (getWeekday_1(date) !== 0) {
          setWeekday_1(date, 7);
        }
        return moveToEndOfUnit_1(date, DAY_INDEX$7);
      }

    });

    var endOfISOWeek = sugarCore.Date.endOfISOWeek;

    var endOfMonth = sugarCore.Date.endOfMonth;

    var endOfWeek = sugarCore.Date.endOfWeek;

    var endOfYear = sugarCore.Date.endOfYear;

    var CoreOutputFormats = {
      'ISO8601': '{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{SSS}{Z}',
      'RFC1123': '{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {ZZ}',
      'RFC1036': '{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {ZZ}'
    };

    var CoreOutputFormats_1 = CoreOutputFormats;

    var TIMEZONE_ABBREVIATION_REG = /\(([-+]\d{2,4}|\w{3,5})\)$/;

    function getHours(d) {
      return callDateGet_1(d, 'Hours');
    }

    var getHours_1 = getHours;

    var ISO_FIRST_DAY_OF_WEEK$2 = ISODefaults.ISO_FIRST_DAY_OF_WEEK,
        ISO_FIRST_DAY_OF_WEEK_YEAR$2 = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR;

    function getWeekNumber(d, allowPrevious, firstDayOfWeek, firstDayOfWeekYear) {
      var isoWeek, n = 0;
      if (isUndefined_1(firstDayOfWeek)) {
        firstDayOfWeek = ISO_FIRST_DAY_OF_WEEK$2;
      }
      if (isUndefined_1(firstDayOfWeekYear)) {
        firstDayOfWeekYear = ISO_FIRST_DAY_OF_WEEK_YEAR$2;
      }
      // Moving to the end of the week allows for forward year traversal, ie
      // Dec 29 2014 is actually week 01 of 2015.
      isoWeek = moveToEndOfWeek_1(cloneDate_1(d), firstDayOfWeek);
      moveToFirstDayOfWeekYear_1(isoWeek, firstDayOfWeek, firstDayOfWeekYear);
      if (allowPrevious && d < isoWeek) {
        // If the date is still before the start of the year, then it should be
        // the last week of the previous year, ie Jan 1 2016 is actually week 53
        // of 2015, so move to the beginning of the week to traverse the year.
        isoWeek = moveToBeginningOfWeek_1(cloneDate_1(d), firstDayOfWeek);
        moveToFirstDayOfWeekYear_1(isoWeek, firstDayOfWeek, firstDayOfWeekYear);
      }
      while (isoWeek <= d) {
        // Doing a very simple walk to get the week number.
        setDate_1(isoWeek, getDate_1(isoWeek) + 7);
        n++;
      }
      return n;
    }

    var getWeekNumber_1 = getWeekNumber;

    var localeManager$b = LocaleHelpers.localeManager;

    function getWeekYear(d, localeCode, iso) {
      var year, month, firstDayOfWeek, firstDayOfWeekYear, week, loc;
      year = getYear_1(d);
      month = getMonth_1(d);
      if (month === 0 || month === 11) {
        if (!iso) {
          loc = localeManager$b.get(localeCode);
          firstDayOfWeek = loc.getFirstDayOfWeek(localeCode);
          firstDayOfWeekYear = loc.getFirstDayOfWeekYear(localeCode);
        }
        week = getWeekNumber_1(d, false, firstDayOfWeek, firstDayOfWeekYear);
        if (month === 0 && week === 0) {
          year -= 1;
        } else if (month === 11 && week === 1) {
          year += 1;
        }
      }
      return year;
    }

    var getWeekYear_1 = getWeekYear;

    var abs$8 = mathAliases.abs;

    function getUTCOffset(d, iso) {
      var offset = _utc(d) ? 0 : tzOffset_1(d), hours, mins, colon;
      colon  = iso === true ? ':' : '';
      if (!offset && iso) return 'Z';
      hours = padNumber_1(trunc_1(-offset / 60), 2, true);
      mins = padNumber_1(abs$8(offset % 60), 2);
      return  hours + colon + mins;
    }

    var getUTCOffset_1 = getUTCOffset;

    var DAY_INDEX$8 = DateUnitIndexes.DAY_INDEX;

    function getDaysSince(d1, d2) {
      return getTimeDistanceForUnit_1(d1, d2, DateUnits_1[DAY_INDEX$8]);
    }

    var getDaysSince_1 = getDaysSince;

    var localeManager$c = LocaleHelpers.localeManager;

    function getMeridiemToken(d, localeCode) {
      var hours = getHours_1(d);
      return localeManager$c.get(localeCode).ampm[trunc_1(hours / 12)] || '';
    }

    var getMeridiemToken_1 = getMeridiemToken;

    var localeManager$d = LocaleHelpers.localeManager,
        MONTH_INDEX$6 = DateUnitIndexes.MONTH_INDEX,
        ceil$7 = mathAliases.ceil;

    var FormatTokensBase = [
      {
        ldml: 'Dow',
        strf: 'a',
        lowerToken: 'dow',
        get: function(d, localeCode) {
          return localeManager$d.get(localeCode).getWeekdayName(getWeekday_1(d), 2);
        }
      },
      {
        ldml: 'Weekday',
        strf: 'A',
        lowerToken: 'weekday',
        allowAlternates: true,
        get: function(d, localeCode, alternate) {
          return localeManager$d.get(localeCode).getWeekdayName(getWeekday_1(d), alternate);
        }
      },
      {
        ldml: 'Mon',
        strf: 'b h',
        lowerToken: 'mon',
        get: function(d, localeCode) {
          return localeManager$d.get(localeCode).getMonthName(getMonth_1(d), 2);
        }
      },
      {
        ldml: 'Month',
        strf: 'B',
        lowerToken: 'month',
        allowAlternates: true,
        get: function(d, localeCode, alternate) {
          return localeManager$d.get(localeCode).getMonthName(getMonth_1(d), alternate);
        }
      },
      {
        strf: 'C',
        get: function(d) {
          return getYear_1(d).toString().slice(0, 2);
        }
      },
      {
        ldml: 'd date day',
        strf: 'd',
        strfPadding: 2,
        ldmlPaddedToken: 'dd',
        ordinalToken: 'do',
        get: function(d) {
          return getDate_1(d);
        }
      },
      {
        strf: 'e',
        get: function(d) {
          return padNumber_1(getDate_1(d), 2, false, 10, ' ');
        }
      },
      {
        ldml: 'H 24hr',
        strf: 'H',
        strfPadding: 2,
        ldmlPaddedToken: 'HH',
        get: function(d) {
          return getHours_1(d);
        }
      },
      {
        ldml: 'h hours 12hr',
        strf: 'I',
        strfPadding: 2,
        ldmlPaddedToken: 'hh',
        get: function(d) {
          return getHours_1(d) % 12 || 12;
        }
      },
      {
        ldml: 'D',
        strf: 'j',
        strfPadding: 3,
        ldmlPaddedToken: 'DDD',
        get: function(d) {
          var s = setUnitAndLowerToEdge_1(cloneDate_1(d), MONTH_INDEX$6);
          return getDaysSince_1(d, s) + 1;
        }
      },
      {
        ldml: 'M',
        strf: 'm',
        strfPadding: 2,
        ordinalToken: 'Mo',
        ldmlPaddedToken: 'MM',
        get: function(d) {
          return getMonth_1(d) + 1;
        }
      },
      {
        ldml: 'm minutes',
        strf: 'M',
        strfPadding: 2,
        ldmlPaddedToken: 'mm',
        get: function(d) {
          return callDateGet_1(d, 'Minutes');
        }
      },
      {
        ldml: 'Q',
        get: function(d) {
          return ceil$7((getMonth_1(d) + 1) / 3);
        }
      },
      {
        ldml: 'TT',
        strf: 'p',
        get: function(d, localeCode) {
          return getMeridiemToken_1(d, localeCode);
        }
      },
      {
        ldml: 'tt',
        strf: 'P',
        get: function(d, localeCode) {
          return getMeridiemToken_1(d, localeCode).toLowerCase();
        }
      },
      {
        ldml: 'T',
        lowerToken: 't',
        get: function(d, localeCode) {
          return getMeridiemToken_1(d, localeCode).charAt(0);
        }
      },
      {
        ldml: 's seconds',
        strf: 'S',
        strfPadding: 2,
        ldmlPaddedToken: 'ss',
        get: function(d) {
          return callDateGet_1(d, 'Seconds');
        }
      },
      {
        ldml: 'S ms',
        strfPadding: 3,
        ldmlPaddedToken: 'SSS',
        get: function(d) {
          return callDateGet_1(d, 'Milliseconds');
        }
      },
      {
        ldml: 'e',
        strf: 'u',
        ordinalToken: 'eo',
        get: function(d) {
          return getWeekday_1(d) || 7;
        }
      },
      {
        strf: 'U',
        strfPadding: 2,
        get: function(d) {
          // Sunday first, 0-53
          return getWeekNumber_1(d, false, 0);
        }
      },
      {
        ldml: 'W',
        strf: 'V',
        strfPadding: 2,
        ordinalToken: 'Wo',
        ldmlPaddedToken: 'WW',
        get: function(d) {
          // Monday first, 1-53 (ISO8601)
          return getWeekNumber_1(d, true);
        }
      },
      {
        strf: 'w',
        get: function(d) {
          return getWeekday_1(d);
        }
      },
      {
        ldml: 'w',
        ordinalToken: 'wo',
        ldmlPaddedToken: 'ww',
        get: function(d, localeCode) {
          // Locale dependent, 1-53
          var loc = localeManager$d.get(localeCode),
              dow = loc.getFirstDayOfWeek(localeCode),
              doy = loc.getFirstDayOfWeekYear(localeCode);
          return getWeekNumber_1(d, true, dow, doy);
        }
      },
      {
        strf: 'W',
        strfPadding: 2,
        get: function(d) {
          // Monday first, 0-53
          return getWeekNumber_1(d, false);
        }
      },
      {
        ldmlPaddedToken: 'gggg',
        ldmlTwoDigitToken: 'gg',
        get: function(d, localeCode) {
          return getWeekYear_1(d, localeCode);
        }
      },
      {
        strf: 'G',
        strfPadding: 4,
        strfTwoDigitToken: 'g',
        ldmlPaddedToken: 'GGGG',
        ldmlTwoDigitToken: 'GG',
        get: function(d, localeCode) {
          return getWeekYear_1(d, localeCode, true);
        }
      },
      {
        ldml: 'year',
        ldmlPaddedToken: 'yyyy',
        ldmlTwoDigitToken: 'yy',
        strf: 'Y',
        strfPadding: 4,
        strfTwoDigitToken: 'y',
        get: function(d) {
          return getYear_1(d);
        }
      },
      {
        ldml: 'ZZ',
        strf: 'z',
        get: function(d) {
          return getUTCOffset_1(d);
        }
      },
      {
        ldml: 'X',
        get: function(d) {
          return trunc_1(d.getTime() / 1000);
        }
      },
      {
        ldml: 'x',
        get: function(d) {
          return d.getTime();
        }
      },
      {
        ldml: 'Z',
        get: function(d) {
          return getUTCOffset_1(d, true);
        }
      },
      {
        ldml: 'z',
        strf: 'Z',
        get: function(d) {
          // Note that this is not accurate in all browsing environments!
          // https://github.com/moment/moment/issues/162
          // It will continue to be supported for Node and usage with the
          // understanding that it may be blank.
          var match = d.toString().match(TIMEZONE_ABBREVIATION_REG);
          // istanbul ignore next
          return match ? match[1] : '';
        }
      },
      {
        strf: 'D',
        alias: '%m/%d/%y'
      },
      {
        strf: 'F',
        alias: '%Y-%m-%d'
      },
      {
        strf: 'r',
        alias: '%I:%M:%S %p'
      },
      {
        strf: 'R',
        alias: '%H:%M'
      },
      {
        strf: 'T',
        alias: '%H:%M:%S'
      },
      {
        strf: 'x',
        alias: '{short}'
      },
      {
        strf: 'X',
        alias: '{time}'
      },
      {
        strf: 'c',
        alias: '{stamp}'
      }
    ];

    var FormatTokensBase_1 = FormatTokensBase;

    var localeManager$e = LocaleHelpers.localeManager,
        hasOwn$b = coreUtilityAliases.hasOwn,
        getOwn$b = coreUtilityAliases.getOwn,
        forEachProperty$m = coreUtilityAliases.forEachProperty,
        sugarDate$3 = namespaceAliases.sugarDate;

    var ldmlTokens, strfTokens;

    function buildDateFormatTokens() {

      function addFormats(target, tokens, fn) {
        if (tokens) {
          forEach_1(spaceSplit_1(tokens), function(token) {
            target[token] = fn;
          });
        }
      }

      function buildLowercase(get) {
        return function(d, localeCode) {
          return get(d, localeCode).toLowerCase();
        };
      }

      function buildOrdinal(get) {
        return function(d, localeCode) {
          var n = get(d, localeCode);
          return n + localeManager$e.get(localeCode).getOrdinal(n);
        };
      }

      function buildPadded(get, padding) {
        return function(d, localeCode) {
          return padNumber_1(get(d, localeCode), padding);
        };
      }

      function buildTwoDigits(get) {
        return function(d, localeCode) {
          return get(d, localeCode) % 100;
        };
      }

      function buildAlias(alias) {
        return function(d, localeCode) {
          return dateFormatMatcher(alias, d, localeCode);
        };
      }

      function buildAlternates(f) {
        for (var n = 1; n <= 5; n++) {
          buildAlternate(f, n);
        }
      }

      function buildAlternate(f, n) {
        var alternate = function(d, localeCode) {
          return f.get(d, localeCode, n);
        };
        addFormats(ldmlTokens, f.ldml + n, alternate);
        if (f.lowerToken) {
          ldmlTokens[f.lowerToken + n] = buildLowercase(alternate);
        }
      }

      function getIdentityFormat(name) {
        return function(d, localeCode) {
          var loc = localeManager$e.get(localeCode);
          return dateFormatMatcher(loc[name], d, localeCode);
        };
      }

      ldmlTokens = {};
      strfTokens = {};

      forEach_1(FormatTokensBase_1, function(f) {
        var get = f.get, getPadded;
        if (f.lowerToken) {
          ldmlTokens[f.lowerToken] = buildLowercase(get);
        }
        if (f.ordinalToken) {
          ldmlTokens[f.ordinalToken] = buildOrdinal(get);
        }
        if (f.ldmlPaddedToken) {
          ldmlTokens[f.ldmlPaddedToken] = buildPadded(get, f.ldmlPaddedToken.length);
        }
        if (f.ldmlTwoDigitToken) {
          ldmlTokens[f.ldmlTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);
        }
        if (f.strfTwoDigitToken) {
          strfTokens[f.strfTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);
        }
        if (f.strfPadding) {
          getPadded = buildPadded(get, f.strfPadding);
        }
        if (f.alias) {
          get = buildAlias(f.alias);
        }
        if (f.allowAlternates) {
          buildAlternates(f);
        }
        addFormats(ldmlTokens, f.ldml, get);
        addFormats(strfTokens, f.strf, getPadded || get);
      });

      forEachProperty$m(CoreOutputFormats_1, function(src, name) {
        addFormats(ldmlTokens, name, buildAlias(src));
      });

      defineInstanceSimilar_1(sugarDate$3, 'short medium long full', function(methods, name) {
        var fn = getIdentityFormat(name);
        addFormats(ldmlTokens, name, fn);
        methods[name] = fn;
      });

      addFormats(ldmlTokens, 'time', getIdentityFormat('time'));
      addFormats(ldmlTokens, 'stamp', getIdentityFormat('stamp'));
    }

    var dateFormatMatcher;

    function buildDateFormatMatcher() {

      function getLdml(d, token, localeCode) {
        return getOwn$b(ldmlTokens, token)(d, localeCode);
      }

      function getStrf(d, token, localeCode) {
        return getOwn$b(strfTokens, token)(d, localeCode);
      }

      function checkDateToken(ldml, strf) {
        return hasOwn$b(ldmlTokens, ldml) || hasOwn$b(strfTokens, strf);
      }

      // Format matcher for LDML or STRF tokens.
      dateFormatMatcher = createFormatMatcher_1(getLdml, getStrf, checkDateToken);
    }

    buildDateFormatTokens();

    buildDateFormatMatcher();

    var formattingTokens = {
      ldmlTokens: ldmlTokens,
      strfTokens: strfTokens,
      dateFormatMatcher: dateFormatMatcher
    };

    function assertDateIsValid(d) {
      if (!dateIsValid_1(d)) {
        throw new TypeError('Date is not valid');
      }
    }

    var assertDateIsValid_1 = assertDateIsValid;

    var dateFormatMatcher$1 = formattingTokens.dateFormatMatcher;

    function dateFormat(d, format, localeCode) {
      assertDateIsValid_1(d);
      format = CoreOutputFormats_1[format] || format || '{long}';
      return dateFormatMatcher$1(format, d, localeCode);
    }

    var dateFormat_1 = dateFormat;

    sugarCore.Date.defineInstance({

      'format': function(date, f, localeCode) {
        return dateFormat_1(date, f, localeCode);
      }

    });

    var format$2 = sugarCore.Date.format;

    function createDateWithContext(contextDate, d, options, forceClone) {
      return getExtendedDate_1(contextDate, d, options, forceClone).date;
    }

    var createDateWithContext_1 = createDateWithContext;

    sugarCore.Date.defineInstance({

      'get': function(date, d, options) {
        return createDateWithContext_1(date, d, options);
      }

    });

    var get$1 = sugarCore.Date.get;

    sugarCore.Date.defineInstance({

      'getISOWeek': function(date) {
        return getWeekNumber_1(date, true);
      }

    });

    var getISOWeek = sugarCore.Date.getISOWeek;

    sugarCore.Date.defineInstance({

      'getUTCOffset': function(date, iso) {
        return getUTCOffset_1(date, iso);
      }

    });

    var getUTCOffset_1$1 = sugarCore.Date.getUTCOffset;

    sugarCore.Date.defineInstance({

      'getUTCWeekday': function(date) {
        return date.getUTCDay();
      }

    });

    var getUTCWeekday = sugarCore.Date.getUTCWeekday;

    sugarCore.Date.defineInstance({

      'getWeekday': function(date) {
        return getWeekday_1(date);
      }

    });

    var getWeekday_1$1 = sugarCore.Date.getWeekday;

    var hoursAgo$1 = sugarCore.Date.hoursAgo;

    var hoursFromNow$1 = sugarCore.Date.hoursFromNow;

    var hoursSince = sugarCore.Date.hoursSince;

    var hoursUntil = sugarCore.Date.hoursUntil;

    function compareDay(d, shift) {
      var comp = getNewDate_1();
      if (shift) {
        setDate_1(comp, getDate_1(comp) + shift);
      }
      return getYear_1(d) === getYear_1(comp) &&
             getMonth_1(d) === getMonth_1(comp) &&
             getDate_1(d) === getDate_1(comp);
    }

    var compareDay_1 = compareDay;

    var isString$h = classChecks.isString,
        English$2 = LocaleHelpers.English;

    function fullCompareDate(date, d, margin) {
      var tmp;
      if (!dateIsValid_1(date)) return;
      if (isString$h(d)) {
        d = trim_1(d).toLowerCase();
        switch(true) {
          case d === 'future':    return date.getTime() > getNewDate_1().getTime();
          case d === 'past':      return date.getTime() < getNewDate_1().getTime();
          case d === 'today':     return compareDay_1(date);
          case d === 'tomorrow':  return compareDay_1(date,  1);
          case d === 'yesterday': return compareDay_1(date, -1);
          case d === 'weekday':   return getWeekday_1(date) > 0 && getWeekday_1(date) < 6;
          case d === 'weekend':   return getWeekday_1(date) === 0 || getWeekday_1(date) === 6;

          case (isDefined_1(tmp = English$2.weekdayMap[d])):
            return getWeekday_1(date) === tmp;
          case (isDefined_1(tmp = English$2.monthMap[d])):
            return getMonth_1(date) === tmp;
        }
      }
      return compareDate_1(date, d, margin);
    }

    var fullCompareDate_1 = fullCompareDate;

    sugarCore.Date.defineInstance({

      'is': function(date, d, margin) {
        return fullCompareDate_1(date, d, margin);
      }

    });

    var is = sugarCore.Date.is;

    sugarCore.Date.defineInstance({

      'isAfter': function(date, d, margin) {
        return date.getTime() > createDate_1(d).getTime() - (margin || 0);
      }

    });

    var isAfter = sugarCore.Date.isAfter;

    sugarCore.Date.defineInstance({

      'isBefore': function(date, d, margin) {
        return date.getTime() < createDate_1(d).getTime() + (margin || 0);
      }

    });

    var isBefore = sugarCore.Date.isBefore;

    var min$6 = mathAliases.min,
        max$a = mathAliases.max;

    sugarCore.Date.defineInstance({

      'isBetween': function(date, d1, d2, margin) {
        var t  = date.getTime();
        var t1 = createDate_1(d1).getTime();
        var t2 = createDate_1(d2).getTime();
        var lo = min$6(t1, t2);
        var hi = max$a(t1, t2);
        margin = margin || 0;
        return (lo - margin <= t) && (hi + margin >= t);
      }

    });

    var isBetween = sugarCore.Date.isBetween;

    var English$3 = LocaleHelpers.English,
        sugarDate$4 = namespaceAliases.sugarDate;

    function buildRelativeAliases() {
      var special  = spaceSplit_1('Today Yesterday Tomorrow Weekday Weekend Future Past');
      var weekdays = English$3.weekdays.slice(0, 7);
      var months   = English$3.months.slice(0, 12);
      var together = special.concat(weekdays).concat(months);
      defineInstanceSimilar_1(sugarDate$4, together, function(methods, name) {
        methods['is'+ name] = function(d) {
          return fullCompareDate_1(d, name);
        };
      });
    }

    var buildRelativeAliases_1 = buildRelativeAliases;

    buildRelativeAliases_1();

    var isFriday = sugarCore.Date.isFriday;

    var isFuture = sugarCore.Date.isFuture;

    var isLastMonth = sugarCore.Date.isLastMonth;

    var isLastWeek = sugarCore.Date.isLastWeek;

    var isLastYear = sugarCore.Date.isLastYear;

    sugarCore.Date.defineInstance({

      'isLeapYear': function(date) {
        var year = getYear_1(date);
        return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
      }

    });

    var isLeapYear = sugarCore.Date.isLeapYear;

    var isMonday = sugarCore.Date.isMonday;

    var isNextMonth = sugarCore.Date.isNextMonth;

    var isNextWeek = sugarCore.Date.isNextWeek;

    var isNextYear = sugarCore.Date.isNextYear;

    var isPast = sugarCore.Date.isPast;

    var isSaturday = sugarCore.Date.isSaturday;

    var isSunday = sugarCore.Date.isSunday;

    var isThisMonth = sugarCore.Date.isThisMonth;

    var isThisWeek = sugarCore.Date.isThisWeek;

    var isThisYear = sugarCore.Date.isThisYear;

    var isThursday = sugarCore.Date.isThursday;

    var isToday = sugarCore.Date.isToday;

    var isTomorrow = sugarCore.Date.isTomorrow;

    var isTuesday = sugarCore.Date.isTuesday;

    function isUTC(d) {
      return !!_utc(d) || tzOffset_1(d) === 0;
    }

    var isUTC_1 = isUTC;

    sugarCore.Date.defineInstance({

      'isUTC': function(date) {
        return isUTC_1(date);
      }

    });

    var isUTC_1$1 = sugarCore.Date.isUTC;

    sugarCore.Date.defineInstance({

      'isValid': function(date) {
        return dateIsValid_1(date);
      }

    });

    var isValid = sugarCore.Date.isValid;

    var isWednesday = sugarCore.Date.isWednesday;

    var isWeekday = sugarCore.Date.isWeekday;

    var isWeekend = sugarCore.Date.isWeekend;

    var isYesterday = sugarCore.Date.isYesterday;

    sugarCore.Date.defineInstance({

      'iso': function(date) {
        return date.toISOString();
      }

    });

    var iso = sugarCore.Date.iso;

    var millisecondsAgo$1 = sugarCore.Date.millisecondsAgo;

    var millisecondsFromNow$1 = sugarCore.Date.millisecondsFromNow;

    var millisecondsSince = sugarCore.Date.millisecondsSince;

    var millisecondsUntil = sugarCore.Date.millisecondsUntil;

    var minutesAgo$1 = sugarCore.Date.minutesAgo;

    var minutesFromNow$1 = sugarCore.Date.minutesFromNow;

    var minutesSince = sugarCore.Date.minutesSince;

    var minutesUntil = sugarCore.Date.minutesUntil;

    var monthsAgo$1 = sugarCore.Date.monthsAgo;

    var monthsFromNow$1 = sugarCore.Date.monthsFromNow;

    var monthsSince = sugarCore.Date.monthsSince;

    var monthsUntil = sugarCore.Date.monthsUntil;

    var abs$9 = mathAliases.abs;

    function getAdjustedUnitForDate(d, dRelative) {
      var ms;
      if (!dRelative) {
        dRelative = getNewDate_1();
        if (d > dRelative) {
          // If our date is greater than the one that we got from getNewDate, it
          // means that we are finding the unit for a date that is in the future
          // relative to now. However, often the incoming date was created in
          // the same cycle as our comparison, but our "now" date will have been
          // created an instant after it, creating situations where "5 minutes from
          // now" becomes "4 minutes from now" in the same tick. To prevent this,
          // subtract a buffer of 10ms to compensate.
          dRelative = new Date(dRelative.getTime() - 10);
        }
      }
      ms = d - dRelative;
      return getAdjustedUnit_1(ms, function(u) {
        return abs$9(getTimeDistanceForUnit_1(d, dRelative, u));
      });
    }

    var getAdjustedUnitForDate_1 = getAdjustedUnitForDate;

    var isFunction$d = classChecks.isFunction,
        localeManager$f = LocaleHelpers.localeManager;

    function dateRelative(d, dRelative, arg1, arg2) {
      var adu, format, type, localeCode, fn;
      assertDateIsValid_1(d);
      if (isFunction$d(arg1)) {
        fn = arg1;
      } else {
        localeCode = arg1;
        fn = arg2;
      }
      adu = getAdjustedUnitForDate_1(d, dRelative);
      if (fn) {
        format = fn.apply(d, adu.concat(localeManager$f.get(localeCode)));
        if (format) {
          return dateFormat_1(d, format, localeCode);
        }
      }
      // Adjust up if time is in ms, as this doesn't
      // look very good for a standard relative date.
      if (adu[1] === 0) {
        adu[1] = 1;
        adu[0] = 1;
      }
      if (dRelative) {
        type = 'duration';
      } else if (adu[2] > 0) {
        type = 'future';
      } else {
        type = 'past';
      }
      return localeManager$f.get(localeCode).getRelativeFormat(adu, type);
    }

    var dateRelative_1 = dateRelative;

    sugarCore.Date.defineInstance({

      'relative': function(date, localeCode, relativeFn) {
        return dateRelative_1(date, null, localeCode, relativeFn);
      }

    });

    var relative = sugarCore.Date.relative;

    sugarCore.Date.defineInstance({

      'relativeTo': function(date, d, localeCode) {
        return dateRelative_1(date, createDate_1(d), localeCode);
      }

    });

    var relativeTo = sugarCore.Date.relativeTo;

    function getUnitIndexForParamName(name) {
      var params = {}, unitIndex;
      params[name] = 1;
      iterateOverDateParams_1(params, function(name, val, unit, i) {
        unitIndex = i;
        return false;
      });
      return unitIndex;
    }

    var getUnitIndexForParamName_1 = getUnitIndexForParamName;

    var DAY_INDEX$9 = DateUnitIndexes.DAY_INDEX;

    sugarCore.Date.defineInstance({

      'reset': function(date, unit, localeCode) {
        var unitIndex = unit ? getUnitIndexForParamName_1(unit) : DAY_INDEX$9;
        moveToBeginningOfUnit_1(date, unitIndex, localeCode);
        return date;
      }

    });

    var reset = sugarCore.Date.reset;

    sugarCore.Date.defineInstanceWithArguments({

      'rewind': function(d, args) {
        return advanceDateWithArgs_1(d, args, -1);
      }

    });

    var rewind = sugarCore.Date.rewind;

    var secondsAgo$1 = sugarCore.Date.secondsAgo;

    var secondsFromNow$1 = sugarCore.Date.secondsFromNow;

    var secondsSince = sugarCore.Date.secondsSince;

    var secondsUntil = sugarCore.Date.secondsUntil;

    sugarCore.Date.defineInstanceWithArguments({

      'set': function(d, args) {
        args = collectUpdateDateArguments_1(args);
        return updateDate_1(d, args[0], args[1]);
      }

    });

    var set$1 = sugarCore.Date.set;

    sugarCore.Date.defineInstance({

      'setISOWeek': function(date, num) {
        return setISOWeekNumber_1(date, num);
      }

    });

    var setISOWeek = sugarCore.Date.setISOWeek;

    sugarCore.Date.defineInstance({

      'setUTC': function(date, on) {
        return _utc(date, on);
      }

    });

    var setUTC = sugarCore.Date.setUTC;

    sugarCore.Date.defineInstance({

      'setWeekday': function(date, dow) {
        return setWeekday_1(date, dow);
      }

    });

    var setWeekday_1$1 = sugarCore.Date.setWeekday;

    var weeksAgo$1 = sugarCore.Date.weeksAgo;

    var weeksFromNow$1 = sugarCore.Date.weeksFromNow;

    var weeksSince = sugarCore.Date.weeksSince;

    var weeksUntil = sugarCore.Date.weeksUntil;

    var yearsAgo$1 = sugarCore.Date.yearsAgo;

    var yearsFromNow$1 = sugarCore.Date.yearsFromNow;

    var yearsSince = sugarCore.Date.yearsSince;

    var yearsUntil = sugarCore.Date.yearsUntil;

    var getOption$2 = sugarCore.Date.getOption;

    var setOption$2 = sugarCore.Date.setOption;

    var isDate$8 = classChecks.isDate;

    function getRangeMemberPrimitiveValue(m) {
      if (m == null) return m;
      return isDate$8(m) ? m.getTime() : m.valueOf();
    }

    var getRangeMemberPrimitiveValue_1 = getRangeMemberPrimitiveValue;

    var isDate$9 = classChecks.isDate;

    function cloneRangeMember(m) {
      if (isDate$9(m)) {
        return new Date(m.getTime());
      } else {
        return getRangeMemberPrimitiveValue_1(m);
      }
    }

    var cloneRangeMember_1 = cloneRangeMember;

    function Range(start, end) {
      this.start = cloneRangeMember_1(start);
      this.end   = cloneRangeMember_1(end);
    }

    var Range_1 = Range;

    var isDate$a = classChecks.isDate,
        sugarDate$5 = namespaceAliases.sugarDate;

    function getDateForRange(d) {
      if (isDate$a(d)) {
        return d;
      } else if (d == null) {
        return new Date();
      } else if (sugarDate$5.create) {
        return sugarDate$5.create(d);
      }
      return new Date(d);
    }

    var getDateForRange_1 = getDateForRange;

    var DURATION_UNITS = 'year|month|week|day|hour|minute|second|millisecond';

    var FULL_CAPTURED_DURATION = '((?:\\d+)?\\s*(?:' + DURATION_UNITS + '))s?';

    var DurationTextFormats = {
      RANGE_REG_FROM_TO: /(?:from)?\s*(.+)\s+(?:to|until)\s+(.+)$/i,
      RANGE_REG_REAR_DURATION: RegExp('(.+)\\s*for\\s*' + FULL_CAPTURED_DURATION, 'i'),
      RANGE_REG_FRONT_DURATION: RegExp('(?:for)?\\s*'+ FULL_CAPTURED_DURATION +'\\s*(?:starting)?\\s(?:at\\s)?(.+)', 'i')
    };

    var MULTIPLIERS = {
      'Hours': 60 * 60 * 1000,
      'Minutes': 60 * 1000,
      'Seconds': 1000,
      'Milliseconds': 1
    };

    var MULTIPLIERS_1 = MULTIPLIERS;

    function incrementDate(src, amount, unit) {
      var mult = MULTIPLIERS_1[unit], d;
      if (mult) {
        d = new Date(src.getTime() + (amount * mult));
      } else {
        d = new Date(src);
        callDateSet_1(d, unit, callDateGet_1(src, unit) + amount);
      }
      return d;
    }

    var incrementDate_1 = incrementDate;

    var DURATION_REG = RegExp('(\\d+)?\\s*('+ DURATION_UNITS +')s?', 'i');

    var isNumber$a = classChecks.isNumber;

    function getDateIncrementObject(amt) {
      var match, val, unit;
      if (isNumber$a(amt)) {
        return [amt, 'Milliseconds'];
      }
      match = amt.match(DURATION_REG);
      val = +match[1] || 1;
      unit = simpleCapitalize_1(match[2].toLowerCase());
      if (unit.match(/hour|minute|second/i)) {
        unit += 's';
      } else if (unit === 'Year') {
        unit = 'FullYear';
      } else if (unit === 'Week') {
        unit = 'Date';
        val *= 7;
      } else if (unit === 'Day') {
        unit = 'Date';
      }
      return [val, unit];
    }

    var getDateIncrementObject_1 = getDateIncrementObject;

    var sugarDate$6 = namespaceAliases.sugarDate,
        RANGE_REG_FROM_TO = DurationTextFormats.RANGE_REG_FROM_TO,
        RANGE_REG_REAR_DURATION = DurationTextFormats.RANGE_REG_REAR_DURATION,
        RANGE_REG_FRONT_DURATION = DurationTextFormats.RANGE_REG_FRONT_DURATION;

    function createDateRangeFromString(str) {
      var match, datetime, duration, dio, start, end;
      if (sugarDate$6.get && (match = str.match(RANGE_REG_FROM_TO))) {
        start = getDateForRange_1(match[1].replace('from', 'at'));
        end = sugarDate$6.get(start, match[2]);
        return new Range_1(start, end);
      }
      if (match = str.match(RANGE_REG_FRONT_DURATION)) {
        duration = match[1];
        datetime = match[2];
      }
      if (match = str.match(RANGE_REG_REAR_DURATION)) {
        datetime = match[1];
        duration = match[2];
      }
      if (datetime && duration) {
        start = getDateForRange_1(datetime);
        dio = getDateIncrementObject_1(duration);
        end = incrementDate_1(start, dio[0], dio[1]);
      } else {
        start = str;
      }
      return new Range_1(getDateForRange_1(start), getDateForRange_1(end));
    }

    var createDateRangeFromString_1 = createDateRangeFromString;

    var isString$i = classChecks.isString;

    var DateRangeConstructor = function(start, end) {
      if (arguments.length === 1 && isString$i(start)) {
        return createDateRangeFromString_1(start);
      }
      return new Range_1(getDateForRange_1(start), getDateForRange_1(end));
    };

    var DateRangeConstructor_1 = DateRangeConstructor;

    sugarCore.Date.defineStatic({

      'range': DateRangeConstructor_1

    });

    var range = sugarCore.Date.range;

    var PrimitiveRangeConstructor = function(start, end) {
      return new Range_1(start, end);
    };

    var PrimitiveRangeConstructor_1 = PrimitiveRangeConstructor;

    sugarCore.Number.defineStatic({

      'range': PrimitiveRangeConstructor_1

    });

    var range$1 = sugarCore.Number.range;

    sugarCore.String.defineStatic({

      'range': PrimitiveRangeConstructor_1

    });

    var range$2 = sugarCore.String.range;

    function rangeClamp(range, obj) {
      var clamped,
          start = range.start,
          end = range.end,
          min = end < start ? end : start,
          max = start > end ? start : end;
      if (obj < min) {
        clamped = min;
      } else if (obj > max) {
        clamped = max;
      } else {
        clamped = obj;
      }
      return cloneRangeMember_1(clamped);
    }

    var rangeClamp_1 = rangeClamp;

    sugarCore.Number.defineInstance({

      'cap': function(n, max) {
        return rangeClamp_1(new Range_1(undefined, max), n);
      }

    });

    var cap = sugarCore.Number.cap;

    sugarCore.Number.defineInstance({

      'clamp': function(n, start, end) {
        return rangeClamp_1(new Range_1(start, end), n);
      }

    });

    var clamp = sugarCore.Number.clamp;

    function valueIsNotInfinite(m) {
      return m !== -Infinity && m !== Infinity;
    }

    var valueIsNotInfinite_1 = valueIsNotInfinite;

    function isValidRangeMember(m) {
      var val = getRangeMemberPrimitiveValue_1(m);
      return (!!val || val === 0) && valueIsNotInfinite_1(m);
    }

    var isValidRangeMember_1 = isValidRangeMember;

    function rangeIsValid(range) {
      return isValidRangeMember_1(range.start) &&
             isValidRangeMember_1(range.end) &&
             typeof range.start === typeof range.end;
    }

    var rangeIsValid_1 = rangeIsValid;

    function incrementNumber(current, amount, precision) {
      return withPrecision_1(current + amount, precision);
    }

    var incrementNumber_1 = incrementNumber;

    function incrementString(current, amount) {
      return chr(current.charCodeAt(0) + amount);
    }

    var incrementString_1 = incrementString;

    function getPrecision(n) {
      var split = periodSplit_1(n.toString());
      return split[1] ? split[1].length : 0;
    }

    var getPrecision_1 = getPrecision;

    var max$b = mathAliases.max;

    function getGreaterPrecision(n1, n2) {
      return max$b(getPrecision_1(n1), getPrecision_1(n2));
    }

    var getGreaterPrecision_1 = getGreaterPrecision;

    var isNumber$b = classChecks.isNumber,
        isString$j = classChecks.isString,
        isDate$b = classChecks.isDate,
        isFunction$e = classChecks.isFunction;

    function rangeEvery(range, step, countOnly, fn) {
      var increment,
          precision,
          dio,
          unit,
          start   = range.start,
          end     = range.end,
          inverse = end < start,
          current = start,
          index   = 0,
          result  = [];

      if (!rangeIsValid_1(range)) {
        return countOnly ? NaN : [];
      }
      if (isFunction$e(step)) {
        fn = step;
        step = null;
      }
      step = step || 1;
      if (isNumber$b(start)) {
        precision = getGreaterPrecision_1(start, step);
        increment = function() {
          return incrementNumber_1(current, step, precision);
        };
      } else if (isString$j(start)) {
        increment = function() {
          return incrementString_1(current, step);
        };
      } else if (isDate$b(start)) {
        dio  = getDateIncrementObject_1(step);
        step = dio[0];
        unit = dio[1];
        increment = function() {
          return incrementDate_1(current, step, unit);
        };
      }
      // Avoiding infinite loops
      if (inverse && step > 0) {
        step *= -1;
      }
      while(inverse ? current >= end : current <= end) {
        if (!countOnly) {
          result.push(current);
        }
        if (fn) {
          fn(current, index, range);
        }
        current = increment();
        index++;
      }
      return countOnly ? index - 1 : result;
    }

    var rangeEvery_1 = rangeEvery;

    sugarCore.Number.defineInstance({

      'upto': function(n, num, step, everyFn) {
        return rangeEvery_1(new Range_1(n, num), step, false, everyFn);
      }

    });

    var upto = sugarCore.Number.upto;

    var forEachProperty$n = coreUtilityAliases.forEachProperty;

    function defineOnPrototype(ctor, methods) {
      var proto = ctor.prototype;
      forEachProperty$n(methods, function(val, key) {
        proto[key] = val;
      });
    }

    var defineOnPrototype_1 = defineOnPrototype;

    defineOnPrototype_1(Range_1, {

      'clamp': function(el) {
        return rangeClamp_1(this, el);
      }

    });

    defineOnPrototype_1(Range_1, {

      'clone': function() {
        return new Range_1(this.start, this.end);
      }

    });

    defineOnPrototype_1(Range_1, {

      'contains': function(el) {
        if (el == null) return false;
        if (el.start && el.end) {
          return el.start >= this.start && el.start <= this.end &&
                 el.end   >= this.start && el.end   <= this.end;
        } else {
          return el >= this.start && el <= this.end;
        }
      }

    });

    function buildDateRangeUnits() {
      var methods = {};
      forEach_1(DURATION_UNITS.split('|'), function(unit, i) {
        var name = unit + 's', mult, fn;
        if (i < 4) {
          fn = function() {
            return rangeEvery_1(this, unit, true);
          };
        } else {
          mult = MULTIPLIERS_1[simpleCapitalize_1(name)];
          fn = function() {
            return trunc_1((this.end - this.start) / mult);
          };
        }
        methods[name] = fn;
      });
      defineOnPrototype_1(Range_1, methods);
    }

    var buildDateRangeUnits_1 = buildDateRangeUnits;

    buildDateRangeUnits_1();

    defineOnPrototype_1(Range_1, {

      'every': function(amount, everyFn) {
        return rangeEvery_1(this, amount, false, everyFn);
      }

    });

    defineOnPrototype_1(Range_1, {

      'intersect': function(range) {
        if (range.start > this.end || range.end < this.start) {
          return new Range_1(NaN, NaN);
        }
        return new Range_1(
          this.start > range.start ? this.start : range.start,
          this.end   < range.end   ? this.end   : range.end
        );
      }

    });

    defineOnPrototype_1(Range_1, {

      'isValid': function() {
        return rangeIsValid_1(this);
      }

    });

    var isString$k = classChecks.isString;

    function getRangeMemberNumericValue(m) {
      return isString$k(m) ? m.charCodeAt(0) : m;
    }

    var getRangeMemberNumericValue_1 = getRangeMemberNumericValue;

    var abs$a = mathAliases.abs;

    defineOnPrototype_1(Range_1, {

      'span': function() {
        var n = getRangeMemberNumericValue_1(this.end) - getRangeMemberNumericValue_1(this.start);
        return rangeIsValid_1(this) ? abs$a(n) + 1 : NaN;
      }

    });

    defineOnPrototype_1(Range_1, {

      'toArray': function() {
        return rangeEvery_1(this);
      }

    });

    defineOnPrototype_1(Range_1, {

      'toString': function() {
        return rangeIsValid_1(this) ? this.start + '..' + this.end : 'Invalid Range';
      }

    });

    defineOnPrototype_1(Range_1, {

      'union': function(range) {
        return new Range_1(
          this.start < range.start ? this.start : range.start,
          this.end   > range.end   ? this.end   : range.end
        );
      }

    });

    sugarCore.Number.alias('downto', 'upto');

    var downto = sugarCore.Number.downto;

    sugarCore.Function.defineInstance({

      'after': function(fn, num) {
        var count = 0, collectedArgs = [];
        num = coercePositiveInteger_1(num);
        return function() {
          // Optimized: no leaking arguments
          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);
          collectedArgs.push(args);
          count++;
          if (count >= num) {
            return fn.call(this, collectedArgs);
          }
        };
      }

    });

    var after = sugarCore.Function.after;

    var _timers = privatePropertyAccessor_1('timers');

    var _canceled = privatePropertyAccessor_1('canceled');

    var isArray$g = classChecks.isArray;

    function cancelFunction(fn) {
      var timers = _timers(fn), timer;
      if (isArray$g(timers)) {
        while(timer = timers.shift()) {
          clearTimeout(timer);
        }
      }
      _canceled(fn, true);
      return fn;
    }

    var cancelFunction_1 = cancelFunction;

    sugarCore.Function.defineInstance({

      'cancel': function(fn) {
        return cancelFunction_1(fn);
      }

    });

    var cancel = sugarCore.Function.cancel;

    function setDelay(fn, ms, after, scope, args) {
      // Delay of infinity is never called of course...
      ms = coercePositiveInteger_1(ms || 0);
      if (!_timers(fn)) {
        _timers(fn, []);
      }
      // This is a workaround for <= IE8, which apparently has the
      // ability to call timeouts in the queue on the same tick (ms?)
      // even if functionally they have already been cleared.
      _canceled(fn, false);
      _timers(fn).push(setTimeout(function() {
        if (!_canceled(fn)) {
          after.apply(scope, args || []);
        }
      }, ms));
    }

    var setDelay_1 = setDelay;

    sugarCore.Function.defineInstance({

      'debounce': function(fn, ms) {
        function debounced() {
          // Optimized: no leaking arguments
          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);
          cancelFunction_1(debounced);
          setDelay_1(debounced, ms, fn, this, args);
        }
        return debounced;
      }

    });

    var debounce = sugarCore.Function.debounce;

    sugarCore.Function.defineInstanceWithArguments({

      'delay': function(fn, ms, args) {
        setDelay_1(fn, ms, fn, fn, args);
        return fn;
      }

    });

    var delay = sugarCore.Function.delay;

    sugarCore.Function.defineInstanceWithArguments({

      'every': function(fn, ms, args) {
        function execute () {
          // Set the delay first here, so that cancel
          // can be called within the executing function.
          setDelay_1(fn, ms, execute);
          fn.apply(fn, args);
        }
        setDelay_1(fn, ms, execute);
        return fn;
      }

    });

    var every$2 = sugarCore.Function.every;

    var max$c = mathAliases.max,
        ceil$8 = mathAliases.ceil,
        round$4 = mathAliases.round;

    function createLazyFunction(fn, ms, immediate, limit) {
      var queue = [], locked = false, execute, rounded, perExecution, result;
      ms = ms || 1;
      limit = limit || Infinity;
      rounded = ceil$8(ms);
      perExecution = round$4(rounded / ms) || 1;
      execute = function() {
        var queueLength = queue.length, maxPerRound;
        if (queueLength == 0) return;
        // Allow fractions of a millisecond by calling
        // multiple times per actual timeout execution
        maxPerRound = max$c(queueLength - perExecution, 0);
        while(queueLength > maxPerRound) {
          // Getting uber-meta here...
          result = Function.prototype.apply.apply(fn, queue.shift());
          queueLength--;
        }
        setDelay_1(lazy, rounded, function() {
          locked = false;
          execute();
        });
      };
      function lazy() {
        // If the execution has locked and it's immediate, then
        // allow 1 less in the queue as 1 call has already taken place.
        if (queue.length < limit - (locked && immediate ? 1 : 0)) {
          // Optimized: no leaking arguments
          var args = []; for(var $i = 0, $len = arguments.length; $i < $len; $i++) args.push(arguments[$i]);
          queue.push([this, args]);
        }
        if (!locked) {
          locked = true;
          if (immediate) {
            execute();
          } else {
            setDelay_1(lazy, rounded, execute);
          }
        }
        // Return the memoized result
        return result;
      }
      return lazy;
    }

    var createLazyFunction_1 = createLazyFunction;

    sugarCore.Function.defineInstance({

      'lazy': function(fn, ms, immediate, limit) {
        return createLazyFunction_1(fn, ms, immediate, limit);
      }

    });

    var lazy = sugarCore.Function.lazy;

    var _lock = privatePropertyAccessor_1('lock');

    var _partial = privatePropertyAccessor_1('partial');

    var isNumber$c = classChecks.isNumber,
        min$7 = mathAliases.min;

    sugarCore.Function.defineInstance({

      'lock': function(fn, n) {
        var lockedFn;
        if (_partial(fn)) {
          _lock(fn, isNumber$c(n) ? n : null);
          return fn;
        }
        lockedFn = function() {
          arguments.length = min$7(_lock(lockedFn), arguments.length);
          return fn.apply(this, arguments);
        };
        _lock(lockedFn, isNumber$c(n) ? n : fn.length);
        return lockedFn;
      }

    });

    var lock = sugarCore.Function.lock;

    function collectArguments() {
      var args = arguments, i = args.length, arr = new Array(i);
      while (i--) {
        arr[i] = args[i];
      }
      return arr;
    }

    var collectArguments_1 = collectArguments;

    var hasOwn$c = coreUtilityAliases.hasOwn,
        getOwn$c = coreUtilityAliases.getOwn;

    function createHashedMemoizeFunction(fn, hashFn, limit) {
      var map = {}, refs = [], counter = 0;
      return function() {
        var hashObj = hashFn.apply(this, arguments);
        var key = serializeInternal_1(hashObj, refs);
        if (hasOwn$c(map, key)) {
          return getOwn$c(map, key);
        }
        if (counter === limit) {
          map = {};
          refs = [];
          counter = 0;
        }
        counter++;
        return map[key] = fn.apply(this, arguments);
      };
    }

    var createHashedMemoizeFunction_1 = createHashedMemoizeFunction;

    var isNumber$d = classChecks.isNumber,
        isString$l = classChecks.isString;

    sugarCore.Function.defineInstance({

      'memoize': function(fn, arg1, arg2) {
        var hashFn, limit, prop;
        if (isNumber$d(arg1)) {
          limit = arg1;
        } else {
          hashFn = arg1;
          limit  = arg2;
        }
        if (isString$l(hashFn)) {
          prop = hashFn;
          hashFn = function(obj) {
            return deepGetProperty_1(obj, prop);
          };
        } else if (!hashFn) {
          hashFn = collectArguments_1;
        }
        return createHashedMemoizeFunction_1(fn, hashFn, limit);
      }

    });

    var memoize = sugarCore.Function.memoize;

    sugarCore.Function.defineInstance({

      'once': function(fn) {
        var called = false, val;
        return function() {
          if (called) {
            return val;
          }
          called = true;
          return val = fn.apply(this, arguments);
        };
      }

    });

    var once = sugarCore.Function.once;

    var createInstanceFromPrototype = Object.create || function(prototype) {
      var ctor = function() {};
      ctor.prototype = prototype;
      return new ctor;
    };

    var createInstanceFromPrototype_1 = createInstanceFromPrototype;

    var isNumber$e = classChecks.isNumber,
        min$8 = mathAliases.min;

    sugarCore.Function.defineInstanceWithArguments({

      'partial': function(fn, curriedArgs) {
        var curriedLen = curriedArgs.length;
        var partialFn = function() {
          var argIndex = 0, applyArgs = [], self = this, lock = _lock(partialFn), result, i;
          for (i = 0; i < curriedLen; i++) {
            var arg = curriedArgs[i];
            if (isDefined_1(arg)) {
              applyArgs[i] = arg;
            } else {
              applyArgs[i] = arguments[argIndex++];
            }
          }
          for (i = argIndex; i < arguments.length; i++) {
            applyArgs.push(arguments[i]);
          }
          if (lock === null) {
            lock = curriedLen;
          }
          if (isNumber$e(lock)) {
            applyArgs.length = min$8(applyArgs.length, lock);
          }
          // If the bound "this" object is an instance of the partialed
          // function, then "new" was used, so preserve the prototype
          // so that constructor functions can also be partialed.
          if (self instanceof partialFn) {
            self = createInstanceFromPrototype_1(fn.prototype);
            result = fn.apply(self, applyArgs);
            // An explicit return value is allowed from constructors
            // as long as they are of "object" type, so return the
            // correct result here accordingly.
            return isObjectType_1(result) ? result : self;
          }
          return fn.apply(self, applyArgs);
        };
        _partial(partialFn, true);
        return partialFn;
      }

    });

    var partial = sugarCore.Function.partial;

    sugarCore.Function.defineInstance({

      'throttle': function(fn, ms) {
        return createLazyFunction_1(fn, ms, true, 1);
      }

    });

    var throttle = sugarCore.Function.throttle;

    sugarCore.RegExp.defineStatic({

      'escape': function(str) {
        return escapeRegExp_1(str);
      }

    });

    var _escape = sugarCore.RegExp.escape;

    sugarCore.RegExp.defineInstance({

      'addFlags': function(r, flags) {
        return RegExp(r.source, getRegExpFlags_1(r, flags));
      }

    });

    var addFlags = sugarCore.RegExp.addFlags;

    sugarCore.RegExp.defineInstance({

      'getFlags': function(r) {
        return getRegExpFlags_1(r);
      }

    });

    var getFlags = sugarCore.RegExp.getFlags;

    sugarCore.RegExp.defineInstance({

      'removeFlags': function(r, flags) {
        var reg = allCharsReg_1(flags);
        return RegExp(r.source, getRegExpFlags_1(r).replace(reg, ''));
      }

    });

    var removeFlags = sugarCore.RegExp.removeFlags;

    sugarCore.RegExp.defineInstance({

      'setFlags': function(r, flags) {
        return RegExp(r.source, flags);
      }

    });

    var setFlags = sugarCore.RegExp.setFlags;

    var sugar = sugarCore;

    var defaults$1 = createCommonjsModule(function (module) {
    function getDefaults() {
      return {
        baseUrl: null,
        breaks: false,
        gfm: true,
        headerIds: true,
        headerPrefix: '',
        highlight: null,
        langPrefix: 'language-',
        mangle: true,
        pedantic: false,
        renderer: null,
        sanitize: false,
        sanitizer: null,
        silent: false,
        smartLists: false,
        smartypants: false,
        xhtml: false
      };
    }

    function changeDefaults(newDefaults) {
      module.exports.defaults = newDefaults;
    }

    module.exports = {
      defaults: getDefaults(),
      getDefaults,
      changeDefaults
    };
    });
    var defaults_1$2 = defaults$1.defaults;
    var defaults_2 = defaults$1.getDefaults;
    var defaults_3 = defaults$1.changeDefaults;

    /**
     * Helpers
     */
    const escapeTest = /[&<>"']/;
    const escapeReplace = /[&<>"']/g;
    const escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
    const escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
    const escapeReplacements = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    const getEscapeReplacement = (ch) => escapeReplacements[ch];
    function escape$1(html, encode) {
      if (encode) {
        if (escapeTest.test(html)) {
          return html.replace(escapeReplace, getEscapeReplacement);
        }
      } else {
        if (escapeTestNoEncode.test(html)) {
          return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
        }
      }

      return html;
    }

    const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

    function unescape$1(html) {
      // explicitly match decimal, hex, and named HTML entities
      return html.replace(unescapeTest, (_, n) => {
        n = n.toLowerCase();
        if (n === 'colon') return ':';
        if (n.charAt(0) === '#') {
          return n.charAt(1) === 'x'
            ? String.fromCharCode(parseInt(n.substring(2), 16))
            : String.fromCharCode(+n.substring(1));
        }
        return '';
      });
    }

    const caret = /(^|[^\[])\^/g;
    function edit(regex, opt) {
      regex = regex.source || regex;
      opt = opt || '';
      const obj = {
        replace: (name, val) => {
          val = val.source || val;
          val = val.replace(caret, '$1');
          regex = regex.replace(name, val);
          return obj;
        },
        getRegex: () => {
          return new RegExp(regex, opt);
        }
      };
      return obj;
    }

    const nonWordAndColonTest = /[^\w:]/g;
    const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
    function cleanUrl(sanitize, base, href) {
      if (sanitize) {
        let prot;
        try {
          prot = decodeURIComponent(unescape$1(href))
            .replace(nonWordAndColonTest, '')
            .toLowerCase();
        } catch (e) {
          return null;
        }
        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
          return null;
        }
      }
      if (base && !originIndependentUrl.test(href)) {
        href = resolveUrl(base, href);
      }
      try {
        href = encodeURI(href).replace(/%25/g, '%');
      } catch (e) {
        return null;
      }
      return href;
    }

    const baseUrls = {};
    const justDomain = /^[^:]+:\/*[^/]*$/;
    const protocol = /^([^:]+:)[\s\S]*$/;
    const domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

    function resolveUrl(base, href) {
      if (!baseUrls[' ' + base]) {
        // we can ignore everything in base after the last slash of its path component,
        // but we might need to add _that_
        // https://tools.ietf.org/html/rfc3986#section-3
        if (justDomain.test(base)) {
          baseUrls[' ' + base] = base + '/';
        } else {
          baseUrls[' ' + base] = rtrim(base, '/', true);
        }
      }
      base = baseUrls[' ' + base];
      const relativeBase = base.indexOf(':') === -1;

      if (href.substring(0, 2) === '//') {
        if (relativeBase) {
          return href;
        }
        return base.replace(protocol, '$1') + href;
      } else if (href.charAt(0) === '/') {
        if (relativeBase) {
          return href;
        }
        return base.replace(domain, '$1') + href;
      } else {
        return base + href;
      }
    }

    const noopTest = { exec: function noopTest() {} };

    function merge$1(obj) {
      let i = 1,
        target,
        key;

      for (; i < arguments.length; i++) {
        target = arguments[i];
        for (key in target) {
          if (Object.prototype.hasOwnProperty.call(target, key)) {
            obj[key] = target[key];
          }
        }
      }

      return obj;
    }

    function splitCells(tableRow, count) {
      // ensure that every cell-delimiting pipe has a space
      // before it to distinguish it from an escaped pipe
      const row = tableRow.replace(/\|/g, (match, offset, str) => {
          let escaped = false,
            curr = offset;
          while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;
          if (escaped) {
            // odd number of slashes means | is escaped
            // so we leave it alone
            return '|';
          } else {
            // add space before unescaped |
            return ' |';
          }
        }),
        cells = row.split(/ \|/);
      let i = 0;

      if (cells.length > count) {
        cells.splice(count);
      } else {
        while (cells.length < count) cells.push('');
      }

      for (; i < cells.length; i++) {
        // leading or trailing whitespace is ignored per the gfm spec
        cells[i] = cells[i].trim().replace(/\\\|/g, '|');
      }
      return cells;
    }

    // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
    // /c*$/ is vulnerable to REDOS.
    // invert: Remove suffix of non-c chars instead. Default falsey.
    function rtrim(str, c, invert) {
      const l = str.length;
      if (l === 0) {
        return '';
      }

      // Length of suffix matching the invert condition.
      let suffLen = 0;

      // Step left until we fail to match the invert condition.
      while (suffLen < l) {
        const currChar = str.charAt(l - suffLen - 1);
        if (currChar === c && !invert) {
          suffLen++;
        } else if (currChar !== c && invert) {
          suffLen++;
        } else {
          break;
        }
      }

      return str.substr(0, l - suffLen);
    }

    function findClosingBracket(str, b) {
      if (str.indexOf(b[1]) === -1) {
        return -1;
      }
      const l = str.length;
      let level = 0,
        i = 0;
      for (; i < l; i++) {
        if (str[i] === '\\') {
          i++;
        } else if (str[i] === b[0]) {
          level++;
        } else if (str[i] === b[1]) {
          level--;
          if (level < 0) {
            return i;
          }
        }
      }
      return -1;
    }

    function checkSanitizeDeprecation(opt) {
      if (opt && opt.sanitize && !opt.silent) {
        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
      }
    }

    var helpers = {
      escape: escape$1,
      unescape: unescape$1,
      edit,
      cleanUrl,
      resolveUrl,
      noopTest,
      merge: merge$1,
      splitCells,
      rtrim,
      findClosingBracket,
      checkSanitizeDeprecation
    };

    const {
      noopTest: noopTest$1,
      edit: edit$1,
      merge: merge$2
    } = helpers;

    /**
     * Block-Level Grammar
     */
    const block = {
      newline: /^\n+/,
      code: /^( {4}[^\n]+\n*)+/,
      fences: /^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
      hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
      heading: /^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,
      blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
      list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
      html: '^ {0,3}(?:' // optional indentation
        + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
        + '|comment[^\\n]*(\\n+|$)' // (2)
        + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
        + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
        + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
        + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
        + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
        + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
        + ')',
      def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
      nptable: noopTest$1,
      table: noopTest$1,
      lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
      // regex template, placeholders will be replaced according to different paragraph
      // interruption rules of commonmark and the original markdown spec:
      _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,
      text: /^[^\n]+/
    };

    block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
    block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
    block.def = edit$1(block.def)
      .replace('label', block._label)
      .replace('title', block._title)
      .getRegex();

    block.bullet = /(?:[*+-]|\d{1,9}\.)/;
    block.item = /^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/;
    block.item = edit$1(block.item, 'gm')
      .replace(/bull/g, block.bullet)
      .getRegex();

    block.list = edit$1(block.list)
      .replace(/bull/g, block.bullet)
      .replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
      .replace('def', '\\n+(?=' + block.def.source + ')')
      .getRegex();

    block._tag = 'address|article|aside|base|basefont|blockquote|body|caption'
      + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
      + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
      + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
      + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
      + '|track|ul';
    block._comment = /<!--(?!-?>)[\s\S]*?-->/;
    block.html = edit$1(block.html, 'i')
      .replace('comment', block._comment)
      .replace('tag', block._tag)
      .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
      .getRegex();

    block.paragraph = edit$1(block._paragraph)
      .replace('hr', block.hr)
      .replace('heading', ' {0,3}#{1,6} +')
      .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
      .replace('blockquote', ' {0,3}>')
      .replace('fences', ' {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n')
      .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)')
      .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
      .getRegex();

    block.blockquote = edit$1(block.blockquote)
      .replace('paragraph', block.paragraph)
      .getRegex();

    /**
     * Normal Block Grammar
     */

    block.normal = merge$2({}, block);

    /**
     * GFM Block Grammar
     */

    block.gfm = merge$2({}, block.normal, {
      nptable: /^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,
      table: /^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/
    });

    /**
     * Pedantic grammar (original John Gruber's loose markdown specification)
     */

    block.pedantic = merge$2({}, block.normal, {
      html: edit$1(
        '^ *(?:comment *(?:\\n|\\s*$)'
        + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
        + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
        .replace('comment', block._comment)
        .replace(/tag/g, '(?!(?:'
          + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
          + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
          + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
        .getRegex(),
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
      heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
      fences: noopTest$1, // fences not supported
      paragraph: edit$1(block.normal._paragraph)
        .replace('hr', block.hr)
        .replace('heading', ' *#{1,6} *[^\n]')
        .replace('lheading', block.lheading)
        .replace('blockquote', ' {0,3}>')
        .replace('|fences', '')
        .replace('|list', '')
        .replace('|html', '')
        .getRegex()
    });

    /**
     * Inline-Level Grammar
     */
    const inline = {
      escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
      autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
      url: noopTest$1,
      tag: '^comment'
        + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
        + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
        + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
        + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
        + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>', // CDATA section
      link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
      reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
      nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
      strong: /^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,
      em: /^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,
      code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
      br: /^( {2,}|\\)\n(?!\s*$)/,
      del: noopTest$1,
      text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/
    };

    // list of punctuation marks from common mark spec
    // without ` and ] to workaround Rule 17 (inline code blocks/links)
    inline._punctuation = '!"#$%&\'()*+,\\-./:;<=>?@\\[^_{|}~';
    inline.em = edit$1(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();

    inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;

    inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
    inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
    inline.autolink = edit$1(inline.autolink)
      .replace('scheme', inline._scheme)
      .replace('email', inline._email)
      .getRegex();

    inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;

    inline.tag = edit$1(inline.tag)
      .replace('comment', block._comment)
      .replace('attribute', inline._attribute)
      .getRegex();

    inline._label = /(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
    inline._href = /<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/;
    inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;

    inline.link = edit$1(inline.link)
      .replace('label', inline._label)
      .replace('href', inline._href)
      .replace('title', inline._title)
      .getRegex();

    inline.reflink = edit$1(inline.reflink)
      .replace('label', inline._label)
      .getRegex();

    /**
     * Normal Inline Grammar
     */

    inline.normal = merge$2({}, inline);

    /**
     * Pedantic Inline Grammar
     */

    inline.pedantic = merge$2({}, inline.normal, {
      strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
      link: edit$1(/^!?\[(label)\]\((.*?)\)/)
        .replace('label', inline._label)
        .getRegex(),
      reflink: edit$1(/^!?\[(label)\]\s*\[([^\]]*)\]/)
        .replace('label', inline._label)
        .getRegex()
    });

    /**
     * GFM Inline Grammar
     */

    inline.gfm = merge$2({}, inline.normal, {
      escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),
      _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
      url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
      _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
      del: /^~+(?=\S)([\s\S]*?\S)~+/,
      text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
    });

    inline.gfm.url = edit$1(inline.gfm.url, 'i')
      .replace('email', inline.gfm._extended_email)
      .getRegex();
    /**
     * GFM + Line Breaks Inline Grammar
     */

    inline.breaks = merge$2({}, inline.gfm, {
      br: edit$1(inline.br).replace('{2,}', '*').getRegex(),
      text: edit$1(inline.gfm.text)
        .replace('\\b_', '\\b_| {2,}\\n')
        .replace(/\{2,\}/g, '*')
        .getRegex()
    });

    var Model, Sugar;

    Sugar = sugar;

    Sugar.extend();

    Model = (function() {
      class Model {
        markdown() {}

        constructor(model) {
          if (model == null) {
            model = this.stub();
          }
          Object.merge(this, Object.select(model, this.attribute_list));
          this.after_construct();
        }

        after_construct() {}

        data_stub() {
          return {};
        }

        stub() {
          return {
            id: null,
            name: `New ${this.type} ${Date.create().format("{yyyy}{MM}{dd}{HH}{mm}{ss}")}`,
            type: this.type,
            data: this.data_stub(),
            is_locked: false,
            is_favorite: false,
            created_at: null,
            modified_at: null
          };
        }

        validate() {
          return true;
        }

        contains(text) {
          var result;
          result = true;
          if (text != null) {
            result = this.name.toLowerCase().includes(text.toLowerCase());
          }
          return result;
        }

        saveableModel() {
          var model;
          model = Object.select(this, this.attribute_list);
          if (model["id"] != null) {
            return model;
          } else {
            return Object.exclude(model, this.id);
          }
        }

        exportable_clone() {
          var clone, output;
          output = this.saveableModel();
          clone = JSON.stringify(output);
          return JSON.parse(clone);
        }

        safe_clone(classType) {
          var clone, output;
          output = this.saveableModel();
          clone = JSON.stringify(output);
          return new classType(JSON.parse(clone));
        }

      }
      Model.prototype.attribute_list = ["id", "name", "type", "type_version", "data", "is_locked", "is_favorite", "is_pinned", "priority", "created_at", "modified_at"];

      Model.prototype.editable_attributes = ["name", "data", "is_locked", "is_favorite", "is_archived", "is_pinned", "priority"];

      Model.prototype.collection_name = "data";

      Model.prototype.type = "";

      return Model;

    }).call(commonjsGlobal);

    var _model = Model;

    var Model$1, Note;

    Model$1 = _model;

    Note = (function() {
      class Note extends Model$1 {
        markdown() {
          return marked(this.data.contents);
        }

        data_stub() {
          return {
            contents: ""
          };
        }

      }
      Note.prototype.type = "note";

      return Note;

    }).call(commonjsGlobal);

    // first line of contents should be the title
    var note = Note;

    var Code, Model$2;

    Model$2 = _model;

    Code = (function() {
      class Code extends Model$2 {
        markdown() {
          return marked(this.data.contents);
        }

        data_stub() {
          return {
            mode: "javascript",
            contents: ""
          };
        }

      }
      Code.prototype.type = "code";

      return Code;

    }).call(commonjsGlobal);

    // first line of contents should be the title
    var code = Code;

    var KeyPair, Model$3;

    Model$3 = _model;

    KeyPair = (function() {
      class KeyPair extends Model$3 {
        data_stub() {
          return {
            lines: []
          };
        }

      }
      KeyPair.prototype.type = "list";

      return KeyPair;

    }).call(commonjsGlobal);

    var keypair = KeyPair;

    var Model$4, Solver;

    Model$4 = _model;

    Solver = (function() {
      class Solver extends Model$4 {
        data_stub() {
          return {
            lines: []
          };
        }

      }
      Solver.prototype.type = "solver";

      return Solver;

    }).call(commonjsGlobal);

    var solver = Solver;

    var Model$5, Timesheet;

    Model$5 = _model;

    Timesheet = (function() {
      class Timesheet extends Model$5 {
        data_stub() {
          return {
            events: []
          };
        }

      }
      Timesheet.prototype.type = "timesheet";

      return Timesheet;

    }).call(commonjsGlobal);

    var timesheet = Timesheet;

    var Checklist, Model$6;

    Model$6 = _model;

    Checklist = (function() {
      class Checklist extends Model$6 {
        data_stub() {
          return {
            lines: []
          };
        }

      }
      Checklist.prototype.type = "checklist";

      return Checklist;

    }).call(commonjsGlobal);

    var checklist = Checklist;

    var js_cookie = createCommonjsModule(function (module, exports) {
    (function (factory) {
    	var registeredInModuleLoader;
    	{
    		module.exports = factory();
    		registeredInModuleLoader = true;
    	}
    	if (!registeredInModuleLoader) {
    		var OldCookies = window.Cookies;
    		var api = window.Cookies = factory();
    		api.noConflict = function () {
    			window.Cookies = OldCookies;
    			return api;
    		};
    	}
    }(function () {
    	function extend () {
    		var i = 0;
    		var result = {};
    		for (; i < arguments.length; i++) {
    			var attributes = arguments[ i ];
    			for (var key in attributes) {
    				result[key] = attributes[key];
    			}
    		}
    		return result;
    	}

    	function decode (s) {
    		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    	}

    	function init (converter) {
    		function api() {}

    		function set (key, value, attributes) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			attributes = extend({
    				path: '/'
    			}, api.defaults, attributes);

    			if (typeof attributes.expires === 'number') {
    				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
    			}

    			// We're using "expires" because "max-age" is not supported by IE
    			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

    			try {
    				var result = JSON.stringify(value);
    				if (/^[\{\[]/.test(result)) {
    					value = result;
    				}
    			} catch (e) {}

    			value = converter.write ?
    				converter.write(value, key) :
    				encodeURIComponent(String(value))
    					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

    			key = encodeURIComponent(String(key))
    				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
    				.replace(/[\(\)]/g, escape);

    			var stringifiedAttributes = '';
    			for (var attributeName in attributes) {
    				if (!attributes[attributeName]) {
    					continue;
    				}
    				stringifiedAttributes += '; ' + attributeName;
    				if (attributes[attributeName] === true) {
    					continue;
    				}

    				// Considers RFC 6265 section 5.2:
    				// ...
    				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
    				//     character:
    				// Consume the characters of the unparsed-attributes up to,
    				// not including, the first %x3B (";") character.
    				// ...
    				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    			}

    			return (document.cookie = key + '=' + value + stringifiedAttributes);
    		}

    		function get (key, json) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			var jar = {};
    			// To prevent the for loop in the first place assign an empty array
    			// in case there are no cookies at all.
    			var cookies = document.cookie ? document.cookie.split('; ') : [];
    			var i = 0;

    			for (; i < cookies.length; i++) {
    				var parts = cookies[i].split('=');
    				var cookie = parts.slice(1).join('=');

    				if (!json && cookie.charAt(0) === '"') {
    					cookie = cookie.slice(1, -1);
    				}

    				try {
    					var name = decode(parts[0]);
    					cookie = (converter.read || converter)(cookie, name) ||
    						decode(cookie);

    					if (json) {
    						try {
    							cookie = JSON.parse(cookie);
    						} catch (e) {}
    					}

    					jar[name] = cookie;

    					if (key === name) {
    						break;
    					}
    				} catch (e) {}
    			}

    			return key ? jar[key] : jar;
    		}

    		api.set = set;
    		api.get = function (key) {
    			return get(key, false /* read as raw */);
    		};
    		api.getJSON = function (key) {
    			return get(key, true /* read as json */);
    		};
    		api.remove = function (key, attributes) {
    			set(key, '', extend(attributes, {
    				expires: -1
    			}));
    		};

    		api.defaults = {};

    		api.withConverter = init;

    		return api;
    	}

    	return init(function () {});
    }));
    });

    var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
    });

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]], '-',
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]],
        bth[buf[i++]], bth[buf[i++]]
      ]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;
    var _clockseq;

    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;

    // See https://github.com/uuidjs/uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rngBrowser();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid_1(b);
    }

    var v1_1 = v1;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rngBrowser)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    var uuid = v4_1;
    uuid.v1 = v1_1;
    uuid.v4 = v4_1;

    var uuid_1 = uuid;

    /*
     * Dexie.js - a minimalistic wrapper for IndexedDB
     * ===============================================
     *
     * By David Fahlander, david.fahlander@gmail.com
     *
     * Version {version}, {date}
     *
     * http://dexie.org
     *
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
     */
     
    var keys$1 = Object.keys;
    var isArray$h = Array.isArray;
    var _global = typeof self !== 'undefined' ? self :
        typeof window !== 'undefined' ? window :
            global;
    function extend(obj, extension) {
        if (typeof extension !== 'object')
            return obj;
        keys$1(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }
    var getProto = Object.getPrototypeOf;
    var _hasOwn = {}.hasOwnProperty;
    function hasOwn$d(obj, prop) {
        return _hasOwn.call(obj, prop);
    }
    function props(proto, extension) {
        if (typeof extension === 'function')
            extension = extension(getProto(proto));
        keys$1(extension).forEach(function (key) {
            setProp(proto, key, extension[key]);
        });
    }
    var defineProperty$1 = Object.defineProperty;
    function setProp(obj, prop, functionOrGetSet, options) {
        defineProperty$1(obj, prop, extend(functionOrGetSet && hasOwn$d(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ?
            { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :
            { value: functionOrGetSet, configurable: true, writable: true }, options));
    }
    function derive(Child) {
        return {
            from: function (Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }
    var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
    function getPropertyDescriptor(obj, prop) {
        var pd = getOwnPropertyDescriptor$1(obj, prop), proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }
    var _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }
    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }
    function assert(b) {
        if (!b)
            throw new Error("Assertion Failed");
    }
    function asap(fn) {
        if (_global.setImmediate)
            setImmediate(fn);
        else
            setTimeout(fn, 0);
    }

    /** Generate an object (hash map) based on given array.
     * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to
     *        instert on the resulting object for each item in the array. If this function returns a falsy value, the
     *        current item wont affect the resulting object.
     */
    function arrayToObject(array, extractor) {
        return array.reduce(function (result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue)
                result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }
    function trycatcher(fn, reject) {
        return function () {
            try {
                fn.apply(this, arguments);
            }
            catch (e) {
                reject(e);
            }
        };
    }
    function tryCatch(fn, onerror, args) {
        try {
            fn.apply(null, args);
        }
        catch (ex) {
            onerror && onerror(ex);
        }
    }
    function getByKeyPath(obj, keyPath) {
        // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path
        if (hasOwn$d(obj, keyPath))
            return obj[keyPath]; // This line is moved from last to first for optimization purpose.
        if (!keyPath)
            return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }
    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined)
            return;
        if ('isFrozen' in Object && Object.isFrozen(obj))
            return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        }
        else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "")
                    if (value === undefined)
                        delete obj[currentKeyPath];
                    else
                        obj[currentKeyPath] = value;
                else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj)
                        innerObj = (obj[currentKeyPath] = {});
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            }
            else {
                if (value === undefined)
                    delete obj[keyPath];
                else
                    obj[keyPath] = value;
            }
        }
    }
    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string')
            setByKeyPath(obj, keyPath, undefined);
        else if ('length' in keyPath)
            [].map.call(keyPath, function (kp) {
                setByKeyPath(obj, kp, undefined);
            });
    }
    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn$d(obj, m))
                rv[m] = obj[m];
        }
        return rv;
    }
    var concat = [].concat;
    function flatten$1(a) {
        return concat.apply([], a);
    }
    //https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
    var intrinsicTypes = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set"
        .split(',').concat(flatten$1([8, 16, 32, 64].map(function (num) { return ["Int", "Uint", "Float"].map(function (t) { return t + num + "Array"; }); }))).filter(function (t) { return _global[t]; }).map(function (t) { return _global[t]; });
    function deepClone(any) {
        if (!any || typeof any !== 'object')
            return any;
        var rv;
        if (isArray$h(any)) {
            rv = [];
            for (var i = 0, l = any.length; i < l; ++i) {
                rv.push(deepClone(any[i]));
            }
        }
        else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
            rv = any;
        }
        else {
            rv = any.constructor ? Object.create(any.constructor.prototype) : {};
            for (var prop in any) {
                if (hasOwn$d(any, prop)) {
                    rv[prop] = deepClone(any[prop]);
                }
            }
        }
        return rv;
    }
    function getObjectDiff(a, b, rv, prfx) {
        // Compares objects a and b and produces a diff object.
        rv = rv || {};
        prfx = prfx || '';
        keys$1(a).forEach(function (prop) {
            if (!hasOwn$d(b, prop))
                rv[prfx + prop] = undefined; // Property removed
            else {
                var ap = a[prop], bp = b[prop];
                if (typeof ap === 'object' && typeof bp === 'object' &&
                    ap && bp &&
                    // Now compare constructors are same (not equal because wont work in Safari)
                    ('' + ap.constructor) === ('' + bp.constructor))
                    // Same type of object but its properties may have changed
                    getObjectDiff(ap, bp, rv, prfx + prop + ".");
                else if (ap !== bp)
                    rv[prfx + prop] = b[prop]; // Primitive value changed
            }
        });
        keys$1(b).forEach(function (prop) {
            if (!hasOwn$d(a, prop)) {
                rv[prfx + prop] = b[prop]; // Property added
            }
        });
        return rv;
    }
    // If first argument is iterable or array-like, return it as an array
    var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
    var getIteratorOf = iteratorSymbol ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () { return null; };
    var NO_CHAR_ARRAY = {};
    // Takes one or several arguments and returns an array based on the following criteras:
    // * If several arguments provided, return arguments converted to an array in a way that
    //   still allows javascript engine to optimize the code.
    // * If single argument is an array, return a clone of it.
    // * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special
    //   case to the two bullets below.
    // * If single argument is an iterable, convert it to an array and return the resulting array.
    // * If single argument is array-like (has length of type number), convert it to an array.
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray$h(arrayLike))
                return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')
                return [arrayLike];
            if ((it = getIteratorOf(arrayLike))) {
                a = [];
                while ((x = it.next()), !x.done)
                    a.push(x.value);
                return a;
            }
            if (arrayLike == null)
                return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--)
                    a[i] = arrayLike[i];
                return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--)
            a[i] = arguments[i];
        return a;
    }

    // By default, debug will be true only if platform is a web platform and its page is served from localhost.
    // When debug = true, error's stacks will contain asyncronic long stacks.
    var debug = typeof location !== 'undefined' &&
        // By default, use debug mode if served from localhost.
        /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function setDebug(value, filter) {
        debug = value;
        libraryFilter = filter;
    }
    var libraryFilter = function () { return true; };
    var NEEDS_THROW_FOR_STACK = !new Error("").stack;
    function getErrorWithStack() {
        if (NEEDS_THROW_FOR_STACK)
            try {
                // Doing something naughty in strict mode here to trigger a specific error
                // that can be explicitely ignored in debugger's exception settings.
                // If we'd just throw new Error() here, IE's debugger's exception settings
                // will just consider it as "exception thrown by javascript code" which is
                // something you wouldn't want it to ignore.
                getErrorWithStack.arguments;
                throw new Error(); // Fallback if above line don't throw.
            }
            catch (e) {
                return e;
            }
        return new Error();
    }
    function prettyStack(exception, numIgnoredFrames) {
        var stack = exception.stack;
        if (!stack)
            return "";
        numIgnoredFrames = (numIgnoredFrames || 0);
        if (stack.indexOf(exception.name) === 0)
            numIgnoredFrames += (exception.name + exception.message).split('\n').length;
        return stack.split('\n')
            .slice(numIgnoredFrames)
            .filter(libraryFilter)
            .map(function (frame) { return "\n" + frame; })
            .join('');
    }
    function deprecated(what, fn) {
        return function () {
            console.warn(what + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + prettyStack(getErrorWithStack(), 1));
            return fn.apply(this, arguments);
        };
    }

    var dexieErrorNames = [
        'Modify',
        'Bulk',
        'OpenFailed',
        'VersionChange',
        'Schema',
        'Upgrade',
        'InvalidTable',
        'MissingAPI',
        'NoSuchDatabase',
        'InvalidArgument',
        'SubTransaction',
        'Unsupported',
        'Internal',
        'DatabaseClosed',
        'PrematureCommit',
        'ForeignAwait'
    ];
    var idbDomErrorNames = [
        'Unknown',
        'Constraint',
        'Data',
        'TransactionInactive',
        'ReadOnly',
        'Version',
        'NotFound',
        'InvalidState',
        'InvalidAccess',
        'Abort',
        'Timeout',
        'QuotaExceeded',
        'Syntax',
        'DataClone'
    ];
    var errorList = dexieErrorNames.concat(idbDomErrorNames);
    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed"
    };
    //
    // DexieError - base class of all out exceptions.
    //
    function DexieError(name, msg) {
        // Reason we don't use ES6 classes is because:
        // 1. It bloats transpiled code and increases size of minified code.
        // 2. It doesn't give us much in this case.
        // 3. It would require sub classes to call super(), which
        //    is not needed when deriving from Error.
        this._e = getErrorWithStack();
        this.name = name;
        this.message = msg;
    }
    derive(DexieError).from(Error).extend({
        stack: {
            get: function () {
                return this._stack ||
                    (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
            }
        },
        toString: function () { return this.name + ": " + this.message; }
    });
    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + failures
            .map(function (f) { return f.toString(); })
            .filter(function (v, i, s) { return s.indexOf(v) === i; }) // Only unique error strings
            .join('\n');
    }
    //
    // ModifyError - thrown in Collection.modify()
    // Specific constructor because it contains members failures and failedKeys.
    //
    function ModifyError(msg, failures, successCount, failedKeys) {
        this._e = getErrorWithStack();
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
    }
    derive(ModifyError).from(DexieError);
    function BulkError(msg, failures) {
        this._e = getErrorWithStack();
        this.name = "BulkError";
        this.failures = failures;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(BulkError).from(DexieError);
    //
    //
    // Dynamically generate error names and exception classes based
    // on the names in errorList.
    //
    //
    // Map of {ErrorName -> ErrorName + "Error"}
    var errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + "Error", obj); }, {});
    // Need an alias for DexieError because we're gonna create subclasses with the same name.
    var BaseException = DexieError;
    // Map of {ErrorName -> exception constructor}
    var exceptions = errorList.reduce(function (obj, name) {
        // Let the name be "DexieError" because this name may
        // be shown in call stack and when debugging. DexieError is
        // the most true name because it derives from DexieError,
        // and we cannot change Function.name programatically without
        // dynamically create a Function object, which would be considered
        // 'eval-evil'.
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this._e = getErrorWithStack();
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            }
            else if (typeof msgOrInner === 'string') {
                this.message = msgOrInner;
                this.inner = inner || null;
            }
            else if (typeof msgOrInner === 'object') {
                this.message = msgOrInner.name + " " + msgOrInner.message;
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});
    // Use ECMASCRIPT standard exceptions where applicable:
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;
    var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
            return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            // Derive stack from inner exception if it has a stack
            setProp(rv, "stack", { get: function () {
                    return this.inner.stack;
                } });
        }
        return rv;
    }
    var fullNameExceptions = errorList.reduce(function (obj, name) {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1)
            obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function nop() { }
    function mirror(val) { return val; }
    function pureFunctionChain(f1, f2) {
        // Enables chained events that takes ONE argument and returns it to the next function in chain.
        // This pattern is used in the hook("reading") event.
        if (f1 == null || f1 === mirror)
            return f2;
        return function (val) {
            return f2(f1(val));
        };
    }
    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }
    function hookCreatingChain(f1, f2) {
        // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.
        // This pattern is used in the hook("creating") event.
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined)
                arguments[0] = res;
            var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }
    function hookDeletingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }
    function hookUpdatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.
            var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ?
                (res2 === undefined ? undefined : res2) :
                (extend(res, res2));
        };
    }
    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            if (f2.apply(this, arguments) === false)
                return false;
            return f1.apply(this, arguments);
        };
    }

    function promisableChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this, i = arguments.length, args = new Array(i);
                while (i--)
                    args[i] = arguments[i];
                return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    /*
     * Copyright (c) 2014-2017 David Fahlander
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
     */
    //
    // Promise and Zone (PSD) for Dexie library
    //
    // I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by
    // https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.
    //
    // In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another
    // tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use
    // another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task
    // engine that is indexedDB compliant across all browsers.
    // Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.
    // Also with inspiration from bluebird, asyncronic stacks in debug mode.
    //
    // Specific non-standard features of this Promise class:
    // * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as
    //   native async / await.
    // * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame
    //   and below + all promises that those promises creates or awaits.
    // * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). 
    //
    // David Fahlander, https://github.com/dfahlander
    //
    // Just a pointer that only this module knows about.
    // Used in Promise constructor to emulate a private constructor.
    var INTERNAL = {};
    // Async stacks (long stacks) must not grow infinitely.
    var LONG_STACKS_CLIP_LIMIT = 100;
    var MAX_LONG_STACKS = 20;
    var ZONE_ECHO_LIMIT = 7;
    var nativePromiseInstanceAndProto = (function () {
        try {
            // Be able to patch native async functions
            return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")();
        }
        catch (e) {
            var P = _global.Promise;
            return P ?
                [P.resolve(), P.prototype, P.resolve()] :
                [];
        }
    })();
    var resolvedNativePromise = nativePromiseInstanceAndProto[0];
    var nativePromiseProto = nativePromiseInstanceAndProto[1];
    var resolvedGlobalPromise = nativePromiseInstanceAndProto[2];
    var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
    var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
    var AsyncFunction = nativePromiseInstanceAndProto[3];
    var patchGlobalPromise = !!resolvedGlobalPromise;
    var stack_being_generated = false;
    /* The default function used only for the very first promise in a promise chain.
       As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks
       emulated in this module. For indexedDB compatibility, this means that every method needs to
       execute at least one promise before doing an indexedDB operation. Dexie will always call
       db.ready().then() for every operation to make sure the indexedDB event is started in an
       indexedDB-compatible emulated micro task loop.
    */
    var schedulePhysicalTick = resolvedGlobalPromise ?
        function () { resolvedGlobalPromise.then(physicalTick); }
        :
            _global.setImmediate ?
                // setImmediate supported. Those modern platforms also supports Function.bind().
                setImmediate.bind(null, physicalTick) :
                _global.MutationObserver ?
                    // MutationObserver supported
                    function () {
                        var hiddenDiv = document.createElement("div");
                        (new MutationObserver(function () {
                            physicalTick();
                            hiddenDiv = null;
                        })).observe(hiddenDiv, { attributes: true });
                        hiddenDiv.setAttribute('i', '1');
                    } :
                    // No support for setImmediate or MutationObserver. No worry, setTimeout is only called
                    // once time. Every tick that follows will be our emulated micro tick.
                    // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug 
                    function () { setTimeout(physicalTick, 0); };
    // Configurable through Promise.scheduler.
    // Don't export because it would be unsafe to let unknown
    // code call it unless they do try..catch within their callback.
    // This function can be retrieved through getter of Promise.scheduler though,
    // but users must not do Promise.scheduler = myFuncThatThrowsException
    var asap$1 = function (callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };
    var isOutsideMicroTick = true;
    var needsNewPhysicalTick = true;
    var unhandledErrors = [];
    var rejectingErrors = [];
    var currentFulfiller = null;
    var rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions
    var globalPSD = {
        id: 'global',
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        pgp: false,
        env: {},
        finalize: function () {
            this.unhandleds.forEach(function (uh) {
                try {
                    globalError(uh[0], uh[1]);
                }
                catch (e) { }
            });
        }
    };
    var PSD = globalPSD;
    var microtickQueue = []; // Callbacks to call in this or next physical tick.
    var numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.
    var tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.
    function Promise$1(fn) {
        if (typeof this !== 'object')
            throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.
        // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()
        // execute the microtask engine implicitely within the call to resolve() or reject().
        // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack
        // only contains library code when calling resolve() or reject().
        // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from
        // global scope (event handler, timer etc)!
        this._lib = false;
        // Current async scope
        var psd = (this._PSD = PSD);
        if (debug) {
            this._stackHolder = getErrorWithStack();
            this._prev = null;
            this._numPrev = 0; // Number of previous promises (for long stacks)
        }
        if (typeof fn !== 'function') {
            if (fn !== INTERNAL)
                throw new TypeError('Not a function');
            // Private constructor (INTERNAL, state, value).
            // Used internally by Promise.resolve() and Promise.reject().
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false)
                handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().
            return;
        }
        this._state = null; // null (=pending), false (=rejected) or true (=resolved)
        this._value = null; // error or result
        ++psd.ref; // Refcounting current scope
        executePromiseTask(this, fn);
    }
    // Prepare a property descriptor to put onto Promise.prototype.then
    var thenProp = {
        get: function () {
            var psd = PSD, microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
                var _this = this;
                var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
                if (possibleAwait)
                    decrementExpectedAwaits();
                var rv = new Promise$1(function (resolve, reject) {
                    propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));
                });
                debug && linkToPreviousPromise(rv, this);
                return rv;
            }
            then.prototype = INTERNAL; // For idempotense, see setter below.
            return then;
        },
        // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then
        // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.
        set: function (value) {
            setProp(this, 'then', value && value.prototype === INTERNAL ?
                thenProp : // Restore to original property descriptor.
                {
                    get: function () {
                        return value; // Getter returning provided value (behaves like value is just changed)
                    },
                    set: thenProp.set // Keep a setter that is prepared to restore original.
                });
        }
    };
    props(Promise$1.prototype, {
        then: thenProp,
        _then: function (onFulfilled, onRejected) {
            // A little tinier version of then() that don't have to create a resulting promise.
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function (onRejected) {
            if (arguments.length === 1)
                return this.then(null, onRejected);
            // First argument is the Error type to catch
            var type = arguments[0], handler = arguments[1];
            return typeof type === 'function' ? this.then(null, function (err) {
                // Catching errors by its constructor type (similar to java / c++ / c#)
                // Sample: promise.catch(TypeError, function (e) { ... });
                return err instanceof type ? handler(err) : PromiseReject(err);
            })
                : this.then(null, function (err) {
                    // Catching errors by the error.name property. Makes sense for indexedDB where error type
                    // is always DOMError but where e.name tells the actual error type.
                    // Sample: promise.catch('ConstraintError', function (e) { ... });
                    return err && err.name === type ? handler(err) : PromiseReject(err);
                });
        },
        finally: function (onFinally) {
            return this.then(function (value) {
                onFinally();
                return value;
            }, function (err) {
                onFinally();
                return PromiseReject(err);
            });
        },
        stack: {
            get: function () {
                if (this._stack)
                    return this._stack;
                try {
                    stack_being_generated = true;
                    var stacks = getStack(this, [], MAX_LONG_STACKS);
                    var stack = stacks.join("\nFrom previous: ");
                    if (this._state !== null)
                        this._stack = stack; // Stack may be updated on reject.
                    return stack;
                }
                finally {
                    stack_being_generated = false;
                }
            }
        },
        timeout: function (ms, msg) {
            var _this = this;
            return ms < Infinity ?
                new Promise$1(function (resolve, reject) {
                    var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);
                    _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
                }) : this;
        }
    });
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag)
        setProp(Promise$1.prototype, Symbol.toStringTag, 'Promise');
    // Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.
    // Environment globals snapshotted on leaving global zone
    globalPSD.env = snapShot();
    function Listener(onFulfilled, onRejected, resolve, reject, zone) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = zone;
    }
    // Promise Static Properties
    props(Promise$1, {
        all: function () {
            var values = getArrayOf.apply(null, arguments) // Supports iterables, implicit arguments and array-like.
                .map(onPossibleParallellAsync); // Handle parallell async/awaits 
            return new Promise$1(function (resolve, reject) {
                if (values.length === 0)
                    resolve([]);
                var remaining = values.length;
                values.forEach(function (a, i) { return Promise$1.resolve(a).then(function (x) {
                    values[i] = x;
                    if (!--remaining)
                        resolve(values);
                }, reject); });
            });
        },
        resolve: function (value) {
            if (value instanceof Promise$1)
                return value;
            if (value && typeof value.then === 'function')
                return new Promise$1(function (resolve, reject) {
                    value.then(resolve, reject);
                });
            var rv = new Promise$1(INTERNAL, true, value);
            linkToPreviousPromise(rv, currentFulfiller);
            return rv;
        },
        reject: PromiseReject,
        race: function () {
            var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new Promise$1(function (resolve, reject) {
                values.map(function (value) { return Promise$1.resolve(value).then(resolve, reject); });
            });
        },
        PSD: {
            get: function () { return PSD; },
            set: function (value) { return PSD = value; }
        },
        //totalEchoes: {get: ()=>totalEchoes},
        //task: {get: ()=>task},
        newPSD: newScope,
        usePSD: usePSD,
        scheduler: {
            get: function () { return asap$1; },
            set: function (value) { asap$1 = value; }
        },
        rejectionMapper: {
            get: function () { return rejectionMapper; },
            set: function (value) { rejectionMapper = value; } // Map reject failures
        },
        follow: function (fn, zoneProps) {
            return new Promise$1(function (resolve, reject) {
                return newScope(function (resolve, reject) {
                    var psd = PSD;
                    psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()
                    psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.
                    psd.finalize = callBoth(function () {
                        var _this = this;
                        // Unhandled standard or 3rd part promises are put in PSD.unhandleds and
                        // examined upon scope completion while unhandled rejections in this Promise
                        // will trigger directly through psd.onunhandled
                        run_at_end_of_this_or_next_physical_tick(function () {
                            _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, zoneProps, resolve, reject);
            });
        }
    });
    /**
    * Take a potentially misbehaving resolver function and make sure
    * onFulfilled and onRejected are only called once.
    *
    * Makes no guarantees about asynchrony.
    */
    function executePromiseTask(promise, fn) {
        // Promise Resolution Procedure:
        // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
        try {
            fn(function (value) {
                if (promise._state !== null)
                    return; // Already settled
                if (value === promise)
                    throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, function (resolve, reject) {
                        value instanceof Promise$1 ?
                            value._then(resolve, reject) :
                            value.then(resolve, reject);
                    });
                }
                else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick)
                    endMicroTickScope();
            }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below
        }
        catch (ex) {
            handleRejection(promise, ex);
        }
    }
    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null)
            return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {
            var origProp = getPropertyDescriptor(reason, "stack");
            reason._promise = promise;
            setProp(reason, "stack", {
                get: function () {
                    return stack_being_generated ?
                        origProp && (origProp.get ?
                            origProp.get.apply(reason) :
                            origProp.value) :
                        promise.stack;
                }
            });
        });
        // Add the failure to a list of possibly uncaught errors
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick)
            endMicroTickScope();
    }
    function propagateAllListeners(promise) {
        //debug && linkToPreviousPromise(promise);
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();
        if (numScheduledCalls === 0) {
            // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,
            // and that no deferreds where listening to this rejection or success.
            // Since there is a risk that our stack can contain application code that may
            // do stuff after this code is finished that may generate new calls, we cannot
            // call finalizers here.
            ++numScheduledCalls;
            asap$1(function () {
                if (--numScheduledCalls === 0)
                    finalizePhysicalTick(); // Will detect unhandled errors
            }, []);
        }
    }
    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }
        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        ++listener.psd.ref;
        ++numScheduledCalls;
        asap$1(callListener, [cb, promise, listener]);
    }
    function callListener(cb, promise, listener) {
        try {
            // Set static variable currentFulfiller to the promise that is being fullfilled,
            // so that we connect the chain of promises (for long stacks support)
            currentFulfiller = promise;
            // Call callback and resolve our listener with it's return value.
            var ret, value = promise._value;
            if (promise._state) {
                // cb is onResolved
                ret = cb(value);
            }
            else {
                // cb is onRejected
                if (rejectingErrors.length)
                    rejectingErrors = [];
                ret = cb(value);
                if (rejectingErrors.indexOf(value) === -1)
                    markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.
            }
            listener.resolve(ret);
        }
        catch (e) {
            // Exception thrown in callback. Reject our listener.
            listener.reject(e);
        }
        finally {
            // Restore env and currentFulfiller.
            currentFulfiller = null;
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
        }
    }
    function getStack(promise, stacks, limit) {
        if (stacks.length === limit)
            return stacks;
        var stack = "";
        if (promise._state === false) {
            var failure = promise._value, errorName, message;
            if (failure != null) {
                errorName = failure.name || "Error";
                message = failure.message || failure;
                stack = prettyStack(failure, 0);
            }
            else {
                errorName = failure; // If error is undefined or null, show that.
                message = "";
            }
            stacks.push(errorName + (message ? ": " + message : "") + stack);
        }
        if (debug) {
            stack = prettyStack(promise._stackHolder, 2);
            if (stack && stacks.indexOf(stack) === -1)
                stacks.push(stack);
            if (promise._prev)
                getStack(promise._prev, stacks, limit);
        }
        return stacks;
    }
    function linkToPreviousPromise(promise, prev) {
        // Support long stacks by linking to previous completed promise.
        var numPrev = prev ? prev._numPrev + 1 : 0;
        if (numPrev < LONG_STACKS_CLIP_LIMIT) {
            promise._prev = prev;
            promise._numPrev = numPrev;
        }
    }
    /* The callback to schedule with setImmediate() or setTimeout().
       It runs a virtual microtick and executes any callback registered in microtickQueue.
     */
    function physicalTick() {
        beginMicroTickScope() && endMicroTickScope();
    }
    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }
    /* Executes micro-ticks without doing try..catch.
       This can be possible because we only use this internally and
       the registered functions are exception-safe (they do try..catch
       internally before calling any external method). If registering
       functions in the microtickQueue that are not exception-safe, this
       would destroy the framework and make it instable. So we don't export
       our asap method.
    */
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }
    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(function (p) {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.
        var i = finalizers.length;
        while (i)
            finalizers[--i]();
    }
    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap$1(function () {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
        }, []);
    }
    function addPossiblyUnhandledError(promise) {
        // Only add to unhandledErrors if not already there. The first one to add to this list
        // will be upon the first rejection so that the root cause (first promise in the
        // rejection chain) is the one listed.
        if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))
            unhandledErrors.push(promise);
    }
    function markErrorAsHandled(promise) {
        // Called when a reject handled is actually being called.
        // Search in unhandledErrors for any promise whos _value is this promise_value (list
        // contains only rejected promises, and only one item per error)
        var i = unhandledErrors.length;
        while (i)
            if (unhandledErrors[--i]._value === promise._value) {
                // Found a promise that failed with this same error object pointer,
                // Remove that since there is a listener that actually takes care of it.
                unhandledErrors.splice(i, 1);
                return;
            }
    }
    function PromiseReject(reason) {
        return new Promise$1(INTERNAL, false, reason);
    }
    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(), outerScope = PSD;
            try {
                switchToZone(psd, true);
                return fn.apply(this, arguments);
            }
            catch (e) {
                errorCatcher && errorCatcher(e);
            }
            finally {
                switchToZone(outerScope, false);
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
    }
    //
    // variables used for native await support
    //
    var task = { awaits: 0, echoes: 0, id: 0 }; // The ongoing macro-task when using zone-echoing.
    var taskCounter = 0; // ID counter for macro tasks.
    var zoneStack = []; // Stack of left zones to restore asynchronically.
    var zoneEchoes = 0; // zoneEchoes is a must in order to persist zones between native await expressions.
    var totalEchoes = 0; // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.
    var zone_id_counter = 0;
    function newScope(fn, props$$1, a1, a2) {
        var parent = PSD, psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        psd.id = ++zone_id_counter;
        // Prepare for promise patching (done in usePSD):
        var globalEnv = globalPSD.env;
        psd.env = patchGlobalPromise ? {
            Promise: Promise$1,
            PromiseProp: { value: Promise$1, configurable: true, writable: true },
            all: Promise$1.all,
            race: Promise$1.race,
            resolve: Promise$1.resolve,
            reject: Promise$1.reject,
            nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
            gthen: getPatchedPromiseThen(globalEnv.gthen, psd) // global then
        } : {};
        if (props$$1)
            extend(psd, props$$1);
        // unhandleds and onunhandled should not be specifically set here.
        // Leave them on parent prototype.
        // unhandleds.push(err) will push to parent's prototype
        // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2);
        if (psd.ref === 0)
            psd.finalize();
        return rv;
    }
    // Function to call if scopeFunc returns NativePromise
    // Also for each NativePromise in the arguments to Promise.all()
    function incrementExpectedAwaits() {
        if (!task.id)
            task.id = ++taskCounter;
        ++task.awaits;
        task.echoes += ZONE_ECHO_LIMIT;
        return task.id;
    }
    // Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.
    // Also call this when a native await calls then method on a promise. In that case, don't supply
    // sourceTaskId because we already know it refers to current task.
    function decrementExpectedAwaits(sourceTaskId) {
        if (!task.awaits || (sourceTaskId && sourceTaskId !== task.id))
            return;
        if (--task.awaits === 0)
            task.id = 0;
        task.echoes = task.awaits * ZONE_ECHO_LIMIT; // Will reset echoes to 0 if awaits is 0.
    }
    // Call from Promise.all() and Promise.race()
    function onPossibleParallellAsync(possiblePromise) {
        if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(function (x) {
                decrementExpectedAwaits();
                return x;
            }, function (e) {
                decrementExpectedAwaits();
                return rejection(e);
            });
        }
        return possiblePromise;
    }
    function zoneEnterEcho(targetZone) {
        ++totalEchoes;
        if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.id = 0; // Cancel zone echoing.
        }
        zoneStack.push(PSD);
        switchToZone(targetZone, true);
    }
    function zoneLeaveEcho() {
        var zone = zoneStack[zoneStack.length - 1];
        zoneStack.pop();
        switchToZone(zone, false);
    }
    function switchToZone(targetZone, bEnteringZone) {
        var currentZone = PSD;
        if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
            // Enter or leave zone asynchronically as well, so that tasks initiated during current tick
            // will be surrounded by the zone when they are invoked.
            enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
        }
        if (targetZone === PSD)
            return;
        PSD = targetZone; // The actual zone switch occurs at this line.
        // Snapshot on every leave from global zone.
        if (currentZone === globalPSD)
            globalPSD.env = snapShot();
        if (patchGlobalPromise) {
            // Let's patch the global and native Promises (may be same or may be different)
            var GlobalPromise = globalPSD.env.Promise;
            // Swich environments (may be PSD-zone or the global zone. Both apply.)
            var targetEnv = targetZone.env;
            // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)
            // Must be done on each zone change because the patched method contains targetZone in its closure.
            nativePromiseProto.then = targetEnv.nthen;
            GlobalPromise.prototype.then = targetEnv.gthen;
            if (currentZone.global || targetZone.global) {
                // Leaving or entering global zone. It's time to patch / restore global Promise.
                // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.
                Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
                // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might
                // not be accessing global.Promise but a local reference to it)
                GlobalPromise.all = targetEnv.all;
                GlobalPromise.race = targetEnv.race;
                GlobalPromise.resolve = targetEnv.resolve;
                GlobalPromise.reject = targetEnv.reject;
            }
        }
    }
    function snapShot() {
        var GlobalPromise = _global.Promise;
        return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject,
            nthen: nativePromiseProto.then,
            gthen: GlobalPromise.prototype.then
        } : {};
    }
    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
        }
        finally {
            switchToZone(outerScope, false);
        }
    }
    function enqueueNativeMicroTask(job) {
        //
        // Precondition: nativePromiseThen !== undefined
        //
        nativePromiseThen.call(resolvedNativePromise, job);
    }
    function nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {
        return typeof fn !== 'function' ? fn : function () {
            var outerZone = PSD;
            if (possibleAwait)
                incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
                return fn.apply(this, arguments);
            }
            finally {
                switchToZone(outerZone, false);
            }
        };
    }
    function getPatchedPromiseThen(origThen, zone) {
        return function (onResolved, onRejected) {
            return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));
        };
    }
    var UNHANDLEDREJECTION = "unhandledrejection";
    function globalError(err, promise) {
        var rv;
        try {
            rv = promise.onuncatched(err);
        }
        catch (e) { }
        if (rv !== false)
            try {
                var event, eventData = { promise: promise, reason: err };
                if (_global.document && document.createEvent) {
                    event = document.createEvent('Event');
                    event.initEvent(UNHANDLEDREJECTION, true, true);
                    extend(event, eventData);
                }
                else if (_global.CustomEvent) {
                    event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
                    extend(event, eventData);
                }
                if (event && _global.dispatchEvent) {
                    dispatchEvent(event);
                    if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
                        // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.
                        try {
                            _global.onunhandledrejection(event);
                        }
                        catch (_) { }
                }
                if (!event.defaultPrevented) {
                    console.warn("Unhandled rejection: " + (err.stack || err));
                }
            }
            catch (e) { }
    }
    var rejection = Promise$1.reject;

    function Events(ctx) {
        var evs = {};
        var rv = function (eventName, subscriber) {
            if (subscriber) {
                // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.
                var i = arguments.length, args = new Array(i - 1);
                while (--i)
                    args[i - 1] = arguments[i];
                evs[eventName].subscribe.apply(null, args);
                return ctx;
            }
            else if (typeof (eventName) === 'string') {
                // Return interface allowing to fire or unsubscribe from event
                return evs[eventName];
            }
        };
        rv.addEventType = add;
        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }
        return rv;
        function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === 'object')
                return addConfiguredEvents(eventName);
            if (!chainFunction)
                chainFunction = reverseStoppableEventChain;
            if (!defaultFunction)
                defaultFunction = nop;
            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function (cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function (cb) {
                    context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }
        function addConfiguredEvents(cfg) {
            // events(this, {reading: [functionChain, nop]});
            keys$1(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray$h(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                }
                else if (args === 'asap') {
                    // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack
                    // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.
                    var context = add(eventName, mirror, function fire() {
                        // Optimazation-safe cloning of arguments into args.
                        var i = arguments.length, args = new Array(i);
                        while (i--)
                            args[i] = arguments[i];
                        // All each subscriber:
                        context.subscribers.forEach(function (fn) {
                            asap(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                }
                else
                    throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    /*
     * Dexie.js - a minimalistic wrapper for IndexedDB
     * ===============================================
     *
     * Copyright (c) 2014-2017 David Fahlander
     *
     * Version {version}, {date}
     *
     * http://dexie.org
     *
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
     *
     */
    var DEXIE_VERSION = '{version}';
    var maxString = String.fromCharCode(65535);
    var maxKey = (function () { try {
        IDBKeyRange.only([[]]);
        return [[]];
    }
    catch (e) {
        return maxString;
    } })();
    var minKey = -Infinity;
    var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    var STRING_EXPECTED = "String expected.";
    var connections = [];
    var isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
    var hasIEDeleteObjectStoreBug = isIEOrEdge;
    var hangsOnDeleteLargeKeyRange = isIEOrEdge;
    var dexieStackFrameFilter = function (frame) { return !/(dexie\.js|dexie\.min\.js)/.test(frame); };
    var dbNamesDB; // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames() 
    // Init debug
    setDebug(debug, dexieStackFrameFilter);
    function Dexie(dbName, options) {
        /// <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>
        var deps = Dexie.dependencies;
        var opts = extend({
            // Default Options
            addons: Dexie.addons,
            autoOpen: true,
            indexedDB: deps.indexedDB,
            IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to browser env.
        }, options);
        var addons = opts.addons, autoOpen = opts.autoOpen, indexedDB = opts.indexedDB, IDBKeyRange = opts.IDBKeyRange;
        var globalSchema = this._dbSchema = {};
        var versions = [];
        var dbStoreNames = [];
        var allTables = {};
        ///<var type="IDBDatabase" />
        var idbdb = null; // Instance of IDBDatabase
        var dbOpenError = null;
        var isBeingOpened = false;
        var onReadyBeingFired = null;
        var openComplete = false;
        var READONLY = "readonly", READWRITE = "readwrite";
        var db = this;
        var dbReadyResolve, dbReadyPromise = new Promise$1(function (resolve) {
            dbReadyResolve = resolve;
        }), cancelOpen, openCanceller = new Promise$1(function (_, reject) {
            cancelOpen = reject;
        });
        var autoSchema = true;
        var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB), hasGetAll;
        function init() {
            // Default subscribers to "versionchange" and "blocked".
            // Can be overridden by custom handlers. If custom handlers return false, these default
            // behaviours will be prevented.
            db.on("versionchange", function (ev) {
                // Default behavior for versionchange event is to close database connection.
                // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });
                // Let's not block the other window from making it's delete() or open() call.
                // NOTE! This event is never fired in IE,Edge or Safari.
                if (ev.newVersion > 0)
                    console.warn("Another connection wants to upgrade database '" + db.name + "'. Closing db now to resume the upgrade.");
                else
                    console.warn("Another connection wants to delete database '" + db.name + "'. Closing db now to resume the delete request.");
                db.close();
                // In many web applications, it would be recommended to force window.reload()
                // when this event occurs. To do that, subscribe to the versionchange event
                // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)
                // The reason for this is that your current web app obviously has old schema code that needs
                // to be updated. Another window got a newer version of the app and needs to upgrade DB but
                // your window is blocking it unless we close it here.
            });
            db.on("blocked", function (ev) {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                    console.warn("Dexie.delete('" + db.name + "') was blocked");
                else
                    console.warn("Upgrade '" + db.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
            });
        }
        //
        //
        //
        // ------------------------- Versioning Framework---------------------------
        //
        //
        //
        this.version = function (versionNumber) {
            /// <param name="versionNumber" type="Number"></param>
            /// <returns type="Version"></returns>
            if (idbdb || isBeingOpened)
                throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];
            if (versionInstance)
                return versionInstance;
            versionInstance = new Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            // Disable autoschema mode, as at least one version is specified.
            autoSchema = false;
            return versionInstance;
        };
        function Version(versionNumber) {
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
            this.stores({}); // Derive earlier schemas by default.
        }
        extend(Version.prototype, {
            stores: function (stores) {
                /// <summary>
                ///   Defines the schema for a particular version
                /// </summary>
                /// <param name="stores" type="Object">
                /// Example: <br/>
                ///   {users: "id++,first,last,&amp;username,*email", <br/>
                ///   passwords: "id++,&amp;username"}<br/>
                /// <br/>
                /// Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>
                /// Special characters:<br/>
                ///  "&amp;"  means unique key, <br/>
                ///  "*"  means value is multiEntry, <br/>
                ///  "++" means auto-increment and only applicable for primary key <br/>
                /// </param>
                this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
                // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.
                var storesSpec = {};
                versions.forEach(function (version) {
                    extend(storesSpec, version._cfg.storesSource);
                });
                var dbschema = (this._cfg.dbschema = {});
                this._parseStoresSpec(storesSpec, dbschema);
                // Update the latest schema to this version
                // Update API
                globalSchema = db._dbSchema = dbschema;
                removeTablesApi([allTables, db, Transaction.prototype]); // Keep Transaction.prototype even though it should be depr.
                setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys$1(dbschema), dbschema);
                dbStoreNames = keys$1(dbschema);
                return this;
            },
            upgrade: function (upgradeFunction) {
                this._cfg.contentUpgrade = upgradeFunction;
                return this;
            },
            _parseStoresSpec: function (stores, outSchema) {
                keys$1(stores).forEach(function (tableName) {
                    if (stores[tableName] !== null) {
                        var instanceTemplate = {};
                        var indexes = parseIndexSyntax(stores[tableName]);
                        var primKey = indexes.shift();
                        if (primKey.multi)
                            throw new exceptions.Schema("Primary key cannot be multi-valued");
                        if (primKey.keyPath)
                            setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);
                        indexes.forEach(function (idx) {
                            if (idx.auto)
                                throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                            if (!idx.keyPath)
                                throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                            setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () { return ""; }) : "");
                        });
                        outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);
                    }
                });
            }
        });
        function runUpgraders(oldVersion, idbtrans, reject) {
            var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);
            trans.create(idbtrans);
            trans._completion.catch(reject);
            var rejectTransaction = trans._reject.bind(trans);
            newScope(function () {
                PSD.trans = trans;
                if (oldVersion === 0) {
                    // Create tables:
                    keys$1(globalSchema).forEach(function (tableName) {
                        createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                    });
                    Promise$1.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);
                }
                else
                    updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);
            });
        }
        function updateTablesAndIndexes(oldVersion, trans, idbtrans) {
            // Upgrade version to version, step-by-step from oldest to newest version.
            // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)
            var queue = [];
            var oldVersionStruct = versions.filter(function (version) { return version._cfg.version === oldVersion; })[0];
            if (!oldVersionStruct)
                throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");
            globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;
            var anyContentUpgraderHasRun = false;
            var versToRun = versions.filter(function (v) { return v._cfg.version > oldVersion; });
            versToRun.forEach(function (version) {
                /// <param name="version" type="Version"></param>
                queue.push(function () {
                    var oldSchema = globalSchema;
                    var newSchema = version._cfg.dbschema;
                    adjustToExistingIndexNames(oldSchema, idbtrans);
                    adjustToExistingIndexNames(newSchema, idbtrans);
                    globalSchema = db._dbSchema = newSchema;
                    var diff = getSchemaDiff(oldSchema, newSchema);
                    // Add tables           
                    diff.add.forEach(function (tuple) {
                        createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                    });
                    // Change tables
                    diff.change.forEach(function (change) {
                        if (change.recreate) {
                            throw new exceptions.Upgrade("Not yet support for changing primary key");
                        }
                        else {
                            var store = idbtrans.objectStore(change.name);
                            // Add indexes
                            change.add.forEach(function (idx) {
                                addIndex(store, idx);
                            });
                            // Update indexes
                            change.change.forEach(function (idx) {
                                store.deleteIndex(idx.name);
                                addIndex(store, idx);
                            });
                            // Delete indexes
                            change.del.forEach(function (idxName) {
                                store.deleteIndex(idxName);
                            });
                        }
                    });
                    if (version._cfg.contentUpgrade) {
                        anyContentUpgraderHasRun = true;
                        return Promise$1.follow(function () {
                            version._cfg.contentUpgrade(trans);
                        });
                    }
                });
                queue.push(function (idbtrans) {
                    if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                        var newSchema = version._cfg.dbschema;
                        // Delete old tables
                        deleteRemovedTables(newSchema, idbtrans);
                    }
                });
            });
            // Now, create a queue execution engine
            function runQueue() {
                return queue.length ? Promise$1.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :
                    Promise$1.resolve();
            }
            return runQueue().then(function () {
                createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)
            });
        }
        function getSchemaDiff(oldSchema, newSchema) {
            var diff = {
                del: [],
                add: [],
                change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}
            };
            for (var table in oldSchema) {
                if (!newSchema[table])
                    diff.del.push(table);
            }
            for (table in newSchema) {
                var oldDef = oldSchema[table], newDef = newSchema[table];
                if (!oldDef) {
                    diff.add.push([table, newDef]);
                }
                else {
                    var change = {
                        name: table,
                        def: newDef,
                        recreate: false,
                        del: [],
                        add: [],
                        change: []
                    };
                    if (oldDef.primKey.src !== newDef.primKey.src) {
                        // Primary key has changed. Remove and re-add table.
                        change.recreate = true;
                        diff.change.push(change);
                    }
                    else {
                        // Same primary key. Just find out what differs:
                        var oldIndexes = oldDef.idxByName;
                        var newIndexes = newDef.idxByName;
                        for (var idxName in oldIndexes) {
                            if (!newIndexes[idxName])
                                change.del.push(idxName);
                        }
                        for (idxName in newIndexes) {
                            var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                            if (!oldIdx)
                                change.add.push(newIdx);
                            else if (oldIdx.src !== newIdx.src)
                                change.change.push(newIdx);
                        }
                        if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                            diff.change.push(change);
                        }
                    }
                }
            }
            return diff;
        }
        function createTable(idbtrans, tableName, primKey, indexes) {
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
            indexes.forEach(function (idx) { addIndex(store, idx); });
            return store;
        }
        function createMissingTables(newSchema, idbtrans) {
            keys$1(newSchema).forEach(function (tableName) {
                if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                    createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
                }
            });
        }
        function deleteRemovedTables(newSchema, idbtrans) {
            for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
                var storeName = idbtrans.db.objectStoreNames[i];
                if (newSchema[storeName] == null) {
                    idbtrans.db.deleteObjectStore(storeName);
                }
            }
        }
        function addIndex(store, idx) {
            store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
        }
        //
        //
        //      Dexie Protected API
        //
        //
        this._allTables = allTables;
        this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {
            return new Transaction(mode, storeNames, dbschema, parentTransaction);
        };
        /* Generate a temporary transaction when db operations are done outside a transaction scope.
        */
        function tempTransaction(mode, storeNames, fn) {
            if (!openComplete && (!PSD.letThrough)) {
                if (!isBeingOpened) {
                    if (!autoOpen)
                        return rejection(new exceptions.DatabaseClosed());
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                return dbReadyPromise.then(function () { return tempTransaction(mode, storeNames, fn); });
            }
            else {
                var trans = db._createTransaction(mode, storeNames, globalSchema);
                try {
                    trans.create();
                }
                catch (ex) {
                    return rejection(ex);
                }
                return trans._promise(mode, function (resolve, reject) {
                    return newScope(function () {
                        PSD.trans = trans;
                        return fn(resolve, reject, trans);
                    });
                }).then(function (result) {
                    // Instead of resolving value directly, wait with resolving it until transaction has completed.
                    // Otherwise the data would not be in the DB if requesting it in the then() operation.
                    // Specifically, to ensure that the following expression will work:
                    //
                    //   db.friends.put({name: "Arne"}).then(function () {
                    //       db.friends.where("name").equals("Arne").count(function(count) {
                    //           assert (count === 1);
                    //       });
                    //   });
                    //
                    return trans._completion.then(function () { return result; });
                }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.
                    trans._reject(err);
                    return rejection(err);
                });*/
            }
        }
        this._whenReady = function (fn) {
            return openComplete || PSD.letThrough ? fn() : new Promise$1(function (resolve, reject) {
                if (!isBeingOpened) {
                    if (!autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                dbReadyPromise.then(resolve, reject);
            }).then(fn);
        };
        //
        //
        //
        //
        //      Dexie API
        //
        //
        //
        this.verno = 0;
        this.open = function () {
            if (isBeingOpened || idbdb)
                return dbReadyPromise.then(function () { return dbOpenError ? rejection(dbOpenError) : db; });
            debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.
            isBeingOpened = true;
            dbOpenError = null;
            openComplete = false;
            // Function pointers to call when the core opening process completes.
            var resolveDbReady = dbReadyResolve, 
            // upgradeTransaction to abort on failure.
            upgradeTransaction = null;
            return Promise$1.race([openCanceller, new Promise$1(function (resolve, reject) {
                    // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:
                    // IE fails when deleting objectStore after reading from it.
                    // A future version of Dexie.js will stopover an intermediate version to workaround this.
                    // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.
                    // If no API, throw!
                    if (!indexedDB)
                        throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " +
                            "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
                    var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));
                    if (!req)
                        throw new exceptions.MissingAPI("IndexedDB API not available"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = wrap(fireOnBlocked);
                    req.onupgradeneeded = wrap(function (e) {
                        upgradeTransaction = req.transaction;
                        if (autoSchema && !db._allowEmptyDB) {
                            // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.
                            // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we
                            // do not create a new database by accident here.
                            req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!
                            upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)
                            // Close database and delete it.
                            req.result.close();
                            var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!
                            delreq.onsuccess = delreq.onerror = wrap(function () {
                                reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                            });
                        }
                        else {
                            upgradeTransaction.onerror = eventRejectHandler(reject);
                            var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.
                            runUpgraders(oldVer / 10, upgradeTransaction, reject);
                        }
                    }, reject);
                    req.onsuccess = wrap(function () {
                        // Core opening procedure complete. Now let's just record some stuff.
                        upgradeTransaction = null;
                        idbdb = req.result;
                        connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.
                        if (autoSchema)
                            readGlobalSchema();
                        else if (idbdb.objectStoreNames.length > 0) {
                            try {
                                adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));
                            }
                            catch (e) {
                                // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.
                            }
                        }
                        idbdb.onversionchange = wrap(function (ev) {
                            db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)
                            db.on("versionchange").fire(ev);
                        });
                        if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {
                            dbNamesDB.dbnames.put({ name: dbName }).catch(nop);
                        }
                        resolve();
                    }, reject);
                })]).then(function () {
                // Before finally resolving the dbReadyPromise and this promise,
                // call and await all on('ready') subscribers:
                // Dexie.vip() makes subscribers able to use the database while being opened.
                // This is a must since these subscribers take part of the opening procedure.
                onReadyBeingFired = [];
                return Promise$1.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {
                    if (onReadyBeingFired.length > 0) {
                        // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.
                        var remainders = onReadyBeingFired.reduce(promisableChain, nop);
                        onReadyBeingFired = [];
                        return Promise$1.resolve(Dexie.vip(remainders)).then(fireRemainders);
                    }
                });
            }).finally(function () {
                onReadyBeingFired = null;
            }).then(function () {
                // Resolve the db.open() with the db instance.
                isBeingOpened = false;
                return db;
            }).catch(function (err) {
                try {
                    // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.
                    upgradeTransaction && upgradeTransaction.abort();
                }
                catch (e) { }
                isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).
                db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.
                // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.
                dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.
                return rejection(dbOpenError);
            }).finally(function () {
                openComplete = true;
                resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.
            });
        };
        this.close = function () {
            var idx = connections.indexOf(db);
            if (idx >= 0)
                connections.splice(idx, 1);
            if (idbdb) {
                try {
                    idbdb.close();
                }
                catch (e) { }
                idbdb = null;
            }
            autoOpen = false;
            dbOpenError = new exceptions.DatabaseClosed();
            if (isBeingOpened)
                cancelOpen(dbOpenError);
            // Reset dbReadyPromise promise:
            dbReadyPromise = new Promise$1(function (resolve) {
                dbReadyResolve = resolve;
            });
            openCanceller = new Promise$1(function (_, reject) {
                cancelOpen = reject;
            });
        };
        this.delete = function () {
            var hasArguments = arguments.length > 0;
            return new Promise$1(function (resolve, reject) {
                if (hasArguments)
                    throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
                if (isBeingOpened) {
                    dbReadyPromise.then(doDelete);
                }
                else {
                    doDelete();
                }
                function doDelete() {
                    db.close();
                    var req = indexedDB.deleteDatabase(dbName);
                    req.onsuccess = wrap(function () {
                        if (!hasNativeGetDatabaseNames) {
                            dbNamesDB.dbnames.delete(dbName).catch(nop);
                        }
                        resolve();
                    });
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = fireOnBlocked;
                }
            });
        };
        this.backendDB = function () {
            return idbdb;
        };
        this.isOpen = function () {
            return idbdb !== null;
        };
        this.hasBeenClosed = function () {
            return dbOpenError && (dbOpenError instanceof exceptions.DatabaseClosed);
        };
        this.hasFailed = function () {
            return dbOpenError !== null;
        };
        this.dynamicallyOpened = function () {
            return autoSchema;
        };
        //
        // Properties
        //
        this.name = dbName;
        // db.tables - an array of all Table instances.
        props(this, {
            tables: {
                get: function () {
                    /// <returns type="Array" elementType="Table" />
                    return keys$1(allTables).map(function (name) { return allTables[name]; });
                }
            }
        });
        //
        // Events
        //
        this.on = Events(this, "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });
        this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
            return function (subscriber, bSticky) {
                Dexie.vip(function () {
                    if (openComplete) {
                        // Database already open. Call subscriber asap.
                        if (!dbOpenError)
                            Promise$1.resolve().then(subscriber);
                        // bSticky: Also subscribe to future open sucesses (after close / reopen) 
                        if (bSticky)
                            subscribe(subscriber);
                    }
                    else if (onReadyBeingFired) {
                        // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected
                        onReadyBeingFired.push(subscriber);
                        if (bSticky)
                            subscribe(subscriber);
                    }
                    else {
                        // Database not yet open. Subscribe to it.
                        subscribe(subscriber);
                        // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.
                        if (!bSticky)
                            subscribe(function unsubscribe() {
                                db.on.ready.unsubscribe(subscriber);
                                db.on.ready.unsubscribe(unsubscribe);
                            });
                    }
                });
            };
        });
        this.transaction = function () {
            /// <summary>
            ///
            /// </summary>
            /// <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>
            /// <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>
            /// <param name="scopeFunc" type="Function">Function to execute with transaction</param>
            var args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
        };
        function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
            // Let table arguments be all arguments between mode and last argument.
            var i = arguments.length;
            if (i < 2)
                throw new exceptions.InvalidArgument("Too few arguments");
            // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)
            // and clone arguments except the first one into local var 'args'.
            var args = new Array(i - 1);
            while (--i)
                args[i - 1] = arguments[i];
            // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.
            scopeFunc = args.pop();
            var tables = flatten$1(args); // Support using array as middle argument, or a mix of arrays and non-arrays.
            return [mode, tables, scopeFunc];
        }
        this._transaction = function (mode, tables, scopeFunc) {
            var parentTransaction = PSD.trans;
            // Check if parent transactions is bound to this db instance, and if caller wants to reuse it
            if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1)
                parentTransaction = null;
            var onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.
            try {
                //
                // Get storeNames from arguments. Either through given table instances, or through given table names.
                //
                var storeNames = tables.map(function (table) {
                    var storeName = table instanceof Table ? table.name : table;
                    if (typeof storeName !== 'string')
                        throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });
                //
                // Resolve mode. Allow shortcuts "r" and "rw".
                //
                if (mode == "r" || mode == READONLY)
                    mode = READONLY;
                else if (mode == "rw" || mode == READWRITE)
                    mode = READWRITE;
                else
                    throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
                if (parentTransaction) {
                    // Basic checks
                    if (parentTransaction.mode === READONLY && mode === READWRITE) {
                        if (onlyIfCompatible) {
                            // Spawn new transaction instead.
                            parentTransaction = null;
                        }
                        else
                            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(function (storeName) {
                            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                                if (onlyIfCompatible) {
                                    // Spawn new transaction instead.
                                    parentTransaction = null;
                                }
                                else
                                    throw new exceptions.SubTransaction("Table " + storeName +
                                        " not included in parent transaction.");
                            }
                        });
                    }
                    if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                        // '?' mode should not keep using an inactive transaction.
                        parentTransaction = null;
                    }
                }
            }
            catch (e) {
                return parentTransaction ?
                    parentTransaction._promise(null, function (_, reject) { reject(e); }) :
                    rejection(e);
            }
            // If this is a sub-transaction, lock the parent and then launch the sub-transaction.
            return (parentTransaction ?
                parentTransaction._promise(mode, enterTransactionScope, "lock") :
                PSD.trans ?
                    // no parent transaction despite PSD.trans exists. Make sure also
                    // that the zone we create is not a sub-zone of current, because
                    // Promise.follow() should not wait for it if so.
                    usePSD(PSD.transless, function () { return db._whenReady(enterTransactionScope); }) :
                    db._whenReady(enterTransactionScope));
            function enterTransactionScope() {
                return Promise$1.resolve().then(function () {
                    // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().
                    var transless = PSD.transless || PSD;
                    // Our transaction.
                    //return new Promise((resolve, reject) => {
                    var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);
                    // Let the transaction instance be part of a Promise-specific data (PSD) value.
                    var zoneProps = {
                        trans: trans,
                        transless: transless
                    };
                    if (parentTransaction) {
                        // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)
                        trans.idbtrans = parentTransaction.idbtrans;
                    }
                    else {
                        trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.
                    }
                    // Support for native async await.
                    if (scopeFunc.constructor === AsyncFunction) {
                        incrementExpectedAwaits();
                    }
                    var returnValue;
                    var promiseFollowed = Promise$1.follow(function () {
                        // Finally, call the scope function with our table and transaction arguments.
                        returnValue = scopeFunc.call(trans, trans);
                        if (returnValue) {
                            if (returnValue.constructor === NativePromise) {
                                var decrementor = decrementExpectedAwaits.bind(null, null);
                                returnValue.then(decrementor, decrementor);
                            }
                            else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                                // scopeFunc returned an iterator with throw-support. Handle yield as await.
                                returnValue = awaitIterator(returnValue);
                            }
                        }
                    }, zoneProps);
                    return (returnValue && typeof returnValue.then === 'function' ?
                        // Promise returned. User uses promise-style transactions.
                        Promise$1.resolve(returnValue).then(function (x) { return trans.active ?
                            x // Transaction still active. Continue.
                            : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")); })
                        // No promise returned. Wait for all outstanding promises before continuing. 
                        : promiseFollowed.then(function () { return returnValue; })).then(function (x) {
                        // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:
                        if (parentTransaction)
                            trans._resolve();
                        // wait for trans._completion
                        // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)
                        return trans._completion.then(function () { return x; });
                    }).catch(function (e) {
                        trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!
                        return rejection(e);
                    });
                });
            }
        };
        this.table = function (tableName) {
            /// <returns type="Table"></returns>
            if (!hasOwn$d(allTables, tableName)) {
                throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
            }
            return allTables[tableName];
        };
        //
        //
        //
        // Table Class
        //
        //
        //
        function Table(name, tableSchema, optionalTrans) {
            /// <param name="name" type="String"></param>
            this.name = name;
            this.schema = tableSchema;
            this._tx = optionalTrans;
            this.hook = allTables[name] ? allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
        }
        function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {
            return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {
                errorList.push(e);
                done && done();
            });
        }
        function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {
            // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],
            // else keysOrTuples must be just an array of keys: [key1, key2, ...].
            return new Promise$1(function (resolve, reject) {
                var len = keysOrTuples.length, lastItem = len - 1;
                if (len === 0)
                    return resolve();
                if (!hasDeleteHook) {
                    for (var i = 0; i < len; ++i) {
                        var req = idbstore.delete(keysOrTuples[i]);
                        req.onerror = eventRejectHandler(reject);
                        if (i === lastItem)
                            req.onsuccess = wrap(function () { return resolve(); });
                    }
                }
                else {
                    var hookCtx, errorHandler = hookedEventRejectHandler(reject), successHandler = hookedEventSuccessHandler(null);
                    tryCatch(function () {
                        for (var i = 0; i < len; ++i) {
                            hookCtx = { onsuccess: null, onerror: null };
                            var tuple = keysOrTuples[i];
                            deletingHook.call(hookCtx, tuple[0], tuple[1], trans);
                            var req = idbstore.delete(tuple[0]);
                            req._hookCtx = hookCtx;
                            req.onerror = errorHandler;
                            if (i === lastItem)
                                req.onsuccess = hookedEventSuccessHandler(resolve);
                            else
                                req.onsuccess = successHandler;
                        }
                    }, function (err) {
                        hookCtx.onerror && hookCtx.onerror(err);
                        throw err;
                    });
                }
            });
        }
        props(Table.prototype, {
            //
            // Table Protected Methods
            //
            _trans: function getTransaction(mode, fn, writeLocked) {
                var trans = this._tx || PSD.trans;
                return trans && trans.db === db ?
                    trans === PSD.trans ?
                        trans._promise(mode, fn, writeLocked) :
                        newScope(function () { return trans._promise(mode, fn, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :
                    tempTransaction(mode, [this.name], fn);
            },
            _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {
                var tableName = this.name;
                function supplyIdbStore(resolve, reject, trans) {
                    if (trans.storeNames.indexOf(tableName) === -1)
                        throw new exceptions.NotFound("Table" + tableName + " not part of transaction");
                    return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);
                }
                return this._trans(mode, supplyIdbStore, writeLocked);
            },
            //
            // Table Public Methods
            //
            get: function (keyOrCrit, cb) {
                if (keyOrCrit && keyOrCrit.constructor === Object)
                    return this.where(keyOrCrit).first(cb);
                var self = this;
                return this._idbstore(READONLY, function (resolve, reject, idbstore) {
                    var req = idbstore.get(keyOrCrit);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function () {
                        resolve(self.hook.reading.fire(req.result));
                    }, reject);
                }).then(cb);
            },
            where: function (indexOrCrit) {
                if (typeof indexOrCrit === 'string')
                    return new WhereClause(this, indexOrCrit);
                if (isArray$h(indexOrCrit))
                    return new WhereClause(this, "[" + indexOrCrit.join('+') + "]");
                // indexOrCrit is an object map of {[keyPath]:value} 
                var keyPaths = keys$1(indexOrCrit);
                if (keyPaths.length === 1)
                    // Only one critera. This was the easy case:
                    return this
                        .where(keyPaths[0])
                        .equals(indexOrCrit[keyPaths[0]]);
                // Multiple criterias.
                // Let's try finding a compound index that matches all keyPaths in
                // arbritary order:
                var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
                    return ix.compound &&
                        keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; }) &&
                        ix.keyPath.every(function (keyPath) { return keyPaths.indexOf(keyPath) >= 0; });
                })[0];
                if (compoundIndex && maxKey !== maxString)
                    // Cool! We found such compound index
                    // and this browser supports compound indexes (maxKey !== maxString)!
                    return this
                        .where(compoundIndex.name)
                        .equals(compoundIndex.keyPath.map(function (kp) { return indexOrCrit[kp]; }));
                if (!compoundIndex)
                    console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " +
                        ("compound index [" + keyPaths.join('+') + "]"));
                // Ok, now let's fallback to finding at least one matching index
                // and filter the rest.
                var idxByName = this.schema.idxByName;
                var simpleIndex = keyPaths.reduce(function (r, keyPath) { return [
                    r[0] || idxByName[keyPath],
                    r[0] || !idxByName[keyPath] ?
                        combine(r[1], function (x) { return '' + getByKeyPath(x, keyPath) ==
                            '' + indexOrCrit[keyPath]; })
                        : r[1]
                ]; }, [null, null]);
                var idx = simpleIndex[0];
                return idx ?
                    this.where(idx.name).equals(indexOrCrit[idx.keyPath])
                        .filter(simpleIndex[1]) :
                    compoundIndex ?
                        this.filter(simpleIndex[1]) : // Has compound but browser bad. Allow filter.
                        this.where(keyPaths).equals(''); // No index at all. Fail lazily.
            },
            count: function (cb) {
                return this.toCollection().count(cb);
            },
            offset: function (offset) {
                return this.toCollection().offset(offset);
            },
            limit: function (numRows) {
                return this.toCollection().limit(numRows);
            },
            reverse: function () {
                return this.toCollection().reverse();
            },
            filter: function (filterFunction) {
                return this.toCollection().and(filterFunction);
            },
            each: function (fn) {
                return this.toCollection().each(fn);
            },
            toArray: function (cb) {
                return this.toCollection().toArray(cb);
            },
            orderBy: function (index) {
                return new Collection(new WhereClause(this, isArray$h(index) ?
                    "[" + index.join('+') + "]" :
                    index));
            },
            toCollection: function () {
                return new Collection(new WhereClause(this));
            },
            mapToClass: function (constructor, structure) {
                /// <summary>
                ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making
                ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.
                /// </summary>
                /// <param name="constructor">Constructor function representing the class.</param>
                /// <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>
                this.schema.mappedClass = constructor;
                var instanceTemplate = Object.create(constructor.prototype);
                if (structure) {
                    // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.
                    applyStructure(instanceTemplate, structure);
                }
                this.schema.instanceTemplate = instanceTemplate;
                // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class
                // no matter which method to use for reading (Table.get() or Table.where(...)... )
                var readHook = function (obj) {
                    if (!obj)
                        return obj; // No valid object. (Value is null). Return as is.
                    // Create a new object that derives from constructor:
                    var res = Object.create(constructor.prototype);
                    // Clone members:
                    for (var m in obj)
                        if (hasOwn$d(obj, m))
                            try {
                                res[m] = obj[m];
                            }
                            catch (_) { }
                    return res;
                };
                if (this.schema.readHook) {
                    this.hook.reading.unsubscribe(this.schema.readHook);
                }
                this.schema.readHook = readHook;
                this.hook("reading", readHook);
                return constructor;
            },
            defineClass: function (structure) {
                /// <summary>
                ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database
                ///     as well as making it possible to extend the prototype of the returned constructor function.
                /// </summary>
                /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
                return this.mapToClass(Dexie.defineClass(structure), structure);
            },
            bulkDelete: function (keys$$1) {
                if (this.hook.deleting.fire === nop) {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                        resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));
                    });
                }
                else {
                    return this
                        .where(':id')
                        .anyOf(keys$$1)
                        .delete()
                        .then(function () { }); // Resolve with undefined.
                }
            },
            bulkPut: function (objects, keys$$1) {
                var _this = this;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1)
                        throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys$$1)
                        throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                    if (keys$$1 && keys$$1.length !== objects.length)
                        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0)
                        return resolve(); // Caller provided empty list.
                    var done = function (result) {
                        if (errorList.length === 0)
                            resolve(result);
                        else
                            reject(new BulkError(_this.name + ".bulkPut(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                    };
                    var req, errorList = [], errorHandler, numObjs = objects.length, table = _this;
                    if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {
                        //
                        // Standard Bulk (no 'creating' or 'updating' hooks to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    }
                    else {
                        var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) { return getByKeyPath(o, idbstore.keyPath); });
                        // Generate map of {[key]: object}
                        var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) { return key != null && [key, objects[i]]; });
                        var promise = !effectiveKeys ?
                            // Auto-incremented key-less objects only without any keys argument.
                            table.bulkAdd(objects) :
                            // Keys provided. Either as inbound in provided objects, or as a keys argument.
                            // Begin with updating those that exists in DB:
                            table.where(':id').anyOf(effectiveKeys.filter(function (key) { return key != null; })).modify(function () {
                                this.value = objectLookup[this.primKey];
                                objectLookup[this.primKey] = null; // Mark as "don't add this"
                            }).catch(ModifyError, function (e) {
                                errorList = e.failures; // No need to concat here. These are the first errors added.
                            }).then(function () {
                                // Now, let's examine which items didnt exist so we can add them:
                                var objsToAdd = [], keysToAdd = keys$$1 && [];
                                // Iterate backwards. Why? Because if same key was used twice, just add the last one.
                                for (var i = effectiveKeys.length - 1; i >= 0; --i) {
                                    var key = effectiveKeys[i];
                                    if (key == null || objectLookup[key]) {
                                        objsToAdd.push(objects[i]);
                                        keys$$1 && keysToAdd.push(key);
                                        if (key != null)
                                            objectLookup[key] = null; // Mark as "dont add again"
                                    }
                                }
                                // The items are in reverse order so reverse them before adding.
                                // Could be important in order to get auto-incremented keys the way the caller
                                // would expect. Could have used unshift instead of push()/reverse(),
                                // but: http://jsperf.com/unshift-vs-reverse
                                objsToAdd.reverse();
                                keys$$1 && keysToAdd.reverse();
                                return table.bulkAdd(objsToAdd, keysToAdd);
                            }).then(function (lastAddedKey) {
                                // Resolve with key of the last object in given arguments to bulkPut():
                                var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.
                                return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;
                            });
                        promise.then(done).catch(BulkError, function (e) {
                            // Concat failure from ModifyError and reject using our 'done' method.
                            errorList = errorList.concat(e.failures);
                            done();
                        }).catch(reject);
                    }
                }, "locked"); // If called from transaction scope, lock transaction til all steps are done.
            },
            bulkAdd: function (objects, keys$$1) {
                var self = this, creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1)
                        throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys$$1)
                        throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                    if (keys$$1 && keys$$1.length !== objects.length)
                        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0)
                        return resolve(); // Caller provided empty list.
                    function done(result) {
                        if (errorList.length === 0)
                            resolve(result);
                        else
                            reject(new BulkError(self.name + ".bulkAdd(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                    }
                    var req, errorList = [], errorHandler, successHandler, numObjs = objects.length;
                    if (creatingHook !== nop) {
                        //
                        // There are subscribers to hook('creating')
                        // Must behave as documented.
                        //
                        var keyPath = idbstore.keyPath, hookCtx;
                        errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);
                        successHandler = hookedEventSuccessHandler(null);
                        tryCatch(function () {
                            for (var i = 0, l = objects.length; i < l; ++i) {
                                hookCtx = { onerror: null, onsuccess: null };
                                var key = keys$$1 && keys$$1[i];
                                var obj = objects[i], effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined, keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
                                if (effectiveKey == null && keyToUse != null) {
                                    if (keyPath) {
                                        obj = deepClone(obj);
                                        setByKeyPath(obj, keyPath, keyToUse);
                                    }
                                    else {
                                        key = keyToUse;
                                    }
                                }
                                req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                                req._hookCtx = hookCtx;
                                if (i < l - 1) {
                                    req.onerror = errorHandler;
                                    if (hookCtx.onsuccess)
                                        req.onsuccess = successHandler;
                                }
                            }
                        }, function (err) {
                            hookCtx.onerror && hookCtx.onerror(err);
                            throw err;
                        });
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);
                        req.onsuccess = hookedEventSuccessHandler(done);
                    }
                    else {
                        //
                        // Standard Bulk (no 'creating' hook to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    }
                });
            },
            add: function (obj, key) {
                /// <summary>
                ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert</param>
                /// <param name="key" optional="true">Primary key</param>
                var creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    var hookCtx = { onsuccess: null, onerror: null };
                    if (creatingHook !== nop) {
                        var effectiveKey = (key != null) ? key : (idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined);
                        var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when("creating") to generate the key.
                        if (effectiveKey == null && keyToUse != null) {
                            if (idbstore.keyPath)
                                setByKeyPath(obj, idbstore.keyPath, keyToUse);
                            else
                                key = keyToUse;
                        }
                    }
                    try {
                        var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                        req._hookCtx = hookCtx;
                        req.onerror = hookedEventRejectHandler(reject);
                        req.onsuccess = hookedEventSuccessHandler(function (result) {
                            // TODO: Remove these two lines in next major release (2.0?)
                            // It's no good practice to have side effects on provided parameters
                            var keyPath = idbstore.keyPath;
                            if (keyPath)
                                setByKeyPath(obj, keyPath, result);
                            resolve(result);
                        });
                    }
                    catch (e) {
                        if (hookCtx.onerror)
                            hookCtx.onerror(e);
                        throw e;
                    }
                });
            },
            put: function (obj, key) {
                var _this = this;
                /// <summary>
                ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert or update</param>
                /// <param name="key" optional="true">Primary key</param>
                var creatingHook = this.hook.creating.fire, updatingHook = this.hook.updating.fire;
                if (creatingHook !== nop || updatingHook !== nop) {
                    //
                    // People listens to when("creating") or when("updating") events!
                    // We must know whether the put operation results in an CREATE or UPDATE.
                    //
                    var keyPath = this.schema.primKey.keyPath;
                    var effectiveKey = (key !== undefined) ? key : (keyPath && getByKeyPath(obj, keyPath));
                    if (effectiveKey == null)
                        return this.add(obj);
                    // Since key is optional, make sure we get it from obj if not provided
                    // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().
                    // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.
                    obj = deepClone(obj);
                    return this._trans(READWRITE, function () {
                        return _this.where(":id").equals(effectiveKey).modify(function () {
                            // Replace extisting value with our object
                            // CRUD event firing handled in Collection.modify()
                            this.value = obj;
                        }).then(function (count) { return count === 0 ? _this.add(obj, key) : effectiveKey; });
                    }, "locked"); // Lock needed because operation is splitted into modify() and add().
                }
                else {
                    // Use the standard IDB put() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function (ev) {
                            var keyPath = idbstore.keyPath;
                            if (keyPath)
                                setByKeyPath(obj, keyPath, ev.target.result);
                            resolve(req.result);
                        });
                    });
                }
            },
            'delete': function (key) {
                /// <param name="key">Primary key of the object to delete</param>
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                    // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.
                    return this.where(":id").equals(key).delete();
                }
                else {
                    // No one listens. Use standard IDB delete() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.delete(key);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function () {
                            resolve(req.result);
                        });
                    });
                }
            },
            clear: function () {
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                    // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.
                    return this.toCollection().delete();
                }
                else {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.clear();
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function () {
                            resolve(req.result);
                        });
                    });
                }
            },
            update: function (keyOrObject, modifications) {
                if (typeof modifications !== 'object' || isArray$h(modifications))
                    throw new exceptions.InvalidArgument("Modifications must be an object.");
                if (typeof keyOrObject === 'object' && !isArray$h(keyOrObject)) {
                    // object to modify. Also modify given object with the modifications:
                    keys$1(modifications).forEach(function (keyPath) {
                        setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                    });
                    var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                    if (key === undefined)
                        return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                    return this.where(":id").equals(key).modify(modifications);
                }
                else {
                    // key to modify
                    return this.where(":id").equals(keyOrObject).modify(modifications);
                }
            }
        });
        //
        //
        //
        // Transaction Class
        //
        //
        //
        function Transaction(mode, storeNames, dbschema, parent) {
            var _this = this;
            /// <summary>
            ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.
            /// </summary>
            /// <param name="mode" type="String">Any of "readwrite" or "readonly"</param>
            /// <param name="storeNames" type="Array">Array of table names to operate on</param>
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0; // Just for debugging waitFor()
            this._completion = new Promise$1(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this._completion.then(function () {
                _this.active = false;
                _this.on.complete.fire();
            }, function (e) {
                var wasActive = _this.active;
                _this.active = false;
                _this.on.error.fire(e);
                _this.parent ?
                    _this.parent._reject(e) :
                    wasActive && _this.idbtrans && _this.idbtrans.abort();
                return rejection(e); // Indicate we actually DO NOT catch this error.
            });
        }
        props(Transaction.prototype, {
            //
            // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)
            //
            _lock: function () {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                // Temporary set all requests into a pending queue if they are called before database is ready.
                ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)
                if (this._reculock === 1 && !PSD.global)
                    PSD.lockOwnerFor = this;
                return this;
            },
            _unlock: function () {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                if (--this._reculock === 0) {
                    if (!PSD.global)
                        PSD.lockOwnerFor = null;
                    while (this._blockedFuncs.length > 0 && !this._locked()) {
                        var fnAndPSD = this._blockedFuncs.shift();
                        try {
                            usePSD(fnAndPSD[1], fnAndPSD[0]);
                        }
                        catch (e) { }
                    }
                }
                return this;
            },
            _locked: function () {
                // Checks if any write-lock is applied on this transaction.
                // To simplify the Dexie API for extension implementations, we support recursive locks.
                // This is accomplished by using "Promise Specific Data" (PSD).
                // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).
                // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():
                //         * callback given to the Promise() constructor  (function (resolve, reject){...})
                //         * callbacks given to then()/catch()/finally() methods (function (value){...})
                // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.
                // Derivation is done so that the inner PSD __proto__ points to the outer PSD.
                // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.
                return this._reculock && PSD.lockOwnerFor !== this;
            },
            create: function (idbtrans) {
                var _this = this;
                if (!this.mode)
                    return this;
                assert(!this.idbtrans);
                if (!idbtrans && !idbdb) {
                    switch (dbOpenError && dbOpenError.name) {
                        case "DatabaseClosedError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.DatabaseClosed(dbOpenError);
                        case "MissingAPIError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                        default:
                            // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!
                            throw new exceptions.OpenFailed(dbOpenError);
                    }
                }
                if (!this.active)
                    throw new exceptions.TransactionInactive();
                assert(this._completion._state === null);
                idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
                idbtrans.onerror = wrap(function (ev) {
                    preventDefault(ev); // Prohibit default bubbling to window.error
                    _this._reject(idbtrans.error);
                });
                idbtrans.onabort = wrap(function (ev) {
                    preventDefault(ev);
                    _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
                    _this.active = false;
                    _this.on("abort").fire(ev);
                });
                idbtrans.oncomplete = wrap(function () {
                    _this.active = false;
                    _this._resolve();
                });
                return this;
            },
            _promise: function (mode, fn, bWriteLock) {
                var _this = this;
                if (mode === READWRITE && this.mode !== READWRITE)
                    return rejection(new exceptions.ReadOnly("Transaction is readonly"));
                if (!this.active)
                    return rejection(new exceptions.TransactionInactive());
                if (this._locked()) {
                    return new Promise$1(function (resolve, reject) {
                        _this._blockedFuncs.push([function () {
                                _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                            }, PSD]);
                    });
                }
                else if (bWriteLock) {
                    return newScope(function () {
                        var p = new Promise$1(function (resolve, reject) {
                            _this._lock();
                            var rv = fn(resolve, reject, _this);
                            if (rv && rv.then)
                                rv.then(resolve, reject);
                        });
                        p.finally(function () { return _this._unlock(); });
                        p._lib = true;
                        return p;
                    });
                }
                else {
                    var p = new Promise$1(function (resolve, reject) {
                        var rv = fn(resolve, reject, _this);
                        if (rv && rv.then)
                            rv.then(resolve, reject);
                    });
                    p._lib = true;
                    return p;
                }
            },
            _root: function () {
                return this.parent ? this.parent._root() : this;
            },
            waitFor: function (promise) {
                // Always operate on the root transaction (in case this is a sub stransaction)
                var root = this._root();
                // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().
                // (We must be able to call .then() on it.)
                promise = Promise$1.resolve(promise);
                if (root._waitingFor) {
                    // Already called waitFor(). Wait for both to complete.
                    root._waitingFor = root._waitingFor.then(function () { return promise; });
                }
                else {
                    // We're not in waiting state. Start waiting state.
                    root._waitingFor = promise;
                    root._waitingQueue = [];
                    // Start interacting with indexedDB until promise completes:
                    var store = root.idbtrans.objectStore(root.storeNames[0]);
                    (function spin() {
                        ++root._spinCount; // For debugging only
                        while (root._waitingQueue.length)
                            (root._waitingQueue.shift())();
                        if (root._waitingFor)
                            store.get(-Infinity).onsuccess = spin;
                    }());
                }
                var currentWaitPromise = root._waitingFor;
                return new Promise$1(function (resolve, reject) {
                    promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {
                        if (root._waitingFor === currentWaitPromise) {
                            // No one added a wait after us. Safe to stop the spinning.
                            root._waitingFor = null;
                        }
                    });
                });
            },
            //
            // Transaction Public Properties and Methods
            //
            abort: function () {
                this.active && this._reject(new exceptions.Abort());
                this.active = false;
            },
            tables: {
                get: deprecated("Transaction.tables", function () { return allTables; })
            },
            table: function (name) {
                var table = db.table(name); // Don't check that table is part of transaction. It must fail lazily!
                return new Table(name, table.schema, this);
            }
        });
        //
        //
        //
        // WhereClause
        //
        //
        //
        function WhereClause(table, index, orCollection) {
            /// <param name="table" type="Table"></param>
            /// <param name="index" type="String" optional="true"></param>
            /// <param name="orCollection" type="Collection" optional="true"></param>
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                or: orCollection
            };
        }
        props(WhereClause.prototype, function () {
            // WhereClause private methods
            function fail(collectionOrWhereClause, err, T) {
                var collection = collectionOrWhereClause instanceof WhereClause ?
                    new Collection(collectionOrWhereClause) :
                    collectionOrWhereClause;
                collection._ctx.error = T ? new T(err) : new TypeError(err);
                return collection;
            }
            function emptyCollection(whereClause) {
                return new Collection(whereClause, function () { return IDBKeyRange.only(""); }).limit(0);
            }
            function upperFactory(dir) {
                return dir === "next" ? function (s) { return s.toUpperCase(); } : function (s) { return s.toLowerCase(); };
            }
            function lowerFactory(dir) {
                return dir === "next" ? function (s) { return s.toLowerCase(); } : function (s) { return s.toUpperCase(); };
            }
            function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
                var length = Math.min(key.length, lowerNeedle.length);
                var llp = -1;
                for (var i = 0; i < length; ++i) {
                    var lwrKeyChar = lowerKey[i];
                    if (lwrKeyChar !== lowerNeedle[i]) {
                        if (cmp(key[i], upperNeedle[i]) < 0)
                            return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                        if (cmp(key[i], lowerNeedle[i]) < 0)
                            return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                        if (llp >= 0)
                            return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                        return null;
                    }
                    if (cmp(key[i], lwrKeyChar) < 0)
                        llp = i;
                }
                if (length < lowerNeedle.length && dir === "next")
                    return key + upperNeedle.substr(key.length);
                if (length < key.length && dir === "prev")
                    return key.substr(0, upperNeedle.length);
                return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));
            }
            function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
                /// <param name="needles" type="Array" elementType="String"></param>
                var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
                if (!needles.every(function (s) { return typeof s === 'string'; })) {
                    return fail(whereClause, STRING_EXPECTED);
                }
                function initDirection(dir) {
                    upper = upperFactory(dir);
                    lower = lowerFactory(dir);
                    compare = (dir === "next" ? simpleCompare : simpleCompareReverse);
                    var needleBounds = needles.map(function (needle) {
                        return { lower: lower(needle), upper: upper(needle) };
                    }).sort(function (a, b) {
                        return compare(a.lower, b.lower);
                    });
                    upperNeedles = needleBounds.map(function (nb) { return nb.upper; });
                    lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });
                    direction = dir;
                    nextKeySuffix = (dir === "next" ? "" : suffix);
                }
                initDirection("next");
                var c = new Collection(whereClause, function () {
                    return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
                });
                c._ondirectionchange = function (direction) {
                    // This event onlys occur before filter is called the first time.
                    initDirection(direction);
                };
                var firstPossibleNeedle = 0;
                c._addAlgorithm(function (cursor, advance, resolve) {
                    /// <param name="cursor" type="IDBCursor"></param>
                    /// <param name="advance" type="Function"></param>
                    /// <param name="resolve" type="Function"></param>
                    var key = cursor.key;
                    if (typeof key !== 'string')
                        return false;
                    var lowerKey = lower(key);
                    if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                        return true;
                    }
                    else {
                        var lowestPossibleCasing = null;
                        for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                            var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                            if (casing === null && lowestPossibleCasing === null)
                                firstPossibleNeedle = i + 1;
                            else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                                lowestPossibleCasing = casing;
                            }
                        }
                        if (lowestPossibleCasing !== null) {
                            advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });
                        }
                        else {
                            advance(resolve);
                        }
                        return false;
                    }
                });
                return c;
            }
            //
            // WhereClause public methods
            //
            return {
                between: function (lower, upper, includeLower, includeUpper) {
                    /// <summary>
                    ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.
                    /// </summary>
                    /// <param name="lower"></param>
                    /// <param name="upper"></param>
                    /// <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>
                    /// <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>
                    /// <returns type="Collection"></returns>
                    includeLower = includeLower !== false; // Default to true
                    includeUpper = includeUpper === true; // Default to false
                    try {
                        if ((cmp(lower, upper) > 0) ||
                            (cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))
                            return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.
                        return new Collection(this, function () { return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper); });
                    }
                    catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                },
                equals: function (value) {
                    return new Collection(this, function () { return IDBKeyRange.only(value); });
                },
                above: function (value) {
                    return new Collection(this, function () { return IDBKeyRange.lowerBound(value, true); });
                },
                aboveOrEqual: function (value) {
                    return new Collection(this, function () { return IDBKeyRange.lowerBound(value); });
                },
                below: function (value) {
                    return new Collection(this, function () { return IDBKeyRange.upperBound(value, true); });
                },
                belowOrEqual: function (value) {
                    return new Collection(this, function () { return IDBKeyRange.upperBound(value); });
                },
                startsWith: function (str) {
                    /// <param name="str" type="String"></param>
                    if (typeof str !== 'string')
                        return fail(this, STRING_EXPECTED);
                    return this.between(str, str + maxString, true, true);
                },
                startsWithIgnoreCase: function (str) {
                    /// <param name="str" type="String"></param>
                    if (str === "")
                        return this.startsWith(str);
                    return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);
                },
                equalsIgnoreCase: function (str) {
                    /// <param name="str" type="String"></param>
                    return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], "");
                },
                anyOfIgnoreCase: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0)
                        return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, "");
                },
                startsWithAnyOfIgnoreCase: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0)
                        return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return a.some(function (n) {
                            return x.indexOf(n) === 0;
                        });
                    }, set, maxString);
                },
                anyOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    var compare = ascending;
                    try {
                        set.sort(compare);
                    }
                    catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    if (set.length === 0)
                        return emptyCollection(this);
                    var c = new Collection(this, function () { return IDBKeyRange.bound(set[0], set[set.length - 1]); });
                    c._ondirectionchange = function (direction) {
                        compare = (direction === "next" ? ascending : descending);
                        set.sort(compare);
                    };
                    var i = 0;
                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (compare(key, set[i]) > 0) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (compare(key, set[i]) === 0) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        }
                        else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () { cursor.continue(set[i]); });
                            return false;
                        }
                    });
                    return c;
                },
                notEqual: function (value) {
                    return this.inAnyRange([[minKey, value], [value, maxKey]], { includeLowers: false, includeUppers: false });
                },
                noneOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0)
                        return new Collection(this); // Return entire collection.
                    try {
                        set.sort(ascending);
                    }
                    catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    // Transform ["a","b","c"] to a set of ranges for between/above/below: [[minKey,"a"], ["a","b"], ["b","c"], ["c",maxKey]]
                    var ranges = set.reduce(function (res, val) { return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]]; }, null);
                    ranges.push([set[set.length - 1], maxKey]);
                    return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
                },
                /** Filter out values withing given set of ranges.
                * Example, give children and elders a rebate of 50%:
                *
                *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});
                *
                * @param {(string|number|Date|Array)[][]} ranges
                * @param {{includeLowers: boolean, includeUppers: boolean}} options
                */
                inAnyRange: function (ranges, options) {
                    if (ranges.length === 0)
                        return emptyCollection(this);
                    if (!ranges.every(function (range) { return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0; })) {
                        return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
                    }
                    var includeLowers = !options || options.includeLowers !== false; // Default to true
                    var includeUppers = options && options.includeUppers === true; // Default to false
                    function addRange(ranges, newRange) {
                        for (var i = 0, l = ranges.length; i < l; ++i) {
                            var range = ranges[i];
                            if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                                range[0] = min(range[0], newRange[0]);
                                range[1] = max(range[1], newRange[1]);
                                break;
                            }
                        }
                        if (i === l)
                            ranges.push(newRange);
                        return ranges;
                    }
                    var sortDirection = ascending;
                    function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }
                    // Join overlapping ranges
                    var set;
                    try {
                        set = ranges.reduce(addRange, []);
                        set.sort(rangeSorter);
                    }
                    catch (ex) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    var i = 0;
                    var keyIsBeyondCurrentEntry = includeUppers ?
                        function (key) { return ascending(key, set[i][1]) > 0; } :
                        function (key) { return ascending(key, set[i][1]) >= 0; };
                    var keyIsBeforeCurrentEntry = includeLowers ?
                        function (key) { return descending(key, set[i][0]) > 0; } :
                        function (key) { return descending(key, set[i][0]) >= 0; };
                    function keyWithinCurrentRange(key) {
                        return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
                    }
                    var checkKey = keyIsBeyondCurrentEntry;
                    var c = new Collection(this, function () {
                        return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
                    });
                    c._ondirectionchange = function (direction) {
                        if (direction === "next") {
                            checkKey = keyIsBeyondCurrentEntry;
                            sortDirection = ascending;
                        }
                        else {
                            checkKey = keyIsBeforeCurrentEntry;
                            sortDirection = descending;
                        }
                        set.sort(rangeSorter);
                    };
                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (checkKey(key)) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (keyWithinCurrentRange(key)) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        }
                        else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {
                            // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.
                            // Continue to next key but don't include this one.
                            return false;
                        }
                        else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () {
                                if (sortDirection === ascending)
                                    cursor.continue(set[i][0]);
                                else
                                    cursor.continue(set[i][1]);
                            });
                            return false;
                        }
                    });
                    return c;
                },
                startsWithAnyOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (!set.every(function (s) { return typeof s === 'string'; })) {
                        return fail(this, "startsWithAnyOf() only works with strings");
                    }
                    if (set.length === 0)
                        return emptyCollection(this);
                    return this.inAnyRange(set.map(function (str) {
                        return [str, str + maxString];
                    }));
                }
            };
        });
        //
        //
        //
        // Collection Class
        //
        //
        //
        function Collection(whereClause, keyRangeGenerator) {
            /// <summary>
            ///
            /// </summary>
            /// <param name="whereClause" type="WhereClause">Where clause instance</param>
            /// <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>
            var keyRange = null, error = null;
            if (keyRangeGenerator)
                try {
                    keyRange = keyRangeGenerator();
                }
                catch (ex) {
                    error = ex;
                }
            var whereCtx = whereClause._ctx, table = whereCtx.table;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true,
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error,
                or: whereCtx.or,
                valueMapper: table.hook.reading.fire
            };
        }
        function isPlainKeyRange(ctx, ignoreLimitFilter) {
            return !(ctx.filter || ctx.algorithm || ctx.or) &&
                (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
        }
        props(Collection.prototype, function () {
            //
            // Collection Private Functions
            //
            function addFilter(ctx, fn) {
                ctx.filter = combine(ctx.filter, fn);
            }
            function addReplayFilter(ctx, factory, isLimitFilter) {
                var curr = ctx.replayFilter;
                ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;
                ctx.justLimit = isLimitFilter && !curr;
            }
            function addMatchFilter(ctx, fn) {
                ctx.isMatch = combine(ctx.isMatch, fn);
            }
            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string
             * }
             * @param store IDBObjectStore
             **/
            function getIndexOrStore(ctx, store) {
                if (ctx.isPrimKey)
                    return store;
                var indexSpec = ctx.table.schema.idxByName[ctx.index];
                if (!indexSpec)
                    throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");
                return store.index(indexSpec.name);
            }
            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string,
             *      keysOnly: boolean,
             *      range?: IDBKeyRange,
             *      dir: "next" | "prev"
             * }
             */
            function openCursor(ctx, store) {
                var idxOrStore = getIndexOrStore(ctx, store);
                return ctx.keysOnly && 'openKeyCursor' in idxOrStore ?
                    idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) :
                    idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);
            }
            function iter(ctx, fn, resolve, reject, idbstore) {
                var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
                if (!ctx.or) {
                    iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);
                }
                else
                    (function () {
                        var set = {};
                        var resolved = 0;
                        function resolveboth() {
                            if (++resolved === 2)
                                resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.
                        }
                        function union(item, cursor, advance) {
                            if (!filter || filter(cursor, advance, resolveboth, reject)) {
                                var primaryKey = cursor.primaryKey;
                                var key = '' + primaryKey;
                                if (key === '[object ArrayBuffer]')
                                    key = '' + new Uint8Array(primaryKey);
                                if (!hasOwn$d(set, key)) {
                                    set[key] = true;
                                    fn(item, cursor, advance);
                                }
                            }
                        }
                        ctx.or._iterate(union, resolveboth, reject, idbstore);
                        iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);
                    })();
            }
            return {
                //
                // Collection Protected Functions
                //
                _read: function (fn, cb) {
                    var ctx = this._ctx;
                    return ctx.error ?
                        ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                        ctx.table._idbstore(READONLY, fn).then(cb);
                },
                _write: function (fn) {
                    var ctx = this._ctx;
                    return ctx.error ?
                        ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                        ctx.table._idbstore(READWRITE, fn, "locked"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.
                },
                _addAlgorithm: function (fn) {
                    var ctx = this._ctx;
                    ctx.algorithm = combine(ctx.algorithm, fn);
                },
                _iterate: function (fn, resolve, reject, idbstore) {
                    return iter(this._ctx, fn, resolve, reject, idbstore);
                },
                clone: function (props$$1) {
                    var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
                    if (props$$1)
                        extend(ctx, props$$1);
                    rv._ctx = ctx;
                    return rv;
                },
                raw: function () {
                    this._ctx.valueMapper = null;
                    return this;
                },
                //
                // Collection Public methods
                //
                each: function (fn) {
                    var ctx = this._ctx;
                    return this._read(function (resolve, reject, idbstore) {
                        iter(ctx, fn, resolve, reject, idbstore);
                    });
                },
                count: function (cb) {
                    var ctx = this._ctx;
                    if (isPlainKeyRange(ctx, true)) {
                        // This is a plain key range. We can use the count() method if the index.
                        return this._read(function (resolve, reject, idbstore) {
                            var idx = getIndexOrStore(ctx, idbstore);
                            var req = (ctx.range ? idx.count(ctx.range) : idx.count());
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = function (e) {
                                resolve(Math.min(e.target.result, ctx.limit));
                            };
                        }, cb);
                    }
                    else {
                        // Algorithms, filters or expressions are applied. Need to count manually.
                        var count = 0;
                        return this._read(function (resolve, reject, idbstore) {
                            iter(ctx, function () { ++count; return false; }, function () { resolve(count); }, reject, idbstore);
                        }, cb);
                    }
                },
                sortBy: function (keyPath, cb) {
                    /// <param name="keyPath" type="String"></param>
                    var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
                    function getval(obj, i) {
                        if (i)
                            return getval(obj[parts[i]], i - 1);
                        return obj[lastPart];
                    }
                    var order = this._ctx.dir === "next" ? 1 : -1;
                    function sorter(a, b) {
                        var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
                        return aVal < bVal ? -order : aVal > bVal ? order : 0;
                    }
                    return this.toArray(function (a) {
                        return a.sort(sorter);
                    }).then(cb);
                },
                toArray: function (cb) {
                    var ctx = this._ctx;
                    return this._read(function (resolve, reject, idbstore) {
                        if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                            // Special optimation if we could use IDBObjectStore.getAll() or
                            // IDBKeyRange.getAll():
                            var readingHook = ctx.table.hook.reading.fire;
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ?
                                idxOrStore.getAll(ctx.range, ctx.limit) :
                                idxOrStore.getAll(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = readingHook === mirror ?
                                eventSuccessHandler(resolve) :
                                eventSuccessHandler(function (res) {
                                    try {
                                        resolve(res.map(readingHook));
                                    }
                                    catch (e) {
                                        reject(e);
                                    }
                                });
                        }
                        else {
                            // Getting array through a cursor.
                            var a = [];
                            iter(ctx, function (item) { a.push(item); }, function arrayComplete() {
                                resolve(a);
                            }, reject, idbstore);
                        }
                    }, cb);
                },
                offset: function (offset) {
                    var ctx = this._ctx;
                    if (offset <= 0)
                        return this;
                    ctx.offset += offset; // For count()
                    if (isPlainKeyRange(ctx)) {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = offset;
                            return function (cursor, advance) {
                                if (offsetLeft === 0)
                                    return true;
                                if (offsetLeft === 1) {
                                    --offsetLeft;
                                    return false;
                                }
                                advance(function () {
                                    cursor.advance(offsetLeft);
                                    offsetLeft = 0;
                                });
                                return false;
                            };
                        });
                    }
                    else {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = offset;
                            return function () { return (--offsetLeft < 0); };
                        });
                    }
                    return this;
                },
                limit: function (numRows) {
                    this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()
                    addReplayFilter(this._ctx, function () {
                        var rowsLeft = numRows;
                        return function (cursor, advance, resolve) {
                            if (--rowsLeft <= 0)
                                advance(resolve); // Stop after this item has been included
                            return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.
                        };
                    }, true);
                    return this;
                },
                until: function (filterFunction, bIncludeStopEntry) {
                    addFilter(this._ctx, function (cursor, advance, resolve) {
                        if (filterFunction(cursor.value)) {
                            advance(resolve);
                            return bIncludeStopEntry;
                        }
                        else {
                            return true;
                        }
                    });
                    return this;
                },
                first: function (cb) {
                    return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);
                },
                last: function (cb) {
                    return this.reverse().first(cb);
                },
                filter: function (filterFunction) {
                    /// <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>
                    addFilter(this._ctx, function (cursor) {
                        return filterFunction(cursor.value);
                    });
                    // match filters not used in Dexie.js but can be used by 3rd part libraries to test a
                    // collection for a match without querying DB. Used by Dexie.Observable.
                    addMatchFilter(this._ctx, filterFunction);
                    return this;
                },
                and: function (filterFunction) {
                    return this.filter(filterFunction);
                },
                or: function (indexName) {
                    return new WhereClause(this._ctx.table, indexName, this);
                },
                reverse: function () {
                    this._ctx.dir = (this._ctx.dir === "prev" ? "next" : "prev");
                    if (this._ondirectionchange)
                        this._ondirectionchange(this._ctx.dir);
                    return this;
                },
                desc: function () {
                    return this.reverse();
                },
                eachKey: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) { cb(cursor.key, cursor); });
                },
                eachUniqueKey: function (cb) {
                    this._ctx.unique = "unique";
                    return this.eachKey(cb);
                },
                eachPrimaryKey: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });
                },
                keys: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.key);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },
                primaryKeys: function (cb) {
                    var ctx = this._ctx;
                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                        // Special optimation if we could use IDBObjectStore.getAllKeys() or
                        // IDBKeyRange.getAllKeys():
                        return this._read(function (resolve, reject, idbstore) {
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ?
                                idxOrStore.getAllKeys(ctx.range, ctx.limit) :
                                idxOrStore.getAllKeys(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = eventSuccessHandler(resolve);
                        }).then(cb);
                    }
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.primaryKey);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },
                uniqueKeys: function (cb) {
                    this._ctx.unique = "unique";
                    return this.keys(cb);
                },
                firstKey: function (cb) {
                    return this.limit(1).keys(function (a) { return a[0]; }).then(cb);
                },
                lastKey: function (cb) {
                    return this.reverse().firstKey(cb);
                },
                distinct: function () {
                    var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
                    if (!idx || !idx.multi)
                        return this; // distinct() only makes differencies on multiEntry indexes.
                    var set = {};
                    addFilter(this._ctx, function (cursor) {
                        var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string
                        var found = hasOwn$d(set, strKey);
                        set[strKey] = true;
                        return !found;
                    });
                    return this;
                },
                //
                // Methods that mutate storage
                //
                modify: function (changes) {
                    var self = this, ctx = this._ctx, hook = ctx.table.hook, updatingHook = hook.updating.fire, deletingHook = hook.deleting.fire;
                    return this._write(function (resolve, reject, idbstore, trans) {
                        var modifyer;
                        if (typeof changes === 'function') {
                            // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)
                            if (updatingHook === nop && deletingHook === nop) {
                                // Noone cares about what is being changed. Just let the modifier function be the given argument as is.
                                modifyer = changes;
                            }
                            else {
                                // People want to know exactly what is being modified or deleted.
                                // Let modifyer be a proxy function that finds out what changes the caller is actually doing
                                // and call the hooks accordingly!
                                modifyer = function (item) {
                                    var origItem = deepClone(item); // Clone the item first so we can compare laters.
                                    if (changes.call(this, item, this) === false)
                                        return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)
                                    if (!hasOwn$d(this, "value")) {
                                        // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.
                                        deletingHook.call(this, this.primKey, item, trans);
                                    }
                                    else {
                                        // No deletion. Check what was changed
                                        var objectDiff = getObjectDiff(origItem, this.value);
                                        var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);
                                        if (additionalChanges) {
                                            // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.
                                            item = this.value;
                                            keys$1(additionalChanges).forEach(function (keyPath) {
                                                setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                            });
                                        }
                                    }
                                };
                            }
                        }
                        else if (updatingHook === nop) {
                            // changes is a set of {keyPath: value} and no one is listening to the updating hook.
                            var keyPaths = keys$1(changes);
                            var numKeys = keyPaths.length;
                            modifyer = function (item) {
                                var anythingModified = false;
                                for (var i = 0; i < numKeys; ++i) {
                                    var keyPath = keyPaths[i], val = changes[keyPath];
                                    if (getByKeyPath(item, keyPath) !== val) {
                                        setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                        anythingModified = true;
                                    }
                                }
                                return anythingModified;
                            };
                        }
                        else {
                            // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and
                            // allow it to add additional modifications to make.
                            var origChanges = changes;
                            changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.
                            modifyer = function (item) {
                                var anythingModified = false;
                                var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);
                                if (additionalChanges)
                                    extend(changes, additionalChanges);
                                keys$1(changes).forEach(function (keyPath) {
                                    var val = changes[keyPath];
                                    if (getByKeyPath(item, keyPath) !== val) {
                                        setByKeyPath(item, keyPath, val);
                                        anythingModified = true;
                                    }
                                });
                                if (additionalChanges)
                                    changes = shallowClone(origChanges); // Restore original changes for next iteration
                                return anythingModified;
                            };
                        }
                        var count = 0;
                        var successCount = 0;
                        var iterationComplete = false;
                        var failures = [];
                        var failKeys = [];
                        var currentKey = null;
                        function modifyItem(item, cursor) {
                            currentKey = cursor.primaryKey;
                            var thisContext = {
                                primKey: cursor.primaryKey,
                                value: item,
                                onsuccess: null,
                                onerror: null
                            };
                            function onerror(e) {
                                failures.push(e);
                                failKeys.push(thisContext.primKey);
                                checkFinished();
                                return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction
                            }
                            if (modifyer.call(thisContext, item, thisContext) !== false) {
                                var bDelete = !hasOwn$d(thisContext, "value");
                                ++count;
                                tryCatch(function () {
                                    var req = (bDelete ? cursor.delete() : cursor.update(thisContext.value));
                                    req._hookCtx = thisContext;
                                    req.onerror = hookedEventRejectHandler(onerror);
                                    req.onsuccess = hookedEventSuccessHandler(function () {
                                        ++successCount;
                                        checkFinished();
                                    });
                                }, onerror);
                            }
                            else if (thisContext.onsuccess) {
                                // Hook will expect either onerror or onsuccess to always be called!
                                thisContext.onsuccess(thisContext.value);
                            }
                        }
                        function doReject(e) {
                            if (e) {
                                failures.push(e);
                                failKeys.push(currentKey);
                            }
                            return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));
                        }
                        function checkFinished() {
                            if (iterationComplete && successCount + failures.length === count) {
                                if (failures.length > 0)
                                    doReject();
                                else
                                    resolve(successCount);
                            }
                        }
                        self.clone().raw()._iterate(modifyItem, function () {
                            iterationComplete = true;
                            checkFinished();
                        }, doReject, idbstore);
                    });
                },
                'delete': function () {
                    var _this = this;
                    var ctx = this._ctx, range = ctx.range, deletingHook = ctx.table.hook.deleting.fire, hasDeleteHook = deletingHook !== nop;
                    if (!hasDeleteHook &&
                        isPlainKeyRange(ctx) &&
                        ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || !range)) {
                        // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)
                        // For chromium, this is the way most optimized version.
                        // For IE/Edge, this could hang the indexedDB engine and make operating system instable
                        // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)
                        return this._write(function (resolve, reject, idbstore) {
                            // Our API contract is to return a count of deleted items, so we have to count() before delete().
                            var onerror = eventRejectHandler(reject), countReq = (range ? idbstore.count(range) : idbstore.count());
                            countReq.onerror = onerror;
                            countReq.onsuccess = function () {
                                var count = countReq.result;
                                tryCatch(function () {
                                    var delReq = (range ? idbstore.delete(range) : idbstore.clear());
                                    delReq.onerror = onerror;
                                    delReq.onsuccess = function () { return resolve(count); };
                                }, function (err) { return reject(err); });
                            };
                        });
                    }
                    // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.
                    // Divide into chunks to not starve RAM.
                    // If has delete hook, we will have to collect not just keys but also objects, so it will use
                    // more memory and need lower chunk size.
                    var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;
                    return this._write(function (resolve, reject, idbstore, trans) {
                        var totalCount = 0;
                        // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.
                        var collection = _this
                            .clone({
                            keysOnly: !ctx.isMatch && !hasDeleteHook
                        }) // load just keys (unless filter() or and() or deleteHook has subscribers)
                            .distinct() // In case multiEntry is used, never delete same key twice because resulting count
                            .limit(CHUNKSIZE)
                            .raw(); // Don't filter through reading-hooks (like mapped classes etc)
                        var keysOrTuples = [];
                        // We're gonna do things on as many chunks that are needed.
                        // Use recursion of nextChunk function:
                        var nextChunk = function () { return collection.each(hasDeleteHook ? function (val, cursor) {
                            // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,
                            // so that the hook can be called with its values in bulkDelete().
                            keysOrTuples.push([cursor.primaryKey, cursor.value]);
                        } : function (val, cursor) {
                            // No one subscribes to hook('deleting'). Collect only primary keys:
                            keysOrTuples.push(cursor.primaryKey);
                        }).then(function () {
                            // Chromium deletes faster when doing it in sort order.
                            hasDeleteHook ?
                                keysOrTuples.sort(function (a, b) { return ascending(a[0], b[0]); }) :
                                keysOrTuples.sort(ascending);
                            return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);
                        }).then(function () {
                            var count = keysOrTuples.length;
                            totalCount += count;
                            keysOrTuples = [];
                            return count < CHUNKSIZE ? totalCount : nextChunk();
                        }); };
                        resolve(nextChunk());
                    });
                }
            };
        });
        //
        //
        //
        // ------------------------- Help functions ---------------------------
        //
        //
        //
        function lowerVersionFirst(a, b) {
            return a._cfg.version - b._cfg.version;
        }
        function setApiOnPlace(objs, tableNames, dbschema) {
            tableNames.forEach(function (tableName) {
                var schema = dbschema[tableName];
                objs.forEach(function (obj) {
                    if (!(tableName in obj)) {
                        if (obj === Transaction.prototype || obj instanceof Transaction) {
                            // obj is a Transaction prototype (or prototype of a subclass to Transaction)
                            // Make the API a getter that returns this.table(tableName)
                            setProp(obj, tableName, { get: function () { return this.table(tableName); } });
                        }
                        else {
                            // Table will not be bound to a transaction (will use Dexie.currentTransaction)
                            obj[tableName] = new Table(tableName, schema);
                        }
                    }
                });
            });
        }
        function removeTablesApi(objs) {
            objs.forEach(function (obj) {
                for (var key in obj) {
                    if (obj[key] instanceof Table)
                        delete obj[key];
                }
            });
        }
        function iterate(req, filter, fn, resolve, reject, valueMapper) {
            // Apply valueMapper (hook('reading') or mappped class)
            var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;
            // Wrap fn with PSD and microtick stuff from Promise.
            var wrappedFn = wrap(mappedFn, reject);
            if (!req.onerror)
                req.onerror = eventRejectHandler(reject);
            if (filter) {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function () { cursor.continue(); };
                        if (filter(cursor, function (advancer) { c = advancer; }, resolve, reject))
                            wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });
                        c();
                    }
                    else {
                        resolve();
                    }
                }, reject);
            }
            else {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function () { cursor.continue(); };
                        wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });
                        c();
                    }
                    else {
                        resolve();
                    }
                }, reject);
            }
        }
        function parseIndexSyntax(indexes) {
            /// <param name="indexes" type="String"></param>
            /// <returns type="Array" elementType="IndexSpec"></returns>
            var rv = [];
            indexes.split(',').forEach(function (index) {
                index = index.trim();
                var name = index.replace(/([&*]|\+\+)/g, ""); // Remove "&", "++" and "*"
                // Let keyPath of "[a+b]" be ["a","b"]:
                var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
                rv.push(new IndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray$h(keyPath), /\./.test(index)));
            });
            return rv;
        }
        function cmp(key1, key2) {
            return indexedDB.cmp(key1, key2);
        }
        function min(a, b) {
            return cmp(a, b) < 0 ? a : b;
        }
        function max(a, b) {
            return cmp(a, b) > 0 ? a : b;
        }
        function ascending(a, b) {
            return indexedDB.cmp(a, b);
        }
        function descending(a, b) {
            return indexedDB.cmp(b, a);
        }
        function simpleCompare(a, b) {
            return a < b ? -1 : a === b ? 0 : 1;
        }
        function simpleCompareReverse(a, b) {
            return a > b ? -1 : a === b ? 0 : 1;
        }
        function combine(filter1, filter2) {
            return filter1 ?
                filter2 ?
                    function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :
                    filter1 :
                filter2;
        }
        function readGlobalSchema() {
            db.verno = idbdb.version / 10;
            db._dbSchema = globalSchema = {};
            dbStoreNames = slice(idbdb.objectStoreNames, 0);
            if (dbStoreNames.length === 0)
                return; // Database contains no stores.
            var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');
            dbStoreNames.forEach(function (storeName) {
                var store = trans.objectStore(storeName), keyPath = store.keyPath, dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);
                var indexes = [];
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var idbindex = store.index(store.indexNames[j]);
                    keyPath = idbindex.keyPath;
                    dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                    var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);
                    indexes.push(index);
                }
                globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});
            });
            setApiOnPlace([allTables], keys$1(globalSchema), globalSchema);
        }
        function adjustToExistingIndexNames(schema, idbtrans) {
            /// <summary>
            /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db
            /// </summary>
            /// <param name="schema" type="Object">Map between name and TableSchema</param>
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var storeNames = idbtrans.db.objectStoreNames;
            for (var i = 0; i < storeNames.length; ++i) {
                var storeName = storeNames[i];
                var store = idbtrans.objectStore(storeName);
                hasGetAll = 'getAll' in store;
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var indexName = store.indexNames[j];
                    var keyPath = store.index(indexName).keyPath;
                    var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                    if (schema[storeName]) {
                        var indexSpec = schema[storeName].idxByName[dexieName];
                        if (indexSpec)
                            indexSpec.name = indexName;
                    }
                }
            }
            // Bug with getAll() on Safari ver<604 on Workers only, see discussion following PR #579
            if (/Safari/.test(navigator.userAgent) &&
                !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
                _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&
                [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
                hasGetAll = false;
            }
        }
        function fireOnBlocked(ev) {
            db.on("blocked").fire(ev);
            // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:
            connections
                .filter(function (c) { return c.name === db.name && c !== db && !c._vcFired; })
                .map(function (c) { return c.on("versionchange").fire(ev); });
        }
        extend(this, {
            Collection: Collection,
            Table: Table,
            Transaction: Transaction,
            Version: Version,
            WhereClause: WhereClause
        });
        init();
        addons.forEach(function (fn) {
            fn(db);
        });
    }
    function parseType(type) {
        if (typeof type === 'function') {
            return new type();
        }
        else if (isArray$h(type)) {
            return [parseType(type[0])];
        }
        else if (type && typeof type === 'object') {
            var rv = {};
            applyStructure(rv, type);
            return rv;
        }
        else {
            return type;
        }
    }
    function applyStructure(obj, structure) {
        keys$1(structure).forEach(function (member) {
            var value = parseType(structure[member]);
            obj[member] = value;
        });
        return obj;
    }
    function hookedEventSuccessHandler(resolve) {
        // wrap() is needed when calling hooks because the rare scenario of:
        //  * hook does a db operation that fails immediately (IDB throws exception)
        //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.
        //    wrap() will also execute in a virtual tick.
        //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.
        //  * If this was the last event in the bulk, the promise will resolve after a physical tick
        //    and the transaction will have committed already.
        // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,
        // because it is always marked with _lib = true when created using Transaction._promise().
        return wrap(function (event) {
            var req = event.target, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
            result = ctx.value || req.result, // Pass the object value on updates. The result from IDB is the primary key.
            hookSuccessHandler = ctx && ctx.onsuccess;
            hookSuccessHandler && hookSuccessHandler(result);
            resolve && resolve(result);
        }, resolve);
    }
    function eventRejectHandler(reject) {
        return wrap(function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        });
    }
    function eventSuccessHandler(resolve) {
        return wrap(function (event) {
            resolve(event.target.result);
        });
    }
    function hookedEventRejectHandler(reject) {
        return wrap(function (event) {
            // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.
            var req = event.target, err = req.error, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.
            hookErrorHandler = ctx && ctx.onerror;
            hookErrorHandler && hookErrorHandler(err);
            preventDefault(event);
            reject(err);
            return false;
        });
    }
    function preventDefault(event) {
        if (event.stopPropagation)
            event.stopPropagation();
        if (event.preventDefault)
            event.preventDefault();
    }
    function awaitIterator(iterator) {
        var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);
        function step(getNext) {
            return function (val) {
                var next = getNext(val), value = next.value;
                return next.done ? value :
                    (!value || typeof value.then !== 'function' ?
                        isArray$h(value) ? Promise$1.all(value).then(onSuccess, onError) : onSuccess(value) :
                        value.then(onSuccess, onError));
            };
        }
        return step(callNext)();
    }
    //
    // IndexSpec struct
    //
    function IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {
        /// <param name="name" type="String"></param>
        /// <param name="keyPath" type="String"></param>
        /// <param name="unique" type="Boolean"></param>
        /// <param name="multi" type="Boolean"></param>
        /// <param name="auto" type="Boolean"></param>
        /// <param name="compound" type="Boolean"></param>
        /// <param name="dotted" type="Boolean"></param>
        this.name = name;
        this.keyPath = keyPath;
        this.unique = unique;
        this.multi = multi;
        this.auto = auto;
        this.compound = compound;
        this.dotted = dotted;
        var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && ('[' + [].join.call(keyPath, '+') + ']');
        this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + keyPathSrc;
    }
    //
    // TableSchema struct
    //
    function TableSchema(name, primKey, indexes, instanceTemplate) {
        /// <param name="name" type="String"></param>
        /// <param name="primKey" type="IndexSpec"></param>
        /// <param name="indexes" type="Array" elementType="IndexSpec"></param>
        /// <param name="instanceTemplate" type="Object"></param>
        this.name = name;
        this.primKey = primKey || new IndexSpec();
        this.indexes = indexes || [new IndexSpec()];
        this.instanceTemplate = instanceTemplate;
        this.mappedClass = null;
        this.idxByName = arrayToObject(indexes, function (index) { return [index.name, index]; });
    }
    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }
    function getNativeGetDatabaseNamesFn(indexedDB) {
        var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);
        return fn && fn.bind(indexedDB);
    }
    // Export Error classes
    props(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};
    //
    // Static methods and properties
    // 
    props(Dexie, {
        //
        // Static delete() method.
        //
        delete: function (databaseName) {
            var db = new Dexie(databaseName), promise = db.delete();
            promise.onblocked = function (fn) {
                db.on("blocked", fn);
                return this;
            };
            return promise;
        },
        //
        // Static exists() method.
        //
        exists: function (name) {
            return new Dexie(name).open().then(function (db) {
                db.close();
                return true;
            }).catch(Dexie.NoSuchDatabaseError, function () { return false; });
        },
        //
        // Static method for retrieving a list of all existing databases at current host.
        //
        getDatabaseNames: function (cb) {
            var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);
            return getDatabaseNames ? new Promise$1(function (resolve, reject) {
                var req = getDatabaseNames();
                req.onsuccess = function (event) {
                    resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>
                };
                req.onerror = eventRejectHandler(reject);
            }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);
        },
        defineClass: function () {
            // Default constructor able to copy given properties into this object.
            function Class(properties) {
                /// <param name="properties" type="Object" optional="true">Properties to initialize object with.
                /// </param>
                if (properties)
                    extend(this, properties);
            }
            return Class;
        },
        applyStructure: applyStructure,
        ignoreTransaction: function (scopeFunc) {
            // In case caller is within a transaction but needs to create a separate transaction.
            // Example of usage:
            //
            // Let's say we have a logger function in our app. Other application-logic should be unaware of the
            // logger function and not need to include the 'logentries' table in all transaction it performs.
            // The logging should always be done in a separate transaction and not be dependant on the current
            // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.
            //
            //     Dexie.ignoreTransaction(function() {
            //         db.logentries.add(newLogEntry);
            //     });
            //
            // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction
            // in current Promise-scope.
            //
            // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an
            // API for this because
            //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().
            //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().
            //  3) setImmediate() is not supported in the ES standard.
            //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.
            return PSD.trans ?
                usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.
                scopeFunc(); // No need to change scope because there is no ongoing transaction.
        },
        vip: function (fn) {
            // To be used by subscribers to the on('ready') event.
            // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.
            // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD
            // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since
            // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.
            // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()
            // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by
            // the caller will not resolve until database is opened.
            return newScope(function () {
                PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.
                return fn();
            });
        },
        async: function (generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function')
                        return Promise$1.resolve(rv);
                    return rv;
                }
                catch (e) {
                    return rejection(e);
                }
            };
        },
        spawn: function (generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function')
                    return Promise$1.resolve(rv);
                return rv;
            }
            catch (e) {
                return rejection(e);
            }
        },
        // Dexie.currentTransaction property
        currentTransaction: {
            get: function () { return PSD.trans || null; }
        },
        waitFor: function (promiseOrFunction, optionalTimeout) {
            // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()
            var promise = Promise$1.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction)
                .timeout(optionalTimeout || 60000); // Default the timeout to one minute. Caller may specify Infinity if required.       
            // Run given promise on current transaction. If no current transaction, just return a Dexie promise based
            // on given value.
            return PSD.trans ? PSD.trans.waitFor(promise) : promise;
        },
        // Export our Promise implementation since it can be handy as a standalone Promise implementation
        Promise: Promise$1,
        // Dexie.debug proptery:
        // Dexie.debug = false
        // Dexie.debug = true
        // Dexie.debug = "dexie" - don't hide dexie's stack frames.
        debug: {
            get: function () { return debug; },
            set: function (value) {
                setDebug(value, value === 'dexie' ? function () { return true; } : dexieStackFrameFilter);
            }
        },
        // Export our derive/extend/override methodology
        derive: derive,
        extend: extend,
        props: props,
        override: override,
        // Export our Events() function - can be handy as a toolkit
        Events: Events,
        // Utilities
        getByKeyPath: getByKeyPath,
        setByKeyPath: setByKeyPath,
        delByKeyPath: delByKeyPath,
        shallowClone: shallowClone,
        deepClone: deepClone,
        getObjectDiff: getObjectDiff,
        asap: asap,
        maxKey: maxKey,
        minKey: minKey,
        // Addon registry
        addons: [],
        // Global DB connection list
        connections: connections,
        MultiModifyError: exceptions.Modify,
        errnames: errnames,
        // Export other static classes
        IndexSpec: IndexSpec,
        TableSchema: TableSchema,
        //
        // Dependencies
        //
        // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.
        //
        // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().
        // For node.js, you need to require indexeddb-js or similar and then set these deps.
        //
        dependencies: (function () {
            try {
                return {
                    // Required:
                    indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
                    IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
                };
            }
            catch (e) {
                return {
                    indexedDB: null,
                    IDBKeyRange: null
                };
            }
        })(),
        // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.
        semVer: DEXIE_VERSION,
        version: DEXIE_VERSION.split('.')
            .map(function (n) { return parseInt(n); })
            .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }),
        // https://github.com/dfahlander/Dexie.js/issues/186
        // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return
        // x.default. Workaround: Set Dexie.default = Dexie.
        default: Dexie,
        // Make it possible to import {Dexie} (non-default import)
        // Reason 1: May switch to that in future.
        // Reason 2: We declare it both default and named exported in d.ts to make it possible
        // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely
        // exporting the symbol, not just default exporting)
        Dexie: Dexie
    });
    // Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.
    Promise$1.rejectionMapper = mapError;
    // Initialize dbNamesDB (won't ever be opened on chromium browsers')
    dbNamesDB = new Dexie('__dbnames');
    dbNamesDB.version(1).stores({ dbnames: 'name' });
    (function () {
        // Migrate from Dexie 1.x database names stored in localStorage:
        var DBNAMES = 'Dexie.DatabaseNames';
        try {
            if (typeof localStorage !== undefined && _global.document !== undefined) {
                // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.
                JSON.parse(localStorage.getItem(DBNAMES) || "[]")
                    .forEach(function (name) { return dbNamesDB.dbnames.put({ name: name }).catch(nop); });
                localStorage.removeItem(DBNAMES);
            }
        }
        catch (_e) { }
    })();
    //# sourceMappingURL=dexie.es.js.map

    var Checklist$1, Code$1, Cookies, Database, KeyPair$1, Note$1, Solver$1, Timesheet$1, uuid$1;

    Note$1 = note;

    Code$1 = code;

    KeyPair$1 = keypair;

    Solver$1 = solver;

    Timesheet$1 = timesheet;

    Checklist$1 = checklist;

    Cookies = js_cookie;

    uuid$1 = uuid_1;

    Database = (function() {
      class Database {
        /*
          id: serial int (handled by dexie)
          name: string
          type: "note","list","solver","timesheet","checklist" -- future: "code","timer"
          type_version: int  [v2]- for versioning individual types
          data: json
          is_favorite: boolean
          is_locked: boolean
          is_pinned: boolean [v2]
          priority: integer [v2] for sorting
          created_at: datetime
          modified_at: datetime
        */
        migrate() {
          this.reference.version(1).stores({
            data: "++id, name, type, data, is_favorite, is_locked, created_at, modified_at"
          });
          return this.reference.version(2).stores({
            data: "++id, name, type, data, is_favorite, is_locked, is_pinned, priority, type_version,created_at, modified_at"
          }).upgrade(function(transaction) {
            return transaction.data.toCollection().modify(function(record) {
              record.is_pinned = false;
              record.priority = 0;
              return record.type_version = 1;
            });
          });
        }

        seed(cb) {
          var processSeeds, seedQueue, that;
          that = this;
          if (!Cookies.get("seeded")) {
            console.log("Seeding cookie not found. Seeding");
            seedQueue = ["./seeds/solver.json", "./seeds/keypair.json", "./seeds/checklist.json", "./seeds/note.json"];
            console.log("Starting seed fetch.");
            processSeeds = function() {
              var nextUrl, queueCallback;
              console.log(seedQueue);
              queueCallback = function() {
                return processSeeds();
              };
              // last seed
              if (seedQueue.length === 1) {
                queueCallback = function() {
                  Cookies.set("seeded", true);
                  if (cb != null) {
                    return cb();
                  }
                };
              }
              nextUrl = seedQueue.shift();
              return fetch(nextUrl).then(function(response) {
                console.log(`Fetching seed: ${nextUrl}`);
                console.log(response.body.toString());
                return response.json();
              }).then(function(json) {
                // live customizations
                switch (json.type) {
                  case "timesheet":
                    // adjust dates to current
                    json.data.events = json.data.events.map(function(event) {
                      var end, start;
                      event.id = uuid$1();
                      start = Date.create(event.start);
                      end = start.clone();
                      event.start = Date.create(start).advance({
                        day: Date.create().daysAgo()
                      });
                      event.end = Date.create(start).advance({
                        day: Date.create().daysAgo()
                      }).addHours(2);
                      return event;
                    });
                    console.log(json);
                    break;
                  case "list":
                  case "checklist":
                  case "solver":
                    json.data.lines = json.data.lines.map(function(line) {
                      line.id = uuid$1();
                      return line;
                    });
                }
                return that.add(that.model(json.type, json), queueCallback);
              });
            };
            return processSeeds();
          } else {
            return cb();
          }
        }

        constructor(database, subscribe, set, update, constructor_callback) {
          var Dexie$1;
          this.subscribe = subscribe;
          this.set = set;
          this.update = update;
          Dexie$1 = Dexie;
          // console.log "constructed"
          this.reference = new Dexie$1(database);
          if (constructor_callback != null) {
            this.constructor_callback = constructor_callback;
          }
          this.after_construct();
        }

        model(type, params) {
          switch (type) {
            case "code":
              return new Code$1(params);
            case "note":
              return new Note$1(params);
            case "list":
              return new KeyPair$1(params);
            case "checklist":
              return new Checklist$1(params);
            case "solver":
              return new Solver$1(params);
            case "timesheet":
              return new Timesheet$1(params);
          }
        }

        after_construct() {
          var finalize, that;
          // perform migrations
          that = this;
          this.migrate();
          finalize = function() {
            console.log("finalize");
            that.refresh();
            // console.log "after_construct"
            if (that.constructor_callback != null) {
              return that.constructor_callback();
            }
          };
          return this.seed(finalize);
        }

        //@data_store.load @collection_name
        show_callback(data) {}

        save_callback(data) {}

        update_callback(data) {}

        destroy_by_id_callback(data) {}

        destroy_callback(data) {}

        bulk_destroy_callback(data) {}

        find(search) { // a reference
          return this.collection.find(search);
        }

        filter(search) { // a reference
          return this.collection.filter(search);
        }

        get(search) { // a clone, if clone method exists, otherwise reference
          var item;
          item = this.collection.find(search);
          if (item.clone != null) {
            return item.clone();
          } else {
            return item;
          }
        }

        searchify(obj) {
          var values;
          values = function(obj) {
            var key, output;
            output = '';
            for (key in obj) {
              if (typeof obj[key] === 'object') {
                output = output + values(obj[key]) + ' ';
              } else {
                output = output + obj[key] + ' ';
              }
              return output.toLowerCase();
            }
          };
          return values(obj);
        }

        refresh(cb) {
          var that;
          console.log(`${Date.create()}: Refresh ${this.filter_string.length}`);
          that = this;
          if (this.filter_string.trim().length > 1) {
            console.log(`filtering [${this.filter_string}]`);
            return that.reference["data"].filter(function(record) {
              var filterArray, found;
              filterArray = that.filter_string.toLowerCase().words();
              found = false;
              // check name
              filterArray.forEach(function(filter) {
                if (record.name.toLowerCase().includes(filter)) {
                  found = true;
                }
                switch (record.type) {
                  case "note":
                  case "code":
                    if (record.data.contents.toLowerCase().includes(filter)) {
                      return found = true;
                    }
                    break;
                  case "solver":
                    return record.data.lines.forEach(function(line) {
                      if (line.expression.toLowerCase().includes(filter)) {
                        return found = true;
                      }
                    });
                  case "list":
                    return record.data.lines.forEach(function(line) {
                      if (line.key.toLowerCase().includes(filter) || line.value.toLowerCase().includes(filter)) {
                        return found = true;
                      }
                    });
                  case "checklist":
                    return record.data.lines.forEach(function(line) {
                      if (line.description.toLowerCase().includes(filter)) {
                        return found = true;
                      }
                    });
                }
              });
              // todo - timesheet
              return found;
            }).toArray(function(data) {
              that.set(data.sortBy("created_at", true));
              if (cb != null) {
                return cb();
              }
            });
          } else {
            // that.set
            return that.reference["data"].toArray(function(data) {
              that.set(data.sortBy("created_at", true));
              if (cb != null) {
                return cb();
              }
            });
          }
        }

        after_index(data) {
          //console.log "after_index"
          //console.log @update
          //console.log data
          return this.set(data);
        }

        //console.log "updated"
        index() {
          console.log("index");
          return this.refresh();
        }

        bulkDestroy(collectionName, keys, afterCallback) {
          this.reference["data"].bulkDelete(keys).then(function(data) {
            if (afterCallback != null) {
              return afterCallback(data);
            }
          });
          return null;
        }

        // diffs only
        save(item, callback) {
          var model, that;
          that = this;
          model = item;
          //console.log "collection save"
          //console.log model
          model["modified_at"] = Date.create();
          this.reference["data"].update(item.id, item).then(function(data) {
            var returnData;
            // that.refresh()
            returnData = {};
            if (data === 1) {
              returnData = item;
              that.refresh();
            } else {
              returnData = null;
            }
            if (callback != null) {
              return callback(returnData);
            }
          }).catch(function(data) {
            console.log("save error");
            return console.log(data);
          });
          return null;
        }

        addStub(type, overrides, callback) {
          return this.add(this.model(type, overrides), callback);
        }

        add(model, callback) {
          var that;
          that = this;
          model["created_at"] = Date.create();
          model["modified_at"] = Date.create();
          this.reference["data"].put(model.saveableModel()).then(function(data) {
            var cb;
            cb = function() {
              if (callback != null) {
                return callback(data);
              }
            };
            return that.refresh(cb);
          }).catch(function(data) {
            console.log("save error");
            return console.log(data);
          });
          return null;
        }

        exportable() {
          return this.collection.map(function(item) {
            return item.exportable_clone();
          });
        }

        delete(model, callback) {
          var that;
          that = this;
          console.log(`${Date.create()}: Deleting ${model.id}`);
          return this.reference["data"].delete(model.id).then(function(data) {
            console.log(`${Date.create()}: Deleted ${model.id}`);
            if (callback != null) {
              callback(data);
            }
            return that.refresh();
          });
        }

      }
      Database.prototype.reference = {};

      Database.prototype.collection = [];

      Database.prototype.constructor_callback = null;

      Database.prototype.filter_string = "";

      return Database;

    }).call(commonjsGlobal);

    var database = Database;

    var CodeMirrorModes;

    CodeMirrorModes = class CodeMirrorModes {
      // todo: DRY this out
      constructor(subscribe, set, update, constructor_callback) {
        var that;
        this.subscribe = subscribe;
        this.set = set;
        this.update = update;
        this.modes = CodeMirror.modeInfo;
        this.loaded = [];
        this.loadedAddons = [];
        that = this;
        this.queueload = function(dependencies) {
          return dependencies.forEach(function(dependency) {
            console.log(`Queueing ${dependency}`);
            return that.load(dependency);
          });
        };
        this.queueloadAddOn = function(dependencies) {
          return dependencies.forEach(function(dependency) {
            console.log(`Queuing addon ${dependency}`);
            return that.load(dependency);
          });
        };
        this.load = function(modeName) {
          var checkExists, checkLoaded, s, url;
          checkLoaded = that.loaded.find(function(item) {
            return item.mode === modeName;
          });
          if (checkLoaded == null) {
            checkExists = that.modes.find(function(item) {
              return item.mode === modeName;
            });
            // console.log checkExists.mode
            if (checkExists != null) {
              switch (modeName) {
                case "dart":
                  that.load("clike");
                  break;
                case "django":
                  that.load("htmlmixed");
                  break;
                case "dockerfile":
                case "factor":
                case "nsis":
                case "rust":
                  that.loadAddOn("simple");
                  break;
                case "gfm":
                  that.load("markdown");
                  that.loadAddOn("overlay");
                  break;
                case "haml":
                  that.queueload(["htmlmixed", "ruby"]);
                  break;
                case "handlebars":
                  that.queueloadAddOn(["simple", "multiplex"]);
                  break;
                case "haskell-literate":
                  that.load("haskell");
                  break;
                case "htmlmixed":
                  that.queueload(["xml", "javascript", "css"]);
                  break;
                case "jsx":
                  that.queueload(["xml", "javascript"]);
                  break;
                case "markdown":
                  that.load("xml");
                  break;
                case "pegjs":
                  that.load("javascript");
                  break;
                case "php":
                  that.queueload(["htmlmixed", "clike"]);
                  break;
                case "pug":
                  that.queueload(["javascript", "css", "htmlmixed"]);
                  break;
                case "rst":
                  that.queueload(["python", "stex"]);
                  that.loadAddOn("overlay");
                  break;
                case "sass":
                  that.load("css");
                  break;
                case "slim":
                  that.queueload(["htmlmixed", "ruby"]);
                  break;
                case "soy":
                case "tornado":
                  that.load("htmlmixed");
                  break;
                case "twig":
                  that.loadAddOn("multiplex");
                  break;
                case "yaml-frontmatter":
                  that.load("yaml");
              }
              console.log(`codemirror: load ${modeName}`);
              url = `./codemirror/mode/${modeName}/${modeName}.js`;
              s = document.createElement("script");
              s.setAttribute("type", "text/javascript");
              s.setAttribute("src", url);
              document.body.appendChild(s);
              return this.loaded.append(checkExists);
            }
          } else {
            return console.log(`mode ${modeName} exists, skipping`);
          }
        };
        this.loadAddOn = function(addonName) {
          var checkLoaded, s, url;
          checkLoaded = that.loadedAddons.find(function(item) {
            return item.mode === addonName;
          });
          if (checkLoaded == null) {
            console.log(`codemirror: load ${addonName}`);
            url = `./codemirror/addon/mode/${addonName}.js`;
            s = document.createElement("script");
            s.setAttribute("type", "text/javascript");
            s.setAttribute("src", url);
            document.body.appendChild(s);
            return this.loadedAddons.append(addonName);
          } else {
            return console.log(`addon ${addonName} exists, skipping`);
          }
        };
      }

    };

    var codemirror_modes = CodeMirrorModes;

    var createCodeMirrorInstance, createDbInstance;

    const databaseLoaded = writable(false);

    createDbInstance = function() {
      const { subscribe, set, update } = writable([]);
      var dbcb;
      dbcb = function() {
        return databaseLoaded.set(true);
      };
      return new database('datastore', subscribe, set, update, dbcb);
    };

    createCodeMirrorInstance = function() {
      var cb;
      cb = function() {
        return console.log("Code mirror modes initialized");
      };
      const { subscribe, set, update } = writable(null);
      return new codemirror_modes(subscribe, set, update, cb);
    };

    const collection = createDbInstance();

    const modes = createCodeMirrorInstance();

    function regexparam (str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules\svelte-spa-router\Router.svelte generated by Svelte v3.18.2 */

    const { Error: Error_1, Object: Object_1 } = globals;

    function create_fragment(ctx) {
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		return {
    			props: { params: /*componentParams*/ ctx[1] },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		var switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = {};
    			if (dirty & /*componentParams*/ 2) switch_instance_changes.params = /*componentParams*/ ctx[1];

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf("#/");

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: "/";

    	// Check if there's a querystring
    	const qsPosition = location.indexOf("?");

    	let querystring = "";

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(getLocation(), // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener("hashchange", update, false);

    	return function stop() {
    		window.removeEventListener("hashchange", update, false);
    	};
    });

    const location$1 = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);

    function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) {
    		throw Error("Invalid parameter location");
    	}

    	// Execute this code when the current call stack is complete
    	setTimeout(
    		() => {
    			const dest = (location.charAt(0) == "#" ? "" : "#") + location;
    			history.replaceState(undefined, undefined, dest);

    			// The method above doesn't trigger the hashchange event, so let's do that manually
    			window.dispatchEvent(new Event("hashchange"));
    		},
    		0
    	);
    }

    function instance($$self, $$props, $$invalidate) {
    	let $loc,
    		$$unsubscribe_loc = noop;

    	validate_store(loc, "loc");
    	component_subscribe($$self, loc, $$value => $$invalidate(4, $loc = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_loc());
    	let { routes = {} } = $$props;
    	let { prefix = "" } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent} component - Svelte component for the route
     */
    		constructor(path, component) {
    			if (!component || typeof component != "function" && (typeof component != "object" || component._sveltesparouter !== true)) {
    				throw Error("Invalid component object");
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == "string" && (path.length < 1 || path.charAt(0) != "/" && path.charAt(0) != "*") || typeof path == "object" && !(path instanceof RegExp)) {
    				throw Error("Invalid value for \"path\" argument");
    			}

    			const { pattern, keys } = regexparam(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == "object" && component._sveltesparouter === true) {
    				this.component = component.route;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    			} else {
    				this.component = component;
    				this.conditions = [];
    				this.userData = undefined;
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, remove it before we run the matching
    			if (prefix && path.startsWith(prefix)) {
    				path = path.substr(prefix.length) || "/";
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				out[this._keys[i]] = matches[++i] || null;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {SvelteComponent} component - Svelte component
     * @property {string} name - Name of the Svelte component
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {Object} [userData] - Custom data passed by the user
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {bool} Returns true if all the conditions succeeded
     */
    		checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// We need an iterable: if it's not a Map, use Object.entries
    	const routesIterable = routes instanceof Map ? routes : Object.entries(routes);

    	// Set up all routes
    	const routesList = [];

    	for (const [path, route] of routesIterable) {
    		routesList.push(new RouteItem(path, route));
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	const dispatchNextTick = (name, detail) => {
    		// Execute this code when the current call stack is complete
    		setTimeout(
    			() => {
    				dispatch(name, detail);
    			},
    			0
    		);
    	};

    	const writable_props = ["routes", "prefix"];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("routes" in $$props) $$invalidate(2, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(3, prefix = $$props.prefix);
    	};

    	$$self.$capture_state = () => {
    		return {
    			routes,
    			prefix,
    			component,
    			componentParams,
    			$loc
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("routes" in $$props) $$invalidate(2, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(3, prefix = $$props.prefix);
    		if ("component" in $$props) $$invalidate(0, component = $$props.component);
    		if ("componentParams" in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ("$loc" in $$props) loc.set($loc = $$props.$loc);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*component, $loc*/ 17) {
    			// Handle hash change events
    			// Listen to changes in the $loc store and update the page
    			 {
    				// Find a route matching the location
    				$$invalidate(0, component = null);

    				let i = 0;

    				while (!component && i < routesList.length) {
    					const match = routesList[i].match($loc.location);

    					if (match) {
    						const detail = {
    							component: routesList[i].component,
    							name: routesList[i].component.name,
    							location: $loc.location,
    							querystring: $loc.querystring,
    							userData: routesList[i].userData
    						};

    						// Check if the route can be loaded - if all conditions succeed
    						if (!routesList[i].checkConditions(detail)) {
    							// Trigger an event to notify the user
    							dispatchNextTick("conditionsFailed", detail);

    							break;
    						}

    						$$invalidate(0, component = routesList[i].component);
    						$$invalidate(1, componentParams = match);
    						dispatchNextTick("routeLoaded", detail);
    					}

    					i++;
    				}
    			}
    		}
    	};

    	return [component, componentParams, routes, prefix];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { routes: 2, prefix: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\InlineInput.svelte generated by Svelte v3.18.2 */
    const file = "src\\components\\common\\InlineInput.svelte";

    // (63:0) {:else}
    function create_else_block(ctx) {
    	let div;
    	let t;
    	let div_class_value;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*label*/ ctx[7]);
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*labelClasses*/ ctx[3]) + " svelte-1hofeed"));
    			add_location(div, file, 63, 2, 1368);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			dispose = listen_dev(div, "click", /*toggle*/ ctx[10], false, false, false);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 128) set_data_dev(t, /*label*/ ctx[7]);

    			if (dirty & /*labelClasses*/ 8 && div_class_value !== (div_class_value = "" + (null_to_empty(/*labelClasses*/ ctx[3]) + " svelte-1hofeed"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(63:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (53:0) {#if editing && (isText || isNumber)}
    function create_if_block(ctx) {
    	let input;
    	let input_class_value;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "" + (null_to_empty(/*inputClasses*/ ctx[4]) + " svelte-1hofeed"));
    			attr_dev(input, "type", /*type*/ ctx[1]);
    			input.value = /*value*/ ctx[0];
    			attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
    			add_location(input, file, 53, 2, 1181);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			/*input_binding*/ ctx[15](input);

    			dispose = [
    				listen_dev(input, "input", /*handleInput*/ ctx[11], false, false, false),
    				listen_dev(input, "keyup", /*handleKeyup*/ ctx[12], false, false, false),
    				listen_dev(input, "blur", /*handleBlur*/ ctx[13], false, false, false)
    			];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*inputClasses*/ 16 && input_class_value !== (input_class_value = "" + (null_to_empty(/*inputClasses*/ ctx[4]) + " svelte-1hofeed"))) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*type*/ 2) {
    				attr_dev(input, "type", /*type*/ ctx[1]);
    			}

    			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				prop_dev(input, "value", /*value*/ ctx[0]);
    			}

    			if (dirty & /*placeholder*/ 4) {
    				attr_dev(input, "placeholder", /*placeholder*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			/*input_binding*/ ctx[15](null);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(53:0) {#if editing && (isText || isNumber)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*editing*/ ctx[5] && (/*isText*/ ctx[8] || /*isNumber*/ ctx[9])) return create_if_block;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let dispatch = createEventDispatcher();
    	let { value = "" } = $$props;
    	let { type = "text" } = $$props;
    	let { placeholder = "" } = $$props;
    	let { labelClasses = "" } = $$props;
    	let { inputClasses = "" } = $$props;
    	let editing = false;
    	let inputEl;
    	let label;

    	const toggle = async _ => {
    		$$invalidate(5, editing = !editing);

    		if (editing) {
    			await tick();
    			inputEl.focus();
    		}
    	};

    	const handleInput = e => {
    		$$invalidate(0, value = isNumber ? +e.target.value : e.target.value);
    	};

    	const handleKeyup = e => {
    		dispatch("keyup", value);
    		if (e.keyCode === 13) inputEl.blur();
    	};

    	const handleBlur = _ => {
    		toggle();
    		dispatch("update", value);
    	};

    	const writable_props = ["value", "type", "placeholder", "labelClasses", "inputClasses"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<InlineInput> was created with unknown prop '${key}'`);
    	});

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(6, inputEl = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("value" in $$props) $$invalidate(0, value = $$props.value);
    		if ("type" in $$props) $$invalidate(1, type = $$props.type);
    		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
    		if ("labelClasses" in $$props) $$invalidate(3, labelClasses = $$props.labelClasses);
    		if ("inputClasses" in $$props) $$invalidate(4, inputClasses = $$props.inputClasses);
    	};

    	$$self.$capture_state = () => {
    		return {
    			dispatch,
    			value,
    			type,
    			placeholder,
    			labelClasses,
    			inputClasses,
    			editing,
    			inputEl,
    			label,
    			isText,
    			isNumber
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("value" in $$props) $$invalidate(0, value = $$props.value);
    		if ("type" in $$props) $$invalidate(1, type = $$props.type);
    		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
    		if ("labelClasses" in $$props) $$invalidate(3, labelClasses = $$props.labelClasses);
    		if ("inputClasses" in $$props) $$invalidate(4, inputClasses = $$props.inputClasses);
    		if ("editing" in $$props) $$invalidate(5, editing = $$props.editing);
    		if ("inputEl" in $$props) $$invalidate(6, inputEl = $$props.inputEl);
    		if ("label" in $$props) $$invalidate(7, label = $$props.label);
    		if ("isText" in $$props) $$invalidate(8, isText = $$props.isText);
    		if ("isNumber" in $$props) $$invalidate(9, isNumber = $$props.isNumber);
    	};

    	let isText;
    	let isNumber;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*type*/ 2) {
    			// Computed
    			 $$invalidate(8, isText = type === "text");
    		}

    		if ($$self.$$.dirty & /*type*/ 2) {
    			 $$invalidate(9, isNumber = type === "number");
    		}

    		if ($$self.$$.dirty & /*isNumber, value, placeholder, isText*/ 773) {
    			 if (isNumber) {
    				$$invalidate(7, label = value === "" ? placeholder : value);
    			} else if (isText) {
    				$$invalidate(7, label = value ? value : placeholder);
    			}
    		}
    	};

    	return [
    		value,
    		type,
    		placeholder,
    		labelClasses,
    		inputClasses,
    		editing,
    		inputEl,
    		label,
    		isText,
    		isNumber,
    		toggle,
    		handleInput,
    		handleKeyup,
    		handleBlur,
    		dispatch,
    		input_binding
    	];
    }

    class InlineInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			value: 0,
    			type: 1,
    			placeholder: 2,
    			labelClasses: 3,
    			inputClasses: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InlineInput",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get value() {
    		throw new Error("<InlineInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<InlineInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<InlineInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<InlineInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<InlineInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<InlineInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelClasses() {
    		throw new Error("<InlineInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelClasses(value) {
    		throw new Error("<InlineInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputClasses() {
    		throw new Error("<InlineInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputClasses(value) {
    		throw new Error("<InlineInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\IconButton.svelte generated by Svelte v3.18.2 */
    const file$1 = "src\\components\\common\\IconButton.svelte";

    function create_fragment$2(ctx) {
    	let button;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "svelte-2i6982");
    			add_location(button, file$1, 16, 0, 335);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;
    			dispose = listen_dev(button, "click", /*click*/ ctx[0], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let dispatch = createEventDispatcher();

    	let click = function () {
    		dispatch("clicked");
    	};

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("click" in $$props) $$invalidate(0, click = $$props.click);
    	};

    	return [click, dispatch, $$scope, $$slots];
    }

    class IconButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconButton",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\common\PopoverOverlay.svelte generated by Svelte v3.18.2 */
    const file$2 = "src\\components\\common\\PopoverOverlay.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "overlay");
    			attr_dev(div, "class", "overlay svelte-s1nj9q");
    			set_style(div, "z-index", /*zIndex*/ ctx[0]);
    			set_style(div, "background-color", /*overlayColor*/ ctx[1]);
    			add_location(div, file$2, 11, 0, 137);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			dispose = [
    				listen_dev(div, "mouseenter", /*onMouseEnter*/ ctx[4], false, false, false),
    				listen_dev(div, "click", /*onClick*/ ctx[2], false, false, false),
    				listen_dev(div, "touchend", /*onTouchEnd*/ ctx[3], false, false, false)
    			];
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*zIndex*/ 1) {
    				set_style(div, "z-index", /*zIndex*/ ctx[0]);
    			}

    			if (dirty & /*overlayColor*/ 2) {
    				set_style(div, "background-color", /*overlayColor*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { zIndex } = $$props;
    	let { action } = $$props;
    	let { overlayColor = "rgba(0,0,0,0.5)" } = $$props;
    	let { preventDefault } = $$props;
    	let { stopPropagation } = $$props;
    	const dispatch = createEventDispatcher();

    	const eventClick = e => {
    		if (preventDefault) e.preventDefault();
    		if (stopPropagation) e.stopPropagation();
    		dispatch("setOpen", {});
    	};

    	const onClick = action === "click" ? eventClick : null;
    	const onTouchEnd = action === "click" ? eventClick : null;
    	const onMouseEnter = action === "hover" ? eventClick : null;
    	const writable_props = ["zIndex", "action", "overlayColor", "preventDefault", "stopPropagation"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PopoverOverlay> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("zIndex" in $$props) $$invalidate(0, zIndex = $$props.zIndex);
    		if ("action" in $$props) $$invalidate(5, action = $$props.action);
    		if ("overlayColor" in $$props) $$invalidate(1, overlayColor = $$props.overlayColor);
    		if ("preventDefault" in $$props) $$invalidate(6, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(7, stopPropagation = $$props.stopPropagation);
    	};

    	$$self.$capture_state = () => {
    		return {
    			zIndex,
    			action,
    			overlayColor,
    			preventDefault,
    			stopPropagation
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("zIndex" in $$props) $$invalidate(0, zIndex = $$props.zIndex);
    		if ("action" in $$props) $$invalidate(5, action = $$props.action);
    		if ("overlayColor" in $$props) $$invalidate(1, overlayColor = $$props.overlayColor);
    		if ("preventDefault" in $$props) $$invalidate(6, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(7, stopPropagation = $$props.stopPropagation);
    	};

    	return [
    		zIndex,
    		overlayColor,
    		onClick,
    		onTouchEnd,
    		onMouseEnter,
    		action,
    		preventDefault,
    		stopPropagation
    	];
    }

    class PopoverOverlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			zIndex: 0,
    			action: 5,
    			overlayColor: 1,
    			preventDefault: 6,
    			stopPropagation: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PopoverOverlay",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*zIndex*/ ctx[0] === undefined && !("zIndex" in props)) {
    			console.warn("<PopoverOverlay> was created without expected prop 'zIndex'");
    		}

    		if (/*action*/ ctx[5] === undefined && !("action" in props)) {
    			console.warn("<PopoverOverlay> was created without expected prop 'action'");
    		}

    		if (/*preventDefault*/ ctx[6] === undefined && !("preventDefault" in props)) {
    			console.warn("<PopoverOverlay> was created without expected prop 'preventDefault'");
    		}

    		if (/*stopPropagation*/ ctx[7] === undefined && !("stopPropagation" in props)) {
    			console.warn("<PopoverOverlay> was created without expected prop 'stopPropagation'");
    		}
    	}

    	get zIndex() {
    		throw new Error("<PopoverOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<PopoverOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<PopoverOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<PopoverOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlayColor() {
    		throw new Error("<PopoverOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlayColor(value) {
    		throw new Error("<PopoverOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get preventDefault() {
    		throw new Error("<PopoverOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set preventDefault(value) {
    		throw new Error("<PopoverOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stopPropagation() {
    		throw new Error("<PopoverOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stopPropagation(value) {
    		throw new Error("<PopoverOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\PopoverContent.svelte generated by Svelte v3.18.2 */
    const file$3 = "src\\components\\common\\PopoverContent.svelte";

    // (21:2) {#if arrow}
    function create_if_block$1(ctx) {
    	let div;
    	let t;
    	let div_style_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("◥");
    			attr_dev(div, "class", "arrow svelte-py8qu5");
    			attr_dev(div, "style", div_style_value = "position: absolute; color: " + /*arrowColor*/ ctx[0] + "; " + /*arrowStyleProps*/ ctx[10]);
    			add_location(div, file$3, 21, 4, 425);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			/*div_binding*/ ctx[18](div);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*arrowColor, arrowStyleProps*/ 1025 && div_style_value !== (div_style_value = "position: absolute; color: " + /*arrowColor*/ ctx[0] + "; " + /*arrowStyleProps*/ ctx[10])) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[18](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(21:2) {#if arrow}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div;
    	let t0;
    	let div_style_value;
    	let t1;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
    	let if_block = /*arrow*/ ctx[2] && create_if_block$1(ctx);

    	const overlay = new PopoverOverlay({
    			props: {
    				zIndex: /*zIndex*/ ctx[1],
    				overlayColor: /*overlayColor*/ ctx[6],
    				action: /*action*/ ctx[3],
    				stopPropagation: /*stopPropagation*/ ctx[5],
    				preventDefault: /*preventDefault*/ ctx[4]
    			},
    			$$inline: true
    		});

    	overlay.$on("setOpen", /*setOpen*/ ctx[11]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			create_component(overlay.$$.fragment);
    			attr_dev(div, "class", "content svelte-py8qu5");
    			attr_dev(div, "style", div_style_value = "z-index: " + (/*zIndex*/ ctx[1] + 10) + "; " + /*positionStyle*/ ctx[9]);
    			add_location(div, file$3, 18, 0, 303);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			/*div_binding_1*/ ctx[19](div);
    			insert_dev(target, t1, anchor);
    			mount_component(overlay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 65536) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[16], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null));
    			}

    			if (/*arrow*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*zIndex, positionStyle*/ 514 && div_style_value !== (div_style_value = "z-index: " + (/*zIndex*/ ctx[1] + 10) + "; " + /*positionStyle*/ ctx[9])) {
    				attr_dev(div, "style", div_style_value);
    			}

    			const overlay_changes = {};
    			if (dirty & /*zIndex*/ 2) overlay_changes.zIndex = /*zIndex*/ ctx[1];
    			if (dirty & /*overlayColor*/ 64) overlay_changes.overlayColor = /*overlayColor*/ ctx[6];
    			if (dirty & /*action*/ 8) overlay_changes.action = /*action*/ ctx[3];
    			if (dirty & /*stopPropagation*/ 32) overlay_changes.stopPropagation = /*stopPropagation*/ ctx[5];
    			if (dirty & /*preventDefault*/ 16) overlay_changes.preventDefault = /*preventDefault*/ ctx[4];
    			overlay.$set(overlay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(overlay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(overlay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    			/*div_binding_1*/ ctx[19](null);
    			if (detaching) detach_dev(t1);
    			destroy_component(overlay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { arrowColor } = $$props;
    	let { targetRef } = $$props;
    	let { zIndex } = $$props;
    	let { arrow } = $$props;
    	let { placement } = $$props;
    	let { action } = $$props;
    	let { preventDefault } = $$props;
    	let { stopPropagation } = $$props;
    	let { overlayColor } = $$props;
    	let contentRef;
    	let arrowRef;
    	let positionStyle = ``;
    	let arrowStyleProps = ``;
    	const dispatch = createEventDispatcher();

    	const setOpen = () => {
    		dispatch("setOpen", {});
    	};

    	const calculate = () => {
    		const targetBound = targetRef.getBoundingClientRect();
    		const contentBound = contentRef.getBoundingClientRect();
    		let arrowBound = { width: 0, height: 0 };

    		if (arrow) {
    			arrowBound = arrowRef.getBoundingClientRect();
    		}

    		const { innerWidth, innerHeight } = window;
    		const calcCoverLeft = contentBound.x - contentBound.width;
    		const coverLeft = calcCoverLeft < 0 ? calcCoverLeft : 0;
    		const calcCoverRight = contentBound.x + targetBound.width + contentBound.width;

    		const coverRight = calcCoverRight > innerWidth
    		? innerWidth - calcCoverRight
    		: 0;

    		const calcCoverTop = contentBound.y - contentBound.height;
    		const coverTop = calcCoverTop < 0 ? calcCoverTop : 0;
    		const calcCoverBottom = targetBound.bottom + contentBound.height;

    		const coverBottom = calcCoverBottom > innerHeight
    		? innerHeight - calcCoverBottom
    		: 0;

    		const calcXCenterLeft = contentBound.x + targetBound.width / 2 - contentBound.width / 2;
    		const calcXCenterRight = contentBound.x + targetBound.width / 2 - contentBound.width / 2 + contentBound.width;
    		const coverXCenterLeft = calcXCenterLeft < 0 ? calcXCenterLeft : 0;

    		const coverXCenterRight = calcXCenterRight > innerWidth
    		? innerWidth - calcXCenterRight
    		: 0;

    		const calcYCenterTop = contentBound.y + targetBound.height / 2 - contentBound.height / 2;
    		const coverYCenterTop = calcYCenterTop < 0 ? calcYCenterTop : 0;
    		const calcYCenterBottom = contentBound.y + targetBound.height / 2 - contentBound.height / 2 + contentBound.height;
    		const coverYCenterBottom = calcYCenterBottom > innerHeight ? calcYCenterBottom : 0;
    		const calcTopStart = contentBound.x + contentBound.width;

    		const coverTopStart = calcTopStart > innerWidth
    		? innerWidth - calcTopStart
    		: 0;

    		const calcTopEnd = contentBound.x - (contentBound.width - targetBound.width);
    		const coverTopEnd = calcTopEnd < 0 ? calcTopEnd : 0;
    		const calcLeftEndTop = contentBound.y - (contentBound.height - targetBound.height);
    		const coverLeftEndTop = calcLeftEndTop < 0 ? calcLeftEndTop : 0;
    		const coverRightEndTop = coverLeftEndTop;
    		const calcLefStartBottom = contentBound.y + contentBound.height;

    		const coverLeftStartBottom = calcLefStartBottom > innerHeight
    		? innerHeight - calcLefStartBottom
    		: 0;

    		const coverRightStartBottom = coverLeftStartBottom;
    		const coverBottomStartRight = coverTopStart;
    		const coverBottomEndLeft = coverTopEnd;
    		const xCenterStyle = targetBound.height / 2 - contentBound.height / 2;
    		const rightLeftEnd = -(contentBound.height - targetBound.height);
    		const topBottomEnd = -(contentBound.width - targetBound.width);
    		const topBottomCenter = targetBound.width / 2 - contentBound.width / 2;
    		const computeArrowW = arrowBound.width / 2;
    		const computearrowH = arrowBound.height / 2;
    		const leftLeftStyle = -(contentBound.width + computeArrowW);
    		const topTopStyle = -(contentBound.height + arrowBound.height / 2);
    		const rightLeftStyle = targetBound.width + computeArrowW;
    		const bottomTopStyle = targetBound.height + computearrowH;

    		const styles = {
    			topStart: `top:${topTopStyle}px`,
    			topCenter: `top:${topTopStyle}px;left:${topBottomCenter}px`,
    			topEnd: `top:${topTopStyle}px;left:${topBottomEnd}px`,
    			leftStart: `left:${leftLeftStyle}px`,
    			leftCenter: `left:${leftLeftStyle}px;top:${xCenterStyle}px`,
    			leftEnd: `left:${leftLeftStyle}px;top:${rightLeftEnd}px`,
    			rightStart: `left:${rightLeftStyle}px`,
    			rightCenter: `left:${rightLeftStyle}px;top:${xCenterStyle}px`,
    			rightEnd: `left:${rightLeftStyle}px;top:${rightLeftEnd}px`,
    			bottomStart: `top:${bottomTopStyle}px`,
    			bottomCenter: `top:${bottomTopStyle}px;left:${topBottomCenter}px`,
    			bottomEnd: `top:${bottomTopStyle}px;left:${topBottomEnd}px;`
    		};

    		const arrowBottomTransform = `transform:rotate(-45deg)`;
    		const arrowTopTransform = `transform: rotate(135deg)`;
    		const arrowLeftTransform = `transform: rotate(45deg)`;
    		const arrowRightTransform = `transform:rotate(45deg)`;
    		const arrowBottomTop = Math.ceil(-arrowBound.height / 2);
    		const arrowBottomTopCenter = contentBound.width / 2 - arrowBound.width / 2;
    		const arrowTop = contentBound.height - arrowBound.height / 2;
    		const arrowTopBottomEnd = targetBound.width / 2 - arrowBound.width / 2;
    		const arrowLeftRightEnd = contentBound.height - arrowBound.height / 2 - targetBound.height / 2;
    		const arrowLeftRightCenter = contentBound.height / 2 - Math.ceil(arrowBound.height / 2);
    		const arrowTopBottomStartLeft = targetBound.width / 2 - arrowBound.width / 2;
    		const arrowLeftLeft = Math.ceil(contentBound.width - arrowBound.width / 2);
    		const arrowLeftRightTop = targetBound.height / 2 - arrowBound.height / 2;

    		const arrowStyle = {
    			topStart: `${arrowTopTransform};top:${arrowTop}px;left:${arrowTopBottomStartLeft}px`,
    			topCenter: `${arrowTopTransform};top:${arrowTop}px;left:${arrowBottomTopCenter}px`,
    			topEnd: `${arrowTopTransform};top:${arrowTop}px;right:${arrowTopBottomEnd}px`,
    			leftStart: `${arrowLeftTransform};left:${arrowLeftLeft}px;top:${arrowLeftRightTop}px`,
    			leftCenter: `${arrowLeftTransform};left:${arrowLeftLeft}px;top:${arrowLeftRightCenter}px`,
    			leftEnd: `${arrowLeftTransform};left:${arrowLeftLeft}px;top:${arrowLeftRightEnd}px`,
    			rightStart: `${arrowRightTransform};left:${-arrowBound.width}px;top:${arrowLeftRightTop}px`,
    			rightCenter: `${arrowRightTransform};left:${-arrowBound.width}px;top:${arrowLeftRightCenter}px`,
    			rightEnd: `${arrowRightTransform};left:${-arrowBound.width}px;top:${arrowLeftRightEnd}px`,
    			bottomStart: `${arrowBottomTransform};top:${arrowBottomTop}px;left:${arrowTopBottomStartLeft}px`,
    			bottomCenter: `${arrowBottomTransform};top:${arrowBottomTop}px;left:${arrowBottomTopCenter}px`,
    			bottomEnd: `${arrowBottomTransform};top:${arrowBottomTop}px;right:${arrowTopBottomEnd}px`
    		};

    		const pos = [
    			{
    				at: "top-start",
    				cover: [coverTop, coverTopStart, 0],
    				style: styles.topStart,
    				arrow: arrowStyle.topStart
    			},
    			{
    				at: "top-center",
    				cover: [coverTop, coverXCenterLeft, coverXCenterRight],
    				style: styles.topCenter,
    				arrow: arrowStyle.topCenter
    			},
    			{
    				at: "top-end",
    				cover: [coverTop, coverTopEnd, 0],
    				style: styles.topEnd,
    				arrow: arrowStyle.topEnd
    			},
    			{
    				at: "left-start",
    				cover: [coverLeft, coverLeftStartBottom, 0],
    				style: styles.leftStart,
    				arrow: arrowStyle.leftStart
    			},
    			{
    				at: "left-center",
    				cover: [coverLeft, coverYCenterTop, coverYCenterBottom],
    				style: styles.leftCenter,
    				arrow: arrowStyle.leftCenter
    			},
    			{
    				at: "left-end",
    				cover: [coverLeft, coverLeftEndTop, 0],
    				style: styles.leftEnd,
    				arrow: arrowStyle.leftEnd
    			},
    			{
    				at: "right-start",
    				cover: [coverRight, coverRightStartBottom, 0],
    				style: styles.rightStart,
    				arrow: arrowStyle.rightStart
    			},
    			{
    				at: "right-center",
    				cover: [coverRight, coverYCenterTop, coverYCenterBottom],
    				style: styles.rightCenter,
    				arrow: arrowStyle.rightCenter
    			},
    			{
    				at: "right-end",
    				cover: [coverRight, coverRightEndTop, 0],
    				style: styles.rightEnd,
    				arrow: arrowStyle.rightEnd
    			},
    			{
    				at: "bottom-start",
    				cover: [coverBottom, coverBottomStartRight, 0],
    				style: styles.bottomStart,
    				arrow: arrowStyle.bottomStart
    			},
    			{
    				at: "bottom-center",
    				cover: [coverBottom, coverXCenterLeft, coverXCenterRight],
    				style: styles.bottomCenter,
    				arrow: arrowStyle.bottomCenter
    			},
    			{
    				at: "bottom-end",
    				cover: [coverBottom, coverBottomEndLeft, 0],
    				style: styles.bottomEnd,
    				arrow: arrowStyle.bottomEnd
    			}
    		];

    		let get;

    		if (placement === "auto") {
    			const reducer = (accumulator, currentValue) => accumulator + currentValue;
    			const compute = pos.map(({ cover }) => cover.reduce(reducer));
    			const findIndex = compute.indexOf(Math.max(...compute));
    			const result = pos[findIndex];
    			get = result;
    		} else {
    			get = pos.filter(val => val.at === placement)[0];
    		}

    		const debug = pos.map(val => val.cover);
    		$$invalidate(9, positionStyle = get.style);
    		$$invalidate(10, arrowStyleProps = get.arrow);
    	};

    	onMount(() => {
    		calculate();
    		dispatch("open");
    	});

    	const writable_props = [
    		"arrowColor",
    		"targetRef",
    		"zIndex",
    		"arrow",
    		"placement",
    		"action",
    		"preventDefault",
    		"stopPropagation",
    		"overlayColor"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PopoverContent> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(8, arrowRef = $$value);
    		});
    	}

    	function div_binding_1($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(7, contentRef = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("arrowColor" in $$props) $$invalidate(0, arrowColor = $$props.arrowColor);
    		if ("targetRef" in $$props) $$invalidate(12, targetRef = $$props.targetRef);
    		if ("zIndex" in $$props) $$invalidate(1, zIndex = $$props.zIndex);
    		if ("arrow" in $$props) $$invalidate(2, arrow = $$props.arrow);
    		if ("placement" in $$props) $$invalidate(13, placement = $$props.placement);
    		if ("action" in $$props) $$invalidate(3, action = $$props.action);
    		if ("preventDefault" in $$props) $$invalidate(4, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(5, stopPropagation = $$props.stopPropagation);
    		if ("overlayColor" in $$props) $$invalidate(6, overlayColor = $$props.overlayColor);
    		if ("$$scope" in $$props) $$invalidate(16, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {
    			arrowColor,
    			targetRef,
    			zIndex,
    			arrow,
    			placement,
    			action,
    			preventDefault,
    			stopPropagation,
    			overlayColor,
    			contentRef,
    			arrowRef,
    			positionStyle,
    			arrowStyleProps
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("arrowColor" in $$props) $$invalidate(0, arrowColor = $$props.arrowColor);
    		if ("targetRef" in $$props) $$invalidate(12, targetRef = $$props.targetRef);
    		if ("zIndex" in $$props) $$invalidate(1, zIndex = $$props.zIndex);
    		if ("arrow" in $$props) $$invalidate(2, arrow = $$props.arrow);
    		if ("placement" in $$props) $$invalidate(13, placement = $$props.placement);
    		if ("action" in $$props) $$invalidate(3, action = $$props.action);
    		if ("preventDefault" in $$props) $$invalidate(4, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(5, stopPropagation = $$props.stopPropagation);
    		if ("overlayColor" in $$props) $$invalidate(6, overlayColor = $$props.overlayColor);
    		if ("contentRef" in $$props) $$invalidate(7, contentRef = $$props.contentRef);
    		if ("arrowRef" in $$props) $$invalidate(8, arrowRef = $$props.arrowRef);
    		if ("positionStyle" in $$props) $$invalidate(9, positionStyle = $$props.positionStyle);
    		if ("arrowStyleProps" in $$props) $$invalidate(10, arrowStyleProps = $$props.arrowStyleProps);
    	};

    	return [
    		arrowColor,
    		zIndex,
    		arrow,
    		action,
    		preventDefault,
    		stopPropagation,
    		overlayColor,
    		contentRef,
    		arrowRef,
    		positionStyle,
    		arrowStyleProps,
    		setOpen,
    		targetRef,
    		placement,
    		dispatch,
    		calculate,
    		$$scope,
    		$$slots,
    		div_binding,
    		div_binding_1
    	];
    }

    class PopoverContent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			arrowColor: 0,
    			targetRef: 12,
    			zIndex: 1,
    			arrow: 2,
    			placement: 13,
    			action: 3,
    			preventDefault: 4,
    			stopPropagation: 5,
    			overlayColor: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PopoverContent",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*arrowColor*/ ctx[0] === undefined && !("arrowColor" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'arrowColor'");
    		}

    		if (/*targetRef*/ ctx[12] === undefined && !("targetRef" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'targetRef'");
    		}

    		if (/*zIndex*/ ctx[1] === undefined && !("zIndex" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'zIndex'");
    		}

    		if (/*arrow*/ ctx[2] === undefined && !("arrow" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'arrow'");
    		}

    		if (/*placement*/ ctx[13] === undefined && !("placement" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'placement'");
    		}

    		if (/*action*/ ctx[3] === undefined && !("action" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'action'");
    		}

    		if (/*preventDefault*/ ctx[4] === undefined && !("preventDefault" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'preventDefault'");
    		}

    		if (/*stopPropagation*/ ctx[5] === undefined && !("stopPropagation" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'stopPropagation'");
    		}

    		if (/*overlayColor*/ ctx[6] === undefined && !("overlayColor" in props)) {
    			console.warn("<PopoverContent> was created without expected prop 'overlayColor'");
    		}
    	}

    	get arrowColor() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set arrowColor(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get targetRef() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set targetRef(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get arrow() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set arrow(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placement() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get preventDefault() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set preventDefault(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stopPropagation() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stopPropagation(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlayColor() {
    		throw new Error("<PopoverContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlayColor(value) {
    		throw new Error("<PopoverContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\Popover.svelte generated by Svelte v3.18.2 */
    const file$4 = "src\\components\\common\\Popover.svelte";
    const get_content_slot_changes = dirty => ({ open: dirty & /*open*/ 1 });
    const get_content_slot_context = ctx => ({ open: /*open*/ ctx[0] });
    const get_target_slot_changes = dirty => ({ open: dirty & /*open*/ 1 });
    const get_target_slot_context = ctx => ({ open: /*open*/ ctx[0] });

    // (15:2) {#if open}
    function create_if_block$2(ctx) {
    	let current;

    	const content = new PopoverContent({
    			props: {
    				placement: /*placement*/ ctx[4],
    				targetRef: /*targetRef*/ ctx[9],
    				zIndex: /*zIndex*/ ctx[2],
    				arrow: /*arrow*/ ctx[3],
    				action: /*action*/ ctx[1],
    				overlayColor: /*overlayColor*/ ctx[6],
    				arrowColor: /*arrowColor*/ ctx[5],
    				preventDefault: /*preventDefault*/ ctx[7],
    				stopPropagation: /*stopPropagation*/ ctx[8],
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	content.$on("open", /*onOpen*/ ctx[10]);
    	content.$on("setOpen", /*setOpen*/ ctx[11]);

    	const block = {
    		c: function create() {
    			create_component(content.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(content, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const content_changes = {};
    			if (dirty & /*placement*/ 16) content_changes.placement = /*placement*/ ctx[4];
    			if (dirty & /*targetRef*/ 512) content_changes.targetRef = /*targetRef*/ ctx[9];
    			if (dirty & /*zIndex*/ 4) content_changes.zIndex = /*zIndex*/ ctx[2];
    			if (dirty & /*arrow*/ 8) content_changes.arrow = /*arrow*/ ctx[3];
    			if (dirty & /*action*/ 2) content_changes.action = /*action*/ ctx[1];
    			if (dirty & /*overlayColor*/ 64) content_changes.overlayColor = /*overlayColor*/ ctx[6];
    			if (dirty & /*arrowColor*/ 32) content_changes.arrowColor = /*arrowColor*/ ctx[5];
    			if (dirty & /*preventDefault*/ 128) content_changes.preventDefault = /*preventDefault*/ ctx[7];
    			if (dirty & /*stopPropagation*/ 256) content_changes.stopPropagation = /*stopPropagation*/ ctx[8];

    			if (dirty & /*$$scope, open*/ 4194305) {
    				content_changes.$$scope = { dirty, ctx };
    			}

    			content.$set(content_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(content, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(15:2) {#if open}",
    		ctx
    	});

    	return block;
    }

    // (16:4) <Content on:open={onOpen} on:setOpen={setOpen} {placement} {targetRef} {zIndex} {arrow} {action} {overlayColor} {arrowColor} {preventDefault} {stopPropagation}>
    function create_default_slot(ctx) {
    	let current;
    	const content_slot_template = /*$$slots*/ ctx[20].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[22], get_content_slot_context);

    	const block = {
    		c: function create() {
    			if (content_slot) content_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (content_slot) {
    				content_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (content_slot && content_slot.p && dirty & /*$$scope, open*/ 4194305) {
    				content_slot.p(get_slot_context(content_slot_template, ctx, /*$$scope*/ ctx[22], get_content_slot_context), get_slot_changes(content_slot_template, /*$$scope*/ ctx[22], dirty, get_content_slot_changes));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (content_slot) content_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(16:4) <Content on:open={onOpen} on:setOpen={setOpen} {placement} {targetRef} {zIndex} {arrow} {action} {overlayColor} {arrowColor} {preventDefault} {stopPropagation}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div1;
    	let div0;
    	let div0_style_value;
    	let t;
    	let current;
    	let dispose;
    	const target_slot_template = /*$$slots*/ ctx[20].target;
    	const target_slot = create_slot(target_slot_template, ctx, /*$$scope*/ ctx[22], get_target_slot_context);
    	let if_block = /*open*/ ctx[0] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (target_slot) target_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "target svelte-555tz3");

    			attr_dev(div0, "style", div0_style_value = /*open*/ ctx[0]
    			? `z-index: ${/*zIndex*/ ctx[2] + 10}`
    			: "");

    			add_location(div0, file$4, 11, 2, 150);
    			attr_dev(div1, "class", "popover svelte-555tz3");
    			add_location(div1, file$4, 10, 0, 126);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (target_slot) {
    				target_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[21](div0);
    			append_dev(div1, t);
    			if (if_block) if_block.m(div1, null);
    			current = true;

    			dispose = [
    				listen_dev(div0, "click", /*onClick*/ ctx[13], false, false, false),
    				listen_dev(div0, "touchend", /*onTouchEnd*/ ctx[12], false, false, false),
    				listen_dev(div0, "mouseover", /*onMouseOver*/ ctx[14], false, false, false),
    				listen_dev(div0, "mouseout", /*onMouseOut*/ ctx[15], false, false, false)
    			];
    		},
    		p: function update(ctx, [dirty]) {
    			if (target_slot && target_slot.p && dirty & /*$$scope, open*/ 4194305) {
    				target_slot.p(get_slot_context(target_slot_template, ctx, /*$$scope*/ ctx[22], get_target_slot_context), get_slot_changes(target_slot_template, /*$$scope*/ ctx[22], dirty, get_target_slot_changes));
    			}

    			if (!current || dirty & /*open, zIndex*/ 5 && div0_style_value !== (div0_style_value = /*open*/ ctx[0]
    			? `z-index: ${/*zIndex*/ ctx[2] + 10}`
    			: "")) {
    				attr_dev(div0, "style", div0_style_value);
    			}

    			if (/*open*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(target_slot, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(target_slot, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (target_slot) target_slot.d(detaching);
    			/*div0_binding*/ ctx[21](null);
    			if (if_block) if_block.d();
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const DEFAULT_ZINDEX = 1000;

    function instance$5($$self, $$props, $$invalidate) {
    	let targetRef;
    	const dispatch = createEventDispatcher();

    	const onOpen = () => {
    		dispatch("open");
    	};

    	let { action = "click" } = $$props;
    	let { zIndex = DEFAULT_ZINDEX } = $$props;
    	let { arrow = true } = $$props;
    	let { placement = "auto" } = $$props;
    	let { arrowColor = "" } = $$props;
    	let { overlayColor } = $$props;
    	let { preventDefault = false } = $$props;
    	let { stopPropagation = false } = $$props;
    	let { open = false } = $$props;

    	const setOpen = () => {
    		$$invalidate(0, open = !open);

    		if (!open) {
    			dispatch("close");
    		}
    	};

    	const eventClick = e => {
    		if (preventDefault) e.preventDefault();
    		if (stopPropagation) e.stopPropagation();
    		setOpen();
    	};

    	const eventMouseOut = ({ relatedTarget }) => {
    		if (relatedTarget.id === "overlay" && !open) {
    			setOpen();
    		}
    	};

    	const onTouchEnd = action === "click" ? eventClick : null;
    	const onClick = action === "click" ? eventClick : null;
    	const setOpenTrue = () => $$invalidate(0, open = true);
    	const onMouseOver = action === "hover" ? setOpenTrue : null;
    	const onMouseOut = action === "hover" ? eventMouseOut : null;

    	const writable_props = [
    		"action",
    		"zIndex",
    		"arrow",
    		"placement",
    		"arrowColor",
    		"overlayColor",
    		"preventDefault",
    		"stopPropagation",
    		"open"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Popover> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(9, targetRef = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("action" in $$props) $$invalidate(1, action = $$props.action);
    		if ("zIndex" in $$props) $$invalidate(2, zIndex = $$props.zIndex);
    		if ("arrow" in $$props) $$invalidate(3, arrow = $$props.arrow);
    		if ("placement" in $$props) $$invalidate(4, placement = $$props.placement);
    		if ("arrowColor" in $$props) $$invalidate(5, arrowColor = $$props.arrowColor);
    		if ("overlayColor" in $$props) $$invalidate(6, overlayColor = $$props.overlayColor);
    		if ("preventDefault" in $$props) $$invalidate(7, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(8, stopPropagation = $$props.stopPropagation);
    		if ("open" in $$props) $$invalidate(0, open = $$props.open);
    		if ("$$scope" in $$props) $$invalidate(22, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {
    			targetRef,
    			action,
    			zIndex,
    			arrow,
    			placement,
    			arrowColor,
    			overlayColor,
    			preventDefault,
    			stopPropagation,
    			open
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("targetRef" in $$props) $$invalidate(9, targetRef = $$props.targetRef);
    		if ("action" in $$props) $$invalidate(1, action = $$props.action);
    		if ("zIndex" in $$props) $$invalidate(2, zIndex = $$props.zIndex);
    		if ("arrow" in $$props) $$invalidate(3, arrow = $$props.arrow);
    		if ("placement" in $$props) $$invalidate(4, placement = $$props.placement);
    		if ("arrowColor" in $$props) $$invalidate(5, arrowColor = $$props.arrowColor);
    		if ("overlayColor" in $$props) $$invalidate(6, overlayColor = $$props.overlayColor);
    		if ("preventDefault" in $$props) $$invalidate(7, preventDefault = $$props.preventDefault);
    		if ("stopPropagation" in $$props) $$invalidate(8, stopPropagation = $$props.stopPropagation);
    		if ("open" in $$props) $$invalidate(0, open = $$props.open);
    	};

    	return [
    		open,
    		action,
    		zIndex,
    		arrow,
    		placement,
    		arrowColor,
    		overlayColor,
    		preventDefault,
    		stopPropagation,
    		targetRef,
    		onOpen,
    		setOpen,
    		onTouchEnd,
    		onClick,
    		onMouseOver,
    		onMouseOut,
    		dispatch,
    		eventClick,
    		eventMouseOut,
    		setOpenTrue,
    		$$slots,
    		div0_binding,
    		$$scope
    	];
    }

    class Popover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			action: 1,
    			zIndex: 2,
    			arrow: 3,
    			placement: 4,
    			arrowColor: 5,
    			overlayColor: 6,
    			preventDefault: 7,
    			stopPropagation: 8,
    			open: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Popover",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*overlayColor*/ ctx[6] === undefined && !("overlayColor" in props)) {
    			console.warn("<Popover> was created without expected prop 'overlayColor'");
    		}
    	}

    	get action() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get arrow() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set arrow(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placement() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get arrowColor() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set arrowColor(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlayColor() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlayColor(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get preventDefault() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set preventDefault(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stopPropagation() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stopPropagation(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\Menu.svelte generated by Svelte v3.18.2 */
    const file$5 = "src\\components\\common\\Menu.svelte";
    const get_menu_slot_changes = dirty => ({});
    const get_menu_slot_context = ctx => ({});

    // (26:4) <div slot="target">
    function create_target_slot(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "slot", "target");
    			attr_dev(div, "class", "svelte-1tug91u");
    			add_location(div, file$5, 25, 4, 555);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_target_slot.name,
    		type: "slot",
    		source: "(26:4) <div slot=\\\"target\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:4) <div slot="content">
    function create_content_slot(ctx) {
    	let div0;
    	let div1;
    	let current;
    	let dispose;
    	const menu_slot_template = /*$$slots*/ ctx[3].menu;
    	const menu_slot = create_slot(menu_slot_template, ctx, /*$$scope*/ ctx[4], get_menu_slot_context);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div1 = element("div");
    			if (menu_slot) menu_slot.c();
    			attr_dev(div1, "class", "menu svelte-1tug91u");
    			add_location(div1, file$5, 26, 24, 618);
    			attr_dev(div0, "slot", "content");
    			attr_dev(div0, "class", "svelte-1tug91u");
    			add_location(div0, file$5, 26, 4, 598);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, div1);

    			if (menu_slot) {
    				menu_slot.m(div1, null);
    			}

    			current = true;

    			dispose = listen_dev(
    				div1,
    				"click",
    				function () {
    					if (is_function(/*openstate*/ ctx[5] = false)) (/*openstate*/ ctx[5] = false).apply(this, arguments);
    				},
    				false,
    				false,
    				false
    			);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (menu_slot && menu_slot.p && dirty & /*$$scope*/ 16) {
    				menu_slot.p(get_slot_context(menu_slot_template, ctx, /*$$scope*/ ctx[4], get_menu_slot_context), get_slot_changes(menu_slot_template, /*$$scope*/ ctx[4], dirty, get_menu_slot_changes));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (menu_slot) menu_slot.d(detaching);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot.name,
    		type: "slot",
    		source: "(27:4) <div slot=\\\"content\\\">",
    		ctx
    	});

    	return block;
    }

    // (25:2) <Popover arrowColor="#fff" action="hover" placement={placement} overlayColor="transparent" arrow={false} let:open={openstate}>
    function create_default_slot$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(25:2) <Popover arrowColor=\\\"#fff\\\" action=\\\"hover\\\" placement={placement} overlayColor=\\\"transparent\\\" arrow={false} let:open={openstate}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div1;
    	let div0;
    	let t1;
    	let current;

    	const popover = new Popover({
    			props: {
    				arrowColor: "#fff",
    				action: "hover",
    				placement: /*placement*/ ctx[0],
    				overlayColor: "transparent",
    				arrow: false,
    				$$slots: {
    					default: [
    						create_default_slot$1,
    						({ open: openstate }) => ({ 5: openstate }),
    						({ open: openstate }) => openstate ? 32 : 0
    					],
    					content: [
    						create_content_slot,
    						({ open: openstate }) => ({ 5: openstate }),
    						({ open: openstate }) => openstate ? 32 : 0
    					],
    					target: [
    						create_target_slot,
    						({ open: openstate }) => ({ 5: openstate }),
    						({ open: openstate }) => openstate ? 32 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = `${openstate}`;
    			t1 = space();
    			create_component(popover.$$.fragment);
    			attr_dev(div0, "class", "svelte-1tug91u");
    			add_location(div0, file$5, 23, 2, 399);
    			attr_dev(div1, "class", "svelte-1tug91u");
    			add_location(div1, file$5, 22, 0, 391);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			mount_component(popover, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const popover_changes = {};
    			if (dirty & /*placement*/ 1) popover_changes.placement = /*placement*/ ctx[0];

    			if (dirty & /*$$scope, openstate*/ 48) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			popover.$set(popover_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(popover);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	var dispatch;
    	let { item } = $$props;
    	let { placement = "bottom-start" } = $$props;
    	dispatch = createEventDispatcher();
    	const writable_props = ["item", "placement"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Menu> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(1, item = $$props.item);
    		if ("placement" in $$props) $$invalidate(0, placement = $$props.placement);
    		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return { dispatch, item, placement };
    	};

    	$$self.$inject_state = $$props => {
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("item" in $$props) $$invalidate(1, item = $$props.item);
    		if ("placement" in $$props) $$invalidate(0, placement = $$props.placement);
    	};

    	return [placement, item, dispatch, $$slots, $$scope];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { item: 1, placement: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[1] === undefined && !("item" in props)) {
    			console.warn("<Menu> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placement() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\MenuRow.svelte generated by Svelte v3.18.2 */
    const file$6 = "src\\components\\common\\MenuRow.svelte";
    const get_label_slot_changes = dirty => ({});
    const get_label_slot_context = ctx => ({});

    function create_fragment$7(ctx) {
    	let div1;
    	let button;
    	let div0;
    	let icon;
    	let t;
    	let label;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
    	const label_slot_template = /*$$slots*/ ctx[3].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[2], get_label_slot_context);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			div0 = element("div");
    			icon = element("icon");
    			if (default_slot) default_slot.c();
    			t = space();
    			label = element("label");
    			if (label_slot) label_slot.c();
    			attr_dev(icon, "flex", "initial");
    			attr_dev(icon, "class", "svelte-eg4xd3");
    			add_location(icon, file$6, 36, 4, 682);
    			attr_dev(label, "flex", "");
    			attr_dev(label, "class", "svelte-eg4xd3");
    			add_location(label, file$6, 37, 4, 728);
    			attr_dev(div0, "layout", "row");
    			add_location(div0, file$6, 35, 2, 658);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "svelte-eg4xd3");
    			add_location(button, file$6, 34, 0, 616);
    			add_location(div1, file$6, 33, 0, 610);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			append_dev(div0, icon);

    			if (default_slot) {
    				default_slot.m(icon, null);
    			}

    			append_dev(div0, t);
    			append_dev(div0, label);

    			if (label_slot) {
    				label_slot.m(label, null);
    			}

    			current = true;
    			dispose = listen_dev(button, "click", /*click*/ ctx[0], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
    			}

    			if (label_slot && label_slot.p && dirty & /*$$scope*/ 4) {
    				label_slot.p(get_slot_context(label_slot_template, ctx, /*$$scope*/ ctx[2], get_label_slot_context), get_slot_changes(label_slot_template, /*$$scope*/ ctx[2], dirty, get_label_slot_changes));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			if (label_slot) label_slot.d(detaching);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let dispatch = createEventDispatcher();

    	let click = function () {
    		dispatch("clicked");
    	};

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("click" in $$props) $$invalidate(0, click = $$props.click);
    	};

    	return [click, dispatch, $$scope, $$slots];
    }

    class MenuRow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MenuRow",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    var dist = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	 module.exports = factory() ;
    }(commonjsGlobal, (function () {
    function noop() {}

    function assign(target) {
    	var k,
    		source,
    		i = 1,
    		len = arguments.length;
    	for (; i < len; i++) {
    		source = arguments[i];
    		for (k in source) target[k] = source[k];
    	}

    	return target;
    }

    function appendNode(node, target) {
    	target.appendChild(node);
    }

    function insertNode(node, target, anchor) {
    	target.insertBefore(node, anchor);
    }

    function detachNode(node) {
    	node.parentNode.removeChild(node);
    }

    function destroyEach(iterations) {
    	for (var i = 0; i < iterations.length; i += 1) {
    		if (iterations[i]) iterations[i].d();
    	}
    }

    function createElement(name) {
    	return document.createElement(name);
    }

    function createText(data) {
    	return document.createTextNode(data);
    }

    function addListener(node, event, handler) {
    	node.addEventListener(event, handler, false);
    }

    function removeListener(node, event, handler) {
    	node.removeEventListener(event, handler, false);
    }

    function setAttribute(node, attribute, value) {
    	node.setAttribute(attribute, value);
    }

    function setStyle(node, key, value) {
    	node.style.setProperty(key, value);
    }

    function blankObject() {
    	return Object.create(null);
    }

    function destroy(detach) {
    	this.destroy = noop;
    	this.fire('destroy');
    	this.set = this.get = noop;

    	if (detach !== false) this._fragment.u();
    	this._fragment.d();
    	this._fragment = this._state = null;
    }

    function differs(a, b) {
    	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }

    function dispatchObservers(component, group, changed, newState, oldState) {
    	for (var key in group) {
    		if (!changed[key]) continue;

    		var newValue = newState[key];
    		var oldValue = oldState[key];

    		var callbacks = group[key];
    		if (!callbacks) continue;

    		for (var i = 0; i < callbacks.length; i += 1) {
    			var callback = callbacks[i];
    			if (callback.__calling) continue;

    			callback.__calling = true;
    			callback.call(component, newValue, oldValue);
    			callback.__calling = false;
    		}
    	}
    }

    function fire(eventName, data) {
    	var handlers =
    		eventName in this._handlers && this._handlers[eventName].slice();
    	if (!handlers) return;

    	for (var i = 0; i < handlers.length; i += 1) {
    		handlers[i].call(this, data);
    	}
    }

    function get(key) {
    	return key ? this._state[key] : this._state;
    }

    function init(component, options) {
    	component.options = options;

    	component._observers = { pre: blankObject(), post: blankObject() };
    	component._handlers = blankObject();
    	component._root = options._root || component;
    	component._bind = options._bind;
    }

    function observe(key, callback, options) {
    	var group = options && options.defer
    		? this._observers.post
    		: this._observers.pre;

    	(group[key] || (group[key] = [])).push(callback);

    	if (!options || options.init !== false) {
    		callback.__calling = true;
    		callback.call(this, this._state[key]);
    		callback.__calling = false;
    	}

    	return {
    		cancel: function() {
    			var index = group[key].indexOf(callback);
    			if (~index) group[key].splice(index, 1);
    		}
    	};
    }

    function on(eventName, handler) {
    	if (eventName === 'teardown') return this.on('destroy', handler);

    	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
    	handlers.push(handler);

    	return {
    		cancel: function() {
    			var index = handlers.indexOf(handler);
    			if (~index) handlers.splice(index, 1);
    		}
    	};
    }

    function set(newState) {
    	this._set(assign({}, newState));
    	if (this._root._lock) return;
    	this._root._lock = true;
    	callAll(this._root._beforecreate);
    	callAll(this._root._oncreate);
    	callAll(this._root._aftercreate);
    	this._root._lock = false;
    }

    function _set(newState) {
    	var oldState = this._state,
    		changed = {},
    		dirty = false;

    	for (var key in newState) {
    		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
    	}
    	if (!dirty) return;

    	this._state = assign({}, oldState, newState);
    	this._recompute(changed, this._state);
    	if (this._bind) this._bind(changed, this._state);
    	dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
    	this._fragment.p(changed, this._state);
    	dispatchObservers(this, this._observers.post, changed, this._state, oldState);
    }

    function callAll(fns) {
    	while (fns && fns.length) fns.pop()();
    }

    function _mount(target, anchor) {
    	this._fragment.m(target, anchor);
    }

    function _unmount() {
    	this._fragment.u();
    }

    var proto = {
    	destroy: destroy,
    	get: get,
    	fire: fire,
    	observe: observe,
    	on: on,
    	set: set,
    	teardown: destroy,
    	_recompute: noop,
    	_set: _set,
    	_mount: _mount,
    	_unmount: _unmount
    };

    var t = {};
    var exec = function exec(command) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        document.execCommand(command, false, value);
    };
    var getTagsRecursive = function getTagsRecursive(element, tags) {
        tags = tags || (element && element.tagName ? [element.tagName] : []);
        if (element && element.parentNode) {
            element = element.parentNode;
        } else {
            return tags;
        }
        var tag = element.tagName;
        if (element.style && element.getAttribute) {
            [element.style.textAlign || element.getAttribute('align'), element.style.color || tag === 'FONT' && 'forecolor', element.style.backgroundColor && 'backcolor'].filter(function (item) {
                return item;
            }).forEach(function (item) {
                return tags.push(item);
            });
        }
        if (tag === 'DIV') {
            return tags;
        }
        tags.push(tag);
        return getTagsRecursive(element, tags).filter(function (_tag) {
            return _tag != null;
        });
    };
    var saveRange = function saveRange(editor) {
        var documentSelection = document.getSelection();
        t.range = null;
        if (documentSelection.rangeCount) {
            var savedRange = t.range = documentSelection.getRangeAt(0);
            var range = document.createRange();
            var rangeStart = void 0;
            range.selectNodeContents(editor);
            range.setEnd(savedRange.startContainer, savedRange.startOffset);
            rangeStart = (range + '').length;
            t.metaRange = {
                start: rangeStart,
                end: rangeStart + (savedRange + '').length
            };
        }
    };
    var restoreRange = function restoreRange(editor) {
        var metaRange = t.metaRange;
        var savedRange = t.range;
        var documentSelection = document.getSelection();
        var range = void 0;
        if (!savedRange) {
            return;
        }
        if (metaRange && metaRange.start !== metaRange.end) {
            var charIndex = 0,
                nodeStack = [editor],
                node = void 0,
                foundStart = false,
                stop = false;
            range = document.createRange();
            while (!stop && (node = nodeStack.pop())) {
                if (node.nodeType === 3) {
                    var nextCharIndex = charIndex + node.length;
                    if (!foundStart && metaRange.start >= charIndex && metaRange.start <= nextCharIndex) {
                        range.setStart(node, metaRange.start - charIndex);
                        foundStart = true;
                    }
                    if (foundStart && metaRange.end >= charIndex && metaRange.end <= nextCharIndex) {
                        range.setEnd(node, metaRange.end - charIndex);
                        stop = true;
                    }
                    charIndex = nextCharIndex;
                } else {
                    var cn = node.childNodes;
                    var i = cn.length;
                    while (i > 0) {
                        i -= 1;
                        nodeStack.push(cn[i]);
                    }
                }
            }
        }
        documentSelection.removeAllRanges();
        documentSelection.addRange(range || savedRange);
    };
    var cleanHtml = function cleanHtml(input) {
        var html = input.match(/<!--StartFragment-->(.*?)<!--EndFragment-->/);
        var output = html && html[1] || input;
        output = output.replace(/\r?\n|\r/g, ' ').replace(/<!--(.*?)-->/g, '').replace(new RegExp('<(/)*(meta|link|span|\\?xml:|st1:|o:|font|w:sdt)(.*?)>', 'gi'), '').replace(/<!\[if !supportLists\]>(.*?)<!\[endif\]>/gi, '').replace(/style="[^"]*"/gi, '').replace(/style='[^']*'/gi, '').replace(/&nbsp;/gi, ' ').replace(/>(\s+)</g, '><').replace(/class="[^"]*"/gi, '').replace(/class='[^']*'/gi, '').replace(/<[^/].*?>/g, function (i) {
            return i.split(/[ >]/g)[0] + '>';
        }).trim();
        output = removeBadTags(output);
        return output;
    };
    var unwrap = function unwrap(wrapper) {
        var docFrag = document.createDocumentFragment();
        while (wrapper.firstChild) {
            var child = wrapper.removeChild(wrapper.firstChild);
            docFrag.appendChild(child);
        }
        // replace wrapper with document fragment
        wrapper.parentNode.replaceChild(docFrag, wrapper);
    };
    var removeBlockTagsRecursive = function removeBlockTagsRecursive(elements, tagsToRemove) {
        Array.from(elements).forEach(function (item) {
            if (tagsToRemove.some(function (tag) {
                return tag === item.tagName.toLowerCase();
            })) {
                if (item.children.length) {
                    removeBlockTagsRecursive(item.children, tagsToRemove);
                }
                unwrap(item);
            }
        });
    };
    var getActionBtns = function getActionBtns(actions) {
        return Object.keys(actions).map(function (action) {
            return actions[action];
        });
    };
    var getNewActionObj = function getNewActionObj(actions) {
        var userActions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        if (userActions && userActions.length) {
            var newActions = {};
            userActions.forEach(function (action) {
                if (typeof action === 'string') {
                    newActions[action] = Object.assign({}, actions[action]);
                } else if (actions[action.name]) {
                    newActions[action.name] = Object.assign(actions[action.name], action);
                } else {
                    newActions[action.name] = Object.assign({}, action);
                }
            });
            return newActions;
        } else {
            return actions;
        }
    };
    var removeBadTags = function removeBadTags(html) {
        ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'].forEach(function (badTag) {
            html = html.replace(new RegExp('<' + badTag + '.*?' + badTag + '(.*?)>', 'gi'), '');
        });
        return html;
    };
    var isEditorClick = function isEditorClick(target, editorWrapper) {
        if (target === editorWrapper) {
            return true;
        }
        if (target.parentElement) {
            return isEditorClick(target.parentElement, editorWrapper);
        }
        return false;
    };

    var linkSvg = '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M31.1 48.9l-6.7 6.7c-.8.8-1.6.9-2.1.9s-1.4-.1-2.1-.9L15 50.4c-1.1-1.1-1.1-3.1 0-4.2l6.1-6.1.2-.2 6.5-6.5c-1.2-.6-2.5-.9-3.8-.9-2.3 0-4.6.9-6.3 2.6L11 41.8c-3.5 3.5-3.5 9.2 0 12.7l5.2 5.2c1.7 1.7 4 2.6 6.3 2.6s4.6-.9 6.3-2.6l6.7-6.7c2.5-2.6 3.1-6.7 1.5-10l-5.9 5.9zM38.7 22.5l6.7-6.7c.8-.8 1.6-.9 2.1-.9s1.4.1 2.1.9l5.2 5.2c1.1 1.1 1.1 3.1 0 4.2l-6.1 6.1-.2.2L42 38c1.2.6 2.5.9 3.8.9 2.3 0 4.6-.9 6.3-2.6l6.7-6.7c3.5-3.5 3.5-9.2 0-12.7l-5.2-5.2c-1.7-1.7-4-2.6-6.3-2.6s-4.6.9-6.3 2.6l-6.7 6.7c-2.7 2.7-3.3 6.9-1.7 10.2l6.1-6.1c0 .1 0 .1 0 0z"></path><path d="M44.2 30.5c.2-.2.4-.6.4-.9 0-.3-.1-.6-.4-.9l-2.3-2.3c-.3-.2-.6-.4-.9-.4-.3 0-.6.1-.9.4L25.9 40.6c-.2.2-.4.6-.4.9 0 .3.1.6.4.9l2.3 2.3c.2.2.6.4.9.4.3 0 .6-.1.9-.4l14.2-14.2zM49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9z"></path></svg>';
    var unlinkSvg = '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M30.9 49.1l-6.7 6.7c-.8.8-1.6.9-2.1.9s-1.4-.1-2.1-.9l-5.2-5.2c-1.1-1.1-1.1-3.1 0-4.2l6.1-6.1.2-.2 6.5-6.5c-1.2-.6-2.5-.9-3.8-.9-2.3 0-4.6.9-6.3 2.6L10.8 42c-3.5 3.5-3.5 9.2 0 12.7l5.2 5.2c1.7 1.7 4 2.6 6.3 2.6s4.6-.9 6.3-2.6l6.7-6.7C38 50.5 38.6 46.3 37 43l-6.1 6.1zM38.5 22.7l6.7-6.7c.8-.8 1.6-.9 2.1-.9s1.4.1 2.1.9l5.2 5.2c1.1 1.1 1.1 3.1 0 4.2l-6.1 6.1-.2.2-6.5 6.5c1.2.6 2.5.9 3.8.9 2.3 0 4.6-.9 6.3-2.6l6.7-6.7c3.5-3.5 3.5-9.2 0-12.7l-5.2-5.2c-1.7-1.7-4-2.6-6.3-2.6s-4.6.9-6.3 2.6l-6.7 6.7c-2.7 2.7-3.3 6.9-1.7 10.2l6.1-6.1z"></path><path d="M44.1 30.7c.2-.2.4-.6.4-.9 0-.3-.1-.6-.4-.9l-2.3-2.3c-.2-.2-.6-.4-.9-.4-.3 0-.6.1-.9.4L25.8 40.8c-.2.2-.4.6-.4.9 0 .3.1.6.4.9l2.3 2.3c.2.2.6.4.9.4.3 0 .6-.1.9-.4l14.2-14.2zM41.3 55.8v-5h22.2v5H41.3z"></path></svg>';
    var actions = {
        viewHtml: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path fill="none" stroke="currentColor" stroke-width="8" stroke-miterlimit="10" d="M26.9 17.9L9 36.2 26.9 54M45 54l17.9-18.3L45 17.9"></path></svg>',
            title: 'View HTML',
            result: function result() {
                var _this = this;
                var actionObj = this.get('actionObj');
                this.helper.showEditor = !this.helper.showEditor;
                this.refs.editor.style.display = this.helper.showEditor ? 'block' : 'none';
                this.refs.raw.style.display = this.helper.showEditor ? 'none' : 'block';
                if (this.helper.showEditor) {
                    this.refs.editor.innerHTML = this.refs.raw.value;
                } else {
                    this.refs.raw.value = this.refs.editor.innerHTML;
                }
                setTimeout(function () {
                    Object.keys(actionObj).forEach(function (action) {
                        return actionObj[action].disabled = !_this.helper.showEditor;
                    });
                    actionObj.viewHtml.disabled = false;
                    actionObj.viewHtml.active = !_this.helper.showEditor;
                    _this.set({ actionBtns: getActionBtns(actionObj), actionObj: actionObj });
                });
            }
        },
        undo: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M61.2 51.2c0-5.1-2.1-9.7-5.4-13.1-3.3-3.3-8-5.4-13.1-5.4H26.1v-12L10.8 36l15.3 15.3V39.1h16.7c3.3 0 6.4 1.3 8.5 3.5 2.2 2.2 3.5 5.2 3.5 8.5h6.4z"></path></svg>',
            title: 'Undo',
            result: function result() {
                return exec('undo');
            }
        },
        redo: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M10.8 51.2c0-5.1 2.1-9.7 5.4-13.1 3.3-3.3 8-5.4 13.1-5.4H46v-12L61.3 36 45.9 51.3V39.1H29.3c-3.3 0-6.4 1.3-8.5 3.5-2.2 2.2-3.5 5.2-3.5 8.5h-6.5z"></path></svg>',
            title: 'Redo',
            result: function result() {
                return exec('redo');
            }
        },
        b: {
            icon: '<b>B</b>',
            title: 'Bold',
            result: function result() {
                return exec('bold');
            }
        },
        i: {
            icon: '<i>I</i>',
            title: 'Italic',
            result: function result() {
                return exec('italic');
            }
        },
        u: {
            icon: '<u>U</u>',
            title: 'Underline',
            result: function result() {
                return exec('underline');
            }
        },
        strike: {
            icon: '<strike>S</strike>',
            title: 'Strike-through',
            result: function result() {
                return exec('strikeThrough');
            }
        },
        sup: {
            icon: 'A<sup>2</sup>',
            title: 'Superscript',
            result: function result() {
                return exec('superscript');
            }
        },
        sub: {
            icon: 'A<sub>2</sub>',
            title: 'Subscript',
            result: function result() {
                return exec('subscript');
            }
        },
        h1: {
            icon: '<b>H<sub>1</sub></b>',
            title: 'Heading 1',
            result: function result() {
                return exec('formatBlock', '<H1>');
            }
        },
        h2: {
            icon: '<b>H<sub>2</sub></b>',
            title: 'Heading 2',
            result: function result() {
                return exec('formatBlock', '<H2>');
            }
        },
        p: {
            icon: '&#182;',
            title: 'Paragraph',
            result: function result() {
                return exec('formatBlock', '<P>');
            }
        },
        blockquote: {
            icon: '&#8220; &#8221;',
            title: 'Quote',
            result: function result() {
                return exec('formatBlock', '<BLOCKQUOTE>');
            }
        },
        ol: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M27 14h36v8H27zM27 50h36v8H27zM27 32h36v8H27zM11.8 15.8V22h1.8v-7.8h-1.5l-2.1 1 .3 1.3zM12.1 38.5l.7-.6c1.1-1 2.1-2.1 2.1-3.4 0-1.4-1-2.4-2.7-2.4-1.1 0-2 .4-2.6.8l.5 1.3c.4-.3 1-.6 1.7-.6.9 0 1.3.5 1.3 1.1 0 .9-.9 1.8-2.6 3.3l-1 .9V40H15v-1.5h-2.9zM13.3 53.9c1-.4 1.4-1 1.4-1.8 0-1.1-.9-1.9-2.6-1.9-1 0-1.9.3-2.4.6l.4 1.3c.3-.2 1-.5 1.6-.5.8 0 1.2.3 1.2.8 0 .7-.8.9-1.4.9h-.7v1.3h.7c.8 0 1.6.3 1.6 1.1 0 .6-.5 1-1.4 1-.7 0-1.5-.3-1.8-.5l-.4 1.4c.5.3 1.3.6 2.3.6 2 0 3.2-1 3.2-2.4 0-1.1-.8-1.8-1.7-1.9z"></path></svg>',
            title: 'Ordered List',
            result: function result() {
                return exec('insertOrderedList');
            }
        },
        ul: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M27 14h36v8H27zM27 50h36v8H27zM9 50h9v8H9zM9 32h9v8H9zM9 14h9v8H9zM27 32h36v8H27z"></path></svg>',
            title: 'Unordered List',
            result: function result() {
                return exec('insertUnorderedList');
            }
        },
        hr: {
            icon: '&#8213;',
            title: 'Horizontal Line',
            result: function result() {
                return exec('insertHorizontalRule');
            }
        },
        left: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M9 14h54v8H9zM9 50h54v8H9zM9 32h36v8H9z"></path></svg>',
            title: 'Justify left',
            result: function result() {
                return exec('justifyLeft');
            }
        },
        right: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M9 14h54v8H9zM9 50h54v8H9zM27 32h36v8H27z"></path></svg>',
            title: 'Justify right',
            result: function result() {
                return exec('justifyRight');
            }
        },
        center: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M9 14h54v8H9zM9 50h54v8H9zM18 32h36v8H18z"></path></svg>',
            title: 'Justify center',
            result: function result() {
                return exec('justifyCenter');
            }
        },
        justify: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M9 14h54v8H9zM9 50h54v8H9zM9 32h54v8H9z"></path></svg>',
            title: 'Justify full',
            result: function result() {
                return exec('justifyFull');
            }
        },
        a: {
            icon: linkSvg,
            title: 'Insert link',
            result: function result() {
                var _this2 = this;

                var actionObj = this.get('actionObj');
                if (actionObj.a.active) {
                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(document.getSelection().focusNode);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    exec('unlink');
                    actionObj.a.title = 'Insert link';
                    actionObj.a.icon = linkSvg;
                    this.set({ actionBtns: getActionBtns(actionObj), actionObj: actionObj });
                } else {
                    saveRange(this.refs.editor);
                    this.modal.set({ show: true, event: 'linkUrl', title: 'Insert link', label: 'Url' });
                    if (!this.helper.link) {
                        this.helper.link = true;
                        this.modal.on('linkUrl', function (url) {
                            restoreRange(_this2.refs.editor);
                            exec('createLink', url);
                            actionObj.a.title = 'Unlink';
                            actionObj.a.icon = unlinkSvg;
                            _this2.set({ actionBtns: getActionBtns(actionObj), actionObj: actionObj });
                        });
                    }
                }
            }
        },
        image: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M64 17v38H8V17h56m8-8H0v54h72V9z"></path><path d="M17.5 22C15 22 13 24 13 26.5s2 4.5 4.5 4.5 4.5-2 4.5-4.5-2-4.5-4.5-4.5zM16 50h27L29.5 32zM36 36.2l8.9-8.5L60.2 50H45.9S35.6 35.9 36 36.2z"></path></svg>',
            title: 'Image',
            result: function result() {
                var _this3 = this;

                saveRange(this.refs.editor);
                this.modal.set({ show: true, event: 'imageUrl', title: 'Insert image', label: 'Url' });
                if (!this.helper.image) {
                    this.helper.image = true;
                    this.modal.on('imageUrl', function (url) {
                        restoreRange(_this3.refs.editor);
                        exec('insertImage', url);
                    });
                }
            }
        },
        forecolor: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M32 15h7.8L56 57.1h-7.9l-4-11.1H27.4l-4 11.1h-7.6L32 15zm-2.5 25.4h12.9L36 22.3h-.2l-6.3 18.1z"></path></svg>',
            title: 'Text color',
            colorPicker: true,
            result: function result() {
                showColorPicker.call(this, 'foreColor');
            }
        },
        backcolor: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M36.5 22.3l-6.3 18.1H43l-6.3-18.1z"></path><path d="M9 8.9v54.2h54.1V8.9H9zm39.9 48.2L45 46H28.2l-3.9 11.1h-7.6L32.8 15h7.8l16.2 42.1h-7.9z"></path></svg>',
            title: 'Background color',
            colorPicker: true,
            result: function result() {
                showColorPicker.call(this, 'backColor');
            }
        },
        removeFormat: {
            icon: '<svg viewBox="0 0 72 72" width="17px" height="100%"><path d="M58.2 54.6L52 48.5l3.6-3.6 6.1 6.1 6.4-6.4 3.8 3.8-6.4 6.4 6.1 6.1-3.6 3.6-6.1-6.1-6.4 6.4-3.7-3.8 6.4-6.4zM21.7 52.1H50V57H21.7zM18.8 15.2h34.1v6.4H39.5v24.2h-7.4V21.5H18.8v-6.3z"></path></svg>',
            title: 'Remove format',
            result: function result() {
                var selection = window.getSelection();
                if (!selection.toString().length) {
                    removeBlockTagsRecursive(this.refs.editor.children, this.get('removeFormatTags'));
                    var range = document.createRange();
                    range.selectNodeContents(this.refs.editor);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
                exec('removeFormat');
                selection.removeAllRanges();
            }
        }
    };
    var showColorPicker = function showColorPicker(cmd) {
        var _this4 = this;

        saveRange(this.refs.editor);
        this.colorPicker.set({ show: true, event: cmd });
        if (!this.helper[cmd]) {
            this.helper[cmd] = true;
            this.colorPicker.on(cmd, function (item) {
                if (item.modal) {
                    _this4.modal.set({ show: true, event: 'colorHref', title: 'Text color', label: cmd === 'foreColor' ? 'Text color' : 'Background color' });
                    var command = cmd;
                    if (!_this4.helper[command + 'Modal']) {
                        _this4.helper[command + 'Modal'] = true;
                        _this4.modal.on('colorHref', function (color) {
                            restoreRange(_this4.refs.editor);
                            exec(command, color);
                        });
                    }
                } else {
                    restoreRange(_this4.refs.editor);
                    exec(cmd, item.color);
                }
            });
        }
    };

    /* src/helpers/EditorModal.html generated by Svelte v1.41.2 */
    function data$1() {
    	return {
    		show: false,
    		text: '',
    		event: '',
    		title: '',
    		label: '',
    		error: false
    	};
    }

    var methods$1 = {
    	confirm: function confirm(event) {
    		event.preventDefault();
    		var text = this.get('text');
    		if (text) {
    			this.fire(this.get('event'), text);
    			this.cancel();
    		} else {
    			this.set({ error: true });
    			this.refs.text.focus();
    		}
    	},
    	cancel: function cancel() {
    		this.set({ show: false, text: '', error: false });
    	},
    	hideError: function hideError() {
    		this.set({ error: false });
    	}
    };

    function oncreate$1() {
    	var _this = this;

    	this.observe('show', function (show) {
    		if (show) {
    			setTimeout(function () {
    				_this.refs.text.focus();
    			});
    		}
    	}, { init: false });
    }

    function encapsulateStyles$1(node) {
    	setAttribute(node, "svelte-4009310239", "");
    }

    function add_css$1() {
    	var style = createElement("style");
    	style.id = 'svelte-4009310239-style';
    	style.textContent = "[svelte-4009310239].cl-editor-modal,[svelte-4009310239] .cl-editor-modal{position:absolute;top:37px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);max-width:520px;width:100%;height:140px;backface-visibility:hidden;z-index:11}[svelte-4009310239].cl-editor-overlay,[svelte-4009310239] .cl-editor-overlay{position:absolute;background-color:rgba(255,255,255,.5);height:100%;width:100%;left:0;top:0;z-index:10}[svelte-4009310239].modal-box,[svelte-4009310239] .modal-box{position:absolute;top:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);max-width:500px;width:calc(100% - 20px);padding-bottom:36px;z-index:1;background-color:#FFF;text-align:center;font-size:14px;box-shadow:rgba(0,0,0,.2) 0 2px 3px;-webkit-backface-visibility:hidden;backface-visibility:hidden}[svelte-4009310239].modal-title,[svelte-4009310239] .modal-title{font-size:24px;font-weight:700;margin:0 0 20px;padding:2px 0 4px;display:block;border-bottom:1px solid #EEE;color:#333;background:#fbfcfc}[svelte-4009310239].modal-label,[svelte-4009310239] .modal-label{display:block;position:relative;margin:15px 12px;height:29px;line-height:29px;overflow:hidden}[svelte-4009310239].modal-label input,[svelte-4009310239] .modal-label input{position:absolute;top:0;right:0;height:27px;line-height:25px;border:1px solid #DEDEDE;background:#fff;font-size:14px;max-width:330px;width:70%;padding:0 7px;transition:all 150ms}[svelte-4009310239].modal-label input:focus,[svelte-4009310239] .modal-label input:focus{outline:none}[svelte-4009310239].input-error input,[svelte-4009310239] .input-error input{border:1px solid #e74c3c}[svelte-4009310239].input-info,[svelte-4009310239] .input-info{display:block;text-align:left;height:25px;line-height:25px;transition:all 150ms}[svelte-4009310239].input-info span,[svelte-4009310239] .input-info span{display:block;color:#69878f;background-color:#fbfcfc;border:1px solid #DEDEDE;padding:0 7px;width:150px}[svelte-4009310239].input-error .input-info,[svelte-4009310239] .input-error .input-info{margin-top:-27px}[svelte-4009310239].input-error .msg-error,[svelte-4009310239] .input-error .msg-error{color:#e74c3c}[svelte-4009310239].modal-button,[svelte-4009310239] .modal-button{position:absolute;bottom:10px;right:0;text-decoration:none;color:#FFF;display:block;width:100px;height:35px;line-height:33px;margin:0 10px;background-color:#333;border:none;cursor:pointer;font-family:\"Lato\",Helvetica,Verdana,sans-serif;font-size:16px;transition:all 150ms}[svelte-4009310239].modal-submit,[svelte-4009310239] .modal-submit{right:110px;background:#2bc06a}[svelte-4009310239].modal-reset,[svelte-4009310239] .modal-reset{color:#555;background:#e6e6e6}";
    	appendNode(style, document.head);
    }

    function create_main_fragment$1(state, component) {
    	var div,
    	    div_1,
    	    text,
    	    div_2,
    	    div_3,
    	    span,
    	    text_1,
    	    text_2,
    	    form,
    	    label,
    	    label_class_value,
    	    input,
    	    input_updating = false,
    	    text_3,
    	    span_1,
    	    span_2,
    	    text_4,
    	    text_5,
    	    text_8,
    	    button,
    	    text_10,
    	    button_1;

    	function click_handler(event) {
    		component.cancel();
    	}

    	function submit_handler(event) {
    		component.confirm(event);
    	}

    	function input_input_handler() {
    		input_updating = true;
    		component.set({ text: input.value });
    		input_updating = false;
    	}

    	function keyup_handler(event) {
    		component.hideError();
    	}

    	var if_block = state.error && create_if_block();

    	function click_handler_1(event) {
    		component.cancel();
    	}

    	return {
    		c: function create() {
    			div = createElement("div");
    			div_1 = createElement("div");
    			text = createText("\n    ");
    			div_2 = createElement("div");
    			div_3 = createElement("div");
    			span = createElement("span");
    			text_1 = createText(state.title);
    			text_2 = createText("\n            ");
    			form = createElement("form");
    			label = createElement("label");
    			input = createElement("input");
    			text_3 = createText("\n                    ");
    			span_1 = createElement("span");
    			span_2 = createElement("span");
    			text_4 = createText(state.label);
    			text_5 = createText("\n                        ");
    			if (if_block) if_block.c();
    			text_8 = createText("\n                ");
    			button = createElement("button");
    			button.textContent = "Confirm";
    			text_10 = createText("\n                ");
    			button_1 = createElement("button");
    			button_1.textContent = "Cancel";
    			this.h();
    		},

    		h: function hydrate() {
    			encapsulateStyles$1(div);
    			setStyle(div, "display", state.show ? 'block' : 'none');
    			div_1.className = "cl-editor-overlay";
    			addListener(div_1, "click", click_handler);
    			div_2.className = "cl-editor-modal";
    			div_3.className = "modal-box";
    			span.className = "modal-title";
    			addListener(form, "submit", submit_handler);
    			label.className = label_class_value = "modal-label " + (state.error ? 'input-error' : '');
    			input.type = "text";
    			input.name = "text";
    			addListener(input, "input", input_input_handler);
    			addListener(input, "keyup", keyup_handler);
    			span_1.className = "input-info";
    			button.className = "modal-button modal-submit";
    			button.type = "submit";
    			button_1.className = "modal-button modal-reset";
    			button_1.type = "reset";
    			addListener(button_1, "click", click_handler_1);
    		},

    		m: function mount(target, anchor) {
    			insertNode(div, target, anchor);
    			appendNode(div_1, div);
    			appendNode(text, div);
    			appendNode(div_2, div);
    			appendNode(div_3, div_2);
    			appendNode(span, div_3);
    			appendNode(text_1, span);
    			appendNode(text_2, div_3);
    			appendNode(form, div_3);
    			appendNode(label, form);
    			appendNode(input, label);
    			component.refs.text = input;

    			input.value = state.text;

    			appendNode(text_3, label);
    			appendNode(span_1, label);
    			appendNode(span_2, span_1);
    			appendNode(text_4, span_2);
    			appendNode(text_5, span_1);
    			if (if_block) if_block.m(span_1, null);
    			appendNode(text_8, form);
    			appendNode(button, form);
    			appendNode(text_10, form);
    			appendNode(button_1, form);
    		},

    		p: function update(changed, state) {
    			if (changed.show) {
    				setStyle(div, "display", state.show ? 'block' : 'none');
    			}

    			if (changed.title) {
    				text_1.data = state.title;
    			}

    			if (changed.error && label_class_value !== (label_class_value = "modal-label " + (state.error ? 'input-error' : ''))) {
    				label.className = label_class_value;
    			}

    			if (!input_updating) {
    				input.value = state.text;
    			}

    			if (changed.label) {
    				text_4.data = state.label;
    			}

    			if (state.error) {
    				if (!if_block) {
    					if_block = create_if_block();
    					if_block.c();
    					if_block.m(span_1, null);
    				}
    			} else if (if_block) {
    				if_block.u();
    				if_block.d();
    				if_block = null;
    			}
    		},

    		u: function unmount() {
    			detachNode(div);
    			if (if_block) if_block.u();
    		},

    		d: function destroy$$1() {
    			removeListener(div_1, "click", click_handler);
    			removeListener(form, "submit", submit_handler);
    			removeListener(input, "input", input_input_handler);
    			removeListener(input, "keyup", keyup_handler);
    			if (component.refs.text === input) component.refs.text = null;
    			if (if_block) if_block.d();
    			removeListener(button_1, "click", click_handler_1);
    		}
    	};
    }

    // (11:24) {{#if error}}
    function create_if_block(state, component) {
    	var span;

    	return {
    		c: function create() {
    			span = createElement("span");
    			span.textContent = "Required";
    			this.h();
    		},

    		h: function hydrate() {
    			span.className = "msg-error";
    		},

    		m: function mount(target, anchor) {
    			insertNode(span, target, anchor);
    		},

    		u: function unmount() {
    			detachNode(span);
    		},

    		d: noop
    	};
    }

    function EditorModal(options) {
    	init(this, options);
    	this.refs = {};
    	this._state = assign(data$1(), options.data);

    	if (!document.getElementById("svelte-4009310239-style")) add_css$1();

    	var _oncreate = oncreate$1.bind(this);

    	if (!options._root) {
    		this._oncreate = [_oncreate];
    	} else {
    		this._root._oncreate.push(_oncreate);
    	}

    	this._fragment = create_main_fragment$1(this._state, this);

    	if (options.target) {
    		this._fragment.c();
    		this._fragment.m(options.target, options.anchor || null);

    		callAll(this._oncreate);
    	}
    }

    assign(EditorModal.prototype, methods$1, proto);

    /* src/helpers/EditorColorPicker.html generated by Svelte v1.41.2 */
    var colors = ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646', 'ffff00', 'f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada', 'fff2ca', 'd8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5', 'ffe694', 'bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', 'b7dde8', 'fac08f', 'f2c314', 'a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '92cddc', 'e36c09', 'c09100', '7f7f7f', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '31859b', '974806', '7f6000'];

    var getBtns = function getBtns() {
    	var btns = colors.map(function (color) {
    		return { color: '#' + color };
    	});
    	btns.push({ text: '#', modal: true });
    	return btns;
    };
    function data$2() {
    	return {
    		show: false,
    		btns: [],
    		event: ''
    	};
    }

    var methods$2 = {
    	close: function close() {
    		this.set({ show: false });
    	},
    	selectColor: function selectColor(btn) {
    		this.fire(this.get('event'), btn);
    		this.close();
    	}
    };

    function oncreate$2() {
    	this.set({ btns: getBtns() });
    }

    function encapsulateStyles$2(node) {
    	setAttribute(node, "svelte-2628109851", "");
    }

    function add_css$2() {
    	var style = createElement("style");
    	style.id = 'svelte-2628109851-style';
    	style.textContent = "[svelte-2628109851].color-picker-wrapper,[svelte-2628109851] .color-picker-wrapper{border:1px solid #ecf0f1;border-top:none;background:#FFF;box-shadow:rgba(0,0,0,.1) 0 2px 3px;width:290px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);padding:0;position:absolute;top:37px;z-index:11}[svelte-2628109851].color-picker-overlay,[svelte-2628109851] .color-picker-overlay{position:absolute;background-color:rgba(255,255,255,.5);height:100%;width:100%;left:0;top:0;z-index:10}[svelte-2628109851].color-picker-btn,[svelte-2628109851] .color-picker-btn{display:block;position:relative;float:left;height:20px;width:20px;border:1px solid #333;padding:0;margin:2px;line-height:35px;text-decoration:none;background:#FFF;color:#333!important;cursor:pointer;text-align:left;font-size:15px;transition:all 150ms;line-height:20px;padding:0px 5px}[svelte-2628109851].color-picker-btn:hover::after,[svelte-2628109851] .color-picker-btn:hover::after{content:\" \";display:block;position:absolute;top:-5px;left:-5px;height:27px;width:27px;background:inherit;border:1px solid #FFF;box-shadow:#000 0 0 2px;z-index:10}";
    	appendNode(style, document.head);
    }

    function create_main_fragment$2(state, component) {
    	var div, div_1, text, div_2;

    	function click_handler(event) {
    		component.close();
    	}

    	var btns = state.btns;

    	var each_blocks = [];

    	for (var i = 0; i < btns.length; i += 1) {
    		each_blocks[i] = create_each_block$1(state, btns, btns[i], i, component);
    	}

    	return {
    		c: function create() {
    			div = createElement("div");
    			div_1 = createElement("div");
    			text = createText("\n    ");
    			div_2 = createElement("div");

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}
    			this.h();
    		},

    		h: function hydrate() {
    			encapsulateStyles$2(div);
    			setStyle(div, "display", state.show ? 'block' : 'none');
    			div_1.className = "color-picker-overlay";
    			addListener(div_1, "click", click_handler);
    			div_2.className = "color-picker-wrapper";
    		},

    		m: function mount(target, anchor) {
    			insertNode(div, target, anchor);
    			appendNode(div_1, div);
    			appendNode(text, div);
    			appendNode(div_2, div);

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div_2, null);
    			}
    		},

    		p: function update(changed, state) {
    			if (changed.show) {
    				setStyle(div, "display", state.show ? 'block' : 'none');
    			}

    			var btns = state.btns;

    			if (changed.btns) {
    				for (var i = 0; i < btns.length; i += 1) {
    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, state, btns, btns[i], i);
    					} else {
    						each_blocks[i] = create_each_block$1(state, btns, btns[i], i, component);
    						each_blocks[i].c();
    						each_blocks[i].m(div_2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].u();
    					each_blocks[i].d();
    				}
    				each_blocks.length = btns.length;
    			}
    		},

    		u: function unmount() {
    			detachNode(div);

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].u();
    			}
    		},

    		d: function destroy$$1() {
    			removeListener(div_1, "click", click_handler);

    			destroyEach(each_blocks);
    		}
    	};
    }

    // (4:8) {{#each btns as btn}}
    function create_each_block$1(state, btns, btn, btn_index, component) {
    	var button,
    	    text_value = btn.text || '',
    	    text;

    	return {
    		c: function create() {
    			button = createElement("button");
    			text = createText(text_value);
    			this.h();
    		},

    		h: function hydrate() {
    			button.type = "button";
    			button.className = "color-picker-btn";
    			setStyle(button, "background-color", btn.color);
    			addListener(button, "click", click_handler$1);

    			button._svelte = {
    				component: component,
    				btns: btns,
    				btn_index: btn_index
    			};
    		},

    		m: function mount(target, anchor) {
    			insertNode(button, target, anchor);
    			appendNode(text, button);
    		},

    		p: function update(changed, state, btns, btn, btn_index) {
    			if (changed.btns) {
    				setStyle(button, "background-color", btn.color);
    			}

    			button._svelte.btns = btns;
    			button._svelte.btn_index = btn_index;

    			if (changed.btns && text_value !== (text_value = btn.text || '')) {
    				text.data = text_value;
    			}
    		},

    		u: function unmount() {
    			detachNode(button);
    		},

    		d: function destroy$$1() {
    			removeListener(button, "click", click_handler$1);
    		}
    	};
    }

    function click_handler$1(event) {
    	var component = this._svelte.component;
    	var btns = this._svelte.btns,
    	    btn_index = this._svelte.btn_index,
    	    btn = btns[btn_index];
    	component.selectColor(btn);
    }

    function EditorColorPicker(options) {
    	init(this, options);
    	this._state = assign(data$2(), options.data);

    	if (!document.getElementById("svelte-2628109851-style")) add_css$2();

    	var _oncreate = oncreate$2.bind(this);

    	if (!options._root) {
    		this._oncreate = [_oncreate];
    	} else {
    		this._root._oncreate.push(_oncreate);
    	}

    	this._fragment = create_main_fragment$2(this._state, this);

    	if (options.target) {
    		this._fragment.c();
    		this._fragment.m(options.target, options.anchor || null);

    		callAll(this._oncreate);
    	}
    }

    assign(EditorColorPicker.prototype, methods$2, proto);

    /* src/Editor.html generated by Svelte v1.41.2 */
    function data() {
    	return {
    		actionBtns: [],
    		height: '300px',
    		html: '',
    		removeFormatTags: ['h1', 'h2', 'blockquote']
    	};
    }

    var methods = {
    	_btnClicked: function _btnClicked(action) {
    		this.refs.editor.focus();
    		saveRange(this.refs.editor);
    		restoreRange(this.refs.editor);
    		action.result.call(this);
    		this._handleButtonStatus();
    	},
    	_handleButtonStatus: function _handleButtonStatus(clearBtns) {
    		var tags = clearBtns ? [] : getTagsRecursive(document.getSelection().focusNode);
    		var actionObj = this.get('actionObj');
    		Object.keys(actionObj).forEach(function (action) {
    			return actionObj[action].active = false;
    		});
    		tags.forEach(function (tag) {
    			return (actionObj[tag.toLowerCase()] || {}).active = true;
    		});
    		this.set({ actionBtns: getActionBtns(actionObj), actionObj: actionObj });
    	},
    	_onPaste: function _onPaste(event) {
    		event.preventDefault();
    		exec('insertHTML', event.clipboardData.getData('text/html') ? cleanHtml(event.clipboardData.getData('text/html')) : event.clipboardData.getData('text'));
    	},
    	_onChange: function _onChange(html) {
    		this.fire('change', html);
    	},
    	_documentClick: function _documentClick(event) {
    		if (!isEditorClick(event.target, this.refs.editorWrapper) && this.helper.blurActive) {
    			this.fire('blur', event);
    		}
    		this.helper.blurActive = true;
    	},
    	exec: function exec$$1(cmd, value) {
    		exec(cmd, value);
    	},
    	getHtml: function getHtml(sanitize) {
    		return sanitize ? removeBadTags(this.refs.editor.innerHTML) : this.refs.editor.innerHTML;
    	},
    	getText: function getText() {
    		return this.refs.editor.innerText;
    	},
    	setHtml: function setHtml(html, sanitize) {
    		this.refs.editor.innerHTML = sanitize ? removeBadTags(html) : html || '';
    	},
    	saveRange: function saveRange$$1() {
    		saveRange(this.refs.editor);
    	},
    	restoreRange: function restoreRange$$1() {
    		restoreRange(this.refs.editor);
    	}
    };

    function oncreate() {
    	var data = this.options.data || {};
    	var actionObj = getNewActionObj(actions, data.actions);
    	this.set({ actionBtns: getActionBtns(actionObj), actionObj: actionObj });
    	this.setHtml(data.html);
    	this.modal = new EditorModal({ target: this.refs.modal });
    	this.colorPicker = new EditorColorPicker({ target: this.refs.colorPicker });
    	this.helper = {
    		foreColor: false,
    		backColor: false,
    		foreColorModal: false,
    		backColorModal: false,
    		image: false,
    		link: false,
    		showEditor: true,
    		blurActive: false
    	};
    }

    function encapsulateStyles(node) {
    	setAttribute(node, "svelte-2633021343", "");
    }

    function add_css() {
    	var style = createElement("style");
    	style.id = 'svelte-2633021343-style';
    	style.textContent = "[svelte-2633021343].cl *,[svelte-2633021343] .cl *{box-sizing:border-box}[svelte-2633021343].cl,[svelte-2633021343] .cl{box-shadow:0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);box-sizing:border-box;width:100%;position:relative}[svelte-2633021343].cl-content,[svelte-2633021343] .cl-content{height:300px;outline:0;overflow-y:auto;padding:10px;width:100%;background-color:white}[svelte-2633021343].cl-actionbar,[svelte-2633021343] .cl-actionbar{background-color:#ecf0f1;border-bottom:1px solid rgba(10, 10, 10, 0.1);width:100%}[svelte-2633021343].cl-button,[svelte-2633021343] .cl-button{background-color:transparent;border:none;cursor:pointer;height:35px;outline:0;width:35px;vertical-align:top;position:relative}[svelte-2633021343].cl-button:hover,[svelte-2633021343] .cl-button:hover,[svelte-2633021343].cl-button.active,[svelte-2633021343] .cl-button.active{background-color:#fff}[svelte-2633021343].cl-button:disabled,[svelte-2633021343] .cl-button:disabled{opacity:.5;pointer-events:none}[svelte-2633021343].cl-textarea,[svelte-2633021343] .cl-textarea{display:none;max-width:100%;min-width:100%;border:none;padding:10px}[svelte-2633021343].cl-textarea:focus,[svelte-2633021343] .cl-textarea:focus{outline:none}";
    	appendNode(style, document.head);
    }

    function create_main_fragment(state, component) {
    	var text, div, div_1, text_2, div_2, text_3, textarea, text_4, div_3, text_5, div_4;

    	function onwindowclick(event) {
    		var state = component.get();
    		component._documentClick(event);
    	}
    	window.addEventListener("click", onwindowclick);

    	var actionBtns = state.actionBtns;

    	var each_blocks = [];

    	for (var i = 0; i < actionBtns.length; i += 1) {
    		each_blocks[i] = create_each_block(state, actionBtns, actionBtns[i], i, component);
    	}

    	function input_handler(event) {
    		component._onChange(event.target.innerHTML);
    	}

    	function mouseup_handler(event) {
    		component._handleButtonStatus();
    	}

    	function keyup_handler(event) {
    		component._handleButtonStatus();
    	}

    	function paste_handler(event) {
    		component._onPaste(event);
    	}

    	return {
    		c: function create() {
    			text = createText("\n");
    			div = createElement("div");
    			div_1 = createElement("div");

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			text_2 = createText("\n  ");
    			div_2 = createElement("div");
    			text_3 = createText("\n  \n  ");
    			textarea = createElement("textarea");
    			text_4 = createText("\n  ");
    			div_3 = createElement("div");
    			text_5 = createText("\n  ");
    			div_4 = createElement("div");
    			this.h();
    		},

    		h: function hydrate() {
    			encapsulateStyles(div);
    			div.className = "cl";
    			div_1.className = "cl-actionbar";
    			div_2.className = "cl-content";
    			setStyle(div_2, "height", state.height);
    			div_2.contentEditable = "true";
    			addListener(div_2, "input", input_handler);
    			addListener(div_2, "mouseup", mouseup_handler);
    			addListener(div_2, "keyup", keyup_handler);
    			addListener(div_2, "paste", paste_handler);
    			textarea.className = "cl-textarea";
    			setStyle(textarea, "max-height", state.height);
    			setStyle(textarea, "min-height", state.height);
    		},

    		m: function mount(target, anchor) {
    			insertNode(text, target, anchor);
    			insertNode(div, target, anchor);
    			component.refs.editorWrapper = div;
    			appendNode(div_1, div);

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div_1, null);
    			}

    			appendNode(text_2, div);
    			appendNode(div_2, div);
    			component.refs.editor = div_2;
    			appendNode(text_3, div);
    			appendNode(textarea, div);
    			component.refs.raw = textarea;
    			appendNode(text_4, div);
    			appendNode(div_3, div);
    			component.refs.modal = div_3;
    			appendNode(text_5, div);
    			appendNode(div_4, div);
    			component.refs.colorPicker = div_4;
    		},

    		p: function update(changed, state) {
    			var actionBtns = state.actionBtns;

    			if (changed.actionBtns) {
    				for (var i = 0; i < actionBtns.length; i += 1) {
    					if (each_blocks[i]) {
    						each_blocks[i].p(changed, state, actionBtns, actionBtns[i], i);
    					} else {
    						each_blocks[i] = create_each_block(state, actionBtns, actionBtns[i], i, component);
    						each_blocks[i].c();
    						each_blocks[i].m(div_1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].u();
    					each_blocks[i].d();
    				}
    				each_blocks.length = actionBtns.length;
    			}

    			if (changed.height) {
    				setStyle(div_2, "height", state.height);
    				setStyle(textarea, "max-height", state.height);
    				setStyle(textarea, "min-height", state.height);
    			}
    		},

    		u: function unmount() {
    			detachNode(text);
    			detachNode(div);

    			for (var i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].u();
    			}
    		},

    		d: function destroy$$1() {
    			window.removeEventListener("click", onwindowclick);

    			if (component.refs.editorWrapper === div) component.refs.editorWrapper = null;

    			destroyEach(each_blocks);

    			removeListener(div_2, "input", input_handler);
    			removeListener(div_2, "mouseup", mouseup_handler);
    			removeListener(div_2, "keyup", keyup_handler);
    			removeListener(div_2, "paste", paste_handler);
    			if (component.refs.editor === div_2) component.refs.editor = null;
    			if (component.refs.raw === textarea) component.refs.raw = null;
    			if (component.refs.modal === div_3) component.refs.modal = null;
    			if (component.refs.colorPicker === div_4) component.refs.colorPicker = null;
    		}
    	};
    }

    // (4:4) {{#each actionBtns as action}}
    function create_each_block(state, actionBtns, action, action_index, component) {
    	var button,
    	    button_class_value,
    	    button_title_value,
    	    button_disabled_value,
    	    raw_value = action.icon;

    	return {
    		c: function create() {
    			button = createElement("button");
    			this.h();
    		},

    		h: function hydrate() {
    			button.className = button_class_value = "cl-button " + (action.active ? 'active' : '');
    			button.title = button_title_value = action.title;
    			button.disabled = button_disabled_value = action.disabled;
    			addListener(button, "click", click_handler);

    			button._svelte = {
    				component: component,
    				actionBtns: actionBtns,
    				action_index: action_index
    			};
    		},

    		m: function mount(target, anchor) {
    			insertNode(button, target, anchor);
    			button.innerHTML = raw_value;
    		},

    		p: function update(changed, state, actionBtns, action, action_index) {
    			if (changed.actionBtns && button_class_value !== (button_class_value = "cl-button " + (action.active ? 'active' : ''))) {
    				button.className = button_class_value;
    			}

    			if (changed.actionBtns && button_title_value !== (button_title_value = action.title)) {
    				button.title = button_title_value;
    			}

    			if (changed.actionBtns && button_disabled_value !== (button_disabled_value = action.disabled)) {
    				button.disabled = button_disabled_value;
    			}

    			button._svelte.actionBtns = actionBtns;
    			button._svelte.action_index = action_index;

    			if (changed.actionBtns && raw_value !== (raw_value = action.icon)) {
    				button.innerHTML = raw_value;
    			}
    		},

    		u: function unmount() {
    			button.innerHTML = '';

    			detachNode(button);
    		},

    		d: function destroy$$1() {
    			removeListener(button, "click", click_handler);
    		}
    	};
    }

    function click_handler(event) {
    	var component = this._svelte.component;
    	var actionBtns = this._svelte.actionBtns,
    	    action_index = this._svelte.action_index,
    	    action = actionBtns[action_index];
    	component._btnClicked(action);
    }

    function Editor(options) {
    	init(this, options);
    	this.refs = {};
    	this._state = assign(data(), options.data);

    	if (!document.getElementById("svelte-2633021343-style")) add_css();

    	var _oncreate = oncreate.bind(this);

    	if (!options._root) {
    		this._oncreate = [_oncreate];
    	} else {
    		this._root._oncreate.push(_oncreate);
    	}

    	this._fragment = create_main_fragment(this._state, this);

    	if (options.target) {
    		this._fragment.c();
    		this._fragment.m(options.target, options.anchor || null);

    		callAll(this._oncreate);
    	}
    }

    assign(Editor.prototype, methods, proto);

    return Editor;

    })));
    //# sourceMappingURL=index.js.map
    });

    /* src\pages\list\items\Note.svelte generated by Svelte v3.18.2 */

    const { console: console_1 } = globals;
    const file$7 = "src\\pages\\list\\items\\Note.svelte";

    function create_fragment$8(ctx) {
    	let div0;
    	let raw_value = /*item*/ ctx[0].data.contents + "";
    	let t;
    	let div1;
    	let div1_id_value;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr_dev(div0, "id", /*element*/ ctx[2]);
    			attr_dev(div0, "preview", "");
    			div0.hidden = /*editorIsVisible*/ ctx[1];
    			attr_dev(div0, "class", "svelte-17h010g");
    			add_location(div0, file$7, 83, 0, 1686);
    			attr_dev(div1, "id", div1_id_value = "" + (/*element*/ ctx[2] + "-editor"));
    			add_location(div1, file$7, 84, 0, 1795);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			div0.innerHTML = raw_value;
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			dispose = listen_dev(
    				div0,
    				"click",
    				function () {
    					if (is_function(/*showEditor*/ ctx[3])) /*showEditor*/ ctx[3].apply(this, arguments);
    				},
    				false,
    				false,
    				false
    			);
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*item*/ 1 && raw_value !== (raw_value = /*item*/ ctx[0].data.contents + "")) div0.innerHTML = raw_value;
    			if (dirty & /*element*/ 4) {
    				attr_dev(div0, "id", /*element*/ ctx[2]);
    			}

    			if (dirty & /*editorIsVisible*/ 2) {
    				prop_dev(div0, "hidden", /*editorIsVisible*/ ctx[1]);
    			}

    			if (dirty & /*element*/ 4 && div1_id_value !== (div1_id_value = "" + (/*element*/ ctx[2] + "-editor"))) {
    				attr_dev(div1, "id", div1_id_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var debouncedUpdate,
    		editorIsVisible,
    		element,
    		handleBlur,
    		html,
    		inlineEdit,
    		inlineEditor,
    		saveCb,
    		showEditor,
    		update;

    	element = uuid_1();
    	inlineEdit = null;
    	inlineEditor = null;
    	html = item.data.contents;

    	saveCb = function (r) {
    		console.log("saved!");
    		return console.log(r);
    	};

    	update = function (html) {
    		return collection.save({ id: item.id, data: { contents: html } }, saveCb);
    	};

    	debouncedUpdate = update.debounce(500);
    	editorIsVisible = false;

    	handleBlur = function (e) {
    		if (editorIsVisible) {
    			return console.log(e);
    		}
    	};

    	showEditor = function (e) {
    		console.log(`editorIsVisible: ${editorIsVisible}`);

    		if (!editorIsVisible) {
    			$$invalidate(1, editorIsVisible = true);
    			console.log("showEditor");
    			console.log(e.target);

    			inlineEditor = new dist({
    					target: document.getElementById(`${element}-editor`),
    					data: {
    						actions: ["b", "i", "u", "strike", "removeFormat"],
    						height: "auto",
    						html: `${item.data.contents}`
    					}
    				});

    			return inlineEditor.on("blur", function () {
    				$$invalidate(1, editorIsVisible = false);
    				$$invalidate(0, item.data.contents = inlineEditor.getHtml(), item);
    				update(item.data.contents);
    				return inlineEditor.destroy();
    			});
    		}
    	};

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Note> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			debouncedUpdate,
    			editorIsVisible,
    			element,
    			handleBlur,
    			html,
    			inlineEdit,
    			inlineEditor,
    			saveCb,
    			showEditor,
    			update
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("debouncedUpdate" in $$props) debouncedUpdate = $$props.debouncedUpdate;
    		if ("editorIsVisible" in $$props) $$invalidate(1, editorIsVisible = $$props.editorIsVisible);
    		if ("element" in $$props) $$invalidate(2, element = $$props.element);
    		if ("handleBlur" in $$props) handleBlur = $$props.handleBlur;
    		if ("html" in $$props) html = $$props.html;
    		if ("inlineEdit" in $$props) inlineEdit = $$props.inlineEdit;
    		if ("inlineEditor" in $$props) inlineEditor = $$props.inlineEditor;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("showEditor" in $$props) $$invalidate(3, showEditor = $$props.showEditor);
    		if ("update" in $$props) update = $$props.update;
    	};

    	return [item, editorIsVisible, element, showEditor];
    }

    class Note$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Note",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console_1.warn("<Note> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function quintOut(t) {
        return --t * t * t * t * t + 1;
    }
    function sineInOut(t) {
        return -0.5 * (Math.cos(Math.PI * t) - 1);
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function get_interpolator(a, b) {
        if (a === b || a !== a)
            return () => a;
        const type = typeof a;
        if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
            throw new Error('Cannot interpolate values of different type');
        }
        if (Array.isArray(a)) {
            const arr = b.map((bi, i) => {
                return get_interpolator(a[i], bi);
            });
            return t => arr.map(fn => fn(t));
        }
        if (type === 'object') {
            if (!a || !b)
                throw new Error('Object cannot be null');
            if (is_date(a) && is_date(b)) {
                a = a.getTime();
                b = b.getTime();
                const delta = b - a;
                return t => new Date(a + t * delta);
            }
            const keys = Object.keys(b);
            const interpolators = {};
            keys.forEach(key => {
                interpolators[key] = get_interpolator(a[key], b[key]);
            });
            return t => {
                const result = {};
                keys.forEach(key => {
                    result[key] = interpolators[key](t);
                });
                return result;
            };
        }
        if (type === 'number') {
            const delta = b - a;
            return t => a + t * delta;
        }
        throw new Error(`Cannot interpolate ${type} values`);
    }
    function tweened(value, defaults = {}) {
        const store = writable(value);
        let task;
        let target_value = value;
        function set(new_value, opts) {
            if (value == null) {
                store.set(value = new_value);
                return Promise.resolve();
            }
            target_value = new_value;
            let previous_task = task;
            let started = false;
            let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
            const start = now() + delay;
            let fn;
            task = loop(now => {
                if (now < start)
                    return true;
                if (!started) {
                    fn = interpolate(value, new_value);
                    if (typeof duration === 'function')
                        duration = duration(value, new_value);
                    started = true;
                }
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                const elapsed = now - start;
                if (elapsed > duration) {
                    store.set(value = new_value);
                    return false;
                }
                // @ts-ignore
                store.set(value = fn(easing(elapsed / duration)));
                return true;
            });
            return task.promise;
        }
        return {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe
        };
    }

    const createStyle = ({
      from = 0,
      to = 1,
      reverse = false,
      duration = 300,
      delay = 0,
      css = {},
      onChange = () => false,
      onEnd = () => false,
      easing
    }) => {
      const animation = tweened(reverse ? to : from, {
        duration,
        delay,
        easing
      });
      animation.subscribe(t => {
        let newStyle = "";
        for (let item in css) {
          const {
            input,
            output,
            onComplete = () => false,
            beforeStart = () => false
          } = css[item];
          const inRange = input.filter(i => i <= t).reverse()[0];
          const index = input.indexOf(inRange);
          let val;
          if (!inRange && inRange !== 0) {
            val = output[0];
            beforeStart();
          } else {
            if (input.length - 1 === index) {
              val = output[output.length - 1];
              input[input.length - 1] <= t && onComplete();
            } else {
              const endRange = input[index + 1];
              const percent = ((t - inRange) * 100) / (endRange - inRange);
              const firstItem = output[index];
              const lastItem = output[index + 1];
              if (typeof lastItem === "object") {
                val = "";
                lastItem.map(i => {
                  val += firstItem + ((i - firstItem) * percent) / 100;
                  val += " ";
                });
              } else {
                val = firstItem + ((lastItem - firstItem) * percent) / 100;
              }
            }
          }
          newStyle += item + ": " + val + ";";
        }
        onChange(newStyle);
        if (t === to || t === from) {
          onEnd();
        }
      });
      return {
        play: () => animation.set(to),
        reverse: () => animation.set(from)
      };
    };

    /* src\components\common\Checkbox.svelte generated by Svelte v3.18.2 */
    const file$8 = "src\\components\\common\\Checkbox.svelte";

    function create_fragment$9(ctx) {
    	let div;
    	let input;
    	let t;
    	let svg;
    	let rect0;
    	let rect1;
    	let path;
    	let div_class_value;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t = space();
    			svg = svg_element("svg");
    			rect0 = svg_element("rect");
    			rect1 = svg_element("rect");
    			path = svg_element("path");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "name", /*name*/ ctx[2]);
    			attr_dev(input, "class", "svelte-d8g7vy");
    			add_location(input, file$8, 144, 2, 3602);
    			attr_dev(rect0, "class", "checkbox__border svelte-d8g7vy");
    			attr_dev(rect0, "rx", "15%");
    			add_location(rect0, file$8, 146, 4, 3743);
    			attr_dev(rect1, "class", "checkbox__border -active svelte-d8g7vy");
    			attr_dev(rect1, "style", /*borderStyle*/ ctx[7]);
    			attr_dev(rect1, "rx", "15%");
    			add_location(rect1, file$8, 147, 4, 3790);
    			attr_dev(path, "style", /*checkStyle*/ ctx[8]);
    			attr_dev(path, "class", "checkbox__check svelte-d8g7vy");
    			attr_dev(path, "d", "M 89.5 13 L 46 71 L 28 54");
    			add_location(path, file$8, 148, 4, 3865);
    			attr_dev(svg, "class", "checkbox__svg svelte-d8g7vy");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			attr_dev(svg, "viewBox", "0 0 100 100");
    			add_location(svg, file$8, 145, 2, 3662);
    			attr_dev(div, "id", /*id*/ ctx[3]);
    			attr_dev(div, "class", div_class_value = "checkbox " + /*$$props*/ ctx[10].class + " svelte-d8g7vy");
    			set_style(div, "width", /*size*/ ctx[1]);
    			set_style(div, "height", /*size*/ ctx[1]);
    			toggle_class(div, "-changeBg", /*changeBg*/ ctx[6]);
    			toggle_class(div, "-checked", /*checked*/ ctx[0] || !/*canChange*/ ctx[5]);
    			add_location(div, file$8, 137, 0, 3423);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			append_dev(div, t);
    			append_dev(div, svg);
    			append_dev(svg, rect0);
    			append_dev(svg, rect1);
    			append_dev(svg, path);
    			/*div_binding*/ ctx[18](div);
    			dispose = listen_dev(input, "change", /*handleChange*/ ctx[9], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*name*/ 4) {
    				attr_dev(input, "name", /*name*/ ctx[2]);
    			}

    			if (dirty & /*borderStyle*/ 128) {
    				attr_dev(rect1, "style", /*borderStyle*/ ctx[7]);
    			}

    			if (dirty & /*checkStyle*/ 256) {
    				attr_dev(path, "style", /*checkStyle*/ ctx[8]);
    			}

    			if (dirty & /*id*/ 8) {
    				attr_dev(div, "id", /*id*/ ctx[3]);
    			}

    			if (dirty & /*$$props*/ 1024 && div_class_value !== (div_class_value = "checkbox " + /*$$props*/ ctx[10].class + " svelte-d8g7vy")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*size*/ 2) {
    				set_style(div, "width", /*size*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 2) {
    				set_style(div, "height", /*size*/ ctx[1]);
    			}

    			if (dirty & /*$$props, changeBg*/ 1088) {
    				toggle_class(div, "-changeBg", /*changeBg*/ ctx[6]);
    			}

    			if (dirty & /*$$props, checked, canChange*/ 1057) {
    				toggle_class(div, "-checked", /*checked*/ ctx[0] || !/*canChange*/ ctx[5]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[18](null);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let self,
    		canChange = true,
    		changeBg = false,
    		{ checked = false } = $$props,
    		{ size = "3rem" } = $$props,
    		{ name = "" } = $$props,
    		{ id = "" } = $$props,
    		borderStyle,
    		checkStyle,
    		{ primaryColor = "#242432" } = $$props,
    		{ secondaryColor = "#d8d8ea" } = $$props;

    	const dispatch = createEventDispatcher();

    	const animationOptions = {
    		to: 100,
    		duration: 250,
    		easing: sineInOut,
    		reverse: checked
    	};

    	const borderAnimation = createStyle({
    		...animationOptions,
    		css: {
    			"stroke-dashoffset": {
    				input: [0, 45, 75],
    				output: [342, -150, -307],
    				onComplete: () => $$invalidate(6, changeBg = true)
    			},
    			"stroke-dasharray": {
    				input: [0, 45, 75],
    				output: [342, 154, [0, 310]]
    			},
    			opacity: { input: [0, 5], output: [0, 1] }
    		},
    		onChange: style => $$invalidate(7, borderStyle = style),
    		onEnd: () => $$invalidate(5, canChange = true)
    	});

    	const checkAnimation = createStyle({
    		...animationOptions,
    		css: {
    			"stroke-dashoffset": {
    				input: [65, 100],
    				output: [200, -20],
    				beforeStart: () => $$invalidate(6, changeBg = false)
    			},
    			"stroke-dasharray": { input: [65, 100], output: [200, 96] }
    		},
    		onChange: style => $$invalidate(8, checkStyle = style)
    	});

    	const handleChange = () => {
    		if (!canChange) return false;

    		if (checked) {
    			borderAnimation.reverse();
    			checkAnimation.reverse();
    		} else {
    			borderAnimation.play();
    			checkAnimation.play();
    		}

    		$$invalidate(5, canChange = false);
    		$$invalidate(0, checked = !checked);
    		dispatch("change", checked);
    	};

    	const setProp = (prop, val) => self.style.setProperty(prop, val);

    	onMount(() => {
    		setProp("--checkbox-color-primary", primaryColor);
    		setProp("--checkbox-color-secondary", secondaryColor);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(4, self = $$value);
    		});
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
    		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
    		if ("name" in $$new_props) $$invalidate(2, name = $$new_props.name);
    		if ("id" in $$new_props) $$invalidate(3, id = $$new_props.id);
    		if ("primaryColor" in $$new_props) $$invalidate(11, primaryColor = $$new_props.primaryColor);
    		if ("secondaryColor" in $$new_props) $$invalidate(12, secondaryColor = $$new_props.secondaryColor);
    	};

    	$$self.$capture_state = () => {
    		return {
    			self,
    			canChange,
    			changeBg,
    			checked,
    			size,
    			name,
    			id,
    			borderStyle,
    			checkStyle,
    			primaryColor,
    			secondaryColor
    		};
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
    		if ("self" in $$props) $$invalidate(4, self = $$new_props.self);
    		if ("canChange" in $$props) $$invalidate(5, canChange = $$new_props.canChange);
    		if ("changeBg" in $$props) $$invalidate(6, changeBg = $$new_props.changeBg);
    		if ("checked" in $$props) $$invalidate(0, checked = $$new_props.checked);
    		if ("size" in $$props) $$invalidate(1, size = $$new_props.size);
    		if ("name" in $$props) $$invalidate(2, name = $$new_props.name);
    		if ("id" in $$props) $$invalidate(3, id = $$new_props.id);
    		if ("borderStyle" in $$props) $$invalidate(7, borderStyle = $$new_props.borderStyle);
    		if ("checkStyle" in $$props) $$invalidate(8, checkStyle = $$new_props.checkStyle);
    		if ("primaryColor" in $$props) $$invalidate(11, primaryColor = $$new_props.primaryColor);
    		if ("secondaryColor" in $$props) $$invalidate(12, secondaryColor = $$new_props.secondaryColor);
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		checked,
    		size,
    		name,
    		id,
    		self,
    		canChange,
    		changeBg,
    		borderStyle,
    		checkStyle,
    		handleChange,
    		$$props,
    		primaryColor,
    		secondaryColor,
    		dispatch,
    		animationOptions,
    		borderAnimation,
    		checkAnimation,
    		setProp,
    		div_binding
    	];
    }

    class Checkbox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			checked: 0,
    			size: 1,
    			name: 2,
    			id: 3,
    			primaryColor: 11,
    			secondaryColor: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checkbox",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get checked() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get primaryColor() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set primaryColor(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get secondaryColor() {
    		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set secondaryColor(value) {
    		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\_ChecklistItem.svelte generated by Svelte v3.18.2 */
    const file$9 = "src\\pages\\list\\items\\_ChecklistItem.svelte";

    // (62:4) <IconButton on:clicked={deleteLine}>
    function create_default_slot$2(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$9, 62, 89, 1521);
    			attr_dev(path1, "d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z");
    			add_location(path1, file$9, 62, 128, 1560);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$9, 62, 6, 1438);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(62:4) <IconButton on:clicked={deleteLine}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div3;
    	let div0;
    	let updating_checked;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let current;

    	function checkbox_checked_binding(value) {
    		/*checkbox_checked_binding*/ ctx[8].call(null, value);
    	}

    	let checkbox_props = { size: "24px" };

    	if (/*checked*/ ctx[4] !== void 0) {
    		checkbox_props.checked = /*checked*/ ctx[4];
    	}

    	const checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
    	binding_callbacks.push(() => bind(checkbox, "checked", checkbox_checked_binding));

    	checkbox.$on("change", function () {
    		if (is_function(/*checkboxChange*/ ctx[1])) /*checkboxChange*/ ctx[1].apply(this, arguments);
    	});

    	const inlineinput = new InlineInput({
    			props: {
    				value: /*item*/ ctx[0].description,
    				labelClasses: /*classes*/ ctx[5]
    			},
    			$$inline: true
    		});

    	inlineinput.$on("update", function () {
    		if (is_function(/*descriptionChange*/ ctx[3])) /*descriptionChange*/ ctx[3].apply(this, arguments);
    	});

    	const iconbutton = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("clicked", function () {
    		if (is_function(/*deleteLine*/ ctx[2])) /*deleteLine*/ ctx[2].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			create_component(checkbox.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(inlineinput.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(iconbutton.$$.fragment);
    			attr_dev(div0, "flex", "initial");
    			attr_dev(div0, "class", "checkbox svelte-17dibp4");
    			add_location(div0, file$9, 54, 2, 1133);
    			attr_dev(div1, "flex", "");
    			add_location(div1, file$9, 57, 2, 1250);
    			attr_dev(div2, "class", "actions svelte-17dibp4");
    			add_location(div2, file$9, 60, 2, 1369);
    			attr_dev(div3, "layout", "row");
    			attr_dev(div3, "class", "svelte-17dibp4");
    			add_location(div3, file$9, 53, 0, 1112);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			mount_component(checkbox, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			mount_component(inlineinput, div1, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			mount_component(iconbutton, div2, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const checkbox_changes = {};

    			if (!updating_checked && dirty & /*checked*/ 16) {
    				updating_checked = true;
    				checkbox_changes.checked = /*checked*/ ctx[4];
    				add_flush_callback(() => updating_checked = false);
    			}

    			checkbox.$set(checkbox_changes);
    			const inlineinput_changes = {};
    			if (dirty & /*item*/ 1) inlineinput_changes.value = /*item*/ ctx[0].description;
    			if (dirty & /*classes*/ 32) inlineinput_changes.labelClasses = /*classes*/ ctx[5];
    			inlineinput.$set(inlineinput_changes);
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checkbox.$$.fragment, local);
    			transition_in(inlineinput.$$.fragment, local);
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checkbox.$$.fragment, local);
    			transition_out(inlineinput.$$.fragment, local);
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(checkbox);
    			destroy_component(inlineinput);
    			destroy_component(iconbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	var checkboxChange, deleteLine, descriptionChange, dispatch;
    	dispatch = createEventDispatcher();
    	let { index } = $$props;
    	let { item } = $$props;

    	descriptionChange = function (e) {
    		dispatch("changeDescription", { id: item.id, description: e.detail });
    		return $$invalidate(0, item.description = e.detail, item);
    	};

    	checkboxChange = function (e) {
    		$$invalidate(0, item.is_complete = e.detail, item);

    		return dispatch("changeIsComplete", {
    			id: item.id,
    			is_complete: item.is_complete
    		});
    	};

    	deleteLine = function (e) {
    		return dispatch("delete", item.id);
    	};

    	const writable_props = ["index", "item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ChecklistItem> was created with unknown prop '${key}'`);
    	});

    	function checkbox_checked_binding(value) {
    		checked = value;
    		($$invalidate(4, checked), $$invalidate(0, item));
    	}

    	$$self.$set = $$props => {
    		if ("index" in $$props) $$invalidate(6, index = $$props.index);
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			checkboxChange,
    			deleteLine,
    			descriptionChange,
    			dispatch,
    			index,
    			item,
    			checked,
    			classes
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("checkboxChange" in $$props) $$invalidate(1, checkboxChange = $$props.checkboxChange);
    		if ("deleteLine" in $$props) $$invalidate(2, deleteLine = $$props.deleteLine);
    		if ("descriptionChange" in $$props) $$invalidate(3, descriptionChange = $$props.descriptionChange);
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("index" in $$props) $$invalidate(6, index = $$props.index);
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("checked" in $$props) $$invalidate(4, checked = $$props.checked);
    		if ("classes" in $$props) $$invalidate(5, classes = $$props.classes);
    	};

    	let checked;
    	let classes;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*item*/ 1) {
    			 $$invalidate(4, checked = item.is_complete);
    		}

    		if ($$self.$$.dirty & /*item*/ 1) {
    			 $$invalidate(5, classes = item.is_complete ? "strikethrough" : "");
    		}
    	};

    	return [
    		item,
    		checkboxChange,
    		deleteLine,
    		descriptionChange,
    		checked,
    		classes,
    		index,
    		dispatch,
    		checkbox_checked_binding
    	];
    }

    class ChecklistItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { index: 6, item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChecklistItem",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[6] === undefined && !("index" in props)) {
    			console.warn("<ChecklistItem> was created without expected prop 'index'");
    		}

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console.warn("<ChecklistItem> was created without expected prop 'item'");
    		}
    	}

    	get index() {
    		throw new Error("<ChecklistItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ChecklistItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<ChecklistItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ChecklistItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function crossfade(_a) {
        var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
        const to_receive = new Map();
        const to_send = new Map();
        function crossfade(from, node, params) {
            const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
            const to = node.getBoundingClientRect();
            const dx = from.left - to.left;
            const dy = from.top - to.top;
            const dw = from.width / to.width;
            const dh = from.height / to.height;
            const d = Math.sqrt(dx * dx + dy * dy);
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            const opacity = +style.opacity;
            return {
                delay,
                duration: is_function(duration) ? duration(d) : duration,
                easing,
                css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
            };
        }
        function transition(items, counterparts, intro) {
            return (node, params) => {
                items.set(params.key, {
                    rect: node.getBoundingClientRect()
                });
                return () => {
                    if (counterparts.has(params.key)) {
                        const { rect } = counterparts.get(params.key);
                        counterparts.delete(params.key);
                        return crossfade(rect, node, params);
                    }
                    // if the node is disappearing altogether
                    // (i.e. wasn't claimed by the other list)
                    // then we need to supply an outro
                    items.delete(params.key);
                    return fallback && fallback(node, params, intro);
                };
            };
        }
        return [
            transition(to_send, to_receive, false),
            transition(to_receive, to_send, true)
        ];
    }

    function flip(node, animation, params) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const scaleX = animation.from.width / node.clientWidth;
        const scaleY = animation.from.height / node.clientHeight;
        const dx = (animation.from.left - animation.to.left) / scaleX;
        const dy = (animation.from.top - animation.to.top) / scaleY;
        const d = Math.sqrt(dx * dx + dy * dy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
        };
    }

    /* src\components\common\DraggableList.svelte generated by Svelte v3.18.2 */

    const file$a = "src\\components\\common\\DraggableList.svelte";

    const get_default_slot_changes = dirty => ({
    	item: dirty & /*list*/ 1,
    	index: dirty & /*list*/ 1
    });

    const get_default_slot_context = ctx => ({
    	item: /*item*/ ctx[15],
    	index: /*index*/ ctx[17]
    });

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    // (84:0) {#if list && list.length}
    function create_if_block$3(ctx) {
    	let ul;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*list*/ ctx[0];
    	const get_key = ctx => /*getKey*/ ctx[8](/*item*/ ctx[15]);
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-ruy1c4");
    			add_location(ul, file$a, 84, 2, 2064);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const each_value = /*list*/ ctx[0];
    			group_outros();
    			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    			validate_each_keys(ctx, each_value, get_each_context, get_key);
    			each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
    			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    			check_outros();
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(84:0) {#if list && list.length}",
    		ctx
    	});

    	return block;
    }

    // (86:4) {#each list as item, index (getKey(item))}
    function create_each_block(key_2, ctx) {
    	let li;
    	let p;
    	let t0_value = /*getKey*/ ctx[8](/*item*/ ctx[15]) + "";
    	let t0;
    	let t1;
    	let li_data_index_value;
    	let li_data_id_value;
    	let li_intro;
    	let li_outro;
    	let rect;
    	let stop_animation = noop;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context);

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			li = element("li");

    			if (!default_slot) {
    				p = element("p");
    				t0 = text(t0_value);
    			}

    			if (default_slot) default_slot.c();
    			t1 = space();

    			if (!default_slot) {
    				add_location(p, file$a, 99, 10, 2544);
    			}

    			attr_dev(li, "data-index", li_data_index_value = /*index*/ ctx[17]);
    			attr_dev(li, "draggable", "true");
    			attr_dev(li, "data-id", li_data_id_value = JSON.stringify(/*getKey*/ ctx[8](/*item*/ ctx[15])));
    			attr_dev(li, "class", "svelte-ruy1c4");
    			toggle_class(li, "over", /*getKey*/ ctx[8](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
    			add_location(li, file$a, 86, 6, 2122);
    			this.first = li;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (!default_slot) {
    				append_dev(li, p);
    				append_dev(p, t0);
    			}

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			append_dev(li, t1);
    			current = true;

    			dispose = [
    				listen_dev(li, "dragstart", /*start*/ ctx[4], false, false, false),
    				listen_dev(li, "dragover", /*over*/ ctx[5], false, false, false),
    				listen_dev(li, "dragleave", /*leave*/ ctx[6], false, false, false),
    				listen_dev(li, "drop", /*drop*/ ctx[7], false, false, false)
    			];
    		},
    		p: function update(ctx, dirty) {
    			if (!default_slot) {
    				if ((!current || dirty & /*list*/ 1) && t0_value !== (t0_value = /*getKey*/ ctx[8](/*item*/ ctx[15]) + "")) set_data_dev(t0, t0_value);
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope, list*/ 8193) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, get_default_slot_changes));
    			}

    			if (!current || dirty & /*list*/ 1 && li_data_index_value !== (li_data_index_value = /*index*/ ctx[17])) {
    				attr_dev(li, "data-index", li_data_index_value);
    			}

    			if (!current || dirty & /*list*/ 1 && li_data_id_value !== (li_data_id_value = JSON.stringify(/*getKey*/ ctx[8](/*item*/ ctx[15])))) {
    				attr_dev(li, "data-id", li_data_id_value);
    			}

    			if (dirty & /*getKey, list, isOver*/ 259) {
    				toggle_class(li, "over", /*getKey*/ ctx[8](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
    			}
    		},
    		r: function measure() {
    			rect = li.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(li);
    			stop_animation();
    			add_transform(li, rect);
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(li, rect, flip, { duration: 300 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (li_outro) li_outro.end(1);
    				if (!li_intro) li_intro = create_in_transition(li, /*receive*/ ctx[3], { key: /*getKey*/ ctx[8](/*item*/ ctx[15]) });
    				li_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (li_intro) li_intro.invalidate();
    			li_outro = create_out_transition(li, /*send*/ ctx[2], { key: /*getKey*/ ctx[8](/*item*/ ctx[15]) });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && li_outro) li_outro.end();
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(86:4) {#each list as item, index (getKey(item))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*list*/ ctx[0] && /*list*/ ctx[0].length && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*list*/ ctx[0] && /*list*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	const [send, receive] = crossfade({
    		duration: d => Math.sqrt(d * 200),
    		fallback(node, params) {
    			const style = getComputedStyle(node);
    			const transform = style.transform === "none" ? "" : style.transform;

    			return {
    				duration: 600,
    				easing: quintOut,
    				css: t => `
					transform: ${transform} scale(${t});
					opacity: ${t}
				`
    			};
    		}
    	});

    	// DRAG AND DROP
    	let isOver = false;

    	const getDraggedParent = node => node.dataset && node.dataset.index
    	? node.dataset
    	: getDraggedParent(node.parentNode);

    	const start = ev => {
    		ev.dataTransfer.setData("source", ev.target.dataset.index);
    	};

    	const over = ev => {
    		ev.preventDefault();
    		let dragged = getDraggedParent(ev.target);
    		if (isOver !== dragged.id) $$invalidate(1, isOver = JSON.parse(dragged.id));
    	};

    	const leave = ev => {
    		let dragged = getDraggedParent(ev.target);
    		if (isOver === dragged.id) $$invalidate(1, isOver = false);
    	};

    	const drop = ev => {
    		$$invalidate(1, isOver = false);
    		ev.preventDefault();
    		let dragged = getDraggedParent(ev.target);
    		let from = ev.dataTransfer.getData("source");
    		let to = dragged.index;
    		reorder({ from, to });
    	};

    	const dispatch = createEventDispatcher();

    	const reorder = ({ from, to }) => {
    		let newList = [...list];
    		newList[from] = [newList[to], newList[to] = newList[from]][0];
    		dispatch("sort", newList);
    	};

    	// UTILS
    	const getKey = item => key ? item[key] : item;

    	let { list } = $$props;
    	let { key } = $$props;
    	const writable_props = ["list", "key"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DraggableList> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("list" in $$props) $$invalidate(0, list = $$props.list);
    		if ("key" in $$props) $$invalidate(9, key = $$props.key);
    		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return { isOver, list, key };
    	};

    	$$self.$inject_state = $$props => {
    		if ("isOver" in $$props) $$invalidate(1, isOver = $$props.isOver);
    		if ("list" in $$props) $$invalidate(0, list = $$props.list);
    		if ("key" in $$props) $$invalidate(9, key = $$props.key);
    	};

    	return [
    		list,
    		isOver,
    		send,
    		receive,
    		start,
    		over,
    		leave,
    		drop,
    		getKey,
    		key,
    		getDraggedParent,
    		dispatch,
    		reorder,
    		$$scope,
    		$$slots
    	];
    }

    class DraggableList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { list: 0, key: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DraggableList",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*list*/ ctx[0] === undefined && !("list" in props)) {
    			console.warn("<DraggableList> was created without expected prop 'list'");
    		}

    		if (/*key*/ ctx[9] === undefined && !("key" in props)) {
    			console.warn("<DraggableList> was created without expected prop 'key'");
    		}
    	}

    	get list() {
    		throw new Error("<DraggableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set list(value) {
    		throw new Error("<DraggableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<DraggableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<DraggableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\Checklist.svelte generated by Svelte v3.18.2 */
    const file$b = "src\\pages\\list\\items\\Checklist.svelte";

    // (124:4) {#if mounted}
    function create_if_block$4(ctx) {
    	let current;

    	const draggablelist = new DraggableList({
    			props: {
    				list: /*item*/ ctx[0].data.lines,
    				key: "id",
    				$$slots: {
    					default: [
    						create_default_slot$3,
    						({ item, index }) => ({ 0: item, 15: index }),
    						({ item, index }) => (item ? 1 : 0) | (index ? 32768 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	draggablelist.$on("sort", function () {
    		if (is_function(/*reorder*/ ctx[7])) /*reorder*/ ctx[7].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(draggablelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(draggablelist, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const draggablelist_changes = {};
    			if (dirty & /*item*/ 1) draggablelist_changes.list = /*item*/ ctx[0].data.lines;

    			if (dirty & /*$$scope, item, index, changeDescription, changeIsComplete, deleteLine*/ 98327) {
    				draggablelist_changes.$$scope = { dirty, ctx };
    			}

    			draggablelist.$set(draggablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(draggablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(draggablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(draggablelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(124:4) {#if mounted}",
    		ctx
    	});

    	return block;
    }

    // (125:4) <DraggableList         list={item.data.lines}         key="id"         on:sort={reorder}         let:item       let:index     >
    function create_default_slot$3(ctx) {
    	let current;

    	const checklistitem = new ChecklistItem({
    			props: {
    				item: /*item*/ ctx[0],
    				index: /*index*/ ctx[15]
    			},
    			$$inline: true
    		});

    	checklistitem.$on("changeDescription", function () {
    		if (is_function(/*changeDescription*/ ctx[1])) /*changeDescription*/ ctx[1].apply(this, arguments);
    	});

    	checklistitem.$on("changeIsComplete", function () {
    		if (is_function(/*changeIsComplete*/ ctx[2])) /*changeIsComplete*/ ctx[2].apply(this, arguments);
    	});

    	checklistitem.$on("delete", function () {
    		if (is_function(/*deleteLine*/ ctx[4])) /*deleteLine*/ ctx[4].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(checklistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checklistitem, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const checklistitem_changes = {};
    			if (dirty & /*item*/ 1) checklistitem_changes.item = /*item*/ ctx[0];
    			if (dirty & /*index*/ 32768) checklistitem_changes.index = /*index*/ ctx[15];
    			checklistitem.$set(checklistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checklistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checklistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checklistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(125:4) <DraggableList         list={item.data.lines}         key=\\\"id\\\"         on:sort={reorder}         let:item       let:index     >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div;
    	let header;
    	let input;
    	let t0;
    	let section;
    	let t1;
    	let footer;
    	let t2;
    	let t3;
    	let t4_value = /*item*/ ctx[0].data.lines.length + "";
    	let t4;
    	let t5;
    	let current;
    	let dispose;
    	let if_block = /*mounted*/ ctx[5] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			header = element("header");
    			input = element("input");
    			t0 = space();
    			section = element("section");
    			if (if_block) if_block.c();
    			t1 = space();
    			footer = element("footer");
    			t2 = text(/*completed*/ ctx[8]);
    			t3 = text(" / ");
    			t4 = text(t4_value);
    			t5 = text(" completed.");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "What needs to be done?");
    			attr_dev(input, "class", "svelte-13ro21l");
    			add_location(input, file$b, 120, 4, 2410);
    			attr_dev(header, "class", "svelte-13ro21l");
    			add_location(header, file$b, 119, 2, 2397);
    			add_location(section, file$b, 122, 2, 2536);
    			add_location(footer, file$b, 136, 2, 2886);
    			add_location(div, file$b, 118, 0, 2389);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, header);
    			append_dev(header, input);
    			set_input_value(input, /*newItem*/ ctx[6].description);
    			append_dev(div, t0);
    			append_dev(div, section);
    			if (if_block) if_block.m(section, null);
    			append_dev(div, t1);
    			append_dev(div, footer);
    			append_dev(footer, t2);
    			append_dev(footer, t3);
    			append_dev(footer, t4);
    			append_dev(footer, t5);
    			current = true;

    			dispose = [
    				listen_dev(input, "input", /*input_input_handler*/ ctx[14]),
    				listen_dev(
    					input,
    					"keyup",
    					function () {
    						if (is_function(/*checkKeys*/ ctx[3])) /*checkKeys*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*newItem*/ 64 && input.value !== /*newItem*/ ctx[6].description) {
    				set_input_value(input, /*newItem*/ ctx[6].description);
    			}

    			if (/*mounted*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*completed*/ 256) set_data_dev(t2, /*completed*/ ctx[8]);
    			if ((!current || dirty & /*item*/ 1) && t4_value !== (t4_value = /*item*/ ctx[0].data.lines.length + "")) set_data_dev(t4, t4_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var add,
    		changeDescription,
    		changeIsComplete,
    		checkKeys,
    		deleteLine,
    		mounted,
    		newItem,
    		reindex,
    		reorder,
    		reset,
    		saveCb,
    		update;

    	newItem = null;

    	saveCb = function (r) {
    		return reset();
    	};

    	update = function () {
    		reindex();

    		return collection.save(
    			{
    				id: item.id,
    				data: { lines: item.data.lines }
    			},
    			saveCb
    		);
    	};

    	add = function () {
    		// set ordinal to max + 1
    		$$invalidate(6, newItem.created_at = Date.create(), newItem);

    		$$invalidate(6, newItem.modified_at = newItem.created_at, newItem);
    		item.data.lines.push(newItem);
    		return update();
    	};

    	reset = function () {
    		return $$invalidate(6, newItem = {
    			id: uuid_1(),
    			ordinal: item.data.lines.length,
    			is_complete: false,
    			description: "",
    			due_date: null,
    			created_at: null,
    			modified_at: null,
    			who: null
    		});
    	};

    	reset();

    	changeDescription = function (e) {
    		var itemToChangeIndex;

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		$$invalidate(0, item.data.lines[itemToChangeIndex].description = e.detail, item);
    		return update();
    	};

    	changeIsComplete = function (e) {
    		var itemToChangeIndex;

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		$$invalidate(0, item.data.lines[itemToChangeIndex].is_complete = e.detail.is_complete, item);
    		return update();
    	};

    	reindex = function () {
    		return item.data.lines.forEach(function (item, index) {
    			return item.ordinal = index;
    		});
    	};

    	reorder = function (ev) {
    		$$invalidate(0, item.data.lines = ev.detail, item);
    		return update();
    	};

    	deleteLine = function (e) {
    		item.data.lines.remove(function (o) {
    			return o.id === e.detail;
    		});

    		// todo: reindex ordinals
    		return update();
    	};

    	checkKeys = function (e) {
    		if (e.code === "NumpadEnter" || e.code === "Enter" && !e.shiftKey) {
    			return add();
    		}
    	};

    	mounted = false;

    	onMount(function () {
    		return $$invalidate(5, mounted = true);
    	});

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Checklist> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		newItem.description = this.value;
    		$$invalidate(6, newItem);
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			add,
    			changeDescription,
    			changeIsComplete,
    			checkKeys,
    			deleteLine,
    			mounted,
    			newItem,
    			reindex,
    			reorder,
    			reset,
    			saveCb,
    			update,
    			completed
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("add" in $$props) add = $$props.add;
    		if ("changeDescription" in $$props) $$invalidate(1, changeDescription = $$props.changeDescription);
    		if ("changeIsComplete" in $$props) $$invalidate(2, changeIsComplete = $$props.changeIsComplete);
    		if ("checkKeys" in $$props) $$invalidate(3, checkKeys = $$props.checkKeys);
    		if ("deleteLine" in $$props) $$invalidate(4, deleteLine = $$props.deleteLine);
    		if ("mounted" in $$props) $$invalidate(5, mounted = $$props.mounted);
    		if ("newItem" in $$props) $$invalidate(6, newItem = $$props.newItem);
    		if ("reindex" in $$props) reindex = $$props.reindex;
    		if ("reorder" in $$props) $$invalidate(7, reorder = $$props.reorder);
    		if ("reset" in $$props) reset = $$props.reset;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("update" in $$props) update = $$props.update;
    		if ("completed" in $$props) $$invalidate(8, completed = $$props.completed);
    	};

    	let completed;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*item*/ 1) {
    			 $$invalidate(8, completed = item.data.lines.count(function (item) {
    				return item.is_complete;
    			}));
    		}
    	};

    	return [
    		item,
    		changeDescription,
    		changeIsComplete,
    		checkKeys,
    		deleteLine,
    		mounted,
    		newItem,
    		reorder,
    		completed,
    		add,
    		reindex,
    		reset,
    		saveCb,
    		update,
    		input_input_handler
    	];
    }

    class Checklist$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Checklist",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console.warn("<Checklist> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Checklist>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Checklist>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\_KeyPair.svelte generated by Svelte v3.18.2 */

    const { console: console_1$1 } = globals;
    const file$c = "src\\pages\\list\\items\\_KeyPair.svelte";

    // (106:4) {:else}
    function create_else_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("*******************");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(106:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (102:4) {#if item.is_visible}
    function create_if_block_2(ctx) {
    	let span;
    	let current;

    	const inlineinput = new InlineInput({
    			props: {
    				value: /*item*/ ctx[0].value,
    				labelClasses: "ellipsis"
    			},
    			$$inline: true
    		});

    	inlineinput.$on("update", function () {
    		if (is_function(/*valueChange*/ ctx[7])) /*valueChange*/ ctx[7].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(inlineinput.$$.fragment);
    			attr_dev(span, "ellipsis", "");
    			add_location(span, file$c, 102, 6, 2393);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(inlineinput, span, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const inlineinput_changes = {};
    			if (dirty & /*item*/ 1) inlineinput_changes.value = /*item*/ ctx[0].value;
    			inlineinput.$set(inlineinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inlineinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inlineinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(inlineinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(102:4) {#if item.is_visible}",
    		ctx
    	});

    	return block;
    }

    // (111:4) <IconButton on:clicked={deleteLine}>
    function create_default_slot_3(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$c, 111, 89, 2721);
    			attr_dev(path1, "d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z");
    			add_location(path1, file$c, 111, 128, 2760);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$c, 111, 6, 2638);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(111:4) <IconButton on:clicked={deleteLine}>",
    		ctx
    	});

    	return block;
    }

    // (114:4) <IconButton on:clicked={copy}>
    function create_default_slot_2(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$c, 114, 89, 3030);
    			attr_dev(path1, "d", "M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4H8c-1.1 0-1.99.9-1.99 2L6 21c0 1.1.89 2 1.99 2H19c1.1 0 2-.9 2-2V11l-6-6zM8 21V7h6v5h5v9H8z");
    			add_location(path1, file$c, 114, 128, 3069);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$c, 114, 6, 2947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(114:4) <IconButton on:clicked={copy}>",
    		ctx
    	});

    	return block;
    }

    // (120:4) {:else}
    function create_else_block$1(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$c, 120, 89, 3763);
    			attr_dev(path1, "d", "M12 6.5c2.76 0 5 2.24 5 5 0 .51-.1 1-.24 1.46l3.06 3.06c1.39-1.23 2.49-2.77 3.18-4.53C21.27 7.11 17 4 12 4c-1.27 0-2.49.2-3.64.57l2.17 2.17c.47-.14.96-.24 1.47-.24zM3.42 2.45L2.01 3.87l2.68 2.68C3.06 7.83 1.77 9.53 1 11.5 2.73 15.89 7 19 12 19c1.52 0 2.97-.3 4.31-.82l3.43 3.43 1.41-1.41L3.42 2.45zM12 16.5c-2.76 0-5-2.24-5-5 0-.77.18-1.5.49-2.14l1.57 1.57c-.03.18-.06.37-.06.57 0 1.66 1.34 3 3 3 .2 0 .38-.03.57-.07L14.14 16c-.65.32-1.37.5-2.14.5zm2.97-5.33c-.15-1.4-1.25-2.49-2.64-2.64l2.64 2.64z");
    			add_location(path1, file$c, 120, 173, 3847);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$c, 120, 6, 3680);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(120:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (118:4) {#if item.is_visible}
    function create_if_block_1(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$c, 118, 89, 3400);
    			attr_dev(path1, "d", "M12 4C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 12.5c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z");
    			add_location(path1, file$c, 118, 128, 3439);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$c, 118, 6, 3317);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(118:4) {#if item.is_visible}",
    		ctx
    	});

    	return block;
    }

    // (117:4) <IconButton on:clicked={toggleVisibility}>
    function create_default_slot_1(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[0].is_visible) return create_if_block_1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(117:4) <IconButton on:clicked={toggleVisibility}>",
    		ctx
    	});

    	return block;
    }

    // (125:4) {#if isLink(item.value)}
    function create_if_block$5(ctx) {
    	let current;

    	const iconbutton = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton.$on("clicked", function () {
    		if (is_function(/*go*/ ctx[3])) /*go*/ ctx[3].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const iconbutton_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				iconbutton_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(125:4) {#if isLink(item.value)}",
    		ctx
    	});

    	return block;
    }

    // (126:6) <IconButton on:clicked={go}>
    function create_default_slot$4(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$c, 126, 91, 4548);
    			attr_dev(path1, "d", "M19 19H5V5h7V3H3v18h18v-9h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z");
    			add_location(path1, file$c, 126, 130, 4587);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$c, 126, 8, 4465);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(126:6) <IconButton on:clicked={go}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let section;
    	let div0;
    	let t0;
    	let div1;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let div2;
    	let t2;
    	let t3;
    	let t4;
    	let show_if = /*isLink*/ ctx[4](/*item*/ ctx[0].value);
    	let current;

    	const inlineinput = new InlineInput({
    			props: { value: /*item*/ ctx[0].key },
    			$$inline: true
    		});

    	inlineinput.$on("update", function () {
    		if (is_function(/*keyChange*/ ctx[5])) /*keyChange*/ ctx[5].apply(this, arguments);
    	});

    	const if_block_creators = [create_if_block_2, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[0].is_visible) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const iconbutton0 = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton0.$on("clicked", function () {
    		if (is_function(/*deleteLine*/ ctx[2])) /*deleteLine*/ ctx[2].apply(this, arguments);
    	});

    	const iconbutton1 = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton1.$on("clicked", function () {
    		if (is_function(/*copy*/ ctx[1])) /*copy*/ ctx[1].apply(this, arguments);
    	});

    	const iconbutton2 = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton2.$on("clicked", function () {
    		if (is_function(/*toggleVisibility*/ ctx[6])) /*toggleVisibility*/ ctx[6].apply(this, arguments);
    	});

    	let if_block1 = show_if && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			create_component(inlineinput.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			if_block0.c();
    			t1 = space();
    			div2 = element("div");
    			create_component(iconbutton0.$$.fragment);
    			t2 = space();
    			create_component(iconbutton1.$$.fragment);
    			t3 = space();
    			create_component(iconbutton2.$$.fragment);
    			t4 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "flex", "40");
    			attr_dev(div0, "class", "svelte-1h3vn14");
    			add_location(div0, file$c, 97, 2, 2256);
    			attr_dev(div1, "flex", "");
    			attr_dev(div1, "ellipsis", "");
    			attr_dev(div1, "class", "svelte-1h3vn14");
    			add_location(div1, file$c, 100, 2, 2341);
    			attr_dev(div2, "flex", "initial");
    			attr_dev(div2, "class", "svelte-1h3vn14");
    			add_location(div2, file$c, 109, 2, 2570);
    			attr_dev(section, "layout", "row");
    			attr_dev(section, "class", "svelte-1h3vn14");
    			add_location(section, file$c, 96, 0, 2231);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			mount_component(inlineinput, div0, null);
    			append_dev(section, t0);
    			append_dev(section, div1);
    			if_blocks[current_block_type_index].m(div1, null);
    			append_dev(section, t1);
    			append_dev(section, div2);
    			mount_component(iconbutton0, div2, null);
    			append_dev(div2, t2);
    			mount_component(iconbutton1, div2, null);
    			append_dev(div2, t3);
    			mount_component(iconbutton2, div2, null);
    			append_dev(div2, t4);
    			if (if_block1) if_block1.m(div2, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const inlineinput_changes = {};
    			if (dirty & /*item*/ 1) inlineinput_changes.value = /*item*/ ctx[0].key;
    			inlineinput.$set(inlineinput_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div1, null);
    			}

    			const iconbutton0_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				iconbutton0_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton0.$set(iconbutton0_changes);
    			const iconbutton1_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				iconbutton1_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton1.$set(iconbutton1_changes);
    			const iconbutton2_changes = {};

    			if (dirty & /*$$scope, item*/ 1025) {
    				iconbutton2_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton2.$set(iconbutton2_changes);
    			if (dirty & /*isLink, item*/ 17) show_if = /*isLink*/ ctx[4](/*item*/ ctx[0].value);

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inlineinput.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(iconbutton0.$$.fragment, local);
    			transition_in(iconbutton1.$$.fragment, local);
    			transition_in(iconbutton2.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inlineinput.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(iconbutton0.$$.fragment, local);
    			transition_out(iconbutton1.$$.fragment, local);
    			transition_out(iconbutton2.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(inlineinput);
    			if_blocks[current_block_type_index].d();
    			destroy_component(iconbutton0);
    			destroy_component(iconbutton1);
    			destroy_component(iconbutton2);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	var copy,
    		deleteLine,
    		dispatch,
    		go,
    		isLink,
    		keyChange,
    		toggleVisibility,
    		valueChange;

    	dispatch = createEventDispatcher();
    	let { item } = $$props;
    	let { index } = $$props;

    	keyChange = function (e) {
    		dispatch("changeKey", { id: item.id, key: e.detail });
    		return $$invalidate(0, item.key = e.detail, item);
    	};

    	valueChange = function (e) {
    		dispatch("changeValue", { id: item.id, value: e.detail });
    		return $$invalidate(0, item.value = e.detail, item);
    	};

    	deleteLine = function (e) {
    		return dispatch("delete", item.id);
    	};

    	isLink = function (text) {
    		var fileLink, httpLink, httpsLink, mailtoLink, telLink;
    		text = text || "";
    		httpLink = text.startsWith("http://");
    		httpsLink = text.startsWith("https://");
    		fileLink = text.startsWith("file://");
    		mailtoLink = text.startsWith("mailto://");
    		telLink = text.startsWith("tel://");
    		return httpLink || httpsLink || fileLink || mailtoLink || telLink;
    	};

    	copy = function (e) {
    		var dummy;
    		dummy = document.createElement("input");

    		// dummy.style.display = 'none'
    		document.body.appendChild(dummy);

    		dummy.setAttribute("id", `clipboard-${item.id}`);
    		document.getElementById(`clipboard-${item.id}`).value = item.value;
    		console.log(document.getElementById(`clipboard-${item.id}`).value);
    		dummy.select();
    		document.execCommand("copy");
    		document.body.removeChild(dummy);
    		return console.log(`copied ${item.value}`);
    	};

    	toggleVisibility = function (e) {
    		if (item.is_visible != null) {
    			$$invalidate(0, item.is_visible = !item.is_visible, item);
    		} else {
    			$$invalidate(0, item.is_visible = true, item);
    		}

    		return dispatch("changeVisibility", { id: item.id, is_visible: item.is_visible });
    	};

    	go = function () {
    		console.log("go");
    		console.log(item.value);
    		return window.open(item.value, "_blank");
    	};

    	const writable_props = ["item", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<KeyPair> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("index" in $$props) $$invalidate(8, index = $$props.index);
    	};

    	$$self.$capture_state = () => {
    		return {
    			copy,
    			deleteLine,
    			dispatch,
    			go,
    			isLink,
    			keyChange,
    			toggleVisibility,
    			valueChange,
    			item,
    			index
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("copy" in $$props) $$invalidate(1, copy = $$props.copy);
    		if ("deleteLine" in $$props) $$invalidate(2, deleteLine = $$props.deleteLine);
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("go" in $$props) $$invalidate(3, go = $$props.go);
    		if ("isLink" in $$props) $$invalidate(4, isLink = $$props.isLink);
    		if ("keyChange" in $$props) $$invalidate(5, keyChange = $$props.keyChange);
    		if ("toggleVisibility" in $$props) $$invalidate(6, toggleVisibility = $$props.toggleVisibility);
    		if ("valueChange" in $$props) $$invalidate(7, valueChange = $$props.valueChange);
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("index" in $$props) $$invalidate(8, index = $$props.index);
    	};

    	return [
    		item,
    		copy,
    		deleteLine,
    		go,
    		isLink,
    		keyChange,
    		toggleVisibility,
    		valueChange,
    		index
    	];
    }

    class KeyPair$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { item: 0, index: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "KeyPair",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console_1$1.warn("<KeyPair> was created without expected prop 'item'");
    		}

    		if (/*index*/ ctx[8] === undefined && !("index" in props)) {
    			console_1$1.warn("<KeyPair> was created without expected prop 'index'");
    		}
    	}

    	get item() {
    		throw new Error("<KeyPair>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<KeyPair>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<KeyPair>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<KeyPair>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\KeyPair.svelte generated by Svelte v3.18.2 */

    const { console: console_1$2 } = globals;
    const file$d = "src\\pages\\list\\items\\KeyPair.svelte";

    // (164:4) {#if mounted}
    function create_if_block$6(ctx) {
    	let current;

    	const draggablelist = new DraggableList({
    			props: {
    				list: /*item*/ ctx[0].data.lines,
    				key: "id",
    				$$slots: {
    					default: [
    						create_default_slot$5,
    						({ item, index }) => ({ 0: item, 17: index }),
    						({ item, index }) => (item ? 1 : 0) | (index ? 131072 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	draggablelist.$on("sort", function () {
    		if (is_function(/*reorder*/ ctx[9])) /*reorder*/ ctx[9].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(draggablelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(draggablelist, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const draggablelist_changes = {};
    			if (dirty & /*item*/ 1) draggablelist_changes.list = /*item*/ ctx[0].data.lines;

    			if (dirty & /*$$scope, item, index, changeKey, changeValue, changeVisibility, deleteLine*/ 393263) {
    				draggablelist_changes.$$scope = { dirty, ctx };
    			}

    			draggablelist.$set(draggablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(draggablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(draggablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(draggablelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(164:4) {#if mounted}",
    		ctx
    	});

    	return block;
    }

    // (165:4) <DraggableList         list={item.data.lines}         key="id"         on:sort={reorder}         let:item       let:index     >
    function create_default_slot$5(ctx) {
    	let current;

    	const keypair = new KeyPair$2({
    			props: {
    				item: /*item*/ ctx[0],
    				index: /*index*/ ctx[17]
    			},
    			$$inline: true
    		});

    	keypair.$on("changeKey", function () {
    		if (is_function(/*changeKey*/ ctx[1])) /*changeKey*/ ctx[1].apply(this, arguments);
    	});

    	keypair.$on("changeValue", function () {
    		if (is_function(/*changeValue*/ ctx[2])) /*changeValue*/ ctx[2].apply(this, arguments);
    	});

    	keypair.$on("changeVisibility", function () {
    		if (is_function(/*changeVisibility*/ ctx[3])) /*changeVisibility*/ ctx[3].apply(this, arguments);
    	});

    	keypair.$on("delete", function () {
    		if (is_function(/*deleteLine*/ ctx[5])) /*deleteLine*/ ctx[5].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(keypair.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(keypair, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const keypair_changes = {};
    			if (dirty & /*item*/ 1) keypair_changes.item = /*item*/ ctx[0];
    			if (dirty & /*index*/ 131072) keypair_changes.index = /*index*/ ctx[17];
    			keypair.$set(keypair_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(keypair.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(keypair.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(keypair, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(165:4) <DraggableList         list={item.data.lines}         key=\\\"id\\\"         on:sort={reorder}         let:item       let:index     >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let header;
    	let div0;
    	let input0;
    	let t0;
    	let div1;
    	let input1;
    	let t1;
    	let section;
    	let current;
    	let dispose;
    	let if_block = /*mounted*/ ctx[7] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			header = element("header");
    			div0 = element("div");
    			input0 = element("input");
    			t0 = space();
    			div1 = element("div");
    			input1 = element("input");
    			t1 = space();
    			section = element("section");
    			if (if_block) if_block.c();
    			attr_dev(input0, "id", /*keypairElementId*/ ctx[6]);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Label");
    			attr_dev(input0, "class", "svelte-1apvqh3");
    			add_location(input0, file$d, 152, 4, 3304);
    			attr_dev(div0, "flex", "40");
    			attr_dev(div0, "class", "svelte-1apvqh3");
    			add_location(div0, file$d, 151, 2, 3284);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Data");
    			attr_dev(input1, "class", "svelte-1apvqh3");
    			add_location(input1, file$d, 155, 4, 3444);
    			attr_dev(div1, "flex", "60");
    			attr_dev(div1, "class", "svelte-1apvqh3");
    			add_location(div1, file$d, 154, 2, 3424);
    			attr_dev(header, "layout", "row");
    			attr_dev(header, "class", "svelte-1apvqh3");
    			add_location(header, file$d, 150, 0, 3260);
    			add_location(section, file$d, 162, 0, 3555);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div0);
    			append_dev(div0, input0);
    			set_input_value(input0, /*newItem*/ ctx[8].key);
    			append_dev(header, t0);
    			append_dev(header, div1);
    			append_dev(div1, input1);
    			set_input_value(input1, /*newItem*/ ctx[8].value);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, section, anchor);
    			if (if_block) if_block.m(section, null);
    			current = true;

    			dispose = [
    				listen_dev(input0, "input", /*input0_input_handler*/ ctx[15]),
    				listen_dev(
    					input0,
    					"keyup",
    					function () {
    						if (is_function(/*checkKeys*/ ctx[4])) /*checkKeys*/ ctx[4].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(input1, "input", /*input1_input_handler*/ ctx[16]),
    				listen_dev(
    					input1,
    					"keyup",
    					function () {
    						if (is_function(/*checkKeys*/ ctx[4])) /*checkKeys*/ ctx[4].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (!current || dirty & /*keypairElementId*/ 64) {
    				attr_dev(input0, "id", /*keypairElementId*/ ctx[6]);
    			}

    			if (dirty & /*newItem*/ 256 && input0.value !== /*newItem*/ ctx[8].key) {
    				set_input_value(input0, /*newItem*/ ctx[8].key);
    			}

    			if (dirty & /*newItem*/ 256 && input1.value !== /*newItem*/ ctx[8].value) {
    				set_input_value(input1, /*newItem*/ ctx[8].value);
    			}

    			if (/*mounted*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(section);
    			if (if_block) if_block.d();
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var add,
    		changeKey,
    		changeValue,
    		changeVisibility,
    		checkKeys,
    		deleteLine,
    		keypairElementId,
    		mounted,
    		newItem,
    		reindex,
    		reorder,
    		reset,
    		saveCb,
    		update;

    	mounted = false;

    	onMount(function () {
    		return $$invalidate(7, mounted = true);
    	});

    	keypairElementId = `new-keypair-${item.id}`;
    	newItem = null;

    	saveCb = function (r) {
    		console.log("saved!");
    		console.log(r);
    		return reset(true);
    	};

    	update = function () {
    		reindex();

    		return collection.save(
    			{
    				id: item.id,
    				data: { lines: item.data.lines }
    			},
    			saveCb
    		);
    	};

    	add = function () {
    		console.log("add");
    		console.log(newItem);

    		// set ordinal to max + 1
    		$$invalidate(8, newItem.created_at = Date.create(), newItem);

    		$$invalidate(8, newItem.modified_at = newItem.created_at, newItem);
    		item.data.lines.push(newItem);
    		return update();
    	};

    	reset = function (saved) {
    		$$invalidate(8, newItem = {
    			id: uuid_1(),
    			ordinal: item.data.lines.length,
    			key: "",
    			value: "",
    			is_visible: true,
    			created_at: null,
    			modified_at: null
    		});

    		if (saved == null) {
    			if (document.getElementById(keypairElementId) != null) {
    				// document.getElementById(keypairElementId).focus()
    				return 1;
    			}
    		}
    	};

    	reset();

    	changeKey = function (e) {
    		var itemToChangeIndex;
    		console.log("changeKey");
    		console.log(e.detail);

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		console.log(item.data.lines[itemToChangeIndex]);
    		$$invalidate(0, item.data.lines[itemToChangeIndex].key = e.detail.key, item);
    		return update();
    	};

    	changeValue = function (e) {
    		var itemToChangeIndex;
    		console.log("changeValue");
    		console.log(e.detail);

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		console.log(item.data.lines[itemToChangeIndex]);
    		$$invalidate(0, item.data.lines[itemToChangeIndex].value = e.detail.value, item);
    		return update();
    	};

    	changeVisibility = function (e) {
    		var itemToChangeIndex;
    		console.log("changeVisibility");
    		console.log(e.detail);

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		console.log(item.data.lines[itemToChangeIndex]);
    		$$invalidate(0, item.data.lines[itemToChangeIndex].is_visible = e.detail.is_visible, item);
    		return update();
    	};

    	reindex = function () {
    		return item.data.lines.forEach(function (item, index) {
    			return item.ordinal = index;
    		});
    	};

    	reorder = function (ev) {
    		$$invalidate(0, item.data.lines = ev.detail, item);
    		return update();
    	};

    	deleteLine = function (e) {
    		item.data.lines.remove(function (o) {
    			return o.id === e.detail;
    		});

    		// todo: reindex ordinals
    		return update();
    	};

    	checkKeys = function (e) {
    		console.log(e);

    		if (e.code === "NumpadEnter" || e.code === "Enter" && !e.shiftKey) {
    			return add();
    		}
    	};

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<KeyPair> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		newItem.key = this.value;
    		$$invalidate(8, newItem);
    	}

    	function input1_input_handler() {
    		newItem.value = this.value;
    		$$invalidate(8, newItem);
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			add,
    			changeKey,
    			changeValue,
    			changeVisibility,
    			checkKeys,
    			deleteLine,
    			keypairElementId,
    			mounted,
    			newItem,
    			reindex,
    			reorder,
    			reset,
    			saveCb,
    			update
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("add" in $$props) add = $$props.add;
    		if ("changeKey" in $$props) $$invalidate(1, changeKey = $$props.changeKey);
    		if ("changeValue" in $$props) $$invalidate(2, changeValue = $$props.changeValue);
    		if ("changeVisibility" in $$props) $$invalidate(3, changeVisibility = $$props.changeVisibility);
    		if ("checkKeys" in $$props) $$invalidate(4, checkKeys = $$props.checkKeys);
    		if ("deleteLine" in $$props) $$invalidate(5, deleteLine = $$props.deleteLine);
    		if ("keypairElementId" in $$props) $$invalidate(6, keypairElementId = $$props.keypairElementId);
    		if ("mounted" in $$props) $$invalidate(7, mounted = $$props.mounted);
    		if ("newItem" in $$props) $$invalidate(8, newItem = $$props.newItem);
    		if ("reindex" in $$props) reindex = $$props.reindex;
    		if ("reorder" in $$props) $$invalidate(9, reorder = $$props.reorder);
    		if ("reset" in $$props) reset = $$props.reset;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("update" in $$props) update = $$props.update;
    	};

    	return [
    		item,
    		changeKey,
    		changeValue,
    		changeVisibility,
    		checkKeys,
    		deleteLine,
    		keypairElementId,
    		mounted,
    		newItem,
    		reorder,
    		add,
    		reindex,
    		reset,
    		saveCb,
    		update,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class KeyPair_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "KeyPair_1",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console_1$2.warn("<KeyPair> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<KeyPair>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<KeyPair>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
    FullCalendar Core Package v4.3.0
    Docs & License: https://fullcalendar.io/
    (c) 2019 Adam Shaw
    */

    // Creating
    // ----------------------------------------------------------------------------------------------------------------
    var elementPropHash = {
        className: true,
        colSpan: true,
        rowSpan: true
    };
    var containerTagHash = {
        '<tr': 'tbody',
        '<td': 'tr'
    };
    function createElement(tagName, attrs, content) {
        var el = document.createElement(tagName);
        if (attrs) {
            for (var attrName in attrs) {
                if (attrName === 'style') {
                    applyStyle(el, attrs[attrName]);
                }
                else if (elementPropHash[attrName]) {
                    el[attrName] = attrs[attrName];
                }
                else {
                    el.setAttribute(attrName, attrs[attrName]);
                }
            }
        }
        if (typeof content === 'string') {
            el.innerHTML = content; // shortcut. no need to process HTML in any way
        }
        else if (content != null) {
            appendToElement(el, content);
        }
        return el;
    }
    function htmlToElement(html) {
        html = html.trim();
        var container = document.createElement(computeContainerTag(html));
        container.innerHTML = html;
        return container.firstChild;
    }
    function htmlToElements(html) {
        return Array.prototype.slice.call(htmlToNodeList(html));
    }
    function htmlToNodeList(html) {
        html = html.trim();
        var container = document.createElement(computeContainerTag(html));
        container.innerHTML = html;
        return container.childNodes;
    }
    // assumes html already trimmed and tag names are lowercase
    function computeContainerTag(html) {
        return containerTagHash[html.substr(0, 3) // faster than using regex
        ] || 'div';
    }
    function appendToElement(el, content) {
        var childNodes = normalizeContent(content);
        for (var i = 0; i < childNodes.length; i++) {
            el.appendChild(childNodes[i]);
        }
    }
    function prependToElement(parent, content) {
        var newEls = normalizeContent(content);
        var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children
        for (var i = 0; i < newEls.length; i++) {
            parent.insertBefore(newEls[i], afterEl);
        }
    }
    function insertAfterElement(refEl, content) {
        var newEls = normalizeContent(content);
        var afterEl = refEl.nextSibling || null;
        for (var i = 0; i < newEls.length; i++) {
            refEl.parentNode.insertBefore(newEls[i], afterEl);
        }
    }
    function normalizeContent(content) {
        var els;
        if (typeof content === 'string') {
            els = htmlToElements(content);
        }
        else if (content instanceof Node) {
            els = [content];
        }
        else { // Node[] or NodeList
            els = Array.prototype.slice.call(content);
        }
        return els;
    }
    function removeElement(el) {
        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }
    }
    // Querying
    // ----------------------------------------------------------------------------------------------------------------
    // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
    var matchesMethod = Element.prototype.matches ||
        Element.prototype.matchesSelector ||
        Element.prototype.msMatchesSelector;
    var closestMethod = Element.prototype.closest || function (selector) {
        // polyfill
        var el = this;
        if (!document.documentElement.contains(el)) {
            return null;
        }
        do {
            if (elementMatches(el, selector)) {
                return el;
            }
            el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);
        return null;
    };
    function elementClosest(el, selector) {
        return closestMethod.call(el, selector);
    }
    function elementMatches(el, selector) {
        return matchesMethod.call(el, selector);
    }
    // accepts multiple subject els
    // returns a real array. good for methods like forEach
    function findElements(container, selector) {
        var containers = container instanceof HTMLElement ? [container] : container;
        var allMatches = [];
        for (var i = 0; i < containers.length; i++) {
            var matches = containers[i].querySelectorAll(selector);
            for (var j = 0; j < matches.length; j++) {
                allMatches.push(matches[j]);
            }
        }
        return allMatches;
    }
    // accepts multiple subject els
    // only queries direct child elements
    function findChildren(parent, selector) {
        var parents = parent instanceof HTMLElement ? [parent] : parent;
        var allMatches = [];
        for (var i = 0; i < parents.length; i++) {
            var childNodes = parents[i].children; // only ever elements
            for (var j = 0; j < childNodes.length; j++) {
                var childNode = childNodes[j];
                if (!selector || elementMatches(childNode, selector)) {
                    allMatches.push(childNode);
                }
            }
        }
        return allMatches;
    }
    // Style
    // ----------------------------------------------------------------------------------------------------------------
    var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;
    function applyStyle(el, props) {
        for (var propName in props) {
            applyStyleProp(el, propName, props[propName]);
        }
    }
    function applyStyleProp(el, name, val) {
        if (val == null) {
            el.style[name] = '';
        }
        else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {
            el.style[name] = val + 'px';
        }
        else {
            el.style[name] = val;
        }
    }

    function pointInsideRect(point, rect) {
        return point.left >= rect.left &&
            point.left < rect.right &&
            point.top >= rect.top &&
            point.top < rect.bottom;
    }
    // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
    function intersectRects(rect1, rect2) {
        var res = {
            left: Math.max(rect1.left, rect2.left),
            right: Math.min(rect1.right, rect2.right),
            top: Math.max(rect1.top, rect2.top),
            bottom: Math.min(rect1.bottom, rect2.bottom)
        };
        if (res.left < res.right && res.top < res.bottom) {
            return res;
        }
        return false;
    }
    // Returns a new point that will have been moved to reside within the given rectangle
    function constrainPoint(point, rect) {
        return {
            left: Math.min(Math.max(point.left, rect.left), rect.right),
            top: Math.min(Math.max(point.top, rect.top), rect.bottom)
        };
    }
    // Returns a point that is the center of the given rectangle
    function getRectCenter(rect) {
        return {
            left: (rect.left + rect.right) / 2,
            top: (rect.top + rect.bottom) / 2
        };
    }
    // Subtracts point2's coordinates from point1's coordinates, returning a delta
    function diffPoints(point1, point2) {
        return {
            left: point1.left - point2.left,
            top: point1.top - point2.top
        };
    }

    // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side
    var isRtlScrollbarOnLeft = null;
    function getIsRtlScrollbarOnLeft() {
        if (isRtlScrollbarOnLeft === null) {
            isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
        }
        return isRtlScrollbarOnLeft;
    }
    function computeIsRtlScrollbarOnLeft() {
        var outerEl = createElement('div', {
            style: {
                position: 'absolute',
                top: -1000,
                left: 0,
                border: 0,
                padding: 0,
                overflow: 'scroll',
                direction: 'rtl'
            }
        }, '<div></div>');
        document.body.appendChild(outerEl);
        var innerEl = outerEl.firstChild;
        var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
        removeElement(outerEl);
        return res;
    }
    // The scrollbar width computations in computeEdges are sometimes flawed when it comes to
    // retina displays, rounding, and IE11. Massage them into a usable value.
    function sanitizeScrollbarWidth(width) {
        width = Math.max(0, width); // no negatives
        width = Math.round(width);
        return width;
    }

    function computeEdges(el, getPadding) {
        if (getPadding === void 0) { getPadding = false; }
        var computedStyle = window.getComputedStyle(el);
        var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
        var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
        var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
        var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
        // must use offset(Width|Height) because compatible with client(Width|Height)
        var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);
        var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);
        var res = {
            borderLeft: borderLeft,
            borderRight: borderRight,
            borderTop: borderTop,
            borderBottom: borderBottom,
            scrollbarBottom: scrollbarBottom,
            scrollbarLeft: 0,
            scrollbarRight: 0
        };
        if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') { // is the scrollbar on the left side?
            res.scrollbarLeft = scrollbarLeftRight;
        }
        else {
            res.scrollbarRight = scrollbarLeftRight;
        }
        if (getPadding) {
            res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
            res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
            res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
            res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
        }
        return res;
    }
    function computeInnerRect(el, goWithinPadding) {
        if (goWithinPadding === void 0) { goWithinPadding = false; }
        var outerRect = computeRect(el);
        var edges = computeEdges(el, goWithinPadding);
        var res = {
            left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
            right: outerRect.right - edges.borderRight - edges.scrollbarRight,
            top: outerRect.top + edges.borderTop,
            bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
        };
        if (goWithinPadding) {
            res.left += edges.paddingLeft;
            res.right -= edges.paddingRight;
            res.top += edges.paddingTop;
            res.bottom -= edges.paddingBottom;
        }
        return res;
    }
    function computeRect(el) {
        var rect = el.getBoundingClientRect();
        return {
            left: rect.left + window.pageXOffset,
            top: rect.top + window.pageYOffset,
            right: rect.right + window.pageXOffset,
            bottom: rect.bottom + window.pageYOffset
        };
    }
    function computeViewportRect() {
        return {
            left: window.pageXOffset,
            right: window.pageXOffset + document.documentElement.clientWidth,
            top: window.pageYOffset,
            bottom: window.pageYOffset + document.documentElement.clientHeight
        };
    }
    function computeHeightAndMargins(el) {
        return el.getBoundingClientRect().height + computeVMargins(el);
    }
    function computeVMargins(el) {
        var computed = window.getComputedStyle(el);
        return parseInt(computed.marginTop, 10) +
            parseInt(computed.marginBottom, 10);
    }
    // does not return window
    function getClippingParents(el) {
        var parents = [];
        while (el instanceof HTMLElement) { // will stop when gets to document or null
            var computedStyle = window.getComputedStyle(el);
            if (computedStyle.position === 'fixed') {
                break;
            }
            if ((/(auto|scroll)/).test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {
                parents.push(el);
            }
            el = el.parentNode;
        }
        return parents;
    }
    function computeClippingRect(el) {
        return getClippingParents(el)
            .map(function (el) {
            return computeInnerRect(el);
        })
            .concat(computeViewportRect())
            .reduce(function (rect0, rect1) {
            return intersectRects(rect0, rect1) || rect1; // should always intersect
        });
    }

    // Stops a mouse/touch event from doing it's native browser action
    function preventDefault$1(ev) {
        ev.preventDefault();
    }
    // Event Delegation
    // ----------------------------------------------------------------------------------------------------------------
    function listenBySelector(container, eventType, selector, handler) {
        function realHandler(ev) {
            var matchedChild = elementClosest(ev.target, selector);
            if (matchedChild) {
                handler.call(matchedChild, ev, matchedChild);
            }
        }
        container.addEventListener(eventType, realHandler);
        return function () {
            container.removeEventListener(eventType, realHandler);
        };
    }
    function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
        var currentMatchedChild;
        return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {
            if (matchedChild !== currentMatchedChild) {
                currentMatchedChild = matchedChild;
                onMouseEnter(ev, matchedChild);
                var realOnMouseLeave_1 = function (ev) {
                    currentMatchedChild = null;
                    onMouseLeave(ev, matchedChild);
                    matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);
                };
                // listen to the next mouseleave, and then unattach
                matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);
            }
        });
    }
    // Animation
    // ----------------------------------------------------------------------------------------------------------------
    var transitionEventNames = [
        'webkitTransitionEnd',
        'otransitionend',
        'oTransitionEnd',
        'msTransitionEnd',
        'transitionend'
    ];
    // triggered only when the next single subsequent transition finishes
    function whenTransitionDone(el, callback) {
        var realCallback = function (ev) {
            callback(ev);
            transitionEventNames.forEach(function (eventName) {
                el.removeEventListener(eventName, realCallback);
            });
        };
        transitionEventNames.forEach(function (eventName) {
            el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
        });
    }

    var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
    // Adding
    function addWeeks$1(m, n) {
        var a = dateToUtcArray(m);
        a[2] += n * 7;
        return arrayToUtcDate(a);
    }
    function addDays$1(m, n) {
        var a = dateToUtcArray(m);
        a[2] += n;
        return arrayToUtcDate(a);
    }
    function addMs(m, n) {
        var a = dateToUtcArray(m);
        a[6] += n;
        return arrayToUtcDate(a);
    }
    // Diffing (all return floats)
    function diffWeeks(m0, m1) {
        return diffDays(m0, m1) / 7;
    }
    function diffDays(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);
    }
    function diffHours(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);
    }
    function diffMinutes(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60);
    }
    function diffSeconds(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / 1000;
    }
    function diffDayAndTime(m0, m1) {
        var m0day = startOfDay(m0);
        var m1day = startOfDay(m1);
        return {
            years: 0,
            months: 0,
            days: Math.round(diffDays(m0day, m1day)),
            milliseconds: (m1.valueOf() - m1day.valueOf()) - (m0.valueOf() - m0day.valueOf())
        };
    }
    // Diffing Whole Units
    function diffWholeWeeks(m0, m1) {
        var d = diffWholeDays(m0, m1);
        if (d !== null && d % 7 === 0) {
            return d / 7;
        }
        return null;
    }
    function diffWholeDays(m0, m1) {
        if (timeAsMs(m0) === timeAsMs(m1)) {
            return Math.round(diffDays(m0, m1));
        }
        return null;
    }
    // Start-Of
    function startOfDay(m) {
        return arrayToUtcDate([
            m.getUTCFullYear(),
            m.getUTCMonth(),
            m.getUTCDate()
        ]);
    }
    function startOfHour(m) {
        return arrayToUtcDate([
            m.getUTCFullYear(),
            m.getUTCMonth(),
            m.getUTCDate(),
            m.getUTCHours()
        ]);
    }
    function startOfMinute(m) {
        return arrayToUtcDate([
            m.getUTCFullYear(),
            m.getUTCMonth(),
            m.getUTCDate(),
            m.getUTCHours(),
            m.getUTCMinutes()
        ]);
    }
    function startOfSecond(m) {
        return arrayToUtcDate([
            m.getUTCFullYear(),
            m.getUTCMonth(),
            m.getUTCDate(),
            m.getUTCHours(),
            m.getUTCMinutes(),
            m.getUTCSeconds()
        ]);
    }
    // Week Computation
    function weekOfYear(marker, dow, doy) {
        var y = marker.getUTCFullYear();
        var w = weekOfGivenYear(marker, y, dow, doy);
        if (w < 1) {
            return weekOfGivenYear(marker, y - 1, dow, doy);
        }
        var nextW = weekOfGivenYear(marker, y + 1, dow, doy);
        if (nextW >= 1) {
            return Math.min(w, nextW);
        }
        return w;
    }
    function weekOfGivenYear(marker, year, dow, doy) {
        var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);
        var dayStart = startOfDay(marker);
        var days = Math.round(diffDays(firstWeekStart, dayStart));
        return Math.floor(days / 7) + 1; // zero-indexed
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        var fwd = 7 + dow - doy;
        // first-week day local weekday -- which local weekday is fwd
        var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    // Array Conversion
    function dateToLocalArray(date) {
        return [
            date.getFullYear(),
            date.getMonth(),
            date.getDate(),
            date.getHours(),
            date.getMinutes(),
            date.getSeconds(),
            date.getMilliseconds()
        ];
    }
    function arrayToLocalDate(a) {
        return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month
        a[3] || 0, a[4] || 0, a[5] || 0);
    }
    function dateToUtcArray(date) {
        return [
            date.getUTCFullYear(),
            date.getUTCMonth(),
            date.getUTCDate(),
            date.getUTCHours(),
            date.getUTCMinutes(),
            date.getUTCSeconds(),
            date.getUTCMilliseconds()
        ];
    }
    function arrayToUtcDate(a) {
        // according to web standards (and Safari), a month index is required.
        // massage if only given a year.
        if (a.length === 1) {
            a = a.concat([0]);
        }
        return new Date(Date.UTC.apply(Date, a));
    }
    // Other Utils
    function isValidDate(m) {
        return !isNaN(m.valueOf());
    }
    function timeAsMs(m) {
        return m.getUTCHours() * 1000 * 60 * 60 +
            m.getUTCMinutes() * 1000 * 60 +
            m.getUTCSeconds() * 1000 +
            m.getUTCMilliseconds();
    }

    var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];
    var PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;
    // Parsing and Creation
    function createDuration(input, unit) {
        var _a;
        if (typeof input === 'string') {
            return parseString(input);
        }
        else if (typeof input === 'object' && input) { // non-null object
            return normalizeObject(input);
        }
        else if (typeof input === 'number') {
            return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));
        }
        else {
            return null;
        }
    }
    function parseString(s) {
        var m = PARSE_RE.exec(s);
        if (m) {
            var sign = m[1] ? -1 : 1;
            return {
                years: 0,
                months: 0,
                days: sign * (m[2] ? parseInt(m[2], 10) : 0),
                milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours
                    (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes
                    (m[5] ? parseInt(m[5], 10) : 0) * 1000 + // seconds
                    (m[6] ? parseInt(m[6], 10) : 0) // ms
                )
            };
        }
        return null;
    }
    function normalizeObject(obj) {
        return {
            years: obj.years || obj.year || 0,
            months: obj.months || obj.month || 0,
            days: (obj.days || obj.day || 0) +
                getWeeksFromInput(obj) * 7,
            milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours
                (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes
                (obj.seconds || obj.second || 0) * 1000 + // seconds
                (obj.milliseconds || obj.millisecond || obj.ms || 0) // ms
        };
    }
    function getWeeksFromInput(obj) {
        return obj.weeks || obj.week || 0;
    }
    // Equality
    function durationsEqual(d0, d1) {
        return d0.years === d1.years &&
            d0.months === d1.months &&
            d0.days === d1.days &&
            d0.milliseconds === d1.milliseconds;
    }
    // Simple Math
    function addDurations(d0, d1) {
        return {
            years: d0.years + d1.years,
            months: d0.months + d1.months,
            days: d0.days + d1.days,
            milliseconds: d0.milliseconds + d1.milliseconds
        };
    }
    function subtractDurations(d1, d0) {
        return {
            years: d1.years - d0.years,
            months: d1.months - d0.months,
            days: d1.days - d0.days,
            milliseconds: d1.milliseconds - d0.milliseconds
        };
    }
    function multiplyDuration(d, n) {
        return {
            years: d.years * n,
            months: d.months * n,
            days: d.days * n,
            milliseconds: d.milliseconds * n
        };
    }
    // Conversions
    // "Rough" because they are based on average-case Gregorian months/years
    function asRoughYears(dur) {
        return asRoughDays(dur) / 365;
    }
    function asRoughMonths(dur) {
        return asRoughDays(dur) / 30;
    }
    function asRoughDays(dur) {
        return asRoughMs(dur) / 864e5;
    }
    function asRoughMs(dur) {
        return dur.years * (365 * 864e5) +
            dur.months * (30 * 864e5) +
            dur.days * 864e5 +
            dur.milliseconds;
    }
    // Advanced Math
    function wholeDivideDurations(numerator, denominator) {
        var res = null;
        for (var i = 0; i < INTERNAL_UNITS.length; i++) {
            var unit = INTERNAL_UNITS[i];
            if (denominator[unit]) {
                var localRes = numerator[unit] / denominator[unit];
                if (!isInt(localRes) || (res !== null && res !== localRes)) {
                    return null;
                }
                res = localRes;
            }
            else if (numerator[unit]) {
                // needs to divide by something but can't!
                return null;
            }
        }
        return res;
    }
    function greatestDurationDenominator(dur, dontReturnWeeks) {
        var ms = dur.milliseconds;
        if (ms) {
            if (ms % 1000 !== 0) {
                return { unit: 'millisecond', value: ms };
            }
            if (ms % (1000 * 60) !== 0) {
                return { unit: 'second', value: ms / 1000 };
            }
            if (ms % (1000 * 60 * 60) !== 0) {
                return { unit: 'minute', value: ms / (1000 * 60) };
            }
            if (ms) {
                return { unit: 'hour', value: ms / (1000 * 60 * 60) };
            }
        }
        if (dur.days) {
            if (!dontReturnWeeks && dur.days % 7 === 0) {
                return { unit: 'week', value: dur.days / 7 };
            }
            return { unit: 'day', value: dur.days };
        }
        if (dur.months) {
            return { unit: 'month', value: dur.months };
        }
        if (dur.years) {
            return { unit: 'year', value: dur.years };
        }
        return { unit: 'millisecond', value: 0 };
    }

    /* FullCalendar-specific DOM Utilities
    ----------------------------------------------------------------------------------------------------------------------*/
    // Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
    // and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.
    function compensateScroll(rowEl, scrollbarWidths) {
        if (scrollbarWidths.left) {
            applyStyle(rowEl, {
                borderLeftWidth: 1,
                marginLeft: scrollbarWidths.left - 1
            });
        }
        if (scrollbarWidths.right) {
            applyStyle(rowEl, {
                borderRightWidth: 1,
                marginRight: scrollbarWidths.right - 1
            });
        }
    }
    // Undoes compensateScroll and restores all borders/margins
    function uncompensateScroll(rowEl) {
        applyStyle(rowEl, {
            marginLeft: '',
            marginRight: '',
            borderLeftWidth: '',
            borderRightWidth: ''
        });
    }
    // Make the mouse cursor express that an event is not allowed in the current area
    function disableCursor() {
        document.body.classList.add('fc-not-allowed');
    }
    // Returns the mouse cursor to its original look
    function enableCursor() {
        document.body.classList.remove('fc-not-allowed');
    }
    // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
    // By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
    // any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
    // reduces the available height.
    function distributeHeight(els, availableHeight, shouldRedistribute) {
        // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
        // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
        var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element
        var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*
        var flexEls = []; // elements that are allowed to expand. array of DOM nodes
        var flexOffsets = []; // amount of vertical space it takes up
        var flexHeights = []; // actual css height
        var usedHeight = 0;
        undistributeHeight(els); // give all elements their natural height
        // find elements that are below the recommended height (expandable).
        // important to query for heights in a single first pass (to avoid reflow oscillation).
        els.forEach(function (el, i) {
            var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
            var naturalHeight = el.getBoundingClientRect().height;
            var naturalOffset = naturalHeight + computeVMargins(el);
            if (naturalOffset < minOffset) {
                flexEls.push(el);
                flexOffsets.push(naturalOffset);
                flexHeights.push(naturalHeight);
            }
            else {
                // this element stretches past recommended height (non-expandable). mark the space as occupied.
                usedHeight += naturalOffset;
            }
        });
        // readjust the recommended height to only consider the height available to non-maxed-out rows.
        if (shouldRedistribute) {
            availableHeight -= usedHeight;
            minOffset1 = Math.floor(availableHeight / flexEls.length);
            minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
        }
        // assign heights to all expandable elements
        flexEls.forEach(function (el, i) {
            var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
            var naturalOffset = flexOffsets[i];
            var naturalHeight = flexHeights[i];
            var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding
            if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things
                el.style.height = newHeight + 'px';
            }
        });
    }
    // Undoes distrubuteHeight, restoring all els to their natural height
    function undistributeHeight(els) {
        els.forEach(function (el) {
            el.style.height = '';
        });
    }
    // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the
    // cells to be that width.
    // PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline
    function matchCellWidths(els) {
        var maxInnerWidth = 0;
        els.forEach(function (el) {
            var innerEl = el.firstChild; // hopefully an element
            if (innerEl instanceof HTMLElement) {
                var innerWidth_1 = innerEl.getBoundingClientRect().width;
                if (innerWidth_1 > maxInnerWidth) {
                    maxInnerWidth = innerWidth_1;
                }
            }
        });
        maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance
        els.forEach(function (el) {
            el.style.width = maxInnerWidth + 'px';
        });
        return maxInnerWidth;
    }
    // Given one element that resides inside another,
    // Subtracts the height of the inner element from the outer element.
    function subtractInnerElHeight(outerEl, innerEl) {
        // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
        var reflowStyleProps = {
            position: 'relative',
            left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll
        };
        applyStyle(outerEl, reflowStyleProps);
        applyStyle(innerEl, reflowStyleProps);
        var diff = // grab the dimensions
         outerEl.getBoundingClientRect().height -
            innerEl.getBoundingClientRect().height;
        // undo hack
        var resetStyleProps = { position: '', left: '' };
        applyStyle(outerEl, resetStyleProps);
        applyStyle(innerEl, resetStyleProps);
        return diff;
    }
    /* Selection
    ----------------------------------------------------------------------------------------------------------------------*/
    function preventSelection(el) {
        el.classList.add('fc-unselectable');
        el.addEventListener('selectstart', preventDefault$1);
    }
    function allowSelection(el) {
        el.classList.remove('fc-unselectable');
        el.removeEventListener('selectstart', preventDefault$1);
    }
    /* Context Menu
    ----------------------------------------------------------------------------------------------------------------------*/
    function preventContextMenu(el) {
        el.addEventListener('contextmenu', preventDefault$1);
    }
    function allowContextMenu(el) {
        el.removeEventListener('contextmenu', preventDefault$1);
    }
    /* Object Ordering by Field
    ----------------------------------------------------------------------------------------------------------------------*/
    function parseFieldSpecs(input) {
        var specs = [];
        var tokens = [];
        var i;
        var token;
        if (typeof input === 'string') {
            tokens = input.split(/\s*,\s*/);
        }
        else if (typeof input === 'function') {
            tokens = [input];
        }
        else if (Array.isArray(input)) {
            tokens = input;
        }
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            if (typeof token === 'string') {
                specs.push(token.charAt(0) === '-' ?
                    { field: token.substring(1), order: -1 } :
                    { field: token, order: 1 });
            }
            else if (typeof token === 'function') {
                specs.push({ func: token });
            }
        }
        return specs;
    }
    function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
        var i;
        var cmp;
        for (i = 0; i < fieldSpecs.length; i++) {
            cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);
            if (cmp) {
                return cmp;
            }
        }
        return 0;
    }
    function compareByFieldSpec(obj0, obj1, fieldSpec) {
        if (fieldSpec.func) {
            return fieldSpec.func(obj0, obj1);
        }
        return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field])
            * (fieldSpec.order || 1);
    }
    function flexibleCompare(a, b) {
        if (!a && !b) {
            return 0;
        }
        if (b == null) {
            return -1;
        }
        if (a == null) {
            return 1;
        }
        if (typeof a === 'string' || typeof b === 'string') {
            return String(a).localeCompare(String(b));
        }
        return a - b;
    }
    /* String Utilities
    ----------------------------------------------------------------------------------------------------------------------*/
    function capitaliseFirstLetter(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    function padStart(val, len) {
        var s = String(val);
        return '000'.substr(0, len - s.length) + s;
    }
    /* Number Utilities
    ----------------------------------------------------------------------------------------------------------------------*/
    function compareNumbers(a, b) {
        return a - b;
    }
    function isInt(n) {
        return n % 1 === 0;
    }
    /* Weird Utilities
    ----------------------------------------------------------------------------------------------------------------------*/
    function applyAll(functions, thisObj, args) {
        if (typeof functions === 'function') { // supplied a single function
            functions = [functions];
        }
        if (functions) {
            var i = void 0;
            var ret = void 0;
            for (i = 0; i < functions.length; i++) {
                ret = functions[i].apply(thisObj, args) || ret;
            }
            return ret;
        }
    }
    function firstDefined() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        for (var i = 0; i < args.length; i++) {
            if (args[i] !== undefined) {
                return args[i];
            }
        }
    }
    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    // https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714
    function debounce$1(func, wait) {
        var timeout;
        var args;
        var context;
        var timestamp;
        var result;
        var later = function () {
            var last = new Date().valueOf() - timestamp;
            if (last < wait) {
                timeout = setTimeout(later, wait - last);
            }
            else {
                timeout = null;
                result = func.apply(context, args);
                context = args = null;
            }
        };
        return function () {
            context = this;
            args = arguments;
            timestamp = new Date().valueOf();
            if (!timeout) {
                timeout = setTimeout(later, wait);
            }
            return result;
        };
    }
    // Number and Boolean are only types that defaults or not computed for
    // TODO: write more comments
    function refineProps(rawProps, processors, defaults, leftoverProps) {
        if (defaults === void 0) { defaults = {}; }
        var refined = {};
        for (var key in processors) {
            var processor = processors[key];
            if (rawProps[key] !== undefined) {
                // found
                if (processor === Function) {
                    refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;
                }
                else if (processor) { // a refining function?
                    refined[key] = processor(rawProps[key]);
                }
                else {
                    refined[key] = rawProps[key];
                }
            }
            else if (defaults[key] !== undefined) {
                // there's an explicit default
                refined[key] = defaults[key];
            }
            else {
                // must compute a default
                if (processor === String) {
                    refined[key] = ''; // empty string is default for String
                }
                else if (!processor || processor === Number || processor === Boolean || processor === Function) {
                    refined[key] = null; // assign null for other non-custom processor funcs
                }
                else {
                    refined[key] = processor(null); // run the custom processor func
                }
            }
        }
        if (leftoverProps) {
            for (var key in rawProps) {
                if (processors[key] === undefined) {
                    leftoverProps[key] = rawProps[key];
                }
            }
        }
        return refined;
    }
    /* Date stuff that doesn't belong in datelib core
    ----------------------------------------------------------------------------------------------------------------------*/
    // given a timed range, computes an all-day range that has the same exact duration,
    // but whose start time is aligned with the start of the day.
    function computeAlignedDayRange(timedRange) {
        var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
        var start = startOfDay(timedRange.start);
        var end = addDays$1(start, dayCnt);
        return { start: start, end: end };
    }
    // given a timed range, computes an all-day range based on how for the end date bleeds into the next day
    // TODO: give nextDayThreshold a default arg
    function computeVisibleDayRange(timedRange, nextDayThreshold) {
        if (nextDayThreshold === void 0) { nextDayThreshold = createDuration(0); }
        var startDay = null;
        var endDay = null;
        if (timedRange.end) {
            endDay = startOfDay(timedRange.end);
            var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
            // If the end time is actually inclusively part of the next day and is equal to or
            // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
            // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
            if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {
                endDay = addDays$1(endDay, 1);
            }
        }
        if (timedRange.start) {
            startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
            // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.
            if (endDay && endDay <= startDay) {
                endDay = addDays$1(startDay, 1);
            }
        }
        return { start: startDay, end: endDay };
    }
    // spans from one day into another?
    function isMultiDayRange(range) {
        var visibleRange = computeVisibleDayRange(range);
        return diffDays(visibleRange.start, visibleRange.end) > 1;
    }
    function diffDates(date0, date1, dateEnv, largeUnit) {
        if (largeUnit === 'year') {
            return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
        }
        else if (largeUnit === 'month') {
            return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
        }
        else {
            return diffDayAndTime(date0, date1); // returns a duration
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {
        for (var i = 0; i < recurringTypes.length; i++) {
            var localLeftovers = {};
            var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);
            if (parsed) {
                var allDay = localLeftovers.allDay;
                delete localLeftovers.allDay; // remove from leftovers
                if (allDay == null) {
                    allDay = allDayDefault;
                    if (allDay == null) {
                        allDay = parsed.allDayGuess;
                        if (allDay == null) {
                            allDay = false;
                        }
                    }
                }
                __assign(leftovers, localLeftovers);
                return {
                    allDay: allDay,
                    duration: parsed.duration,
                    typeData: parsed.typeData,
                    typeId: i
                };
            }
        }
        return null;
    }
    /*
    Event MUST have a recurringDef
    */
    function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
        var typeDef = recurringTypes[eventDef.recurringDef.typeId];
        var markers = typeDef.expand(eventDef.recurringDef.typeData, {
            start: dateEnv.subtract(framingRange.start, duration),
            end: framingRange.end
        }, dateEnv);
        // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to
        if (eventDef.allDay) {
            markers = markers.map(startOfDay);
        }
        return markers;
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    // Merges an array of objects into a single object.
    // The second argument allows for an array of property names who's object values will be merged together.
    function mergeProps(propObjs, complexProps) {
        var dest = {};
        var i;
        var name;
        var complexObjs;
        var j;
        var val;
        var props;
        if (complexProps) {
            for (i = 0; i < complexProps.length; i++) {
                name = complexProps[i];
                complexObjs = [];
                // collect the trailing object values, stopping when a non-object is discovered
                for (j = propObjs.length - 1; j >= 0; j--) {
                    val = propObjs[j][name];
                    if (typeof val === 'object' && val) { // non-null object
                        complexObjs.unshift(val);
                    }
                    else if (val !== undefined) {
                        dest[name] = val; // if there were no objects, this value will be used
                        break;
                    }
                }
                // if the trailing values were objects, use the merged value
                if (complexObjs.length) {
                    dest[name] = mergeProps(complexObjs);
                }
            }
        }
        // copy values into the destination, going from last to first
        for (i = propObjs.length - 1; i >= 0; i--) {
            props = propObjs[i];
            for (name in props) {
                if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign
                    dest[name] = props[name];
                }
            }
        }
        return dest;
    }
    function filterHash(hash, func) {
        var filtered = {};
        for (var key in hash) {
            if (func(hash[key], key)) {
                filtered[key] = hash[key];
            }
        }
        return filtered;
    }
    function mapHash(hash, func) {
        var newHash = {};
        for (var key in hash) {
            newHash[key] = func(hash[key], key);
        }
        return newHash;
    }
    function arrayToHash(a) {
        var hash = {};
        for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
            var item = a_1[_i];
            hash[item] = true;
        }
        return hash;
    }
    function hashValuesToArray(obj) {
        var a = [];
        for (var key in obj) {
            a.push(obj[key]);
        }
        return a;
    }
    function isPropsEqual(obj0, obj1) {
        for (var key in obj0) {
            if (hasOwnProperty.call(obj0, key)) {
                if (!(key in obj1)) {
                    return false;
                }
            }
        }
        for (var key in obj1) {
            if (hasOwnProperty.call(obj1, key)) {
                if (obj0[key] !== obj1[key]) {
                    return false;
                }
            }
        }
        return true;
    }

    function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {
        var eventStore = createEmptyEventStore();
        for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {
            var rawEvent = rawEvents_1[_i];
            var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);
            if (tuple) {
                eventTupleToStore(tuple, eventStore);
            }
        }
        return eventStore;
    }
    function eventTupleToStore(tuple, eventStore) {
        if (eventStore === void 0) { eventStore = createEmptyEventStore(); }
        eventStore.defs[tuple.def.defId] = tuple.def;
        if (tuple.instance) {
            eventStore.instances[tuple.instance.instanceId] = tuple.instance;
        }
        return eventStore;
    }
    function expandRecurring(eventStore, framingRange, calendar) {
        var dateEnv = calendar.dateEnv;
        var defs = eventStore.defs, instances = eventStore.instances;
        // remove existing recurring instances
        instances = filterHash(instances, function (instance) {
            return !defs[instance.defId].recurringDef;
        });
        for (var defId in defs) {
            var def = defs[defId];
            if (def.recurringDef) {
                var duration = def.recurringDef.duration;
                if (!duration) {
                    duration = def.allDay ?
                        calendar.defaultAllDayEventDuration :
                        calendar.defaultTimedEventDuration;
                }
                var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);
                for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {
                    var start = starts_1[_i];
                    var instance = createEventInstance(defId, {
                        start: start,
                        end: dateEnv.add(start, duration)
                    });
                    instances[instance.instanceId] = instance;
                }
            }
        }
        return { defs: defs, instances: instances };
    }
    // retrieves events that have the same groupId as the instance specified by `instanceId`
    // or they are the same as the instance.
    // why might instanceId not be in the store? an event from another calendar?
    function getRelevantEvents(eventStore, instanceId) {
        var instance = eventStore.instances[instanceId];
        if (instance) {
            var def_1 = eventStore.defs[instance.defId];
            // get events/instances with same group
            var newStore = filterEventStoreDefs(eventStore, function (lookDef) {
                return isEventDefsGrouped(def_1, lookDef);
            });
            // add the original
            // TODO: wish we could use eventTupleToStore or something like it
            newStore.defs[def_1.defId] = def_1;
            newStore.instances[instance.instanceId] = instance;
            return newStore;
        }
        return createEmptyEventStore();
    }
    function isEventDefsGrouped(def0, def1) {
        return Boolean(def0.groupId && def0.groupId === def1.groupId);
    }
    function transformRawEvents(rawEvents, eventSource, calendar) {
        var calEachTransform = calendar.opt('eventDataTransform');
        var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;
        if (sourceEachTransform) {
            rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
        }
        if (calEachTransform) {
            rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
        }
        return rawEvents;
    }
    function transformEachRawEvent(rawEvents, func) {
        var refinedEvents;
        if (!func) {
            refinedEvents = rawEvents;
        }
        else {
            refinedEvents = [];
            for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {
                var rawEvent = rawEvents_2[_i];
                var refinedEvent = func(rawEvent);
                if (refinedEvent) {
                    refinedEvents.push(refinedEvent);
                }
                else if (refinedEvent == null) {
                    refinedEvents.push(rawEvent);
                } // if a different falsy value, do nothing
            }
        }
        return refinedEvents;
    }
    function createEmptyEventStore() {
        return { defs: {}, instances: {} };
    }
    function mergeEventStores(store0, store1) {
        return {
            defs: __assign({}, store0.defs, store1.defs),
            instances: __assign({}, store0.instances, store1.instances)
        };
    }
    function filterEventStoreDefs(eventStore, filterFunc) {
        var defs = filterHash(eventStore.defs, filterFunc);
        var instances = filterHash(eventStore.instances, function (instance) {
            return defs[instance.defId]; // still exists?
        });
        return { defs: defs, instances: instances };
    }

    function parseRange(input, dateEnv) {
        var start = null;
        var end = null;
        if (input.start) {
            start = dateEnv.createMarker(input.start);
        }
        if (input.end) {
            end = dateEnv.createMarker(input.end);
        }
        if (!start && !end) {
            return null;
        }
        if (start && end && end < start) {
            return null;
        }
        return { start: start, end: end };
    }
    // SIDE-EFFECT: will mutate ranges.
    // Will return a new array result.
    function invertRanges(ranges, constraintRange) {
        var invertedRanges = [];
        var start = constraintRange.start; // the end of the previous range. the start of the new range
        var i;
        var dateRange;
        // ranges need to be in order. required for our date-walking algorithm
        ranges.sort(compareRanges);
        for (i = 0; i < ranges.length; i++) {
            dateRange = ranges[i];
            // add the span of time before the event (if there is any)
            if (dateRange.start > start) { // compare millisecond time (skip any ambig logic)
                invertedRanges.push({ start: start, end: dateRange.start });
            }
            if (dateRange.end > start) {
                start = dateRange.end;
            }
        }
        // add the span of time after the last event (if there is any)
        if (start < constraintRange.end) { // compare millisecond time (skip any ambig logic)
            invertedRanges.push({ start: start, end: constraintRange.end });
        }
        return invertedRanges;
    }
    function compareRanges(range0, range1) {
        return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
    }
    function intersectRanges(range0, range1) {
        var start = range0.start;
        var end = range0.end;
        var newRange = null;
        if (range1.start !== null) {
            if (start === null) {
                start = range1.start;
            }
            else {
                start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
            }
        }
        if (range1.end != null) {
            if (end === null) {
                end = range1.end;
            }
            else {
                end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
            }
        }
        if (start === null || end === null || start < end) {
            newRange = { start: start, end: end };
        }
        return newRange;
    }
    function rangesEqual(range0, range1) {
        return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) &&
            (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
    }
    function rangesIntersect(range0, range1) {
        return (range0.end === null || range1.start === null || range0.end > range1.start) &&
            (range0.start === null || range1.end === null || range0.start < range1.end);
    }
    function rangeContainsRange(outerRange, innerRange) {
        return (outerRange.start === null || (innerRange.start !== null && innerRange.start >= outerRange.start)) &&
            (outerRange.end === null || (innerRange.end !== null && innerRange.end <= outerRange.end));
    }
    function rangeContainsMarker(range, date) {
        return (range.start === null || date >= range.start) &&
            (range.end === null || date < range.end);
    }
    // If the given date is not within the given range, move it inside.
    // (If it's past the end, make it one millisecond before the end).
    function constrainMarkerToRange(date, range) {
        if (range.start != null && date < range.start) {
            return range.start;
        }
        if (range.end != null && date >= range.end) {
            return new Date(range.end.valueOf() - 1);
        }
        return date;
    }
    function isArraysEqual(a0, a1) {
        var len = a0.length;
        var i;
        if (len !== a1.length) { // not array? or not same length?
            return false;
        }
        for (i = 0; i < len; i++) {
            if (a0[i] !== a1[i]) {
                return false;
            }
        }
        return true;
    }

    function memoize$1(workerFunc) {
        var args;
        var res;
        return function () {
            if (!args || !isArraysEqual(args, arguments)) {
                args = arguments;
                res = workerFunc.apply(this, arguments);
            }
            return res;
        };
    }
    /*
    always executes the workerFunc, but if the result is equal to the previous result,
    return the previous result instead.
    */
    function memoizeOutput(workerFunc, equalityFunc) {
        var cachedRes = null;
        return function () {
            var newRes = workerFunc.apply(this, arguments);
            if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {
                cachedRes = newRes;
            }
            return cachedRes;
        };
    }

    var EXTENDED_SETTINGS_AND_SEVERITIES = {
        week: 3,
        separator: 0,
        omitZeroMinute: 0,
        meridiem: 0,
        omitCommas: 0
    };
    var STANDARD_DATE_PROP_SEVERITIES = {
        timeZoneName: 7,
        era: 6,
        year: 5,
        month: 4,
        day: 2,
        weekday: 2,
        hour: 1,
        minute: 1,
        second: 1
    };
    var MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too
    var COMMA_RE = /,/g; // we need re for globalness
    var MULTI_SPACE_RE = /\s+/g;
    var LTR_RE = /\u200e/g; // control character
    var UTC_RE = /UTC|GMT/;
    var NativeFormatter = /** @class */ (function () {
        function NativeFormatter(formatSettings) {
            var standardDateProps = {};
            var extendedSettings = {};
            var severity = 0;
            for (var name_1 in formatSettings) {
                if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {
                    extendedSettings[name_1] = formatSettings[name_1];
                    severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);
                }
                else {
                    standardDateProps[name_1] = formatSettings[name_1];
                    if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {
                        severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);
                    }
                }
            }
            this.standardDateProps = standardDateProps;
            this.extendedSettings = extendedSettings;
            this.severity = severity;
            this.buildFormattingFunc = memoize$1(buildFormattingFunc);
        }
        NativeFormatter.prototype.format = function (date, context) {
            return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
        };
        NativeFormatter.prototype.formatRange = function (start, end, context) {
            var _a = this, standardDateProps = _a.standardDateProps, extendedSettings = _a.extendedSettings;
            var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);
            if (!diffSeverity) {
                return this.format(start, context);
            }
            var biggestUnitForPartial = diffSeverity;
            if (biggestUnitForPartial > 1 && // the two dates are different in a way that's larger scale than time
                (standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') &&
                (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') &&
                (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {
                biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
            }
            var full0 = this.format(start, context);
            var full1 = this.format(end, context);
            if (full0 === full1) {
                return full0;
            }
            var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
            var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
            var partial0 = partialFormattingFunc(start);
            var partial1 = partialFormattingFunc(end);
            var insertion = findCommonInsertion(full0, partial0, full1, partial1);
            var separator = extendedSettings.separator || '';
            if (insertion) {
                return insertion.before + partial0 + separator + partial1 + insertion.after;
            }
            return full0 + separator + full1;
        };
        NativeFormatter.prototype.getLargestUnit = function () {
            switch (this.severity) {
                case 7:
                case 6:
                case 5:
                    return 'year';
                case 4:
                    return 'month';
                case 3:
                    return 'week';
                default:
                    return 'day';
            }
        };
        return NativeFormatter;
    }());
    function buildFormattingFunc(standardDateProps, extendedSettings, context) {
        var standardDatePropCnt = Object.keys(standardDateProps).length;
        if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {
            return function (date) {
                return formatTimeZoneOffset(date.timeZoneOffset);
            };
        }
        if (standardDatePropCnt === 0 && extendedSettings.week) {
            return function (date) {
                return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);
            };
        }
        return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
    }
    function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
        standardDateProps = __assign({}, standardDateProps); // copy
        extendedSettings = __assign({}, extendedSettings); // copy
        sanitizeSettings(standardDateProps, extendedSettings);
        standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers
        var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
        var zeroFormat; // needed?
        if (extendedSettings.omitZeroMinute) {
            var zeroProps = __assign({}, standardDateProps);
            delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings
            zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
        }
        return function (date) {
            var marker = date.marker;
            var format;
            if (zeroFormat && !marker.getUTCMinutes()) {
                format = zeroFormat;
            }
            else {
                format = normalFormat;
            }
            var s = format.format(marker);
            return postProcess(s, date, standardDateProps, extendedSettings, context);
        };
    }
    function sanitizeSettings(standardDateProps, extendedSettings) {
        // deal with a browser inconsistency where formatting the timezone
        // requires that the hour/minute be present.
        if (standardDateProps.timeZoneName) {
            if (!standardDateProps.hour) {
                standardDateProps.hour = '2-digit';
            }
            if (!standardDateProps.minute) {
                standardDateProps.minute = '2-digit';
            }
        }
        // only support short timezone names
        if (standardDateProps.timeZoneName === 'long') {
            standardDateProps.timeZoneName = 'short';
        }
        // if requesting to display seconds, MUST display minutes
        if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {
            delete extendedSettings.omitZeroMinute;
        }
    }
    function postProcess(s, date, standardDateProps, extendedSettings, context) {
        s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes
        if (standardDateProps.timeZoneName === 'short') {
            s = injectTzoStr(s, (context.timeZone === 'UTC' || date.timeZoneOffset == null) ?
                'UTC' : // important to normalize for IE, which does "GMT"
                formatTimeZoneOffset(date.timeZoneOffset));
        }
        if (extendedSettings.omitCommas) {
            s = s.replace(COMMA_RE, '').trim();
        }
        if (extendedSettings.omitZeroMinute) {
            s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
        }
        // ^ do anything that might create adjacent spaces before this point,
        // because MERIDIEM_RE likes to eat up loading spaces
        if (extendedSettings.meridiem === false) {
            s = s.replace(MERIDIEM_RE, '').trim();
        }
        else if (extendedSettings.meridiem === 'narrow') { // a/p
            s = s.replace(MERIDIEM_RE, function (m0, m1) {
                return m1.toLocaleLowerCase();
            });
        }
        else if (extendedSettings.meridiem === 'short') { // am/pm
            s = s.replace(MERIDIEM_RE, function (m0, m1) {
                return m1.toLocaleLowerCase() + 'm';
            });
        }
        else if (extendedSettings.meridiem === 'lowercase') { // other meridiem transformers already converted to lowercase
            s = s.replace(MERIDIEM_RE, function (m0) {
                return m0.toLocaleLowerCase();
            });
        }
        s = s.replace(MULTI_SPACE_RE, ' ');
        s = s.trim();
        return s;
    }
    function injectTzoStr(s, tzoStr) {
        var replaced = false;
        s = s.replace(UTC_RE, function () {
            replaced = true;
            return tzoStr;
        });
        // IE11 doesn't include UTC/GMT in the original string, so append to end
        if (!replaced) {
            s += ' ' + tzoStr;
        }
        return s;
    }
    function formatWeekNumber(num, weekLabel, locale, display) {
        var parts = [];
        if (display === 'narrow') {
            parts.push(weekLabel);
        }
        else if (display === 'short') {
            parts.push(weekLabel, ' ');
        }
        // otherwise, considered 'numeric'
        parts.push(locale.simpleNumberFormat.format(num));
        if (locale.options.isRtl) { // TODO: use control characters instead?
            parts.reverse();
        }
        return parts.join('');
    }
    // Range Formatting Utils
    // 0 = exactly the same
    // 1 = different by time
    // and bigger
    function computeMarkerDiffSeverity(d0, d1, ca) {
        if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {
            return 5;
        }
        if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {
            return 4;
        }
        if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {
            return 2;
        }
        if (timeAsMs(d0) !== timeAsMs(d1)) {
            return 1;
        }
        return 0;
    }
    function computePartialFormattingOptions(options, biggestUnit) {
        var partialOptions = {};
        for (var name_2 in options) {
            if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
                STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {
                partialOptions[name_2] = options[name_2];
            }
        }
        return partialOptions;
    }
    function findCommonInsertion(full0, partial0, full1, partial1) {
        var i0 = 0;
        while (i0 < full0.length) {
            var found0 = full0.indexOf(partial0, i0);
            if (found0 === -1) {
                break;
            }
            var before0 = full0.substr(0, found0);
            i0 = found0 + partial0.length;
            var after0 = full0.substr(i0);
            var i1 = 0;
            while (i1 < full1.length) {
                var found1 = full1.indexOf(partial1, i1);
                if (found1 === -1) {
                    break;
                }
                var before1 = full1.substr(0, found1);
                i1 = found1 + partial1.length;
                var after1 = full1.substr(i1);
                if (before0 === before1 && after0 === after1) {
                    return {
                        before: before0,
                        after: after0
                    };
                }
            }
        }
        return null;
    }

    /*
    TODO: fix the terminology of "formatter" vs "formatting func"
    */
    /*
    At the time of instantiation, this object does not know which cmd-formatting system it will use.
    It receives this at the time of formatting, as a setting.
    */
    var CmdFormatter = /** @class */ (function () {
        function CmdFormatter(cmdStr, separator) {
            this.cmdStr = cmdStr;
            this.separator = separator;
        }
        CmdFormatter.prototype.format = function (date, context) {
            return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));
        };
        CmdFormatter.prototype.formatRange = function (start, end, context) {
            return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));
        };
        return CmdFormatter;
    }());

    var FuncFormatter = /** @class */ (function () {
        function FuncFormatter(func) {
            this.func = func;
        }
        FuncFormatter.prototype.format = function (date, context) {
            return this.func(createVerboseFormattingArg(date, null, context));
        };
        FuncFormatter.prototype.formatRange = function (start, end, context) {
            return this.func(createVerboseFormattingArg(start, end, context));
        };
        return FuncFormatter;
    }());

    // Formatter Object Creation
    function createFormatter(input, defaultSeparator) {
        if (typeof input === 'object' && input) { // non-null object
            if (typeof defaultSeparator === 'string') {
                input = __assign({ separator: defaultSeparator }, input);
            }
            return new NativeFormatter(input);
        }
        else if (typeof input === 'string') {
            return new CmdFormatter(input, defaultSeparator);
        }
        else if (typeof input === 'function') {
            return new FuncFormatter(input);
        }
    }
    // String Utils
    // timeZoneOffset is in minutes
    function buildIsoString(marker, timeZoneOffset, stripZeroTime) {
        if (stripZeroTime === void 0) { stripZeroTime = false; }
        var s = marker.toISOString();
        s = s.replace('.000', '');
        if (stripZeroTime) {
            s = s.replace('T00:00:00Z', '');
        }
        if (s.length > 10) { // time part wasn't stripped, can add timezone info
            if (timeZoneOffset == null) {
                s = s.replace('Z', '');
            }
            else if (timeZoneOffset !== 0) {
                s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
            }
            // otherwise, its UTC-0 and we want to keep the Z
        }
        return s;
    }
    function formatIsoTimeString(marker) {
        return padStart(marker.getUTCHours(), 2) + ':' +
            padStart(marker.getUTCMinutes(), 2) + ':' +
            padStart(marker.getUTCSeconds(), 2);
    }
    function formatTimeZoneOffset(minutes, doIso) {
        if (doIso === void 0) { doIso = false; }
        var sign = minutes < 0 ? '-' : '+';
        var abs = Math.abs(minutes);
        var hours = Math.floor(abs / 60);
        var mins = Math.round(abs % 60);
        if (doIso) {
            return sign + padStart(hours, 2) + ':' + padStart(mins, 2);
        }
        else {
            return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');
        }
    }
    // Arg Utils
    function createVerboseFormattingArg(start, end, context, separator) {
        var startInfo = expandZonedMarker(start, context.calendarSystem);
        var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
        return {
            date: startInfo,
            start: startInfo,
            end: endInfo,
            timeZone: context.timeZone,
            localeCodes: context.locale.codes,
            separator: separator
        };
    }
    function expandZonedMarker(dateInfo, calendarSystem) {
        var a = calendarSystem.markerToArray(dateInfo.marker);
        return {
            marker: dateInfo.marker,
            timeZoneOffset: dateInfo.timeZoneOffset,
            array: a,
            year: a[0],
            month: a[1],
            day: a[2],
            hour: a[3],
            minute: a[4],
            second: a[5],
            millisecond: a[6]
        };
    }

    var EventSourceApi = /** @class */ (function () {
        function EventSourceApi(calendar, internalEventSource) {
            this.calendar = calendar;
            this.internalEventSource = internalEventSource;
        }
        EventSourceApi.prototype.remove = function () {
            this.calendar.dispatch({
                type: 'REMOVE_EVENT_SOURCE',
                sourceId: this.internalEventSource.sourceId
            });
        };
        EventSourceApi.prototype.refetch = function () {
            this.calendar.dispatch({
                type: 'FETCH_EVENT_SOURCES',
                sourceIds: [this.internalEventSource.sourceId]
            });
        };
        Object.defineProperty(EventSourceApi.prototype, "id", {
            get: function () {
                return this.internalEventSource.publicId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventSourceApi.prototype, "url", {
            // only relevant to json-feed event sources
            get: function () {
                return this.internalEventSource.meta.url;
            },
            enumerable: true,
            configurable: true
        });
        return EventSourceApi;
    }());

    var EventApi = /** @class */ (function () {
        function EventApi(calendar, def, instance) {
            this._calendar = calendar;
            this._def = def;
            this._instance = instance || null;
        }
        /*
        TODO: make event struct more responsible for this
        */
        EventApi.prototype.setProp = function (name, val) {
            var _a, _b;
            if (name in DATE_PROPS) ;
            else if (name in NON_DATE_PROPS) {
                if (typeof NON_DATE_PROPS[name] === 'function') {
                    val = NON_DATE_PROPS[name](val);
                }
                this.mutate({
                    standardProps: (_a = {}, _a[name] = val, _a)
                });
            }
            else if (name in UNSCOPED_EVENT_UI_PROPS) {
                var ui = void 0;
                if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {
                    val = UNSCOPED_EVENT_UI_PROPS[name](val);
                }
                if (name === 'color') {
                    ui = { backgroundColor: val, borderColor: val };
                }
                else if (name === 'editable') {
                    ui = { startEditable: val, durationEditable: val };
                }
                else {
                    ui = (_b = {}, _b[name] = val, _b);
                }
                this.mutate({
                    standardProps: { ui: ui }
                });
            }
        };
        EventApi.prototype.setExtendedProp = function (name, val) {
            var _a;
            this.mutate({
                extendedProps: (_a = {}, _a[name] = val, _a)
            });
        };
        EventApi.prototype.setStart = function (startInput, options) {
            if (options === void 0) { options = {}; }
            var dateEnv = this._calendar.dateEnv;
            var start = dateEnv.createMarker(startInput);
            if (start && this._instance) { // TODO: warning if parsed bad
                var instanceRange = this._instance.range;
                var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?
                if (options.maintainDuration) {
                    this.mutate({ datesDelta: startDelta });
                }
                else {
                    this.mutate({ startDelta: startDelta });
                }
            }
        };
        EventApi.prototype.setEnd = function (endInput, options) {
            if (options === void 0) { options = {}; }
            var dateEnv = this._calendar.dateEnv;
            var end;
            if (endInput != null) {
                end = dateEnv.createMarker(endInput);
                if (!end) {
                    return; // TODO: warning if parsed bad
                }
            }
            if (this._instance) {
                if (end) {
                    var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
                    this.mutate({ endDelta: endDelta });
                }
                else {
                    this.mutate({ standardProps: { hasEnd: false } });
                }
            }
        };
        EventApi.prototype.setDates = function (startInput, endInput, options) {
            if (options === void 0) { options = {}; }
            var dateEnv = this._calendar.dateEnv;
            var standardProps = { allDay: options.allDay };
            var start = dateEnv.createMarker(startInput);
            var end;
            if (!start) {
                return; // TODO: warning if parsed bad
            }
            if (endInput != null) {
                end = dateEnv.createMarker(endInput);
                if (!end) { // TODO: warning if parsed bad
                    return;
                }
            }
            if (this._instance) {
                var instanceRange = this._instance.range;
                // when computing the diff for an event being converted to all-day,
                // compute diff off of the all-day values the way event-mutation does.
                if (options.allDay === true) {
                    instanceRange = computeAlignedDayRange(instanceRange);
                }
                var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);
                if (end) {
                    var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);
                    if (durationsEqual(startDelta, endDelta)) {
                        this.mutate({ datesDelta: startDelta, standardProps: standardProps });
                    }
                    else {
                        this.mutate({ startDelta: startDelta, endDelta: endDelta, standardProps: standardProps });
                    }
                }
                else { // means "clear the end"
                    standardProps.hasEnd = false;
                    this.mutate({ datesDelta: startDelta, standardProps: standardProps });
                }
            }
        };
        EventApi.prototype.moveStart = function (deltaInput) {
            var delta = createDuration(deltaInput);
            if (delta) { // TODO: warning if parsed bad
                this.mutate({ startDelta: delta });
            }
        };
        EventApi.prototype.moveEnd = function (deltaInput) {
            var delta = createDuration(deltaInput);
            if (delta) { // TODO: warning if parsed bad
                this.mutate({ endDelta: delta });
            }
        };
        EventApi.prototype.moveDates = function (deltaInput) {
            var delta = createDuration(deltaInput);
            if (delta) { // TODO: warning if parsed bad
                this.mutate({ datesDelta: delta });
            }
        };
        EventApi.prototype.setAllDay = function (allDay, options) {
            if (options === void 0) { options = {}; }
            var standardProps = { allDay: allDay };
            var maintainDuration = options.maintainDuration;
            if (maintainDuration == null) {
                maintainDuration = this._calendar.opt('allDayMaintainDuration');
            }
            if (this._def.allDay !== allDay) {
                standardProps.hasEnd = maintainDuration;
            }
            this.mutate({ standardProps: standardProps });
        };
        EventApi.prototype.formatRange = function (formatInput) {
            var dateEnv = this._calendar.dateEnv;
            var instance = this._instance;
            var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));
            if (this._def.hasEnd) {
                return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
                    forcedStartTzo: instance.forcedStartTzo,
                    forcedEndTzo: instance.forcedEndTzo
                });
            }
            else {
                return dateEnv.format(instance.range.start, formatter, {
                    forcedTzo: instance.forcedStartTzo
                });
            }
        };
        EventApi.prototype.mutate = function (mutation) {
            var def = this._def;
            var instance = this._instance;
            if (instance) {
                this._calendar.dispatch({
                    type: 'MUTATE_EVENTS',
                    instanceId: instance.instanceId,
                    mutation: mutation,
                    fromApi: true
                });
                var eventStore = this._calendar.state.eventStore;
                this._def = eventStore.defs[def.defId];
                this._instance = eventStore.instances[instance.instanceId];
            }
        };
        EventApi.prototype.remove = function () {
            this._calendar.dispatch({
                type: 'REMOVE_EVENT_DEF',
                defId: this._def.defId
            });
        };
        Object.defineProperty(EventApi.prototype, "source", {
            get: function () {
                var sourceId = this._def.sourceId;
                if (sourceId) {
                    return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "start", {
            get: function () {
                return this._instance ?
                    this._calendar.dateEnv.toDate(this._instance.range.start) :
                    null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "end", {
            get: function () {
                return (this._instance && this._def.hasEnd) ?
                    this._calendar.dateEnv.toDate(this._instance.range.end) :
                    null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "id", {
            // computable props that all access the def
            // TODO: find a TypeScript-compatible way to do this at scale
            get: function () { return this._def.publicId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "groupId", {
            get: function () { return this._def.groupId; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "allDay", {
            get: function () { return this._def.allDay; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "title", {
            get: function () { return this._def.title; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "url", {
            get: function () { return this._def.url; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "rendering", {
            get: function () { return this._def.rendering; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "startEditable", {
            get: function () { return this._def.ui.startEditable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "durationEditable", {
            get: function () { return this._def.ui.durationEditable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "constraint", {
            get: function () { return this._def.ui.constraints[0] || null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "overlap", {
            get: function () { return this._def.ui.overlap; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "allow", {
            get: function () { return this._def.ui.allows[0] || null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "backgroundColor", {
            get: function () { return this._def.ui.backgroundColor; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "borderColor", {
            get: function () { return this._def.ui.borderColor; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "textColor", {
            get: function () { return this._def.ui.textColor; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "classNames", {
            // NOTE: user can't modify these because Object.freeze was called in event-def parsing
            get: function () { return this._def.ui.classNames; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EventApi.prototype, "extendedProps", {
            get: function () { return this._def.extendedProps; },
            enumerable: true,
            configurable: true
        });
        return EventApi;
    }());

    /*
    Specifying nextDayThreshold signals that all-day ranges should be sliced.
    */
    function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
        var inverseBgByGroupId = {};
        var inverseBgByDefId = {};
        var defByGroupId = {};
        var bgRanges = [];
        var fgRanges = [];
        var eventUis = compileEventUis(eventStore.defs, eventUiBases);
        for (var defId in eventStore.defs) {
            var def = eventStore.defs[defId];
            if (def.rendering === 'inverse-background') {
                if (def.groupId) {
                    inverseBgByGroupId[def.groupId] = [];
                    if (!defByGroupId[def.groupId]) {
                        defByGroupId[def.groupId] = def;
                    }
                }
                else {
                    inverseBgByDefId[defId] = [];
                }
            }
        }
        for (var instanceId in eventStore.instances) {
            var instance = eventStore.instances[instanceId];
            var def = eventStore.defs[instance.defId];
            var ui = eventUis[def.defId];
            var origRange = instance.range;
            var normalRange = (!def.allDay && nextDayThreshold) ?
                computeVisibleDayRange(origRange, nextDayThreshold) :
                origRange;
            var slicedRange = intersectRanges(normalRange, framingRange);
            if (slicedRange) {
                if (def.rendering === 'inverse-background') {
                    if (def.groupId) {
                        inverseBgByGroupId[def.groupId].push(slicedRange);
                    }
                    else {
                        inverseBgByDefId[instance.defId].push(slicedRange);
                    }
                }
                else {
                    (def.rendering === 'background' ? bgRanges : fgRanges).push({
                        def: def,
                        ui: ui,
                        instance: instance,
                        range: slicedRange,
                        isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
                        isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
                    });
                }
            }
        }
        for (var groupId in inverseBgByGroupId) { // BY GROUP
            var ranges = inverseBgByGroupId[groupId];
            var invertedRanges = invertRanges(ranges, framingRange);
            for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {
                var invertedRange = invertedRanges_1[_i];
                var def = defByGroupId[groupId];
                var ui = eventUis[def.defId];
                bgRanges.push({
                    def: def,
                    ui: ui,
                    instance: null,
                    range: invertedRange,
                    isStart: false,
                    isEnd: false
                });
            }
        }
        for (var defId in inverseBgByDefId) {
            var ranges = inverseBgByDefId[defId];
            var invertedRanges = invertRanges(ranges, framingRange);
            for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {
                var invertedRange = invertedRanges_2[_a];
                bgRanges.push({
                    def: eventStore.defs[defId],
                    ui: eventUis[defId],
                    instance: null,
                    range: invertedRange,
                    isStart: false,
                    isEnd: false
                });
            }
        }
        return { bg: bgRanges, fg: fgRanges };
    }
    function hasBgRendering(def) {
        return def.rendering === 'background' || def.rendering === 'inverse-background';
    }
    function filterSegsViaEls(view, segs, isMirror) {
        if (view.hasPublicHandlers('eventRender')) {
            segs = segs.filter(function (seg) {
                var custom = view.publiclyTrigger('eventRender', [
                    {
                        event: new EventApi(view.calendar, seg.eventRange.def, seg.eventRange.instance),
                        isMirror: isMirror,
                        isStart: seg.isStart,
                        isEnd: seg.isEnd,
                        // TODO: include seg.range once all components consistently generate it
                        el: seg.el,
                        view: view
                    }
                ]);
                if (custom === false) { // means don't render at all
                    return false;
                }
                else if (custom && custom !== true) {
                    seg.el = custom;
                }
                return true;
            });
        }
        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
            var seg = segs_1[_i];
            setElSeg(seg.el, seg);
        }
        return segs;
    }
    function setElSeg(el, seg) {
        el.fcSeg = seg;
    }
    function getElSeg(el) {
        return el.fcSeg || null;
    }
    // event ui computation
    function compileEventUis(eventDefs, eventUiBases) {
        return mapHash(eventDefs, function (eventDef) {
            return compileEventUi(eventDef, eventUiBases);
        });
    }
    function compileEventUi(eventDef, eventUiBases) {
        var uis = [];
        if (eventUiBases['']) {
            uis.push(eventUiBases['']);
        }
        if (eventUiBases[eventDef.defId]) {
            uis.push(eventUiBases[eventDef.defId]);
        }
        uis.push(eventDef.ui);
        return combineEventUis(uis);
    }

    // applies the mutation to ALL defs/instances within the event store
    function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {
        var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
        var dest = createEmptyEventStore();
        for (var defId in eventStore.defs) {
            var def = eventStore.defs[defId];
            dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);
        }
        for (var instanceId in eventStore.instances) {
            var instance = eventStore.instances[instanceId];
            var def = dest.defs[instance.defId]; // important to grab the newly modified def
            dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);
        }
        return dest;
    }
    function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {
        var standardProps = mutation.standardProps || {};
        // if hasEnd has not been specified, guess a good value based on deltas.
        // if duration will change, there's no way the default duration will persist,
        // and thus, we need to mark the event as having a real end
        if (standardProps.hasEnd == null &&
            eventConfig.durationEditable &&
            (mutation.startDelta || mutation.endDelta)) {
            standardProps.hasEnd = true; // TODO: is this mutation okay?
        }
        var copy = __assign({}, eventDef, standardProps, { ui: __assign({}, eventDef.ui, standardProps.ui) });
        if (mutation.extendedProps) {
            copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);
        }
        for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {
            var applier = appliers_1[_i];
            applier(copy, mutation, calendar);
        }
        if (!copy.hasEnd && calendar.opt('forceEventDuration')) {
            copy.hasEnd = true;
        }
        return copy;
    }
    function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef
    eventConfig, mutation, calendar) {
        var dateEnv = calendar.dateEnv;
        var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
        var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;
        var copy = __assign({}, eventInstance);
        if (forceAllDay) {
            copy.range = computeAlignedDayRange(copy.range);
        }
        if (mutation.datesDelta && eventConfig.startEditable) {
            copy.range = {
                start: dateEnv.add(copy.range.start, mutation.datesDelta),
                end: dateEnv.add(copy.range.end, mutation.datesDelta)
            };
        }
        if (mutation.startDelta && eventConfig.durationEditable) {
            copy.range = {
                start: dateEnv.add(copy.range.start, mutation.startDelta),
                end: copy.range.end
            };
        }
        if (mutation.endDelta && eventConfig.durationEditable) {
            copy.range = {
                start: copy.range.start,
                end: dateEnv.add(copy.range.end, mutation.endDelta)
            };
        }
        if (clearEnd) {
            copy.range = {
                start: copy.range.start,
                end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)
            };
        }
        // in case event was all-day but the supplied deltas were not
        // better util for this?
        if (eventDef.allDay) {
            copy.range = {
                start: startOfDay(copy.range.start),
                end: startOfDay(copy.range.end)
            };
        }
        // handle invalid durations
        if (copy.range.end < copy.range.start) {
            copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);
        }
        return copy;
    }

    function reduceEventStore (eventStore, action, eventSources, dateProfile, calendar) {
        switch (action.type) {
            case 'RECEIVE_EVENTS': // raw
                return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);
            case 'ADD_EVENTS': // already parsed, but not expanded
                return addEvent(eventStore, action.eventStore, // new ones
                dateProfile ? dateProfile.activeRange : null, calendar);
            case 'MERGE_EVENTS': // already parsed and expanded
                return mergeEventStores(eventStore, action.eventStore);
            case 'PREV': // TODO: how do we track all actions that affect dateProfile :(
            case 'NEXT':
            case 'SET_DATE':
            case 'SET_VIEW_TYPE':
                if (dateProfile) {
                    return expandRecurring(eventStore, dateProfile.activeRange, calendar);
                }
                else {
                    return eventStore;
                }
            case 'CHANGE_TIMEZONE':
                return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);
            case 'MUTATE_EVENTS':
                return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);
            case 'REMOVE_EVENT_INSTANCES':
                return excludeInstances(eventStore, action.instances);
            case 'REMOVE_EVENT_DEF':
                return filterEventStoreDefs(eventStore, function (eventDef) {
                    return eventDef.defId !== action.defId;
                });
            case 'REMOVE_EVENT_SOURCE':
                return excludeEventsBySourceId(eventStore, action.sourceId);
            case 'REMOVE_ALL_EVENT_SOURCES':
                return filterEventStoreDefs(eventStore, function (eventDef) {
                    return !eventDef.sourceId; // only keep events with no source id
                });
            case 'REMOVE_ALL_EVENTS':
                return createEmptyEventStore();
            case 'RESET_EVENTS':
                return {
                    defs: eventStore.defs,
                    instances: eventStore.instances
                };
            default:
                return eventStore;
        }
    }
    function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {
        if (eventSource && // not already removed
            fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
        ) {
            var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);
            if (fetchRange) {
                subset = expandRecurring(subset, fetchRange, calendar);
            }
            return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
        }
        return eventStore;
    }
    function addEvent(eventStore, subset, expandRange, calendar) {
        if (expandRange) {
            subset = expandRecurring(subset, expandRange, calendar);
        }
        return mergeEventStores(eventStore, subset);
    }
    function rezoneDates(eventStore, oldDateEnv, newDateEnv) {
        var defs = eventStore.defs;
        var instances = mapHash(eventStore.instances, function (instance) {
            var def = defs[instance.defId];
            if (def.allDay || def.recurringDef) {
                return instance; // isn't dependent on timezone
            }
            else {
                return __assign({}, instance, { range: {
                        start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
                        end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
                    }, forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo, forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo });
            }
        });
        return { defs: defs, instances: instances };
    }
    function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {
        var relevant = getRelevantEvents(eventStore, instanceId);
        var eventConfigBase = fromApi ?
            { '': {
                    startEditable: true,
                    durationEditable: true,
                    constraints: [],
                    overlap: null,
                    allows: [],
                    backgroundColor: '',
                    borderColor: '',
                    textColor: '',
                    classNames: []
                } } :
            calendar.eventUiBases;
        relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);
        return mergeEventStores(eventStore, relevant);
    }
    function excludeEventsBySourceId(eventStore, sourceId) {
        return filterEventStoreDefs(eventStore, function (eventDef) {
            return eventDef.sourceId !== sourceId;
        });
    }
    // QUESTION: why not just return instances? do a general object-property-exclusion util
    function excludeInstances(eventStore, removals) {
        return {
            defs: eventStore.defs,
            instances: filterHash(eventStore.instances, function (instance) {
                return !removals[instance.instanceId];
            })
        };
    }

    // high-level segmenting-aware tester functions
    // ------------------------------------------------------------------------------------------------------------------------
    function isInteractionValid(interaction, calendar) {
        return isNewPropsValid({ eventDrag: interaction }, calendar); // HACK: the eventDrag props is used for ALL interactions
    }
    function isDateSelectionValid(dateSelection, calendar) {
        return isNewPropsValid({ dateSelection: dateSelection }, calendar);
    }
    function isNewPropsValid(newProps, calendar) {
        var view = calendar.view;
        var props = __assign({ businessHours: view ? view.props.businessHours : createEmptyEventStore(), dateSelection: '', eventStore: calendar.state.eventStore, eventUiBases: calendar.eventUiBases, eventSelection: '', eventDrag: null, eventResize: null }, newProps);
        return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);
    }
    function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        if (dateSpanMeta === void 0) { dateSpanMeta = {}; }
        if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
            return false;
        }
        if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
            return false;
        }
        return true;
    }
    // Moving Event Validation
    // ------------------------------------------------------------------------------------------------------------------------
    function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions
        var subjectEventStore = interaction.mutatedEvents;
        var subjectDefs = subjectEventStore.defs;
        var subjectInstances = subjectEventStore.instances;
        var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ?
            state.eventUiBases :
            { '': calendar.selectionConfig } // if not a real event, validate as a selection
        );
        if (filterConfig) {
            subjectConfigs = mapHash(subjectConfigs, filterConfig);
        }
        var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?
        var otherDefs = otherEventStore.defs;
        var otherInstances = otherEventStore.instances;
        var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);
        for (var subjectInstanceId in subjectInstances) {
            var subjectInstance = subjectInstances[subjectInstanceId];
            var subjectRange = subjectInstance.range;
            var subjectConfig = subjectConfigs[subjectInstance.defId];
            var subjectDef = subjectDefs[subjectInstance.defId];
            // constraint
            if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {
                return false;
            }
            // overlap
            var overlapFunc = calendar.opt('eventOverlap');
            if (typeof overlapFunc !== 'function') {
                overlapFunc = null;
            }
            for (var otherInstanceId in otherInstances) {
                var otherInstance = otherInstances[otherInstanceId];
                // intersect! evaluate
                if (rangesIntersect(subjectRange, otherInstance.range)) {
                    var otherOverlap = otherConfigs[otherInstance.defId].overlap;
                    // consider the other event's overlap. only do this if the subject event is a "real" event
                    if (otherOverlap === false && interaction.isEvent) {
                        return false;
                    }
                    if (subjectConfig.overlap === false) {
                        return false;
                    }
                    if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event
                    new EventApi(calendar, subjectDef, subjectInstance) // moving event
                    )) {
                        return false;
                    }
                }
            }
            // allow (a function)
            var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state
            for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {
                var subjectAllow = _a[_i];
                var subjectDateSpan = __assign({}, dateSpanMeta, { range: subjectInstance.range, allDay: subjectDef.allDay });
                var origDef = calendarEventStore.defs[subjectDef.defId];
                var origInstance = calendarEventStore.instances[subjectInstanceId];
                var eventApi = void 0;
                if (origDef) { // was previously in the calendar
                    eventApi = new EventApi(calendar, origDef, origInstance);
                }
                else { // was an external event
                    eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates
                }
                if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {
                    return false;
                }
            }
        }
        return true;
    }
    // Date Selection Validation
    // ------------------------------------------------------------------------------------------------------------------------
    function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        var relevantEventStore = state.eventStore;
        var relevantDefs = relevantEventStore.defs;
        var relevantInstances = relevantEventStore.instances;
        var selection = state.dateSelection;
        var selectionRange = selection.range;
        var selectionConfig = calendar.selectionConfig;
        if (filterConfig) {
            selectionConfig = filterConfig(selectionConfig);
        }
        // constraint
        if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {
            return false;
        }
        // overlap
        var overlapFunc = calendar.opt('selectOverlap');
        if (typeof overlapFunc !== 'function') {
            overlapFunc = null;
        }
        for (var relevantInstanceId in relevantInstances) {
            var relevantInstance = relevantInstances[relevantInstanceId];
            // intersect! evaluate
            if (rangesIntersect(selectionRange, relevantInstance.range)) {
                if (selectionConfig.overlap === false) {
                    return false;
                }
                if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {
                    return false;
                }
            }
        }
        // allow (a function)
        for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {
            var selectionAllow = _a[_i];
            var fullDateSpan = __assign({}, dateSpanMeta, selection);
            if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {
                return false;
            }
        }
        return true;
    }
    // Constraint Utils
    // ------------------------------------------------------------------------------------------------------------------------
    function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {
        for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
            var constraint = constraints_1[_i];
            if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {
                return false;
            }
        }
        return true;
    }
    function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours
    otherEventStore, // for if constraint is an even group ID
    businessHoursUnexpanded, // for if constraint is 'businessHours'
    calendar // for expanding businesshours
    ) {
        if (constraint === 'businessHours') {
            return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));
        }
        else if (typeof constraint === 'string') { // an group ID
            return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {
                return eventDef.groupId === constraint;
            }));
        }
        else if (typeof constraint === 'object' && constraint) { // non-null object
            return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));
        }
        return []; // if it's false
    }
    // TODO: move to event-store file?
    function eventStoreToRanges(eventStore) {
        var instances = eventStore.instances;
        var ranges = [];
        for (var instanceId in instances) {
            ranges.push(instances[instanceId].range);
        }
        return ranges;
    }
    // TODO: move to geom file?
    function anyRangesContainRange(outerRanges, innerRange) {
        for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {
            var outerRange = outerRanges_1[_i];
            if (rangeContainsRange(outerRange, innerRange)) {
                return true;
            }
        }
        return false;
    }
    // Parsing
    // ------------------------------------------------------------------------------------------------------------------------
    function normalizeConstraint(input, calendar) {
        if (Array.isArray(input)) {
            return parseEvents(input, '', calendar, true); // allowOpenRange=true
        }
        else if (typeof input === 'object' && input) { // non-null object
            return parseEvents([input], '', calendar, true); // allowOpenRange=true
        }
        else if (input != null) {
            return String(input);
        }
        else {
            return null;
        }
    }

    function htmlEscape(s) {
        return (s + '').replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/'/g, '&#039;')
            .replace(/"/g, '&quot;')
            .replace(/\n/g, '<br />');
    }
    // Given a hash of CSS properties, returns a string of CSS.
    // Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.
    function cssToStr(cssProps) {
        var statements = [];
        for (var name_1 in cssProps) {
            var val = cssProps[name_1];
            if (val != null && val !== '') {
                statements.push(name_1 + ':' + val);
            }
        }
        return statements.join(';');
    }
    // Given an object hash of HTML attribute names to values,
    // generates a string that can be injected between < > in HTML
    function attrsToStr(attrs) {
        var parts = [];
        for (var name_2 in attrs) {
            var val = attrs[name_2];
            if (val != null) {
                parts.push(name_2 + '="' + htmlEscape(val) + '"');
            }
        }
        return parts.join(' ');
    }
    function parseClassName(raw) {
        if (Array.isArray(raw)) {
            return raw;
        }
        else if (typeof raw === 'string') {
            return raw.split(/\s+/);
        }
        else {
            return [];
        }
    }

    var UNSCOPED_EVENT_UI_PROPS = {
        editable: Boolean,
        startEditable: Boolean,
        durationEditable: Boolean,
        constraint: null,
        overlap: null,
        allow: null,
        className: parseClassName,
        classNames: parseClassName,
        color: String,
        backgroundColor: String,
        borderColor: String,
        textColor: String
    };
    function processUnscopedUiProps(rawProps, calendar, leftovers) {
        var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);
        var constraint = normalizeConstraint(props.constraint, calendar);
        return {
            startEditable: props.startEditable != null ? props.startEditable : props.editable,
            durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,
            constraints: constraint != null ? [constraint] : [],
            overlap: props.overlap,
            allows: props.allow != null ? [props.allow] : [],
            backgroundColor: props.backgroundColor || props.color,
            borderColor: props.borderColor || props.color,
            textColor: props.textColor,
            classNames: props.classNames.concat(props.className)
        };
    }
    function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {
        var rawUnscoped = {};
        var wasFound = {};
        for (var key in UNSCOPED_EVENT_UI_PROPS) {
            var scopedKey = prefix + capitaliseFirstLetter(key);
            rawUnscoped[key] = rawScoped[scopedKey];
            wasFound[scopedKey] = true;
        }
        if (prefix === 'event') {
            rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'
        }
        if (leftovers) {
            for (var key in rawScoped) {
                if (!wasFound[key]) {
                    leftovers[key] = rawScoped[key];
                }
            }
        }
        return processUnscopedUiProps(rawUnscoped, calendar);
    }
    var EMPTY_EVENT_UI = {
        startEditable: null,
        durationEditable: null,
        constraints: [],
        overlap: null,
        allows: [],
        backgroundColor: '',
        borderColor: '',
        textColor: '',
        classNames: []
    };
    // prevent against problems with <2 args!
    function combineEventUis(uis) {
        return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
    }
    function combineTwoEventUis(item0, item1) {
        return {
            startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
            durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
            constraints: item0.constraints.concat(item1.constraints),
            overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
            allows: item0.allows.concat(item1.allows),
            backgroundColor: item1.backgroundColor || item0.backgroundColor,
            borderColor: item1.borderColor || item0.borderColor,
            textColor: item1.textColor || item0.textColor,
            classNames: item0.classNames.concat(item1.classNames)
        };
    }

    var NON_DATE_PROPS = {
        id: String,
        groupId: String,
        title: String,
        url: String,
        rendering: String,
        extendedProps: null
    };
    var DATE_PROPS = {
        start: null,
        date: null,
        end: null,
        allDay: null
    };
    var uid = 0;
    function parseEvent(raw, sourceId, calendar, allowOpenRange) {
        var allDayDefault = computeIsAllDayDefault(sourceId, calendar);
        var leftovers0 = {};
        var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out
        allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props
        );
        if (recurringRes) {
            var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);
            def.recurringDef = {
                typeId: recurringRes.typeId,
                typeData: recurringRes.typeData,
                duration: recurringRes.duration
            };
            return { def: def, instance: null };
        }
        else {
            var leftovers1 = {};
            var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);
            if (singleRes) {
                var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);
                var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
                return { def: def, instance: instance };
            }
        }
        return null;
    }
    /*
    Will NOT populate extendedProps with the leftover properties.
    Will NOT populate date-related props.
    The EventNonDateInput has been normalized (id => publicId, etc).
    */
    function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {
        var leftovers = {};
        var def = pluckNonDateProps(raw, calendar, leftovers);
        def.defId = String(uid++);
        def.sourceId = sourceId;
        def.allDay = allDay;
        def.hasEnd = hasEnd;
        for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {
            var eventDefParser = _a[_i];
            var newLeftovers = {};
            eventDefParser(def, leftovers, newLeftovers);
            leftovers = newLeftovers;
        }
        def.extendedProps = __assign(leftovers, def.extendedProps || {});
        // help out EventApi from having user modify props
        Object.freeze(def.ui.classNames);
        Object.freeze(def.extendedProps);
        return def;
    }
    function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
        return {
            instanceId: String(uid++),
            defId: defId,
            range: range,
            forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
            forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
        };
    }
    function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {
        var props = pluckDateProps(raw, leftovers);
        var allDay = props.allDay;
        var startMeta;
        var startMarker = null;
        var hasEnd = false;
        var endMeta;
        var endMarker = null;
        startMeta = calendar.dateEnv.createMarkerMeta(props.start);
        if (startMeta) {
            startMarker = startMeta.marker;
        }
        else if (!allowOpenRange) {
            return null;
        }
        if (props.end != null) {
            endMeta = calendar.dateEnv.createMarkerMeta(props.end);
        }
        if (allDay == null) {
            if (allDayDefault != null) {
                allDay = allDayDefault;
            }
            else {
                // fall back to the date props LAST
                allDay = (!startMeta || startMeta.isTimeUnspecified) &&
                    (!endMeta || endMeta.isTimeUnspecified);
            }
        }
        if (allDay && startMarker) {
            startMarker = startOfDay(startMarker);
        }
        if (endMeta) {
            endMarker = endMeta.marker;
            if (allDay) {
                endMarker = startOfDay(endMarker);
            }
            if (startMarker && endMarker <= startMarker) {
                endMarker = null;
            }
        }
        if (endMarker) {
            hasEnd = true;
        }
        else if (!allowOpenRange) {
            hasEnd = calendar.opt('forceEventDuration') || false;
            endMarker = calendar.dateEnv.add(startMarker, allDay ?
                calendar.defaultAllDayEventDuration :
                calendar.defaultTimedEventDuration);
        }
        return {
            allDay: allDay,
            hasEnd: hasEnd,
            range: { start: startMarker, end: endMarker },
            forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
            forcedEndTzo: endMeta ? endMeta.forcedTzo : null
        };
    }
    function pluckDateProps(raw, leftovers) {
        var props = refineProps(raw, DATE_PROPS, {}, leftovers);
        props.start = (props.start !== null) ? props.start : props.date;
        delete props.date;
        return props;
    }
    function pluckNonDateProps(raw, calendar, leftovers) {
        var preLeftovers = {};
        var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);
        var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);
        props.publicId = props.id;
        delete props.id;
        props.ui = ui;
        return props;
    }
    function computeIsAllDayDefault(sourceId, calendar) {
        var res = null;
        if (sourceId) {
            var source = calendar.state.eventSources[sourceId];
            res = source.allDayDefault;
        }
        if (res == null) {
            res = calendar.opt('allDayDefault');
        }
        return res;
    }

    var DEF_DEFAULTS = {
        startTime: '09:00',
        endTime: '17:00',
        daysOfWeek: [1, 2, 3, 4, 5],
        rendering: 'inverse-background',
        classNames: 'fc-nonbusiness',
        groupId: '_businessHours' // so multiple defs get grouped
    };
    /*
    TODO: pass around as EventDefHash!!!
    */
    function parseBusinessHours(input, calendar) {
        return parseEvents(refineInputs(input), '', calendar);
    }
    function refineInputs(input) {
        var rawDefs;
        if (input === true) {
            rawDefs = [{}]; // will get DEF_DEFAULTS verbatim
        }
        else if (Array.isArray(input)) {
            // if specifying an array, every sub-definition NEEDS a day-of-week
            rawDefs = input.filter(function (rawDef) {
                return rawDef.daysOfWeek;
            });
        }
        else if (typeof input === 'object' && input) { // non-null object
            rawDefs = [input];
        }
        else { // is probably false
            rawDefs = [];
        }
        rawDefs = rawDefs.map(function (rawDef) {
            return __assign({}, DEF_DEFAULTS, rawDef);
        });
        return rawDefs;
    }

    function memoizeRendering(renderFunc, unrenderFunc, dependencies) {
        if (dependencies === void 0) { dependencies = []; }
        var dependents = [];
        var thisContext;
        var prevArgs;
        function unrender() {
            if (prevArgs) {
                for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {
                    var dependent = dependents_1[_i];
                    dependent.unrender();
                }
                if (unrenderFunc) {
                    unrenderFunc.apply(thisContext, prevArgs);
                }
                prevArgs = null;
            }
        }
        function res() {
            if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {
                unrender();
                thisContext = this;
                prevArgs = arguments;
                renderFunc.apply(this, arguments);
            }
        }
        res.dependents = dependents;
        res.unrender = unrender;
        for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
            var dependency = dependencies_1[_i];
            dependency.dependents.push(res);
        }
        return res;
    }

    var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere
    var Splitter = /** @class */ (function () {
        function Splitter() {
            this.getKeysForEventDefs = memoize$1(this._getKeysForEventDefs);
            this.splitDateSelection = memoize$1(this._splitDateSpan);
            this.splitEventStore = memoize$1(this._splitEventStore);
            this.splitIndividualUi = memoize$1(this._splitIndividualUi);
            this.splitEventDrag = memoize$1(this._splitInteraction);
            this.splitEventResize = memoize$1(this._splitInteraction);
            this.eventUiBuilders = {}; // TODO: typescript protection
        }
        Splitter.prototype.splitProps = function (props) {
            var _this = this;
            var keyInfos = this.getKeyInfo(props);
            var defKeys = this.getKeysForEventDefs(props.eventStore);
            var dateSelections = this.splitDateSelection(props.dateSelection);
            var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*
            var eventStores = this.splitEventStore(props.eventStore, defKeys);
            var eventDrags = this.splitEventDrag(props.eventDrag);
            var eventResizes = this.splitEventResize(props.eventResize);
            var splitProps = {};
            this.eventUiBuilders = mapHash(keyInfos, function (info, key) {
                return _this.eventUiBuilders[key] || memoize$1(buildEventUiForKey);
            });
            for (var key in keyInfos) {
                var keyInfo = keyInfos[key];
                var eventStore = eventStores[key] || EMPTY_EVENT_STORE;
                var buildEventUi = this.eventUiBuilders[key];
                splitProps[key] = {
                    businessHours: keyInfo.businessHours || props.businessHours,
                    dateSelection: dateSelections[key] || null,
                    eventStore: eventStore,
                    eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
                    eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
                    eventDrag: eventDrags[key] || null,
                    eventResize: eventResizes[key] || null
                };
            }
            return splitProps;
        };
        Splitter.prototype._splitDateSpan = function (dateSpan) {
            var dateSpans = {};
            if (dateSpan) {
                var keys = this.getKeysForDateSpan(dateSpan);
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var key = keys_1[_i];
                    dateSpans[key] = dateSpan;
                }
            }
            return dateSpans;
        };
        Splitter.prototype._getKeysForEventDefs = function (eventStore) {
            var _this = this;
            return mapHash(eventStore.defs, function (eventDef) {
                return _this.getKeysForEventDef(eventDef);
            });
        };
        Splitter.prototype._splitEventStore = function (eventStore, defKeys) {
            var defs = eventStore.defs, instances = eventStore.instances;
            var splitStores = {};
            for (var defId in defs) {
                for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (!splitStores[key]) {
                        splitStores[key] = createEmptyEventStore();
                    }
                    splitStores[key].defs[defId] = defs[defId];
                }
            }
            for (var instanceId in instances) {
                var instance = instances[instanceId];
                for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {
                    var key = _c[_b];
                    if (splitStores[key]) { // must have already been created
                        splitStores[key].instances[instanceId] = instance;
                    }
                }
            }
            return splitStores;
        };
        Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {
            var splitHashes = {};
            for (var defId in eventUiBases) {
                if (defId) { // not the '' key
                    for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
                        var key = _a[_i];
                        if (!splitHashes[key]) {
                            splitHashes[key] = {};
                        }
                        splitHashes[key][defId] = eventUiBases[defId];
                    }
                }
            }
            return splitHashes;
        };
        Splitter.prototype._splitInteraction = function (interaction) {
            var splitStates = {};
            if (interaction) {
                var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar
                );
                // can't rely on defKeys because event data is mutated
                var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);
                var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);
                var populate = function (key) {
                    if (!splitStates[key]) {
                        splitStates[key] = {
                            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,
                            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,
                            isEvent: interaction.isEvent,
                            origSeg: interaction.origSeg
                        };
                    }
                };
                for (var key in affectedStores_1) {
                    populate(key);
                }
                for (var key in mutatedStores_1) {
                    populate(key);
                }
            }
            return splitStates;
        };
        return Splitter;
    }());
    function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
        var baseParts = [];
        if (allUi) {
            baseParts.push(allUi);
        }
        if (eventUiForKey) {
            baseParts.push(eventUiForKey);
        }
        var stuff = {
            '': combineEventUis(baseParts)
        };
        if (individualUi) {
            __assign(stuff, individualUi);
        }
        return stuff;
    }

    // Generates HTML for an anchor to another view into the calendar.
    // Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
    // `gotoOptions` can either be a DateMarker, or an object with the form:
    // { date, type, forceOff }
    // `type` is a view-type like "day" or "week". default value is "day".
    // `attrs` and `innerHtml` are use to generate the rest of the HTML tag.
    function buildGotoAnchorHtml(component, gotoOptions, attrs, innerHtml) {
        var dateEnv = component.dateEnv;
        var date;
        var type;
        var forceOff;
        var finalOptions;
        if (gotoOptions instanceof Date) {
            date = gotoOptions; // a single date-like input
        }
        else {
            date = gotoOptions.date;
            type = gotoOptions.type;
            forceOff = gotoOptions.forceOff;
        }
        finalOptions = {
            date: dateEnv.formatIso(date, { omitTime: true }),
            type: type || 'day'
        };
        if (typeof attrs === 'string') {
            innerHtml = attrs;
            attrs = null;
        }
        attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space
        innerHtml = innerHtml || '';
        if (!forceOff && component.opt('navLinks')) {
            return '<a' + attrs +
                ' data-goto="' + htmlEscape(JSON.stringify(finalOptions)) + '">' +
                innerHtml +
                '</a>';
        }
        else {
            return '<span' + attrs + '>' +
                innerHtml +
                '</span>';
        }
    }
    function getAllDayHtml(component) {
        return component.opt('allDayHtml') || htmlEscape(component.opt('allDayText'));
    }
    // Computes HTML classNames for a single-day element
    function getDayClasses(date, dateProfile, context, noThemeHighlight) {
        var calendar = context.calendar, view = context.view, theme = context.theme, dateEnv = context.dateEnv;
        var classes = [];
        var todayStart;
        var todayEnd;
        if (!rangeContainsMarker(dateProfile.activeRange, date)) {
            classes.push('fc-disabled-day');
        }
        else {
            classes.push('fc-' + DAY_IDS[date.getUTCDay()]);
            if (view.opt('monthMode') &&
                dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {
                classes.push('fc-other-month');
            }
            todayStart = startOfDay(calendar.getNow());
            todayEnd = addDays$1(todayStart, 1);
            if (date < todayStart) {
                classes.push('fc-past');
            }
            else if (date >= todayEnd) {
                classes.push('fc-future');
            }
            else {
                classes.push('fc-today');
                if (noThemeHighlight !== true) {
                    classes.push(theme.getClass('today'));
                }
            }
        }
        return classes;
    }

    // given a function that resolves a result asynchronously.
    // the function can either call passed-in success and failure callbacks,
    // or it can return a promise.
    // if you need to pass additional params to func, bind them first.
    function unpromisify(func, success, failure) {
        // guard against success/failure callbacks being called more than once
        // and guard against a promise AND callback being used together.
        var isResolved = false;
        var wrappedSuccess = function () {
            if (!isResolved) {
                isResolved = true;
                success.apply(this, arguments);
            }
        };
        var wrappedFailure = function () {
            if (!isResolved) {
                isResolved = true;
                if (failure) {
                    failure.apply(this, arguments);
                }
            }
        };
        var res = func(wrappedSuccess, wrappedFailure);
        if (res && typeof res.then === 'function') {
            res.then(wrappedSuccess, wrappedFailure);
        }
    }

    var Mixin = /** @class */ (function () {
        function Mixin() {
        }
        // mix into a CLASS
        Mixin.mixInto = function (destClass) {
            this.mixIntoObj(destClass.prototype);
        };
        // mix into ANY object
        Mixin.mixIntoObj = function (destObj) {
            var _this = this;
            Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
                if (!destObj[name]) { // if destination doesn't already define it
                    destObj[name] = _this.prototype[name];
                }
            });
        };
        /*
        will override existing methods
        TODO: remove! not used anymore
        */
        Mixin.mixOver = function (destClass) {
            var _this = this;
            Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
                destClass.prototype[name] = _this.prototype[name];
            });
        };
        return Mixin;
    }());

    /*
    USAGE:
      import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
    in class:
      on: EmitterInterface['on']
      one: EmitterInterface['one']
      off: EmitterInterface['off']
      trigger: EmitterInterface['trigger']
      triggerWith: EmitterInterface['triggerWith']
      hasHandlers: EmitterInterface['hasHandlers']
    after class:
      EmitterMixin.mixInto(TheClass)
    */
    var EmitterMixin = /** @class */ (function (_super) {
        __extends(EmitterMixin, _super);
        function EmitterMixin() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EmitterMixin.prototype.on = function (type, handler) {
            addToHash(this._handlers || (this._handlers = {}), type, handler);
            return this; // for chaining
        };
        // todo: add comments
        EmitterMixin.prototype.one = function (type, handler) {
            addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);
            return this; // for chaining
        };
        EmitterMixin.prototype.off = function (type, handler) {
            if (this._handlers) {
                removeFromHash(this._handlers, type, handler);
            }
            if (this._oneHandlers) {
                removeFromHash(this._oneHandlers, type, handler);
            }
            return this; // for chaining
        };
        EmitterMixin.prototype.trigger = function (type) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            this.triggerWith(type, this, args);
            return this; // for chaining
        };
        EmitterMixin.prototype.triggerWith = function (type, context, args) {
            if (this._handlers) {
                applyAll(this._handlers[type], context, args);
            }
            if (this._oneHandlers) {
                applyAll(this._oneHandlers[type], context, args);
                delete this._oneHandlers[type]; // will never fire again
            }
            return this; // for chaining
        };
        EmitterMixin.prototype.hasHandlers = function (type) {
            return (this._handlers && this._handlers[type] && this._handlers[type].length) ||
                (this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length);
        };
        return EmitterMixin;
    }(Mixin));
    function addToHash(hash, type, handler) {
        (hash[type] || (hash[type] = []))
            .push(handler);
    }
    function removeFromHash(hash, type, handler) {
        if (handler) {
            if (hash[type]) {
                hash[type] = hash[type].filter(function (func) {
                    return func !== handler;
                });
            }
        }
        else {
            delete hash[type]; // remove all handler funcs for this type
        }
    }

    /*
    Records offset information for a set of elements, relative to an origin element.
    Can record the left/right OR the top/bottom OR both.
    Provides methods for querying the cache by position.
    */
    var PositionCache = /** @class */ (function () {
        function PositionCache(originEl, els, isHorizontal, isVertical) {
            this.originEl = originEl;
            this.els = els;
            this.isHorizontal = isHorizontal;
            this.isVertical = isVertical;
        }
        // Queries the els for coordinates and stores them.
        // Call this method before using and of the get* methods below.
        PositionCache.prototype.build = function () {
            var originEl = this.originEl;
            var originClientRect = this.originClientRect =
                originEl.getBoundingClientRect(); // relative to viewport top-left
            if (this.isHorizontal) {
                this.buildElHorizontals(originClientRect.left);
            }
            if (this.isVertical) {
                this.buildElVerticals(originClientRect.top);
            }
        };
        // Populates the left/right internal coordinate arrays
        PositionCache.prototype.buildElHorizontals = function (originClientLeft) {
            var lefts = [];
            var rights = [];
            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
                var el = _a[_i];
                var rect = el.getBoundingClientRect();
                lefts.push(rect.left - originClientLeft);
                rights.push(rect.right - originClientLeft);
            }
            this.lefts = lefts;
            this.rights = rights;
        };
        // Populates the top/bottom internal coordinate arrays
        PositionCache.prototype.buildElVerticals = function (originClientTop) {
            var tops = [];
            var bottoms = [];
            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
                var el = _a[_i];
                var rect = el.getBoundingClientRect();
                tops.push(rect.top - originClientTop);
                bottoms.push(rect.bottom - originClientTop);
            }
            this.tops = tops;
            this.bottoms = bottoms;
        };
        // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
        // If no intersection is made, returns undefined.
        PositionCache.prototype.leftToIndex = function (leftPosition) {
            var lefts = this.lefts;
            var rights = this.rights;
            var len = lefts.length;
            var i;
            for (i = 0; i < len; i++) {
                if (leftPosition >= lefts[i] && leftPosition < rights[i]) {
                    return i;
                }
            }
        };
        // Given a top offset (from document top), returns the index of the el that it vertically intersects.
        // If no intersection is made, returns undefined.
        PositionCache.prototype.topToIndex = function (topPosition) {
            var tops = this.tops;
            var bottoms = this.bottoms;
            var len = tops.length;
            var i;
            for (i = 0; i < len; i++) {
                if (topPosition >= tops[i] && topPosition < bottoms[i]) {
                    return i;
                }
            }
        };
        // Gets the width of the element at the given index
        PositionCache.prototype.getWidth = function (leftIndex) {
            return this.rights[leftIndex] - this.lefts[leftIndex];
        };
        // Gets the height of the element at the given index
        PositionCache.prototype.getHeight = function (topIndex) {
            return this.bottoms[topIndex] - this.tops[topIndex];
        };
        return PositionCache;
    }());

    /*
    An object for getting/setting scroll-related information for an element.
    Internally, this is done very differently for window versus DOM element,
    so this object serves as a common interface.
    */
    var ScrollController = /** @class */ (function () {
        function ScrollController() {
        }
        ScrollController.prototype.getMaxScrollTop = function () {
            return this.getScrollHeight() - this.getClientHeight();
        };
        ScrollController.prototype.getMaxScrollLeft = function () {
            return this.getScrollWidth() - this.getClientWidth();
        };
        ScrollController.prototype.canScrollVertically = function () {
            return this.getMaxScrollTop() > 0;
        };
        ScrollController.prototype.canScrollHorizontally = function () {
            return this.getMaxScrollLeft() > 0;
        };
        ScrollController.prototype.canScrollUp = function () {
            return this.getScrollTop() > 0;
        };
        ScrollController.prototype.canScrollDown = function () {
            return this.getScrollTop() < this.getMaxScrollTop();
        };
        ScrollController.prototype.canScrollLeft = function () {
            return this.getScrollLeft() > 0;
        };
        ScrollController.prototype.canScrollRight = function () {
            return this.getScrollLeft() < this.getMaxScrollLeft();
        };
        return ScrollController;
    }());
    var ElementScrollController = /** @class */ (function (_super) {
        __extends(ElementScrollController, _super);
        function ElementScrollController(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            return _this;
        }
        ElementScrollController.prototype.getScrollTop = function () {
            return this.el.scrollTop;
        };
        ElementScrollController.prototype.getScrollLeft = function () {
            return this.el.scrollLeft;
        };
        ElementScrollController.prototype.setScrollTop = function (top) {
            this.el.scrollTop = top;
        };
        ElementScrollController.prototype.setScrollLeft = function (left) {
            this.el.scrollLeft = left;
        };
        ElementScrollController.prototype.getScrollWidth = function () {
            return this.el.scrollWidth;
        };
        ElementScrollController.prototype.getScrollHeight = function () {
            return this.el.scrollHeight;
        };
        ElementScrollController.prototype.getClientHeight = function () {
            return this.el.clientHeight;
        };
        ElementScrollController.prototype.getClientWidth = function () {
            return this.el.clientWidth;
        };
        return ElementScrollController;
    }(ScrollController));
    var WindowScrollController = /** @class */ (function (_super) {
        __extends(WindowScrollController, _super);
        function WindowScrollController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WindowScrollController.prototype.getScrollTop = function () {
            return window.pageYOffset;
        };
        WindowScrollController.prototype.getScrollLeft = function () {
            return window.pageXOffset;
        };
        WindowScrollController.prototype.setScrollTop = function (n) {
            window.scroll(window.pageXOffset, n);
        };
        WindowScrollController.prototype.setScrollLeft = function (n) {
            window.scroll(n, window.pageYOffset);
        };
        WindowScrollController.prototype.getScrollWidth = function () {
            return document.documentElement.scrollWidth;
        };
        WindowScrollController.prototype.getScrollHeight = function () {
            return document.documentElement.scrollHeight;
        };
        WindowScrollController.prototype.getClientHeight = function () {
            return document.documentElement.clientHeight;
        };
        WindowScrollController.prototype.getClientWidth = function () {
            return document.documentElement.clientWidth;
        };
        return WindowScrollController;
    }(ScrollController));

    /*
    Embodies a div that has potential scrollbars
    */
    var ScrollComponent = /** @class */ (function (_super) {
        __extends(ScrollComponent, _super);
        function ScrollComponent(overflowX, overflowY) {
            var _this = _super.call(this, createElement('div', {
                className: 'fc-scroller'
            })) || this;
            _this.overflowX = overflowX;
            _this.overflowY = overflowY;
            _this.applyOverflow();
            return _this;
        }
        // sets to natural height, unlocks overflow
        ScrollComponent.prototype.clear = function () {
            this.setHeight('auto');
            this.applyOverflow();
        };
        ScrollComponent.prototype.destroy = function () {
            removeElement(this.el);
        };
        // Overflow
        // -----------------------------------------------------------------------------------------------------------------
        ScrollComponent.prototype.applyOverflow = function () {
            applyStyle(this.el, {
                overflowX: this.overflowX,
                overflowY: this.overflowY
            });
        };
        // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
        // Useful for preserving scrollbar widths regardless of future resizes.
        // Can pass in scrollbarWidths for optimization.
        ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {
            var overflowX = this.overflowX;
            var overflowY = this.overflowY;
            scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();
            if (overflowX === 'auto') {
                overflowX = (scrollbarWidths.bottom || // horizontal scrollbars?
                    this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?
                ) ? 'scroll' : 'hidden';
            }
            if (overflowY === 'auto') {
                overflowY = (scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?
                    this.canScrollVertically() // OR scrolling pane with massless scrollbars?
                ) ? 'scroll' : 'hidden';
            }
            applyStyle(this.el, { overflowX: overflowX, overflowY: overflowY });
        };
        ScrollComponent.prototype.setHeight = function (height) {
            applyStyleProp(this.el, 'height', height);
        };
        ScrollComponent.prototype.getScrollbarWidths = function () {
            var edges = computeEdges(this.el);
            return {
                left: edges.scrollbarLeft,
                right: edges.scrollbarRight,
                bottom: edges.scrollbarBottom
            };
        };
        return ScrollComponent;
    }(ElementScrollController));

    var Theme = /** @class */ (function () {
        function Theme(calendarOptions) {
            this.calendarOptions = calendarOptions;
            this.processIconOverride();
        }
        Theme.prototype.processIconOverride = function () {
            if (this.iconOverrideOption) {
                this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);
            }
        };
        Theme.prototype.setIconOverride = function (iconOverrideHash) {
            var iconClassesCopy;
            var buttonName;
            if (typeof iconOverrideHash === 'object' && iconOverrideHash) { // non-null object
                iconClassesCopy = __assign({}, this.iconClasses);
                for (buttonName in iconOverrideHash) {
                    iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
                }
                this.iconClasses = iconClassesCopy;
            }
            else if (iconOverrideHash === false) {
                this.iconClasses = {};
            }
        };
        Theme.prototype.applyIconOverridePrefix = function (className) {
            var prefix = this.iconOverridePrefix;
            if (prefix && className.indexOf(prefix) !== 0) { // if not already present
                className = prefix + className;
            }
            return className;
        };
        Theme.prototype.getClass = function (key) {
            return this.classes[key] || '';
        };
        Theme.prototype.getIconClass = function (buttonName) {
            var className = this.iconClasses[buttonName];
            if (className) {
                return this.baseIconClass + ' ' + className;
            }
            return '';
        };
        Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
            var className;
            if (this.iconOverrideCustomButtonOption) {
                className = customButtonProps[this.iconOverrideCustomButtonOption];
                if (className) {
                    return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
                }
            }
            return '';
        };
        return Theme;
    }());
    Theme.prototype.classes = {};
    Theme.prototype.iconClasses = {};
    Theme.prototype.baseIconClass = '';
    Theme.prototype.iconOverridePrefix = '';

    var guid = 0;
    var Component = /** @class */ (function () {
        function Component(context, isView) {
            // HACK to populate view at top of component instantiation call chain
            if (isView) {
                context.view = this;
            }
            this.uid = String(guid++);
            this.context = context;
            this.dateEnv = context.dateEnv;
            this.theme = context.theme;
            this.view = context.view;
            this.calendar = context.calendar;
            this.isRtl = this.opt('dir') === 'rtl';
        }
        Component.addEqualityFuncs = function (newFuncs) {
            this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);
        };
        Component.prototype.opt = function (name) {
            return this.context.options[name];
        };
        Component.prototype.receiveProps = function (props) {
            var _a = recycleProps(this.props || {}, props, this.equalityFuncs), anyChanges = _a.anyChanges, comboProps = _a.comboProps;
            this.props = comboProps;
            if (anyChanges) {
                this.render(comboProps);
            }
        };
        Component.prototype.render = function (props) {
        };
        // after destroy is called, this component won't ever be used again
        Component.prototype.destroy = function () {
        };
        return Component;
    }());
    Component.prototype.equalityFuncs = {};
    /*
    Reuses old values when equal. If anything is unequal, returns newProps as-is.
    Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.
    */
    function recycleProps(oldProps, newProps, equalityFuncs) {
        var comboProps = {}; // some old, some new
        var anyChanges = false;
        for (var key in newProps) {
            if (key in oldProps && (oldProps[key] === newProps[key] ||
                (equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key])))) {
                // equal to old? use old prop
                comboProps[key] = oldProps[key];
            }
            else {
                comboProps[key] = newProps[key];
                anyChanges = true;
            }
        }
        for (var key in oldProps) {
            if (!(key in newProps)) {
                anyChanges = true;
                break;
            }
        }
        return { anyChanges: anyChanges, comboProps: comboProps };
    }

    /*
    PURPOSES:
    - hook up to fg, fill, and mirror renderers
    - interface for dragging and hits
    */
    var DateComponent = /** @class */ (function (_super) {
        __extends(DateComponent, _super);
        function DateComponent(context, el, isView) {
            var _this = _super.call(this, context, isView) || this;
            _this.el = el;
            return _this;
        }
        DateComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            removeElement(this.el);
        };
        // TODO: WHAT ABOUT (sourceSeg && sourceSeg.component.doesDragMirror)
        //
        // Event Drag-n-Drop Rendering (for both events and external elements)
        // ---------------------------------------------------------------------------------------------------------------
        /*
        renderEventDragSegs(state: EventSegUiInteractionState) {
          if (state) {
            let { isEvent, segs, sourceSeg } = state
      
            if (this.eventRenderer) {
              this.eventRenderer.hideByHash(state.affectedInstances)
            }
      
            // if the user is dragging something that is considered an event with real event data,
            // and this component likes to do drag mirrors OR the component where the seg came from
            // likes to do drag mirrors, then render a drag mirror.
            if (isEvent && (this.doesDragMirror || sourceSeg && sourceSeg.component.doesDragMirror)) {
              if (this.mirrorRenderer) {
                this.mirrorRenderer.renderSegs(segs, { isDragging: true, sourceSeg })
              }
            }
      
            // if it would be impossible to render a drag mirror OR this component likes to render
            // highlights, then render a highlight.
            if (!isEvent || this.doesDragHighlight) {
              if (this.fillRenderer) {
                this.fillRenderer.renderSegs('highlight', segs)
              }
            }
          }
        }
        */
        // Hit System
        // -----------------------------------------------------------------------------------------------------------------
        DateComponent.prototype.buildPositionCaches = function () {
        };
        DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
            return null; // this should be abstract
        };
        // Validation
        // -----------------------------------------------------------------------------------------------------------------
        DateComponent.prototype.isInteractionValid = function (interaction) {
            var calendar = this.calendar;
            var dateProfile = this.props.dateProfile; // HACK
            var instances = interaction.mutatedEvents.instances;
            if (dateProfile) { // HACK for DayTile
                for (var instanceId in instances) {
                    if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {
                        return false;
                    }
                }
            }
            return isInteractionValid(interaction, calendar);
        };
        DateComponent.prototype.isDateSelectionValid = function (selection) {
            var dateProfile = this.props.dateProfile; // HACK
            if (dateProfile && // HACK for DayTile
                !rangeContainsRange(dateProfile.validRange, selection.range)) {
                return false;
            }
            return isDateSelectionValid(selection, this.calendar);
        };
        // Triggering
        // -----------------------------------------------------------------------------------------------------------------
        // TODO: move to Calendar
        DateComponent.prototype.publiclyTrigger = function (name, args) {
            var calendar = this.calendar;
            return calendar.publiclyTrigger(name, args);
        };
        DateComponent.prototype.publiclyTriggerAfterSizing = function (name, args) {
            var calendar = this.calendar;
            return calendar.publiclyTriggerAfterSizing(name, args);
        };
        DateComponent.prototype.hasPublicHandlers = function (name) {
            var calendar = this.calendar;
            return calendar.hasPublicHandlers(name);
        };
        DateComponent.prototype.triggerRenderedSegs = function (segs, isMirrors) {
            var calendar = this.calendar;
            if (this.hasPublicHandlers('eventPositioned')) {
                for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
                    var seg = segs_1[_i];
                    this.publiclyTriggerAfterSizing('eventPositioned', [
                        {
                            event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
                            isMirror: isMirrors,
                            isStart: seg.isStart,
                            isEnd: seg.isEnd,
                            el: seg.el,
                            view: this // safe to cast because this method is only called on context.view
                        }
                    ]);
                }
            }
            if (!calendar.state.loadingLevel) { // avoid initial empty state while pending
                calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once
            }
        };
        DateComponent.prototype.triggerWillRemoveSegs = function (segs, isMirrors) {
            var calendar = this.calendar;
            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
                var seg = segs_2[_i];
                calendar.trigger('eventElRemove', seg.el);
            }
            if (this.hasPublicHandlers('eventDestroy')) {
                for (var _a = 0, segs_3 = segs; _a < segs_3.length; _a++) {
                    var seg = segs_3[_a];
                    this.publiclyTrigger('eventDestroy', [
                        {
                            event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
                            isMirror: isMirrors,
                            el: seg.el,
                            view: this // safe to cast because this method is only called on context.view
                        }
                    ]);
                }
            }
        };
        // Pointer Interaction Utils
        // -----------------------------------------------------------------------------------------------------------------
        DateComponent.prototype.isValidSegDownEl = function (el) {
            return !this.props.eventDrag && // HACK
                !this.props.eventResize && // HACK
                !elementClosest(el, '.fc-mirror') &&
                (this.isPopover() || !this.isInPopover(el));
            // ^above line ensures we don't detect a seg interaction within a nested component.
            // it's a HACK because it only supports a popover as the nested component.
        };
        DateComponent.prototype.isValidDateDownEl = function (el) {
            var segEl = elementClosest(el, this.fgSegSelector);
            return (!segEl || segEl.classList.contains('fc-mirror')) &&
                !elementClosest(el, '.fc-more') && // a "more.." link
                !elementClosest(el, 'a[data-goto]') && // a clickable nav link
                !this.isInPopover(el);
        };
        DateComponent.prototype.isPopover = function () {
            return this.el.classList.contains('fc-popover');
        };
        DateComponent.prototype.isInPopover = function (el) {
            return Boolean(elementClosest(el, '.fc-popover'));
        };
        return DateComponent;
    }(Component));
    DateComponent.prototype.fgSegSelector = '.fc-event-container > *';
    DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';

    var uid$1 = 0;
    function createPlugin(input) {
        return {
            id: String(uid$1++),
            deps: input.deps || [],
            reducers: input.reducers || [],
            eventDefParsers: input.eventDefParsers || [],
            isDraggableTransformers: input.isDraggableTransformers || [],
            eventDragMutationMassagers: input.eventDragMutationMassagers || [],
            eventDefMutationAppliers: input.eventDefMutationAppliers || [],
            dateSelectionTransformers: input.dateSelectionTransformers || [],
            datePointTransforms: input.datePointTransforms || [],
            dateSpanTransforms: input.dateSpanTransforms || [],
            views: input.views || {},
            viewPropsTransformers: input.viewPropsTransformers || [],
            isPropsValid: input.isPropsValid || null,
            externalDefTransforms: input.externalDefTransforms || [],
            eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],
            viewContainerModifiers: input.viewContainerModifiers || [],
            eventDropTransformers: input.eventDropTransformers || [],
            componentInteractions: input.componentInteractions || [],
            calendarInteractions: input.calendarInteractions || [],
            themeClasses: input.themeClasses || {},
            eventSourceDefs: input.eventSourceDefs || [],
            cmdFormatter: input.cmdFormatter,
            recurringTypes: input.recurringTypes || [],
            namedTimeZonedImpl: input.namedTimeZonedImpl,
            defaultView: input.defaultView || '',
            elementDraggingImpl: input.elementDraggingImpl,
            optionChangeHandlers: input.optionChangeHandlers || {}
        };
    }
    var PluginSystem = /** @class */ (function () {
        function PluginSystem() {
            this.hooks = {
                reducers: [],
                eventDefParsers: [],
                isDraggableTransformers: [],
                eventDragMutationMassagers: [],
                eventDefMutationAppliers: [],
                dateSelectionTransformers: [],
                datePointTransforms: [],
                dateSpanTransforms: [],
                views: {},
                viewPropsTransformers: [],
                isPropsValid: null,
                externalDefTransforms: [],
                eventResizeJoinTransforms: [],
                viewContainerModifiers: [],
                eventDropTransformers: [],
                componentInteractions: [],
                calendarInteractions: [],
                themeClasses: {},
                eventSourceDefs: [],
                cmdFormatter: null,
                recurringTypes: [],
                namedTimeZonedImpl: null,
                defaultView: '',
                elementDraggingImpl: null,
                optionChangeHandlers: {}
            };
            this.addedHash = {};
        }
        PluginSystem.prototype.add = function (plugin) {
            if (!this.addedHash[plugin.id]) {
                this.addedHash[plugin.id] = true;
                for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {
                    var dep = _a[_i];
                    this.add(dep);
                }
                this.hooks = combineHooks(this.hooks, plugin);
            }
        };
        return PluginSystem;
    }());
    function combineHooks(hooks0, hooks1) {
        return {
            reducers: hooks0.reducers.concat(hooks1.reducers),
            eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),
            isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
            eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
            eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
            dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
            datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
            dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
            views: __assign({}, hooks0.views, hooks1.views),
            viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
            isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
            externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
            eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),
            viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),
            eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
            calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
            componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
            themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),
            eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
            cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
            recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
            namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
            defaultView: hooks0.defaultView || hooks1.defaultView,
            elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
            optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)
        };
    }

    var eventSourceDef = {
        ignoreRange: true,
        parseMeta: function (raw) {
            if (Array.isArray(raw)) { // short form
                return raw;
            }
            else if (Array.isArray(raw.events)) {
                return raw.events;
            }
            return null;
        },
        fetch: function (arg, success) {
            success({
                rawEvents: arg.eventSource.meta
            });
        }
    };
    var ArrayEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef]
    });

    var eventSourceDef$1 = {
        parseMeta: function (raw) {
            if (typeof raw === 'function') { // short form
                return raw;
            }
            else if (typeof raw.events === 'function') {
                return raw.events;
            }
            return null;
        },
        fetch: function (arg, success, failure) {
            var dateEnv = arg.calendar.dateEnv;
            var func = arg.eventSource.meta;
            unpromisify(func.bind(null, {
                start: dateEnv.toDate(arg.range.start),
                end: dateEnv.toDate(arg.range.end),
                startStr: dateEnv.formatIso(arg.range.start),
                endStr: dateEnv.formatIso(arg.range.end),
                timeZone: dateEnv.timeZone
            }), function (rawEvents) {
                success({ rawEvents: rawEvents }); // needs an object response
            }, failure // send errorObj directly to failure callback
            );
        }
    };
    var FuncEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef$1]
    });

    function requestJson(method, url, params, successCallback, failureCallback) {
        method = method.toUpperCase();
        var body = null;
        if (method === 'GET') {
            url = injectQueryStringParams(url, params);
        }
        else {
            body = encodeParams(params);
        }
        var xhr = new XMLHttpRequest();
        xhr.open(method, url, true);
        if (method !== 'GET') {
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        }
        xhr.onload = function () {
            if (xhr.status >= 200 && xhr.status < 400) {
                try {
                    var res = JSON.parse(xhr.responseText);
                    successCallback(res, xhr);
                }
                catch (err) {
                    failureCallback('Failure parsing JSON', xhr);
                }
            }
            else {
                failureCallback('Request failed', xhr);
            }
        };
        xhr.onerror = function () {
            failureCallback('Request failed', xhr);
        };
        xhr.send(body);
    }
    function injectQueryStringParams(url, params) {
        return url +
            (url.indexOf('?') === -1 ? '?' : '&') +
            encodeParams(params);
    }
    function encodeParams(params) {
        var parts = [];
        for (var key in params) {
            parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
        }
        return parts.join('&');
    }

    var eventSourceDef$2 = {
        parseMeta: function (raw) {
            if (typeof raw === 'string') { // short form
                raw = { url: raw };
            }
            else if (!raw || typeof raw !== 'object' || !raw.url) {
                return null;
            }
            return {
                url: raw.url,
                method: (raw.method || 'GET').toUpperCase(),
                extraParams: raw.extraParams,
                startParam: raw.startParam,
                endParam: raw.endParam,
                timeZoneParam: raw.timeZoneParam
            };
        },
        fetch: function (arg, success, failure) {
            var meta = arg.eventSource.meta;
            var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
            requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {
                success({ rawEvents: rawEvents, xhr: xhr });
            }, function (errorMessage, xhr) {
                failure({ message: errorMessage, xhr: xhr });
            });
        }
    };
    var JsonFeedEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef$2]
    });
    function buildRequestParams(meta, range, calendar) {
        var dateEnv = calendar.dateEnv;
        var startParam;
        var endParam;
        var timeZoneParam;
        var customRequestParams;
        var params = {};
        startParam = meta.startParam;
        if (startParam == null) {
            startParam = calendar.opt('startParam');
        }
        endParam = meta.endParam;
        if (endParam == null) {
            endParam = calendar.opt('endParam');
        }
        timeZoneParam = meta.timeZoneParam;
        if (timeZoneParam == null) {
            timeZoneParam = calendar.opt('timeZoneParam');
        }
        // retrieve any outbound GET/POST data from the options
        if (typeof meta.extraParams === 'function') {
            // supplied as a function that returns a key/value object
            customRequestParams = meta.extraParams();
        }
        else {
            // probably supplied as a straight key/value object
            customRequestParams = meta.extraParams || {};
        }
        __assign(params, customRequestParams);
        params[startParam] = dateEnv.formatIso(range.start);
        params[endParam] = dateEnv.formatIso(range.end);
        if (dateEnv.timeZone !== 'local') {
            params[timeZoneParam] = dateEnv.timeZone;
        }
        return params;
    }

    var recurring = {
        parse: function (rawEvent, leftoverProps, dateEnv) {
            var createMarker = dateEnv.createMarker.bind(dateEnv);
            var processors = {
                daysOfWeek: null,
                startTime: createDuration,
                endTime: createDuration,
                startRecur: createMarker,
                endRecur: createMarker
            };
            var props = refineProps(rawEvent, processors, {}, leftoverProps);
            var anyValid = false;
            for (var propName in props) {
                if (props[propName] != null) {
                    anyValid = true;
                    break;
                }
            }
            if (anyValid) {
                var duration = null;
                if ('duration' in leftoverProps) {
                    duration = createDuration(leftoverProps.duration);
                    delete leftoverProps.duration;
                }
                if (!duration && props.startTime && props.endTime) {
                    duration = subtractDurations(props.endTime, props.startTime);
                }
                return {
                    allDayGuess: Boolean(!props.startTime && !props.endTime),
                    duration: duration,
                    typeData: props // doesn't need endTime anymore but oh well
                };
            }
            return null;
        },
        expand: function (typeData, framingRange, dateEnv) {
            var clippedFramingRange = intersectRanges(framingRange, { start: typeData.startRecur, end: typeData.endRecur });
            if (clippedFramingRange) {
                return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);
            }
            else {
                return [];
            }
        }
    };
    var SimpleRecurrencePlugin = createPlugin({
        recurringTypes: [recurring]
    });
    function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {
        var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;
        var dayMarker = startOfDay(framingRange.start);
        var endMarker = framingRange.end;
        var instanceStarts = [];
        while (dayMarker < endMarker) {
            var instanceStart 
            // if everyday, or this particular day-of-week
            = void 0;
            // if everyday, or this particular day-of-week
            if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
                if (startTime) {
                    instanceStart = dateEnv.add(dayMarker, startTime);
                }
                else {
                    instanceStart = dayMarker;
                }
                instanceStarts.push(instanceStart);
            }
            dayMarker = addDays$1(dayMarker, 1);
        }
        return instanceStarts;
    }

    var DefaultOptionChangeHandlers = createPlugin({
        optionChangeHandlers: {
            events: function (events, calendar, deepEqual) {
                handleEventSources([events], calendar, deepEqual);
            },
            eventSources: handleEventSources,
            plugins: handlePlugins
        }
    });
    function handleEventSources(inputs, calendar, deepEqual) {
        var unfoundSources = hashValuesToArray(calendar.state.eventSources);
        var newInputs = [];
        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
            var input = inputs_1[_i];
            var inputFound = false;
            for (var i = 0; i < unfoundSources.length; i++) {
                if (deepEqual(unfoundSources[i]._raw, input)) {
                    unfoundSources.splice(i, 1); // delete
                    inputFound = true;
                    break;
                }
            }
            if (!inputFound) {
                newInputs.push(input);
            }
        }
        for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {
            var unfoundSource = unfoundSources_1[_a];
            calendar.dispatch({
                type: 'REMOVE_EVENT_SOURCE',
                sourceId: unfoundSource.sourceId
            });
        }
        for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {
            var newInput = newInputs_1[_b];
            calendar.addEventSource(newInput);
        }
    }
    // shortcoming: won't remove plugins
    function handlePlugins(inputs, calendar) {
        calendar.addPluginInputs(inputs); // will gracefully handle duplicates
    }

    var config = {}; // TODO: make these options
    var globalDefaults = {
        defaultRangeSeparator: ' - ',
        titleRangeSeparator: ' \u2013 ',
        defaultTimedEventDuration: '01:00:00',
        defaultAllDayEventDuration: { day: 1 },
        forceEventDuration: false,
        nextDayThreshold: '00:00:00',
        // display
        columnHeader: true,
        defaultView: '',
        aspectRatio: 1.35,
        header: {
            left: 'title',
            center: '',
            right: 'today prev,next'
        },
        weekends: true,
        weekNumbers: false,
        weekNumberCalculation: 'local',
        editable: false,
        // nowIndicator: false,
        scrollTime: '06:00:00',
        minTime: '00:00:00',
        maxTime: '24:00:00',
        showNonCurrentDates: true,
        // event ajax
        lazyFetching: true,
        startParam: 'start',
        endParam: 'end',
        timeZoneParam: 'timeZone',
        timeZone: 'local',
        // allDayDefault: undefined,
        // locale
        locales: [],
        locale: '',
        // dir: will get this from the default locale
        // buttonIcons: null,
        // allows setting a min-height to the event segment to prevent short events overlapping each other
        timeGridEventMinHeight: 0,
        themeSystem: 'standard',
        // eventResizableFromStart: false,
        dragRevertDuration: 500,
        dragScroll: true,
        allDayMaintainDuration: false,
        // selectable: false,
        unselectAuto: true,
        // selectMinDistance: 0,
        dropAccept: '*',
        eventOrder: 'start,-duration,allDay,title',
        // ^ if start tie, longer events go before shorter. final tie-breaker is title text
        // rerenderDelay: null,
        eventLimit: false,
        eventLimitClick: 'popover',
        dayPopoverFormat: { month: 'long', day: 'numeric', year: 'numeric' },
        handleWindowResize: true,
        windowResizeDelay: 100,
        longPressDelay: 1000,
        eventDragMinDistance: 5 // only applies to mouse
    };
    var rtlDefaults = {
        header: {
            left: 'next,prev today',
            center: '',
            right: 'title'
        },
        buttonIcons: {
            // TODO: make RTL support the responibility of the theme
            prev: 'fc-icon-chevron-right',
            next: 'fc-icon-chevron-left',
            prevYear: 'fc-icon-chevrons-right',
            nextYear: 'fc-icon-chevrons-left'
        }
    };
    var complexOptions = [
        'header',
        'footer',
        'buttonText',
        'buttonIcons'
    ];
    // Merges an array of option objects into a single object
    function mergeOptions(optionObjs) {
        return mergeProps(optionObjs, complexOptions);
    }
    // TODO: move this stuff to a "plugin"-related file...
    var INTERNAL_PLUGINS = [
        ArrayEventSourcePlugin,
        FuncEventSourcePlugin,
        JsonFeedEventSourcePlugin,
        SimpleRecurrencePlugin,
        DefaultOptionChangeHandlers
    ];
    function refinePluginDefs(pluginInputs) {
        var plugins = [];
        for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {
            var pluginInput = pluginInputs_1[_i];
            if (typeof pluginInput === 'string') {
                var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);
                if (!window[globalName]) {
                    console.warn('Plugin file not loaded for ' + pluginInput);
                }
                else {
                    plugins.push(window[globalName].default); // is an ES6 module
                }
            }
            else {
                plugins.push(pluginInput);
            }
        }
        return INTERNAL_PLUGINS.concat(plugins);
    }

    var RAW_EN_LOCALE = {
        code: 'en',
        week: {
            dow: 0,
            doy: 4 // 4 days need to be within the year to be considered the first week
        },
        dir: 'ltr',
        buttonText: {
            prev: 'prev',
            next: 'next',
            prevYear: 'prev year',
            nextYear: 'next year',
            year: 'year',
            today: 'today',
            month: 'month',
            week: 'week',
            day: 'day',
            list: 'list'
        },
        weekLabel: 'W',
        allDayText: 'all-day',
        eventLimitText: 'more',
        noEventsMessage: 'No events to display'
    };
    function parseRawLocales(explicitRawLocales) {
        var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
        var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js
        var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless
        var allRawLocales = globalArray.concat(// globalArray is low prio
        hashValuesToArray(globalObject), // medium prio
        explicitRawLocales // highest prio
        );
        var rawLocaleMap = {
            en: RAW_EN_LOCALE // necessary?
        };
        for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {
            var rawLocale = allRawLocales_1[_i];
            rawLocaleMap[rawLocale.code] = rawLocale;
        }
        return {
            map: rawLocaleMap,
            defaultCode: defaultCode
        };
    }
    function buildLocale(inputSingular, available) {
        if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {
            return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);
        }
        else {
            return queryLocale(inputSingular, available);
        }
    }
    function queryLocale(codeArg, available) {
        var codes = [].concat(codeArg || []); // will convert to array
        var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
        return parseLocale(codeArg, codes, raw);
    }
    function queryRawLocale(codes, available) {
        for (var i = 0; i < codes.length; i++) {
            var parts = codes[i].toLocaleLowerCase().split('-');
            for (var j = parts.length; j > 0; j--) {
                var simpleId = parts.slice(0, j).join('-');
                if (available[simpleId]) {
                    return available[simpleId];
                }
            }
        }
        return null;
    }
    function parseLocale(codeArg, codes, raw) {
        var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);
        delete merged.code; // don't want this part of the options
        var week = merged.week;
        delete merged.week;
        return {
            codeArg: codeArg,
            codes: codes,
            week: week,
            simpleNumberFormat: new Intl.NumberFormat(codeArg),
            options: merged
        };
    }

    var OptionsManager = /** @class */ (function () {
        function OptionsManager(overrides) {
            this.overrides = __assign({}, overrides); // make a copy
            this.dynamicOverrides = {};
            this.compute();
        }
        OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {
            var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;
            __assign(overrideHash, updates);
            for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
                var propName = removals_1[_i];
                delete overrideHash[propName];
            }
            this.compute();
        };
        // Computes the flattened options hash for the calendar and assigns to `this.options`.
        // Assumes this.overrides and this.dynamicOverrides have already been initialized.
        OptionsManager.prototype.compute = function () {
            // TODO: not a very efficient system
            var locales = firstDefined(// explicit locale option given?
            this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);
            var locale = firstDefined(// explicit locales option given?
            this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);
            var available = parseRawLocales(locales);
            var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;
            var dir = firstDefined(// based on options computed so far, is direction RTL?
            this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);
            var dirDefaults = dir === 'rtl' ? rtlDefaults : {};
            this.dirDefaults = dirDefaults;
            this.localeDefaults = localeDefaults;
            this.computed = mergeOptions([
                globalDefaults,
                dirDefaults,
                localeDefaults,
                this.overrides,
                this.dynamicOverrides
            ]);
        };
        return OptionsManager;
    }());

    var calendarSystemClassMap = {};
    function registerCalendarSystem(name, theClass) {
        calendarSystemClassMap[name] = theClass;
    }
    function createCalendarSystem(name) {
        return new calendarSystemClassMap[name]();
    }
    var GregorianCalendarSystem = /** @class */ (function () {
        function GregorianCalendarSystem() {
        }
        GregorianCalendarSystem.prototype.getMarkerYear = function (d) {
            return d.getUTCFullYear();
        };
        GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {
            return d.getUTCMonth();
        };
        GregorianCalendarSystem.prototype.getMarkerDay = function (d) {
            return d.getUTCDate();
        };
        GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {
            return arrayToUtcDate(arr);
        };
        GregorianCalendarSystem.prototype.markerToArray = function (marker) {
            return dateToUtcArray(marker);
        };
        return GregorianCalendarSystem;
    }());
    registerCalendarSystem('gregory', GregorianCalendarSystem);

    var ISO_RE = /^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;
    function parse(str) {
        var m = ISO_RE.exec(str);
        if (m) {
            var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));
            if (isValidDate(marker)) {
                var timeZoneOffset = null;
                if (m[13]) {
                    timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 +
                        Number(m[18] || 0));
                }
                return {
                    marker: marker,
                    isTimeUnspecified: !m[6],
                    timeZoneOffset: timeZoneOffset
                };
            }
        }
        return null;
    }

    var DateEnv = /** @class */ (function () {
        function DateEnv(settings) {
            var timeZone = this.timeZone = settings.timeZone;
            var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';
            if (settings.namedTimeZoneImpl && isNamedTimeZone) {
                this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
            }
            this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
            this.calendarSystem = createCalendarSystem(settings.calendarSystem);
            this.locale = settings.locale;
            this.weekDow = settings.locale.week.dow;
            this.weekDoy = settings.locale.week.doy;
            if (settings.weekNumberCalculation === 'ISO') {
                this.weekDow = 1;
                this.weekDoy = 4;
            }
            if (typeof settings.firstDay === 'number') {
                this.weekDow = settings.firstDay;
            }
            if (typeof settings.weekNumberCalculation === 'function') {
                this.weekNumberFunc = settings.weekNumberCalculation;
            }
            this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;
            this.cmdFormatter = settings.cmdFormatter;
        }
        // Creating / Parsing
        DateEnv.prototype.createMarker = function (input) {
            var meta = this.createMarkerMeta(input);
            if (meta === null) {
                return null;
            }
            return meta.marker;
        };
        DateEnv.prototype.createNowMarker = function () {
            if (this.canComputeOffset) {
                return this.timestampToMarker(new Date().valueOf());
            }
            else {
                // if we can't compute the current date val for a timezone,
                // better to give the current local date vals than UTC
                return arrayToUtcDate(dateToLocalArray(new Date()));
            }
        };
        DateEnv.prototype.createMarkerMeta = function (input) {
            if (typeof input === 'string') {
                return this.parse(input);
            }
            var marker = null;
            if (typeof input === 'number') {
                marker = this.timestampToMarker(input);
            }
            else if (input instanceof Date) {
                input = input.valueOf();
                if (!isNaN(input)) {
                    marker = this.timestampToMarker(input);
                }
            }
            else if (Array.isArray(input)) {
                marker = arrayToUtcDate(input);
            }
            if (marker === null || !isValidDate(marker)) {
                return null;
            }
            return { marker: marker, isTimeUnspecified: false, forcedTzo: null };
        };
        DateEnv.prototype.parse = function (s) {
            var parts = parse(s);
            if (parts === null) {
                return null;
            }
            var marker = parts.marker;
            var forcedTzo = null;
            if (parts.timeZoneOffset !== null) {
                if (this.canComputeOffset) {
                    marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);
                }
                else {
                    forcedTzo = parts.timeZoneOffset;
                }
            }
            return { marker: marker, isTimeUnspecified: parts.isTimeUnspecified, forcedTzo: forcedTzo };
        };
        // Accessors
        DateEnv.prototype.getYear = function (marker) {
            return this.calendarSystem.getMarkerYear(marker);
        };
        DateEnv.prototype.getMonth = function (marker) {
            return this.calendarSystem.getMarkerMonth(marker);
        };
        // Adding / Subtracting
        DateEnv.prototype.add = function (marker, dur) {
            var a = this.calendarSystem.markerToArray(marker);
            a[0] += dur.years;
            a[1] += dur.months;
            a[2] += dur.days;
            a[6] += dur.milliseconds;
            return this.calendarSystem.arrayToMarker(a);
        };
        DateEnv.prototype.subtract = function (marker, dur) {
            var a = this.calendarSystem.markerToArray(marker);
            a[0] -= dur.years;
            a[1] -= dur.months;
            a[2] -= dur.days;
            a[6] -= dur.milliseconds;
            return this.calendarSystem.arrayToMarker(a);
        };
        DateEnv.prototype.addYears = function (marker, n) {
            var a = this.calendarSystem.markerToArray(marker);
            a[0] += n;
            return this.calendarSystem.arrayToMarker(a);
        };
        DateEnv.prototype.addMonths = function (marker, n) {
            var a = this.calendarSystem.markerToArray(marker);
            a[1] += n;
            return this.calendarSystem.arrayToMarker(a);
        };
        // Diffing Whole Units
        DateEnv.prototype.diffWholeYears = function (m0, m1) {
            var calendarSystem = this.calendarSystem;
            if (timeAsMs(m0) === timeAsMs(m1) &&
                calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) &&
                calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {
                return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
            }
            return null;
        };
        DateEnv.prototype.diffWholeMonths = function (m0, m1) {
            var calendarSystem = this.calendarSystem;
            if (timeAsMs(m0) === timeAsMs(m1) &&
                calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {
                return (calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0)) +
                    (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
            }
            return null;
        };
        // Range / Duration
        DateEnv.prototype.greatestWholeUnit = function (m0, m1) {
            var n = this.diffWholeYears(m0, m1);
            if (n !== null) {
                return { unit: 'year', value: n };
            }
            n = this.diffWholeMonths(m0, m1);
            if (n !== null) {
                return { unit: 'month', value: n };
            }
            n = diffWholeWeeks(m0, m1);
            if (n !== null) {
                return { unit: 'week', value: n };
            }
            n = diffWholeDays(m0, m1);
            if (n !== null) {
                return { unit: 'day', value: n };
            }
            n = diffHours(m0, m1);
            if (isInt(n)) {
                return { unit: 'hour', value: n };
            }
            n = diffMinutes(m0, m1);
            if (isInt(n)) {
                return { unit: 'minute', value: n };
            }
            n = diffSeconds(m0, m1);
            if (isInt(n)) {
                return { unit: 'second', value: n };
            }
            return { unit: 'millisecond', value: m1.valueOf() - m0.valueOf() };
        };
        DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {
            // TODO: can use greatestWholeUnit
            var diff;
            if (d.years) {
                diff = this.diffWholeYears(m0, m1);
                if (diff !== null) {
                    return diff / asRoughYears(d);
                }
            }
            if (d.months) {
                diff = this.diffWholeMonths(m0, m1);
                if (diff !== null) {
                    return diff / asRoughMonths(d);
                }
            }
            if (d.days) {
                diff = diffWholeDays(m0, m1);
                if (diff !== null) {
                    return diff / asRoughDays(d);
                }
            }
            return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
        };
        // Start-Of
        DateEnv.prototype.startOf = function (m, unit) {
            if (unit === 'year') {
                return this.startOfYear(m);
            }
            else if (unit === 'month') {
                return this.startOfMonth(m);
            }
            else if (unit === 'week') {
                return this.startOfWeek(m);
            }
            else if (unit === 'day') {
                return startOfDay(m);
            }
            else if (unit === 'hour') {
                return startOfHour(m);
            }
            else if (unit === 'minute') {
                return startOfMinute(m);
            }
            else if (unit === 'second') {
                return startOfSecond(m);
            }
        };
        DateEnv.prototype.startOfYear = function (m) {
            return this.calendarSystem.arrayToMarker([
                this.calendarSystem.getMarkerYear(m)
            ]);
        };
        DateEnv.prototype.startOfMonth = function (m) {
            return this.calendarSystem.arrayToMarker([
                this.calendarSystem.getMarkerYear(m),
                this.calendarSystem.getMarkerMonth(m)
            ]);
        };
        DateEnv.prototype.startOfWeek = function (m) {
            return this.calendarSystem.arrayToMarker([
                this.calendarSystem.getMarkerYear(m),
                this.calendarSystem.getMarkerMonth(m),
                m.getUTCDate() - ((m.getUTCDay() - this.weekDow + 7) % 7)
            ]);
        };
        // Week Number
        DateEnv.prototype.computeWeekNumber = function (marker) {
            if (this.weekNumberFunc) {
                return this.weekNumberFunc(this.toDate(marker));
            }
            else {
                return weekOfYear(marker, this.weekDow, this.weekDoy);
            }
        };
        // TODO: choke on timeZoneName: long
        DateEnv.prototype.format = function (marker, formatter, dateOptions) {
            if (dateOptions === void 0) { dateOptions = {}; }
            return formatter.format({
                marker: marker,
                timeZoneOffset: dateOptions.forcedTzo != null ?
                    dateOptions.forcedTzo :
                    this.offsetForMarker(marker)
            }, this);
        };
        DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {
            if (dateOptions === void 0) { dateOptions = {}; }
            if (dateOptions.isEndExclusive) {
                end = addMs(end, -1);
            }
            return formatter.formatRange({
                marker: start,
                timeZoneOffset: dateOptions.forcedStartTzo != null ?
                    dateOptions.forcedStartTzo :
                    this.offsetForMarker(start)
            }, {
                marker: end,
                timeZoneOffset: dateOptions.forcedEndTzo != null ?
                    dateOptions.forcedEndTzo :
                    this.offsetForMarker(end)
            }, this);
        };
        DateEnv.prototype.formatIso = function (marker, extraOptions) {
            if (extraOptions === void 0) { extraOptions = {}; }
            var timeZoneOffset = null;
            if (!extraOptions.omitTimeZoneOffset) {
                if (extraOptions.forcedTzo != null) {
                    timeZoneOffset = extraOptions.forcedTzo;
                }
                else {
                    timeZoneOffset = this.offsetForMarker(marker);
                }
            }
            return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
        };
        // TimeZone
        DateEnv.prototype.timestampToMarker = function (ms) {
            if (this.timeZone === 'local') {
                return arrayToUtcDate(dateToLocalArray(new Date(ms)));
            }
            else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {
                return new Date(ms);
            }
            else {
                return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
            }
        };
        DateEnv.prototype.offsetForMarker = function (m) {
            if (this.timeZone === 'local') {
                return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
            }
            else if (this.timeZone === 'UTC') {
                return 0;
            }
            else if (this.namedTimeZoneImpl) {
                return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
            }
            return null;
        };
        // Conversion
        DateEnv.prototype.toDate = function (m, forcedTzo) {
            if (this.timeZone === 'local') {
                return arrayToLocalDate(dateToUtcArray(m));
            }
            else if (this.timeZone === 'UTC') {
                return new Date(m.valueOf()); // make sure it's a copy
            }
            else if (!this.namedTimeZoneImpl) {
                return new Date(m.valueOf() - (forcedTzo || 0));
            }
            else {
                return new Date(m.valueOf() -
                    this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms
                );
            }
        };
        return DateEnv;
    }());

    var SIMPLE_SOURCE_PROPS = {
        id: String,
        allDayDefault: Boolean,
        eventDataTransform: Function,
        success: Function,
        failure: Function
    };
    var uid$2 = 0;
    function doesSourceNeedRange(eventSource, calendar) {
        var defs = calendar.pluginSystem.hooks.eventSourceDefs;
        return !defs[eventSource.sourceDefId].ignoreRange;
    }
    function parseEventSource(raw, calendar) {
        var defs = calendar.pluginSystem.hooks.eventSourceDefs;
        for (var i = defs.length - 1; i >= 0; i--) { // later-added plugins take precedence
            var def = defs[i];
            var meta = def.parseMeta(raw);
            if (meta) {
                var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);
                res._raw = raw;
                return res;
            }
        }
        return null;
    }
    function parseEventSourceProps(raw, meta, sourceDefId, calendar) {
        var leftovers0 = {};
        var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);
        var leftovers1 = {};
        var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);
        props.isFetching = false;
        props.latestFetchId = '';
        props.fetchRange = null;
        props.publicId = String(raw.id || '');
        props.sourceId = String(uid$2++);
        props.sourceDefId = sourceDefId;
        props.meta = meta;
        props.ui = ui;
        props.extendedProps = leftovers1;
        return props;
    }

    function reduceEventSources (eventSources, action, dateProfile, calendar) {
        switch (action.type) {
            case 'ADD_EVENT_SOURCES': // already parsed
                return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);
            case 'REMOVE_EVENT_SOURCE':
                return removeSource(eventSources, action.sourceId);
            case 'PREV': // TODO: how do we track all actions that affect dateProfile :(
            case 'NEXT':
            case 'SET_DATE':
            case 'SET_VIEW_TYPE':
                if (dateProfile) {
                    return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);
                }
                else {
                    return eventSources;
                }
            case 'FETCH_EVENT_SOURCES':
            case 'CHANGE_TIMEZONE':
                return fetchSourcesByIds(eventSources, action.sourceIds ?
                    arrayToHash(action.sourceIds) :
                    excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);
            case 'RECEIVE_EVENTS':
            case 'RECEIVE_EVENT_ERROR':
                return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);
            case 'REMOVE_ALL_EVENT_SOURCES':
                return {};
            default:
                return eventSources;
        }
    }
    var uid$3 = 0;
    function addSources(eventSourceHash, sources, fetchRange, calendar) {
        var hash = {};
        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
            var source = sources_1[_i];
            hash[source.sourceId] = source;
        }
        if (fetchRange) {
            hash = fetchDirtySources(hash, fetchRange, calendar);
        }
        return __assign({}, eventSourceHash, hash);
    }
    function removeSource(eventSourceHash, sourceId) {
        return filterHash(eventSourceHash, function (eventSource) {
            return eventSource.sourceId !== sourceId;
        });
    }
    function fetchDirtySources(sourceHash, fetchRange, calendar) {
        return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {
            return isSourceDirty(eventSource, fetchRange, calendar);
        }), fetchRange, calendar);
    }
    function isSourceDirty(eventSource, fetchRange, calendar) {
        if (!doesSourceNeedRange(eventSource, calendar)) {
            return !eventSource.latestFetchId;
        }
        else {
            return !calendar.opt('lazyFetching') ||
                !eventSource.fetchRange ||
                fetchRange.start < eventSource.fetchRange.start ||
                fetchRange.end > eventSource.fetchRange.end;
        }
    }
    function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {
        var nextSources = {};
        for (var sourceId in prevSources) {
            var source = prevSources[sourceId];
            if (sourceIdHash[sourceId]) {
                nextSources[sourceId] = fetchSource(source, fetchRange, calendar);
            }
            else {
                nextSources[sourceId] = source;
            }
        }
        return nextSources;
    }
    function fetchSource(eventSource, fetchRange, calendar) {
        var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];
        var fetchId = String(uid$3++);
        sourceDef.fetch({
            eventSource: eventSource,
            calendar: calendar,
            range: fetchRange
        }, function (res) {
            var rawEvents = res.rawEvents;
            var calSuccess = calendar.opt('eventSourceSuccess');
            var calSuccessRes;
            var sourceSuccessRes;
            if (eventSource.success) {
                sourceSuccessRes = eventSource.success(rawEvents, res.xhr);
            }
            if (calSuccess) {
                calSuccessRes = calSuccess(rawEvents, res.xhr);
            }
            rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;
            calendar.dispatch({
                type: 'RECEIVE_EVENTS',
                sourceId: eventSource.sourceId,
                fetchId: fetchId,
                fetchRange: fetchRange,
                rawEvents: rawEvents
            });
        }, function (error) {
            var callFailure = calendar.opt('eventSourceFailure');
            console.warn(error.message, error);
            if (eventSource.failure) {
                eventSource.failure(error);
            }
            if (callFailure) {
                callFailure(error);
            }
            calendar.dispatch({
                type: 'RECEIVE_EVENT_ERROR',
                sourceId: eventSource.sourceId,
                fetchId: fetchId,
                fetchRange: fetchRange,
                error: error
            });
        });
        return __assign({}, eventSource, { isFetching: true, latestFetchId: fetchId });
    }
    function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
        var _a;
        var eventSource = sourceHash[sourceId];
        if (eventSource && // not already removed
            fetchId === eventSource.latestFetchId) {
            return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, { isFetching: false, fetchRange: fetchRange }), _a));
        }
        return sourceHash;
    }
    function excludeStaticSources(eventSources, calendar) {
        return filterHash(eventSources, function (eventSource) {
            return doesSourceNeedRange(eventSource, calendar);
        });
    }

    var DateProfileGenerator = /** @class */ (function () {
        function DateProfileGenerator(viewSpec, calendar) {
            this.viewSpec = viewSpec;
            this.options = viewSpec.options;
            this.dateEnv = calendar.dateEnv;
            this.calendar = calendar;
            this.initHiddenDays();
        }
        /* Date Range Computation
        ------------------------------------------------------------------------------------------------------------------*/
        // Builds a structure with info about what the dates/ranges will be for the "prev" view.
        DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {
            var dateEnv = this.dateEnv;
            var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
            currentDateProfile.dateIncrement);
            return this.build(prevDate, -1);
        };
        // Builds a structure with info about what the dates/ranges will be for the "next" view.
        DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {
            var dateEnv = this.dateEnv;
            var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
            currentDateProfile.dateIncrement);
            return this.build(nextDate, 1);
        };
        // Builds a structure holding dates/ranges for rendering around the given date.
        // Optional direction param indicates whether the date is being incremented/decremented
        // from its previous value. decremented = -1, incremented = 1 (default).
        DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {
            if (forceToValid === void 0) { forceToValid = false; }
            var validRange;
            var minTime = null;
            var maxTime = null;
            var currentInfo;
            var isRangeAllDay;
            var renderRange;
            var activeRange;
            var isValid;
            validRange = this.buildValidRange();
            validRange = this.trimHiddenDays(validRange);
            if (forceToValid) {
                currentDate = constrainMarkerToRange(currentDate, validRange);
            }
            currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
            isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
            renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
            renderRange = this.trimHiddenDays(renderRange);
            activeRange = renderRange;
            if (!this.options.showNonCurrentDates) {
                activeRange = intersectRanges(activeRange, currentInfo.range);
            }
            minTime = createDuration(this.options.minTime);
            maxTime = createDuration(this.options.maxTime);
            activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);
            activeRange = intersectRanges(activeRange, validRange); // might return null
            // it's invalid if the originally requested date is not contained,
            // or if the range is completely outside of the valid range.
            isValid = rangesIntersect(currentInfo.range, validRange);
            return {
                // constraint for where prev/next operations can go and where events can be dragged/resized to.
                // an object with optional start and end properties.
                validRange: validRange,
                // range the view is formally responsible for.
                // for example, a month view might have 1st-31st, excluding padded dates
                currentRange: currentInfo.range,
                // name of largest unit being displayed, like "month" or "week"
                currentRangeUnit: currentInfo.unit,
                isRangeAllDay: isRangeAllDay,
                // dates that display events and accept drag-n-drop
                // will be `null` if no dates accept events
                activeRange: activeRange,
                // date range with a rendered skeleton
                // includes not-active days that need some sort of DOM
                renderRange: renderRange,
                // Duration object that denotes the first visible time of any given day
                minTime: minTime,
                // Duration object that denotes the exclusive visible end time of any given day
                maxTime: maxTime,
                isValid: isValid,
                // how far the current date will move for a prev/next operation
                dateIncrement: this.buildDateIncrement(currentInfo.duration)
                // pass a fallback (might be null) ^
            };
        };
        // Builds an object with optional start/end properties.
        // Indicates the minimum/maximum dates to display.
        // not responsible for trimming hidden days.
        DateProfileGenerator.prototype.buildValidRange = function () {
            return this.getRangeOption('validRange', this.calendar.getNow()) ||
                { start: null, end: null }; // completely open-ended
        };
        // Builds a structure with info about the "current" range, the range that is
        // highlighted as being the current month for example.
        // See build() for a description of `direction`.
        // Guaranteed to have `range` and `unit` properties. `duration` is optional.
        DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
            var _a = this, viewSpec = _a.viewSpec, dateEnv = _a.dateEnv;
            var duration = null;
            var unit = null;
            var range = null;
            var dayCount;
            if (viewSpec.duration) {
                duration = viewSpec.duration;
                unit = viewSpec.durationUnit;
                range = this.buildRangeFromDuration(date, direction, duration, unit);
            }
            else if ((dayCount = this.options.dayCount)) {
                unit = 'day';
                range = this.buildRangeFromDayCount(date, direction, dayCount);
            }
            else if ((range = this.buildCustomVisibleRange(date))) {
                unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;
            }
            else {
                duration = this.getFallbackDuration();
                unit = greatestDurationDenominator(duration).unit;
                range = this.buildRangeFromDuration(date, direction, duration, unit);
            }
            return { duration: duration, unit: unit, range: range };
        };
        DateProfileGenerator.prototype.getFallbackDuration = function () {
            return createDuration({ day: 1 });
        };
        // Returns a new activeRange to have time values (un-ambiguate)
        // minTime or maxTime causes the range to expand.
        DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {
            var dateEnv = this.dateEnv;
            var start = range.start;
            var end = range.end;
            if (this.viewSpec.class.prototype.usesMinMaxTime) {
                // expand active range if minTime is negative (why not when positive?)
                if (asRoughDays(minTime) < 0) {
                    start = startOfDay(start); // necessary?
                    start = dateEnv.add(start, minTime);
                }
                // expand active range if maxTime is beyond one day (why not when positive?)
                if (asRoughDays(maxTime) > 1) {
                    end = startOfDay(end); // necessary?
                    end = addDays$1(end, -1);
                    end = dateEnv.add(end, maxTime);
                }
            }
            return { start: start, end: end };
        };
        // Builds the "current" range when it is specified as an explicit duration.
        // `unit` is the already-computed greatestDurationDenominator unit of duration.
        DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
            var dateEnv = this.dateEnv;
            var alignment = this.options.dateAlignment;
            var dateIncrementInput;
            var dateIncrementDuration;
            var start;
            var end;
            var res;
            // compute what the alignment should be
            if (!alignment) {
                dateIncrementInput = this.options.dateIncrement;
                if (dateIncrementInput) {
                    dateIncrementDuration = createDuration(dateIncrementInput);
                    // use the smaller of the two units
                    if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {
                        alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;
                    }
                    else {
                        alignment = unit;
                    }
                }
                else {
                    alignment = unit;
                }
            }
            // if the view displays a single day or smaller
            if (asRoughDays(duration) <= 1) {
                if (this.isHiddenDay(start)) {
                    start = this.skipHiddenDays(start, direction);
                    start = startOfDay(start);
                }
            }
            function computeRes() {
                start = dateEnv.startOf(date, alignment);
                end = dateEnv.add(start, duration);
                res = { start: start, end: end };
            }
            computeRes();
            // if range is completely enveloped by hidden days, go past the hidden days
            if (!this.trimHiddenDays(res)) {
                date = this.skipHiddenDays(date, direction);
                computeRes();
            }
            return res;
        };
        // Builds the "current" range when a dayCount is specified.
        DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
            var dateEnv = this.dateEnv;
            var customAlignment = this.options.dateAlignment;
            var runningCount = 0;
            var start = date;
            var end;
            if (customAlignment) {
                start = dateEnv.startOf(start, customAlignment);
            }
            start = startOfDay(start);
            start = this.skipHiddenDays(start, direction);
            end = start;
            do {
                end = addDays$1(end, 1);
                if (!this.isHiddenDay(end)) {
                    runningCount++;
                }
            } while (runningCount < dayCount);
            return { start: start, end: end };
        };
        // Builds a normalized range object for the "visible" range,
        // which is a way to define the currentRange and activeRange at the same time.
        DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
            var dateEnv = this.dateEnv;
            var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));
            if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {
                return null;
            }
            return visibleRange;
        };
        // Computes the range that will represent the element/cells for *rendering*,
        // but which may have voided days/times.
        // not responsible for trimming hidden days.
        DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
            return currentRange;
        };
        // Compute the duration value that should be added/substracted to the current date
        // when a prev/next operation happens.
        DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
            var dateIncrementInput = this.options.dateIncrement;
            var customAlignment;
            if (dateIncrementInput) {
                return createDuration(dateIncrementInput);
            }
            else if ((customAlignment = this.options.dateAlignment)) {
                return createDuration(1, customAlignment);
            }
            else if (fallback) {
                return fallback;
            }
            else {
                return createDuration({ days: 1 });
            }
        };
        // Arguments after name will be forwarded to a hypothetical function value
        // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
        // Always clone your objects if you fear mutation.
        DateProfileGenerator.prototype.getRangeOption = function (name) {
            var otherArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherArgs[_i - 1] = arguments[_i];
            }
            var val = this.options[name];
            if (typeof val === 'function') {
                val = val.apply(null, otherArgs);
            }
            if (val) {
                val = parseRange(val, this.dateEnv);
            }
            if (val) {
                val = computeVisibleDayRange(val);
            }
            return val;
        };
        /* Hidden Days
        ------------------------------------------------------------------------------------------------------------------*/
        // Initializes internal variables related to calculating hidden days-of-week
        DateProfileGenerator.prototype.initHiddenDays = function () {
            var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden
            var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)
            var dayCnt = 0;
            var i;
            if (this.options.weekends === false) {
                hiddenDays.push(0, 6); // 0=sunday, 6=saturday
            }
            for (i = 0; i < 7; i++) {
                if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {
                    dayCnt++;
                }
            }
            if (!dayCnt) {
                throw new Error('invalid hiddenDays'); // all days were hidden? bad.
            }
            this.isHiddenDayHash = isHiddenDayHash;
        };
        // Remove days from the beginning and end of the range that are computed as hidden.
        // If the whole range is trimmed off, returns null
        DateProfileGenerator.prototype.trimHiddenDays = function (range) {
            var start = range.start;
            var end = range.end;
            if (start) {
                start = this.skipHiddenDays(start);
            }
            if (end) {
                end = this.skipHiddenDays(end, -1, true);
            }
            if (start == null || end == null || start < end) {
                return { start: start, end: end };
            }
            return null;
        };
        // Is the current day hidden?
        // `day` is a day-of-week index (0-6), or a Date (used for UTC)
        DateProfileGenerator.prototype.isHiddenDay = function (day) {
            if (day instanceof Date) {
                day = day.getUTCDay();
            }
            return this.isHiddenDayHash[day];
        };
        // Incrementing the current day until it is no longer a hidden day, returning a copy.
        // DOES NOT CONSIDER validRange!
        // If the initial value of `date` is not a hidden day, don't do anything.
        // Pass `isExclusive` as `true` if you are dealing with an end date.
        // `inc` defaults to `1` (increment one day forward each time)
        DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {
            if (inc === void 0) { inc = 1; }
            if (isExclusive === void 0) { isExclusive = false; }
            while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {
                date = addDays$1(date, inc);
            }
            return date;
        };
        return DateProfileGenerator;
    }());
    // TODO: find a way to avoid comparing DateProfiles. it's tedious
    function isDateProfilesEqual(p0, p1) {
        return rangesEqual(p0.validRange, p1.validRange) &&
            rangesEqual(p0.activeRange, p1.activeRange) &&
            rangesEqual(p0.renderRange, p1.renderRange) &&
            durationsEqual(p0.minTime, p1.minTime) &&
            durationsEqual(p0.maxTime, p1.maxTime);
        /*
        TODO: compare more?
          currentRange: DateRange
          currentRangeUnit: string
          isRangeAllDay: boolean
          isValid: boolean
          dateIncrement: Duration
        */
    }

    function reduce$1 (state, action, calendar) {
        var viewType = reduceViewType(state.viewType, action);
        var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);
        var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);
        var nextState = __assign({}, state, { viewType: viewType,
            dateProfile: dateProfile, currentDate: reduceCurrentDate(state.currentDate, action, dateProfile), eventSources: eventSources, eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar), dateSelection: reduceDateSelection(state.dateSelection, action), eventSelection: reduceSelectedEvent(state.eventSelection, action), eventDrag: reduceEventDrag(state.eventDrag, action), eventResize: reduceEventResize(state.eventResize, action), eventSourceLoadingLevel: computeLoadingLevel(eventSources), loadingLevel: computeLoadingLevel(eventSources) });
        for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {
            var reducerFunc = _a[_i];
            nextState = reducerFunc(nextState, action, calendar);
        }
        // console.log(action.type, nextState)
        return nextState;
    }
    function reduceViewType(currentViewType, action) {
        switch (action.type) {
            case 'SET_VIEW_TYPE':
                return action.viewType;
            default:
                return currentViewType;
        }
    }
    function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {
        var newDateProfile;
        switch (action.type) {
            case 'PREV':
                newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);
                break;
            case 'NEXT':
                newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);
                break;
            case 'SET_DATE':
                if (!currentDateProfile.activeRange ||
                    !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {
                    newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid
                    );
                }
                break;
            case 'SET_VIEW_TYPE':
                var generator = calendar.dateProfileGenerators[viewType];
                if (!generator) {
                    throw new Error(viewType ?
                        'The FullCalendar view "' + viewType + '" does not exist. Make sure your plugins are loaded correctly.' :
                        'No available FullCalendar view plugins.');
                }
                newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid
                );
                break;
        }
        if (newDateProfile &&
            newDateProfile.isValid &&
            !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {
            return newDateProfile;
        }
        else {
            return currentDateProfile;
        }
    }
    function reduceCurrentDate(currentDate, action, dateProfile) {
        switch (action.type) {
            case 'PREV':
            case 'NEXT':
                if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {
                    return dateProfile.currentRange.start;
                }
                else {
                    return currentDate;
                }
            case 'SET_DATE':
            case 'SET_VIEW_TYPE':
                var newDate = action.dateMarker || currentDate;
                if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {
                    return dateProfile.currentRange.start;
                }
                else {
                    return newDate;
                }
            default:
                return currentDate;
        }
    }
    function reduceDateSelection(currentSelection, action, calendar) {
        switch (action.type) {
            case 'SELECT_DATES':
                return action.selection;
            case 'UNSELECT_DATES':
                return null;
            default:
                return currentSelection;
        }
    }
    function reduceSelectedEvent(currentInstanceId, action) {
        switch (action.type) {
            case 'SELECT_EVENT':
                return action.eventInstanceId;
            case 'UNSELECT_EVENT':
                return '';
            default:
                return currentInstanceId;
        }
    }
    function reduceEventDrag(currentDrag, action, sources, calendar) {
        switch (action.type) {
            case 'SET_EVENT_DRAG':
                var newDrag = action.state;
                return {
                    affectedEvents: newDrag.affectedEvents,
                    mutatedEvents: newDrag.mutatedEvents,
                    isEvent: newDrag.isEvent,
                    origSeg: newDrag.origSeg
                };
            case 'UNSET_EVENT_DRAG':
                return null;
            default:
                return currentDrag;
        }
    }
    function reduceEventResize(currentResize, action, sources, calendar) {
        switch (action.type) {
            case 'SET_EVENT_RESIZE':
                var newResize = action.state;
                return {
                    affectedEvents: newResize.affectedEvents,
                    mutatedEvents: newResize.mutatedEvents,
                    isEvent: newResize.isEvent,
                    origSeg: newResize.origSeg
                };
            case 'UNSET_EVENT_RESIZE':
                return null;
            default:
                return currentResize;
        }
    }
    function computeLoadingLevel(eventSources) {
        var cnt = 0;
        for (var sourceId in eventSources) {
            if (eventSources[sourceId].isFetching) {
                cnt++;
            }
        }
        return cnt;
    }

    var STANDARD_PROPS = {
        start: null,
        end: null,
        allDay: Boolean
    };
    function parseDateSpan(raw, dateEnv, defaultDuration) {
        var span = parseOpenDateSpan(raw, dateEnv);
        var range = span.range;
        if (!range.start) {
            return null;
        }
        if (!range.end) {
            if (defaultDuration == null) {
                return null;
            }
            else {
                range.end = dateEnv.add(range.start, defaultDuration);
            }
        }
        return span;
    }
    /*
    TODO: somehow combine with parseRange?
    Will return null if the start/end props were present but parsed invalidly.
    */
    function parseOpenDateSpan(raw, dateEnv) {
        var leftovers = {};
        var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);
        var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
        var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
        var allDay = standardProps.allDay;
        if (allDay == null) {
            allDay = (startMeta && startMeta.isTimeUnspecified) &&
                (!endMeta || endMeta.isTimeUnspecified);
        }
        // use this leftover object as the selection object
        leftovers.range = {
            start: startMeta ? startMeta.marker : null,
            end: endMeta ? endMeta.marker : null
        };
        leftovers.allDay = allDay;
        return leftovers;
    }
    function isDateSpansEqual(span0, span1) {
        return rangesEqual(span0.range, span1.range) &&
            span0.allDay === span1.allDay &&
            isSpanPropsEqual(span0, span1);
    }
    // the NON-DATE-RELATED props
    function isSpanPropsEqual(span0, span1) {
        for (var propName in span1) {
            if (propName !== 'range' && propName !== 'allDay') {
                if (span0[propName] !== span1[propName]) {
                    return false;
                }
            }
        }
        // are there any props that span0 has that span1 DOESN'T have?
        // both have range/allDay, so no need to special-case.
        for (var propName in span0) {
            if (!(propName in span1)) {
                return false;
            }
        }
        return true;
    }
    function buildDateSpanApi(span, dateEnv) {
        return {
            start: dateEnv.toDate(span.range.start),
            end: dateEnv.toDate(span.range.end),
            startStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),
            endStr: dateEnv.formatIso(span.range.end, { omitTime: span.allDay }),
            allDay: span.allDay
        };
    }
    function buildDatePointApi(span, dateEnv) {
        return {
            date: dateEnv.toDate(span.range.start),
            dateStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),
            allDay: span.allDay
        };
    }
    function fabricateEventRange(dateSpan, eventUiBases, calendar) {
        var def = parseEventDef({ editable: false }, '', // sourceId
        dateSpan.allDay, true, // hasEnd
        calendar);
        return {
            def: def,
            ui: compileEventUi(def, eventUiBases),
            instance: createEventInstance(def.defId, dateSpan.range),
            range: dateSpan.range,
            isStart: true,
            isEnd: true
        };
    }

    function compileViewDefs(defaultConfigs, overrideConfigs) {
        var hash = {};
        var viewType;
        for (viewType in defaultConfigs) {
            ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
        }
        for (viewType in overrideConfigs) {
            ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
        }
        return hash;
    }
    function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
        if (hash[viewType]) {
            return hash[viewType];
        }
        var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);
        if (viewDef) {
            hash[viewType] = viewDef;
        }
        return viewDef;
    }
    function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
        var defaultConfig = defaultConfigs[viewType];
        var overrideConfig = overrideConfigs[viewType];
        var queryProp = function (name) {
            return (defaultConfig && defaultConfig[name] !== null) ? defaultConfig[name] :
                ((overrideConfig && overrideConfig[name] !== null) ? overrideConfig[name] : null);
        };
        var theClass = queryProp('class');
        var superType = queryProp('superType');
        if (!superType && theClass) {
            superType =
                findViewNameBySubclass(theClass, overrideConfigs) ||
                    findViewNameBySubclass(theClass, defaultConfigs);
        }
        var superDef = null;
        if (superType) {
            if (superType === viewType) {
                throw new Error('Can\'t have a custom view type that references itself');
            }
            superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
        }
        if (!theClass && superDef) {
            theClass = superDef.class;
        }
        if (!theClass) {
            return null; // don't throw a warning, might be settings for a single-unit view
        }
        return {
            type: viewType,
            class: theClass,
            defaults: __assign({}, (superDef ? superDef.defaults : {}), (defaultConfig ? defaultConfig.options : {})),
            overrides: __assign({}, (superDef ? superDef.overrides : {}), (overrideConfig ? overrideConfig.options : {}))
        };
    }
    function findViewNameBySubclass(viewSubclass, configs) {
        var superProto = Object.getPrototypeOf(viewSubclass.prototype);
        for (var viewType in configs) {
            var parsed = configs[viewType];
            // need DIRECT subclass, so instanceof won't do it
            if (parsed.class && parsed.class.prototype === superProto) {
                return viewType;
            }
        }
        return '';
    }

    function parseViewConfigs(inputs) {
        return mapHash(inputs, parseViewConfig);
    }
    var VIEW_DEF_PROPS = {
        type: String,
        class: null
    };
    function parseViewConfig(input) {
        if (typeof input === 'function') {
            input = { class: input };
        }
        var options = {};
        var props = refineProps(input, VIEW_DEF_PROPS, {}, options);
        return {
            superType: props.type,
            class: props.class,
            options: options
        };
    }

    function buildViewSpecs(defaultInputs, optionsManager) {
        var defaultConfigs = parseViewConfigs(defaultInputs);
        var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);
        var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
        return mapHash(viewDefs, function (viewDef) {
            return buildViewSpec(viewDef, overrideConfigs, optionsManager);
        });
    }
    function buildViewSpec(viewDef, overrideConfigs, optionsManager) {
        var durationInput = viewDef.overrides.duration ||
            viewDef.defaults.duration ||
            optionsManager.dynamicOverrides.duration ||
            optionsManager.overrides.duration;
        var duration = null;
        var durationUnit = '';
        var singleUnit = '';
        var singleUnitOverrides = {};
        if (durationInput) {
            duration = createDuration(durationInput);
            if (duration) { // valid?
                var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));
                durationUnit = denom.unit;
                if (denom.value === 1) {
                    singleUnit = durationUnit;
                    singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};
                }
            }
        }
        var queryButtonText = function (options) {
            var buttonTextMap = options.buttonText || {};
            var buttonTextKey = viewDef.defaults.buttonTextKey;
            if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {
                return buttonTextMap[buttonTextKey];
            }
            if (buttonTextMap[viewDef.type] != null) {
                return buttonTextMap[viewDef.type];
            }
            if (buttonTextMap[singleUnit] != null) {
                return buttonTextMap[singleUnit];
            }
        };
        return {
            type: viewDef.type,
            class: viewDef.class,
            duration: duration,
            durationUnit: durationUnit,
            singleUnit: singleUnit,
            options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),
            buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) ||
                queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
                viewDef.overrides.buttonText,
            buttonTextDefault: queryButtonText(optionsManager.localeDefaults) ||
                queryButtonText(optionsManager.dirDefaults) ||
                viewDef.defaults.buttonText ||
                queryButtonText(globalDefaults) ||
                viewDef.type // fall back to given view name
        };
    }

    var Toolbar = /** @class */ (function (_super) {
        __extends(Toolbar, _super);
        function Toolbar(context, extraClassName) {
            var _this = _super.call(this, context) || this;
            _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);
            _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);
            _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);
            _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);
            _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);
            _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);
            _this.el = createElement('div', { className: 'fc-toolbar ' + extraClassName });
            return _this;
        }
        Toolbar.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._renderLayout.unrender(); // should unrender everything else
            removeElement(this.el);
        };
        Toolbar.prototype.render = function (props) {
            this._renderLayout(props.layout);
            this._updateTitle(props.title);
            this._updateActiveButton(props.activeButton);
            this._updateToday(props.isTodayEnabled);
            this._updatePrev(props.isPrevEnabled);
            this._updateNext(props.isNextEnabled);
        };
        Toolbar.prototype.renderLayout = function (layout) {
            var el = this.el;
            this.viewsWithButtons = [];
            appendToElement(el, this.renderSection('left', layout.left));
            appendToElement(el, this.renderSection('center', layout.center));
            appendToElement(el, this.renderSection('right', layout.right));
        };
        Toolbar.prototype.unrenderLayout = function () {
            this.el.innerHTML = '';
        };
        Toolbar.prototype.renderSection = function (position, buttonStr) {
            var _this = this;
            var _a = this, theme = _a.theme, calendar = _a.calendar;
            var optionsManager = calendar.optionsManager;
            var viewSpecs = calendar.viewSpecs;
            var sectionEl = createElement('div', { className: 'fc-' + position });
            var calendarCustomButtons = optionsManager.computed.customButtons || {};
            var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
            var calendarButtonText = optionsManager.computed.buttonText || {};
            if (buttonStr) {
                buttonStr.split(' ').forEach(function (buttonGroupStr, i) {
                    var groupChildren = [];
                    var isOnlyButtons = true;
                    var groupEl;
                    buttonGroupStr.split(',').forEach(function (buttonName, j) {
                        var customButtonProps;
                        var viewSpec;
                        var buttonClick;
                        var buttonIcon; // only one of these will be set
                        var buttonText; // "
                        var buttonInnerHtml;
                        var buttonClasses;
                        var buttonEl;
                        var buttonAriaAttr;
                        if (buttonName === 'title') {
                            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height
                            isOnlyButtons = false;
                        }
                        else {
                            if ((customButtonProps = calendarCustomButtons[buttonName])) {
                                buttonClick = function (ev) {
                                    if (customButtonProps.click) {
                                        customButtonProps.click.call(buttonEl, ev);
                                    }
                                };
                                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) ||
                                    (buttonIcon = theme.getIconClass(buttonName)) ||
                                    (buttonText = customButtonProps.text);
                            }
                            else if ((viewSpec = viewSpecs[buttonName])) {
                                _this.viewsWithButtons.push(buttonName);
                                buttonClick = function () {
                                    calendar.changeView(buttonName);
                                };
                                (buttonText = viewSpec.buttonTextOverride) ||
                                    (buttonIcon = theme.getIconClass(buttonName)) ||
                                    (buttonText = viewSpec.buttonTextDefault);
                            }
                            else if (calendar[buttonName]) { // a calendar method
                                buttonClick = function () {
                                    calendar[buttonName]();
                                };
                                (buttonText = calendarButtonTextOverrides[buttonName]) ||
                                    (buttonIcon = theme.getIconClass(buttonName)) ||
                                    (buttonText = calendarButtonText[buttonName]);
                                //            ^ everything else is considered default
                            }
                            if (buttonClick) {
                                buttonClasses = [
                                    'fc-' + buttonName + '-button',
                                    theme.getClass('button')
                                ];
                                if (buttonText) {
                                    buttonInnerHtml = htmlEscape(buttonText);
                                    buttonAriaAttr = '';
                                }
                                else if (buttonIcon) {
                                    buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                                    buttonAriaAttr = ' aria-label="' + buttonName + '"';
                                }
                                buttonEl = htmlToElement(// type="button" so that it doesn't submit a form
                                '<button type="button" class="' + buttonClasses.join(' ') + '"' +
                                    buttonAriaAttr +
                                    '>' + buttonInnerHtml + '</button>');
                                buttonEl.addEventListener('click', buttonClick);
                                groupChildren.push(buttonEl);
                            }
                        }
                    });
                    if (groupChildren.length > 1) {
                        groupEl = document.createElement('div');
                        var buttonGroupClassName = theme.getClass('buttonGroup');
                        if (isOnlyButtons && buttonGroupClassName) {
                            groupEl.classList.add(buttonGroupClassName);
                        }
                        appendToElement(groupEl, groupChildren);
                        sectionEl.appendChild(groupEl);
                    }
                    else {
                        appendToElement(sectionEl, groupChildren); // 1 or 0 children
                    }
                });
            }
            return sectionEl;
        };
        Toolbar.prototype.updateToday = function (isTodayEnabled) {
            this.toggleButtonEnabled('today', isTodayEnabled);
        };
        Toolbar.prototype.updatePrev = function (isPrevEnabled) {
            this.toggleButtonEnabled('prev', isPrevEnabled);
        };
        Toolbar.prototype.updateNext = function (isNextEnabled) {
            this.toggleButtonEnabled('next', isNextEnabled);
        };
        Toolbar.prototype.updateTitle = function (text) {
            findElements(this.el, 'h2').forEach(function (titleEl) {
                titleEl.innerText = text;
            });
        };
        Toolbar.prototype.updateActiveButton = function (buttonName) {
            var className = this.theme.getClass('buttonActive');
            findElements(this.el, 'button').forEach(function (buttonEl) {
                if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {
                    buttonEl.classList.add(className);
                }
                else {
                    buttonEl.classList.remove(className);
                }
            });
        };
        Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {
            findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {
                buttonEl.disabled = !bool;
            });
        };
        return Toolbar;
    }(Component));

    var CalendarComponent = /** @class */ (function (_super) {
        __extends(CalendarComponent, _super);
        function CalendarComponent(context, el) {
            var _this = _super.call(this, context) || this;
            _this._renderToolbars = memoizeRendering(_this.renderToolbars);
            _this.buildViewPropTransformers = memoize$1(buildViewPropTransformers);
            _this.el = el;
            prependToElement(el, _this.contentEl = createElement('div', { className: 'fc-view-container' }));
            var calendar = _this.calendar;
            for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {
                var modifyViewContainer = _a[_i];
                modifyViewContainer(_this.contentEl, calendar);
            }
            _this.toggleElClassNames(true);
            _this.computeTitle = memoize$1(computeTitle);
            _this.parseBusinessHours = memoize$1(function (input) {
                return parseBusinessHours(input, _this.calendar);
            });
            return _this;
        }
        CalendarComponent.prototype.destroy = function () {
            if (this.header) {
                this.header.destroy();
            }
            if (this.footer) {
                this.footer.destroy();
            }
            if (this.view) {
                this.view.destroy();
            }
            removeElement(this.contentEl);
            this.toggleElClassNames(false);
            _super.prototype.destroy.call(this);
        };
        CalendarComponent.prototype.toggleElClassNames = function (bool) {
            var classList = this.el.classList;
            var dirClassName = 'fc-' + this.opt('dir');
            var themeClassName = this.theme.getClass('widget');
            if (bool) {
                classList.add('fc');
                classList.add(dirClassName);
                classList.add(themeClassName);
            }
            else {
                classList.remove('fc');
                classList.remove(dirClassName);
                classList.remove(themeClassName);
            }
        };
        CalendarComponent.prototype.render = function (props) {
            this.freezeHeight();
            var title = this.computeTitle(props.dateProfile, props.viewSpec.options);
            this._renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, props.dateProfileGenerator, title);
            this.renderView(props, title);
            this.updateSize();
            this.thawHeight();
        };
        CalendarComponent.prototype.renderToolbars = function (viewSpec, dateProfile, currentDate, dateProfileGenerator, title) {
            var headerLayout = this.opt('header');
            var footerLayout = this.opt('footer');
            var now = this.calendar.getNow();
            var todayInfo = dateProfileGenerator.build(now);
            var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);
            var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);
            var toolbarProps = {
                title: title,
                activeButton: viewSpec.type,
                isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),
                isPrevEnabled: prevInfo.isValid,
                isNextEnabled: nextInfo.isValid
            };
            if (headerLayout) {
                if (!this.header) {
                    this.header = new Toolbar(this.context, 'fc-header-toolbar');
                    prependToElement(this.el, this.header.el);
                }
                this.header.receiveProps(__assign({ layout: headerLayout }, toolbarProps));
            }
            else if (this.header) {
                this.header.destroy();
                this.header = null;
            }
            if (footerLayout) {
                if (!this.footer) {
                    this.footer = new Toolbar(this.context, 'fc-footer-toolbar');
                    appendToElement(this.el, this.footer.el);
                }
                this.footer.receiveProps(__assign({ layout: footerLayout }, toolbarProps));
            }
            else if (this.footer) {
                this.footer.destroy();
                this.footer = null;
            }
        };
        CalendarComponent.prototype.renderView = function (props, title) {
            var view = this.view;
            var viewSpec = props.viewSpec, dateProfileGenerator = props.dateProfileGenerator;
            if (!view || view.viewSpec !== viewSpec) {
                if (view) {
                    view.destroy();
                }
                view = this.view = new viewSpec['class']({
                    calendar: this.calendar,
                    view: null,
                    dateEnv: this.dateEnv,
                    theme: this.theme,
                    options: viewSpec.options
                }, viewSpec, dateProfileGenerator, this.contentEl);
            }
            else {
                view.addScroll(view.queryScroll());
            }
            view.title = title; // for the API
            var viewProps = {
                dateProfile: props.dateProfile,
                businessHours: this.parseBusinessHours(viewSpec.options.businessHours),
                eventStore: props.eventStore,
                eventUiBases: props.eventUiBases,
                dateSelection: props.dateSelection,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize
            };
            var transformers = this.buildViewPropTransformers(this.calendar.pluginSystem.hooks.viewPropsTransformers);
            for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
                var transformer = transformers_1[_i];
                __assign(viewProps, transformer.transform(viewProps, viewSpec, props, view));
            }
            view.receiveProps(viewProps);
        };
        // Sizing
        // -----------------------------------------------------------------------------------------------------------------
        CalendarComponent.prototype.updateSize = function (isResize) {
            if (isResize === void 0) { isResize = false; }
            var view = this.view;
            if (isResize) {
                view.addScroll(view.queryScroll());
            }
            if (isResize || this.isHeightAuto == null) {
                this.computeHeightVars();
            }
            view.updateSize(isResize, this.viewHeight, this.isHeightAuto);
            view.updateNowIndicator(); // we need to guarantee this will run after updateSize
            view.popScroll(isResize);
        };
        CalendarComponent.prototype.computeHeightVars = function () {
            var calendar = this.calendar; // yuck. need to handle dynamic options
            var heightInput = calendar.opt('height');
            var contentHeightInput = calendar.opt('contentHeight');
            this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';
            if (typeof contentHeightInput === 'number') { // exists and not 'auto'
                this.viewHeight = contentHeightInput;
            }
            else if (typeof contentHeightInput === 'function') { // exists and is a function
                this.viewHeight = contentHeightInput();
            }
            else if (typeof heightInput === 'number') { // exists and not 'auto'
                this.viewHeight = heightInput - this.queryToolbarsHeight();
            }
            else if (typeof heightInput === 'function') { // exists and is a function
                this.viewHeight = heightInput() - this.queryToolbarsHeight();
            }
            else if (heightInput === 'parent') { // set to height of parent element
                var parentEl = this.el.parentNode;
                this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();
            }
            else {
                this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width /
                    Math.max(calendar.opt('aspectRatio'), .5));
            }
        };
        CalendarComponent.prototype.queryToolbarsHeight = function () {
            var height = 0;
            if (this.header) {
                height += computeHeightAndMargins(this.header.el);
            }
            if (this.footer) {
                height += computeHeightAndMargins(this.footer.el);
            }
            return height;
        };
        // Height "Freezing"
        // -----------------------------------------------------------------------------------------------------------------
        CalendarComponent.prototype.freezeHeight = function () {
            applyStyle(this.el, {
                height: this.el.getBoundingClientRect().height,
                overflow: 'hidden'
            });
        };
        CalendarComponent.prototype.thawHeight = function () {
            applyStyle(this.el, {
                height: '',
                overflow: ''
            });
        };
        return CalendarComponent;
    }(Component));
    // Title and Date Formatting
    // -----------------------------------------------------------------------------------------------------------------
    // Computes what the title at the top of the calendar should be for this view
    function computeTitle(dateProfile, viewOptions) {
        var range;
        // for views that span a large unit of time, show the proper interval, ignoring stray days before and after
        if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
            range = dateProfile.currentRange;
        }
        else { // for day units or smaller, use the actual day range
            range = dateProfile.activeRange;
        }
        return this.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), { isEndExclusive: dateProfile.isRangeAllDay });
    }
    // Generates the format string that should be used to generate the title for the current date range.
    // Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
    function computeTitleFormat(dateProfile) {
        var currentRangeUnit = dateProfile.currentRangeUnit;
        if (currentRangeUnit === 'year') {
            return { year: 'numeric' };
        }
        else if (currentRangeUnit === 'month') {
            return { year: 'numeric', month: 'long' }; // like "September 2014"
        }
        else {
            var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);
            if (days !== null && days > 1) {
                // multi-day range. shorter, like "Sep 9 - 10 2014"
                return { year: 'numeric', month: 'short', day: 'numeric' };
            }
            else {
                // one day. longer, like "September 9 2014"
                return { year: 'numeric', month: 'long', day: 'numeric' };
            }
        }
    }
    // Plugin
    // -----------------------------------------------------------------------------------------------------------------
    function buildViewPropTransformers(theClasses) {
        return theClasses.map(function (theClass) {
            return new theClass();
        });
    }

    var Interaction = /** @class */ (function () {
        function Interaction(settings) {
            this.component = settings.component;
        }
        Interaction.prototype.destroy = function () {
        };
        return Interaction;
    }());
    function parseInteractionSettings(component, input) {
        return {
            component: component,
            el: input.el,
            useEventCenter: input.useEventCenter != null ? input.useEventCenter : true
        };
    }
    function interactionSettingsToStore(settings) {
        var _a;
        return _a = {},
            _a[settings.component.uid] = settings,
            _a;
    }
    // global state
    var interactionSettingsStore = {};

    /*
    Detects when the user clicks on an event within a DateComponent
    */
    var EventClicking = /** @class */ (function (_super) {
        __extends(EventClicking, _super);
        function EventClicking(settings) {
            var _this = _super.call(this, settings) || this;
            _this.handleSegClick = function (ev, segEl) {
                var component = _this.component;
                var seg = getElSeg(segEl);
                if (seg && // might be the <div> surrounding the more link
                    component.isValidSegDownEl(ev.target)) {
                    // our way to simulate a link click for elements that can't be <a> tags
                    // grab before trigger fired in case trigger trashes DOM thru rerendering
                    var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');
                    var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
                    component.publiclyTrigger('eventClick', [
                        {
                            el: segEl,
                            event: new EventApi(component.calendar, seg.eventRange.def, seg.eventRange.instance),
                            jsEvent: ev,
                            view: component.view
                        }
                    ]);
                    if (url && !ev.defaultPrevented) {
                        window.location.href = url;
                    }
                }
            };
            var component = settings.component;
            _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);
            return _this;
        }
        return EventClicking;
    }(Interaction));

    /*
    Triggers events and adds/removes core classNames when the user's pointer
    enters/leaves event-elements of a component.
    */
    var EventHovering = /** @class */ (function (_super) {
        __extends(EventHovering, _super);
        function EventHovering(settings) {
            var _this = _super.call(this, settings) || this;
            // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it
            _this.handleEventElRemove = function (el) {
                if (el === _this.currentSegEl) {
                    _this.handleSegLeave(null, _this.currentSegEl);
                }
            };
            _this.handleSegEnter = function (ev, segEl) {
                if (getElSeg(segEl)) { // TODO: better way to make sure not hovering over more+ link or its wrapper
                    segEl.classList.add('fc-allow-mouse-resize');
                    _this.currentSegEl = segEl;
                    _this.triggerEvent('eventMouseEnter', ev, segEl);
                }
            };
            _this.handleSegLeave = function (ev, segEl) {
                if (_this.currentSegEl) {
                    segEl.classList.remove('fc-allow-mouse-resize');
                    _this.currentSegEl = null;
                    _this.triggerEvent('eventMouseLeave', ev, segEl);
                }
            };
            var component = settings.component;
            _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);
            component.calendar.on('eventElRemove', _this.handleEventElRemove);
            return _this;
        }
        EventHovering.prototype.destroy = function () {
            this.removeHoverListeners();
            this.component.calendar.off('eventElRemove', this.handleEventElRemove);
        };
        EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {
            var component = this.component;
            var seg = getElSeg(segEl);
            if (!ev || component.isValidSegDownEl(ev.target)) {
                component.publiclyTrigger(publicEvName, [
                    {
                        el: segEl,
                        event: new EventApi(this.component.calendar, seg.eventRange.def, seg.eventRange.instance),
                        jsEvent: ev,
                        view: component.view
                    }
                ]);
            }
        };
        return EventHovering;
    }(Interaction));

    var StandardTheme = /** @class */ (function (_super) {
        __extends(StandardTheme, _super);
        function StandardTheme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StandardTheme;
    }(Theme));
    StandardTheme.prototype.classes = {
        widget: 'fc-unthemed',
        widgetHeader: 'fc-widget-header',
        widgetContent: 'fc-widget-content',
        buttonGroup: 'fc-button-group',
        button: 'fc-button fc-button-primary',
        buttonActive: 'fc-button-active',
        popoverHeader: 'fc-widget-header',
        popoverContent: 'fc-widget-content',
        // day grid
        headerRow: 'fc-widget-header',
        dayRow: 'fc-widget-content',
        // list view
        listView: 'fc-widget-content'
    };
    StandardTheme.prototype.baseIconClass = 'fc-icon';
    StandardTheme.prototype.iconClasses = {
        close: 'fc-icon-x',
        prev: 'fc-icon-chevron-left',
        next: 'fc-icon-chevron-right',
        prevYear: 'fc-icon-chevrons-left',
        nextYear: 'fc-icon-chevrons-right'
    };
    StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
    StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
    StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';

    var Calendar = /** @class */ (function () {
        function Calendar(el, overrides) {
            var _this = this;
            this.parseRawLocales = memoize$1(parseRawLocales);
            this.buildLocale = memoize$1(buildLocale);
            this.buildDateEnv = memoize$1(buildDateEnv);
            this.buildTheme = memoize$1(buildTheme);
            this.buildEventUiSingleBase = memoize$1(this._buildEventUiSingleBase);
            this.buildSelectionConfig = memoize$1(this._buildSelectionConfig);
            this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);
            this.buildEventUiBases = memoize$1(buildEventUiBases);
            this.interactionsStore = {};
            this.actionQueue = [];
            this.isReducing = false;
            // isDisplaying: boolean = false // installed in DOM? accepting renders?
            this.needsRerender = false; // needs a render?
            this.needsFullRerender = false;
            this.isRendering = false; // currently in the executeRender function?
            this.renderingPauseDepth = 0;
            this.buildDelayedRerender = memoize$1(buildDelayedRerender);
            this.afterSizingTriggers = {};
            this.isViewUpdated = false;
            this.isDatesUpdated = false;
            this.isEventsUpdated = false;
            this.el = el;
            this.optionsManager = new OptionsManager(overrides || {});
            this.pluginSystem = new PluginSystem();
            // only do once. don't do in handleOptions. because can't remove plugins
            this.addPluginInputs(this.optionsManager.computed.plugins || []);
            this.handleOptions(this.optionsManager.computed);
            this.publiclyTrigger('_init'); // for tests
            this.hydrate();
            this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions
                .map(function (calendarInteractionClass) {
                return new calendarInteractionClass(_this);
            });
        }
        Calendar.prototype.addPluginInputs = function (pluginInputs) {
            var pluginDefs = refinePluginDefs(pluginInputs);
            for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {
                var pluginDef = pluginDefs_1[_i];
                this.pluginSystem.add(pluginDef);
            }
        };
        Object.defineProperty(Calendar.prototype, "view", {
            // public API
            get: function () {
                return this.component ? this.component.view : null;
            },
            enumerable: true,
            configurable: true
        });
        // Public API for rendering
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.render = function () {
            if (!this.component) {
                this.renderableEventStore = createEmptyEventStore();
                this.bindHandlers();
                this.executeRender();
            }
            else {
                this.requestRerender(true);
            }
        };
        Calendar.prototype.destroy = function () {
            if (this.component) {
                this.unbindHandlers();
                this.component.destroy(); // don't null-out. in case API needs access
                this.component = null; // umm ???
                for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {
                    var interaction = _a[_i];
                    interaction.destroy();
                }
                this.publiclyTrigger('_destroyed');
            }
        };
        // Handlers
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.bindHandlers = function () {
            var _this = this;
            // event delegation for nav links
            this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {
                var gotoOptions = anchorEl.getAttribute('data-goto');
                gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};
                var dateEnv = _this.dateEnv;
                var dateMarker = dateEnv.createMarker(gotoOptions.date);
                var viewType = gotoOptions.type;
                // property like "navLinkDayClick". might be a string or a function
                var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');
                if (typeof customAction === 'function') {
                    customAction(dateEnv.toDate(dateMarker), ev);
                }
                else {
                    if (typeof customAction === 'string') {
                        viewType = customAction;
                    }
                    _this.zoomTo(dateMarker, viewType);
                }
            });
            if (this.opt('handleWindowResize')) {
                window.addEventListener('resize', this.windowResizeProxy = debounce$1(// prevents rapid calls
                this.windowResize.bind(this), this.opt('windowResizeDelay')));
            }
        };
        Calendar.prototype.unbindHandlers = function () {
            this.removeNavLinkListener();
            if (this.windowResizeProxy) {
                window.removeEventListener('resize', this.windowResizeProxy);
                this.windowResizeProxy = null;
            }
        };
        // Dispatcher
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.hydrate = function () {
            var _this = this;
            this.state = this.buildInitialState();
            var rawSources = this.opt('eventSources') || [];
            var singleRawSource = this.opt('events');
            var sources = []; // parsed
            if (singleRawSource) {
                rawSources.unshift(singleRawSource);
            }
            for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {
                var rawSource = rawSources_1[_i];
                var source = parseEventSource(rawSource, this);
                if (source) {
                    sources.push(source);
                }
            }
            this.batchRendering(function () {
                _this.dispatch({ type: 'INIT' }); // pass in sources here?
                _this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: sources });
                _this.dispatch({
                    type: 'SET_VIEW_TYPE',
                    viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView
                });
            });
        };
        Calendar.prototype.buildInitialState = function () {
            return {
                viewType: null,
                loadingLevel: 0,
                eventSourceLoadingLevel: 0,
                currentDate: this.getInitialDate(),
                dateProfile: null,
                eventSources: {},
                eventStore: createEmptyEventStore(),
                dateSelection: null,
                eventSelection: '',
                eventDrag: null,
                eventResize: null
            };
        };
        Calendar.prototype.dispatch = function (action) {
            this.actionQueue.push(action);
            if (!this.isReducing) {
                this.isReducing = true;
                var oldState = this.state;
                while (this.actionQueue.length) {
                    this.state = this.reduce(this.state, this.actionQueue.shift(), this);
                }
                var newState = this.state;
                this.isReducing = false;
                if (!oldState.loadingLevel && newState.loadingLevel) {
                    this.publiclyTrigger('loading', [true]);
                }
                else if (oldState.loadingLevel && !newState.loadingLevel) {
                    this.publiclyTrigger('loading', [false]);
                }
                var view = this.component && this.component.view;
                if (oldState.eventStore !== newState.eventStore || this.needsFullRerender) {
                    if (oldState.eventStore) {
                        this.isEventsUpdated = true;
                    }
                }
                if (oldState.dateProfile !== newState.dateProfile || this.needsFullRerender) {
                    if (oldState.dateProfile && view) { // why would view be null!?
                        this.publiclyTrigger('datesDestroy', [
                            {
                                view: view,
                                el: view.el
                            }
                        ]);
                    }
                    this.isDatesUpdated = true;
                }
                if (oldState.viewType !== newState.viewType || this.needsFullRerender) {
                    if (oldState.viewType && view) { // why would view be null!?
                        this.publiclyTrigger('viewSkeletonDestroy', [
                            {
                                view: view,
                                el: view.el
                            }
                        ]);
                    }
                    this.isViewUpdated = true;
                }
                this.requestRerender();
            }
        };
        Calendar.prototype.reduce = function (state, action, calendar) {
            return reduce$1(state, action, calendar);
        };
        // Render Queue
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.requestRerender = function (needsFull) {
            if (needsFull === void 0) { needsFull = false; }
            this.needsRerender = true;
            this.needsFullRerender = this.needsFullRerender || needsFull;
            this.delayedRerender(); // will call a debounced-version of tryRerender
        };
        Calendar.prototype.tryRerender = function () {
            if (this.component && // must be accepting renders
                this.needsRerender && // indicates that a rerender was requested
                !this.renderingPauseDepth && // not paused
                !this.isRendering // not currently in the render loop
            ) {
                this.executeRender();
            }
        };
        Calendar.prototype.batchRendering = function (func) {
            this.renderingPauseDepth++;
            func();
            this.renderingPauseDepth--;
            if (this.needsRerender) {
                this.requestRerender();
            }
        };
        // Rendering
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.executeRender = function () {
            var needsFullRerender = this.needsFullRerender; // save before clearing
            // clear these BEFORE the render so that new values will accumulate during render
            this.needsRerender = false;
            this.needsFullRerender = false;
            this.isRendering = true;
            this.renderComponent(needsFullRerender);
            this.isRendering = false;
            // received a rerender request while rendering
            if (this.needsRerender) {
                this.delayedRerender();
            }
        };
        /*
        don't call this directly. use executeRender instead
        */
        Calendar.prototype.renderComponent = function (needsFull) {
            var _a = this, state = _a.state, component = _a.component;
            var viewType = state.viewType;
            var viewSpec = this.viewSpecs[viewType];
            var savedScroll = (needsFull && component) ? component.view.queryScroll() : null;
            if (!viewSpec) {
                throw new Error("View type \"" + viewType + "\" is not valid");
            }
            // if event sources are still loading and progressive rendering hasn't been enabled,
            // keep rendering the last fully loaded set of events
            var renderableEventStore = this.renderableEventStore =
                (state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering')) ?
                    this.renderableEventStore :
                    state.eventStore;
            var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);
            var eventUiBySource = this.buildEventUiBySource(state.eventSources);
            var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);
            if (needsFull || !component) {
                if (component) {
                    component.freezeHeight(); // next component will unfreeze it
                    component.destroy();
                }
                component = this.component = new CalendarComponent({
                    calendar: this,
                    view: null,
                    dateEnv: this.dateEnv,
                    theme: this.theme,
                    options: this.optionsManager.computed
                }, this.el);
                this.isViewUpdated = true;
                this.isDatesUpdated = true;
                this.isEventsUpdated = true;
            }
            component.receiveProps(__assign({}, state, { viewSpec: viewSpec, dateProfile: state.dateProfile, dateProfileGenerator: this.dateProfileGenerators[viewType], eventStore: renderableEventStore, eventUiBases: eventUiBases, dateSelection: state.dateSelection, eventSelection: state.eventSelection, eventDrag: state.eventDrag, eventResize: state.eventResize }));
            if (savedScroll) {
                component.view.applyScroll(savedScroll, false);
            }
            if (this.isViewUpdated) {
                this.isViewUpdated = false;
                this.publiclyTrigger('viewSkeletonRender', [
                    {
                        view: component.view,
                        el: component.view.el
                    }
                ]);
            }
            if (this.isDatesUpdated) {
                this.isDatesUpdated = false;
                this.publiclyTrigger('datesRender', [
                    {
                        view: component.view,
                        el: component.view.el
                    }
                ]);
            }
            if (this.isEventsUpdated) {
                this.isEventsUpdated = false;
            }
            this.releaseAfterSizingTriggers();
        };
        // Options
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.setOption = function (name, val) {
            var _a;
            this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);
        };
        Calendar.prototype.getOption = function (name) {
            return this.optionsManager.computed[name];
        };
        Calendar.prototype.opt = function (name) {
            return this.optionsManager.computed[name];
        };
        Calendar.prototype.viewOpt = function (name) {
            return this.viewOpts()[name];
        };
        Calendar.prototype.viewOpts = function () {
            return this.viewSpecs[this.state.viewType].options;
        };
        /*
        handles option changes (like a diff)
        */
        Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {
            var _this = this;
            var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;
            var normalUpdates = {};
            var specialUpdates = {};
            var oldDateEnv = this.dateEnv; // do this before handleOptions
            var isTimeZoneDirty = false;
            var isSizeDirty = false;
            var anyDifficultOptions = Boolean(removals.length);
            for (var name_1 in updates) {
                if (changeHandlers[name_1]) {
                    specialUpdates[name_1] = updates[name_1];
                }
                else {
                    normalUpdates[name_1] = updates[name_1];
                }
            }
            for (var name_2 in normalUpdates) {
                if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {
                    isSizeDirty = true;
                }
                else if (/^(defaultDate|defaultView)$/.test(name_2)) ;
                else {
                    anyDifficultOptions = true;
                    if (name_2 === 'timeZone') {
                        isTimeZoneDirty = true;
                    }
                }
            }
            this.optionsManager.mutate(normalUpdates, removals, isDynamic);
            if (anyDifficultOptions) {
                this.handleOptions(this.optionsManager.computed);
                this.needsFullRerender = true;
            }
            this.batchRendering(function () {
                if (anyDifficultOptions) {
                    if (isTimeZoneDirty) {
                        _this.dispatch({
                            type: 'CHANGE_TIMEZONE',
                            oldDateEnv: oldDateEnv
                        });
                    }
                    /* HACK
                    has the same effect as calling this.requestRerender(true)
                    but recomputes the state's dateProfile
                    */
                    _this.dispatch({
                        type: 'SET_VIEW_TYPE',
                        viewType: _this.state.viewType
                    });
                }
                else if (isSizeDirty) {
                    _this.updateSize();
                }
                // special updates
                if (deepEqual) {
                    for (var name_3 in specialUpdates) {
                        changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);
                    }
                }
            });
        };
        /*
        rebuilds things based off of a complete set of refined options
        */
        Calendar.prototype.handleOptions = function (options) {
            var _this = this;
            var pluginHooks = this.pluginSystem.hooks;
            this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);
            this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);
            this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);
            this.theme = this.buildTheme(options);
            var available = this.parseRawLocales(options.locales);
            this.availableRawLocales = available.map;
            var locale = this.buildLocale(options.locale || available.defaultCode, available.map);
            this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);
            this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(
            // ineffecient to do every time?
            this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager);
            // ineffecient to do every time?
            this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {
                return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);
            });
        };
        Calendar.prototype.getAvailableLocaleCodes = function () {
            return Object.keys(this.availableRawLocales);
        };
        Calendar.prototype._buildSelectionConfig = function (rawOpts) {
            return processScopedUiProps('select', rawOpts, this);
        };
        Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {
            if (rawOpts.editable) { // so 'editable' affected events
                rawOpts = __assign({}, rawOpts, { eventEditable: true });
            }
            return processScopedUiProps('event', rawOpts, this);
        };
        // Trigger
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.hasPublicHandlers = function (name) {
            return this.hasHandlers(name) ||
                this.opt(name); // handler specified in options
        };
        Calendar.prototype.publiclyTrigger = function (name, args) {
            var optHandler = this.opt(name);
            this.triggerWith(name, this, args);
            if (optHandler) {
                return optHandler.apply(this, args);
            }
        };
        Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {
            var afterSizingTriggers = this.afterSizingTriggers;
            (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);
        };
        Calendar.prototype.releaseAfterSizingTriggers = function () {
            var afterSizingTriggers = this.afterSizingTriggers;
            for (var name_4 in afterSizingTriggers) {
                for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {
                    var args = _a[_i];
                    this.publiclyTrigger(name_4, args);
                }
            }
            this.afterSizingTriggers = {};
        };
        // View
        // -----------------------------------------------------------------------------------------------------------------
        // Returns a boolean about whether the view is okay to instantiate at some point
        Calendar.prototype.isValidViewType = function (viewType) {
            return Boolean(this.viewSpecs[viewType]);
        };
        Calendar.prototype.changeView = function (viewType, dateOrRange) {
            var dateMarker = null;
            if (dateOrRange) {
                if (dateOrRange.start && dateOrRange.end) { // a range
                    this.optionsManager.mutate({ visibleRange: dateOrRange }, []); // will not rerender
                    this.handleOptions(this.optionsManager.computed); // ...but yuck
                }
                else { // a date
                    dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate
                }
            }
            this.unselect();
            this.dispatch({
                type: 'SET_VIEW_TYPE',
                viewType: viewType,
                dateMarker: dateMarker
            });
        };
        // Forces navigation to a view for the given date.
        // `viewType` can be a specific view name or a generic one like "week" or "day".
        // needs to change
        Calendar.prototype.zoomTo = function (dateMarker, viewType) {
            var spec;
            viewType = viewType || 'day'; // day is default zoom
            spec = this.viewSpecs[viewType] ||
                this.getUnitViewSpec(viewType);
            this.unselect();
            if (spec) {
                this.dispatch({
                    type: 'SET_VIEW_TYPE',
                    viewType: spec.type,
                    dateMarker: dateMarker
                });
            }
            else {
                this.dispatch({
                    type: 'SET_DATE',
                    dateMarker: dateMarker
                });
            }
        };
        // Given a duration singular unit, like "week" or "day", finds a matching view spec.
        // Preference is given to views that have corresponding buttons.
        Calendar.prototype.getUnitViewSpec = function (unit) {
            var component = this.component;
            var viewTypes = [];
            var i;
            var spec;
            // put views that have buttons first. there will be duplicates, but oh
            if (component.header) {
                viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);
            }
            if (component.footer) {
                viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);
            }
            for (var viewType in this.viewSpecs) {
                viewTypes.push(viewType);
            }
            for (i = 0; i < viewTypes.length; i++) {
                spec = this.viewSpecs[viewTypes[i]];
                if (spec) {
                    if (spec.singleUnit === unit) {
                        return spec;
                    }
                }
            }
        };
        // Current Date
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.getInitialDate = function () {
            var defaultDateInput = this.opt('defaultDate');
            // compute the initial ambig-timezone date
            if (defaultDateInput != null) {
                return this.dateEnv.createMarker(defaultDateInput);
            }
            else {
                return this.getNow(); // getNow already returns unzoned
            }
        };
        Calendar.prototype.prev = function () {
            this.unselect();
            this.dispatch({ type: 'PREV' });
        };
        Calendar.prototype.next = function () {
            this.unselect();
            this.dispatch({ type: 'NEXT' });
        };
        Calendar.prototype.prevYear = function () {
            this.unselect();
            this.dispatch({
                type: 'SET_DATE',
                dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)
            });
        };
        Calendar.prototype.nextYear = function () {
            this.unselect();
            this.dispatch({
                type: 'SET_DATE',
                dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)
            });
        };
        Calendar.prototype.today = function () {
            this.unselect();
            this.dispatch({
                type: 'SET_DATE',
                dateMarker: this.getNow()
            });
        };
        Calendar.prototype.gotoDate = function (zonedDateInput) {
            this.unselect();
            this.dispatch({
                type: 'SET_DATE',
                dateMarker: this.dateEnv.createMarker(zonedDateInput)
            });
        };
        Calendar.prototype.incrementDate = function (deltaInput) {
            var delta = createDuration(deltaInput);
            if (delta) { // else, warn about invalid input?
                this.unselect();
                this.dispatch({
                    type: 'SET_DATE',
                    dateMarker: this.dateEnv.add(this.state.currentDate, delta)
                });
            }
        };
        // for external API
        Calendar.prototype.getDate = function () {
            return this.dateEnv.toDate(this.state.currentDate);
        };
        // Date Formatting Utils
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.formatDate = function (d, formatter) {
            var dateEnv = this.dateEnv;
            return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
        };
        // `settings` is for formatter AND isEndExclusive
        Calendar.prototype.formatRange = function (d0, d1, settings) {
            var dateEnv = this.dateEnv;
            return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);
        };
        Calendar.prototype.formatIso = function (d, omitTime) {
            var dateEnv = this.dateEnv;
            return dateEnv.formatIso(dateEnv.createMarker(d), { omitTime: omitTime });
        };
        // Sizing
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.windowResize = function (ev) {
            if (!this.isHandlingWindowResize &&
                this.component && // why?
                ev.target === window // not a jqui resize event
            ) {
                this.isHandlingWindowResize = true;
                this.updateSize();
                this.publiclyTrigger('windowResize', [this.view]);
                this.isHandlingWindowResize = false;
            }
        };
        Calendar.prototype.updateSize = function () {
            if (this.component) { // when?
                this.component.updateSize(true);
            }
        };
        // Component Registration
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {
            var settings = parseInteractionSettings(component, settingsInput);
            var DEFAULT_INTERACTIONS = [
                EventClicking,
                EventHovering
            ];
            var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);
            var interactions = interactionClasses.map(function (interactionClass) {
                return new interactionClass(settings);
            });
            this.interactionsStore[component.uid] = interactions;
            interactionSettingsStore[component.uid] = settings;
        };
        Calendar.prototype.unregisterInteractiveComponent = function (component) {
            for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {
                var listener = _a[_i];
                listener.destroy();
            }
            delete this.interactionsStore[component.uid];
            delete interactionSettingsStore[component.uid];
        };
        // Date Selection / Event Selection / DayClick
        // -----------------------------------------------------------------------------------------------------------------
        // this public method receives start/end dates in any format, with any timezone
        // NOTE: args were changed from v3
        Calendar.prototype.select = function (dateOrObj, endDate) {
            var selectionInput;
            if (endDate == null) {
                if (dateOrObj.start != null) {
                    selectionInput = dateOrObj;
                }
                else {
                    selectionInput = {
                        start: dateOrObj,
                        end: null
                    };
                }
            }
            else {
                selectionInput = {
                    start: dateOrObj,
                    end: endDate
                };
            }
            var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({ days: 1 }) // TODO: cache this?
            );
            if (selection) { // throw parse error otherwise?
                this.dispatch({ type: 'SELECT_DATES', selection: selection });
                this.triggerDateSelect(selection);
            }
        };
        // public method
        Calendar.prototype.unselect = function (pev) {
            if (this.state.dateSelection) {
                this.dispatch({ type: 'UNSELECT_DATES' });
                this.triggerDateUnselect(pev);
            }
        };
        Calendar.prototype.triggerDateSelect = function (selection, pev) {
            var arg = __assign({}, this.buildDateSpanApi(selection), { jsEvent: pev ? pev.origEvent : null, view: this.view });
            this.publiclyTrigger('select', [arg]);
        };
        Calendar.prototype.triggerDateUnselect = function (pev) {
            this.publiclyTrigger('unselect', [
                {
                    jsEvent: pev ? pev.origEvent : null,
                    view: this.view
                }
            ]);
        };
        // TODO: receive pev?
        Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {
            var arg = __assign({}, this.buildDatePointApi(dateSpan), { dayEl: dayEl, jsEvent: ev, // Is this always a mouse event? See #4655
                view: view });
            this.publiclyTrigger('dateClick', [arg]);
        };
        Calendar.prototype.buildDatePointApi = function (dateSpan) {
            var props = {};
            for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {
                var transform = _a[_i];
                __assign(props, transform(dateSpan, this));
            }
            __assign(props, buildDatePointApi(dateSpan, this.dateEnv));
            return props;
        };
        Calendar.prototype.buildDateSpanApi = function (dateSpan) {
            var props = {};
            for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {
                var transform = _a[_i];
                __assign(props, transform(dateSpan, this));
            }
            __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));
            return props;
        };
        // Date Utils
        // -----------------------------------------------------------------------------------------------------------------
        // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option
        Calendar.prototype.getNow = function () {
            var now = this.opt('now');
            if (typeof now === 'function') {
                now = now();
            }
            if (now == null) {
                return this.dateEnv.createNowMarker();
            }
            return this.dateEnv.createMarker(now);
        };
        // Event-Date Utilities
        // -----------------------------------------------------------------------------------------------------------------
        // Given an event's allDay status and start date, return what its fallback end date should be.
        // TODO: rename to computeDefaultEventEnd
        Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {
            var end = marker;
            if (allDay) {
                end = startOfDay(end);
                end = this.dateEnv.add(end, this.defaultAllDayEventDuration);
            }
            else {
                end = this.dateEnv.add(end, this.defaultTimedEventDuration);
            }
            return end;
        };
        // Public Events API
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.addEvent = function (eventInput, sourceInput) {
            if (eventInput instanceof EventApi) {
                var def = eventInput._def;
                var instance = eventInput._instance;
                // not already present? don't want to add an old snapshot
                if (!this.state.eventStore.defs[def.defId]) {
                    this.dispatch({
                        type: 'ADD_EVENTS',
                        eventStore: eventTupleToStore({ def: def, instance: instance }) // TODO: better util for two args?
                    });
                }
                return eventInput;
            }
            var sourceId;
            if (sourceInput instanceof EventSourceApi) {
                sourceId = sourceInput.internalEventSource.sourceId;
            }
            else if (sourceInput != null) {
                var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function
                if (!sourceApi) {
                    console.warn('Could not find an event source with ID "' + sourceInput + '"'); // TODO: test
                    return null;
                }
                else {
                    sourceId = sourceApi.internalEventSource.sourceId;
                }
            }
            var tuple = parseEvent(eventInput, sourceId, this);
            if (tuple) {
                this.dispatch({
                    type: 'ADD_EVENTS',
                    eventStore: eventTupleToStore(tuple)
                });
                return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
            }
            return null;
        };
        // TODO: optimize
        Calendar.prototype.getEventById = function (id) {
            var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;
            id = String(id);
            for (var defId in defs) {
                var def = defs[defId];
                if (def.publicId === id) {
                    if (def.recurringDef) {
                        return new EventApi(this, def, null);
                    }
                    else {
                        for (var instanceId in instances) {
                            var instance = instances[instanceId];
                            if (instance.defId === def.defId) {
                                return new EventApi(this, def, instance);
                            }
                        }
                    }
                }
            }
            return null;
        };
        Calendar.prototype.getEvents = function () {
            var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;
            var eventApis = [];
            for (var id in instances) {
                var instance = instances[id];
                var def = defs[instance.defId];
                eventApis.push(new EventApi(this, def, instance));
            }
            return eventApis;
        };
        Calendar.prototype.removeAllEvents = function () {
            this.dispatch({ type: 'REMOVE_ALL_EVENTS' });
        };
        Calendar.prototype.rerenderEvents = function () {
            this.dispatch({ type: 'RESET_EVENTS' });
        };
        // Public Event Sources API
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.getEventSources = function () {
            var sourceHash = this.state.eventSources;
            var sourceApis = [];
            for (var internalId in sourceHash) {
                sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));
            }
            return sourceApis;
        };
        Calendar.prototype.getEventSourceById = function (id) {
            var sourceHash = this.state.eventSources;
            id = String(id);
            for (var sourceId in sourceHash) {
                if (sourceHash[sourceId].publicId === id) {
                    return new EventSourceApi(this, sourceHash[sourceId]);
                }
            }
            return null;
        };
        Calendar.prototype.addEventSource = function (sourceInput) {
            if (sourceInput instanceof EventSourceApi) {
                // not already present? don't want to add an old snapshot
                if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {
                    this.dispatch({
                        type: 'ADD_EVENT_SOURCES',
                        sources: [sourceInput.internalEventSource]
                    });
                }
                return sourceInput;
            }
            var eventSource = parseEventSource(sourceInput, this);
            if (eventSource) { // TODO: error otherwise?
                this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: [eventSource] });
                return new EventSourceApi(this, eventSource);
            }
            return null;
        };
        Calendar.prototype.removeAllEventSources = function () {
            this.dispatch({ type: 'REMOVE_ALL_EVENT_SOURCES' });
        };
        Calendar.prototype.refetchEvents = function () {
            this.dispatch({ type: 'FETCH_EVENT_SOURCES' });
        };
        // Scroll
        // -----------------------------------------------------------------------------------------------------------------
        Calendar.prototype.scrollToTime = function (timeInput) {
            var duration = createDuration(timeInput);
            if (duration) {
                this.component.view.scrollToDuration(duration);
            }
        };
        return Calendar;
    }());
    EmitterMixin.mixInto(Calendar);
    // for memoizers
    // -----------------------------------------------------------------------------------------------------------------
    function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {
        return new DateEnv({
            calendarSystem: 'gregory',
            timeZone: timeZone,
            namedTimeZoneImpl: namedTimeZoneImpl,
            locale: locale,
            weekNumberCalculation: weekNumberCalculation,
            firstDay: firstDay,
            weekLabel: weekLabel,
            cmdFormatter: cmdFormatter
        });
    }
    function buildTheme(calendarOptions) {
        var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;
        return new themeClass(calendarOptions);
    }
    function buildDelayedRerender(wait) {
        var func = this.tryRerender.bind(this);
        if (wait != null) {
            func = debounce$1(func, wait);
        }
        return func;
    }
    function buildEventUiBySource(eventSources) {
        return mapHash(eventSources, function (eventSource) {
            return eventSource.ui;
        });
    }
    function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
        var eventUiBases = { '': eventUiSingleBase };
        for (var defId in eventDefs) {
            var def = eventDefs[defId];
            if (def.sourceId && eventUiBySource[def.sourceId]) {
                eventUiBases[defId] = eventUiBySource[def.sourceId];
            }
        }
        return eventUiBases;
    }

    var View = /** @class */ (function (_super) {
        __extends(View, _super);
        function View(context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, context, createElement('div', { className: 'fc-view fc-' + viewSpec.type + '-view' }), true // isView (HACK)
            ) || this;
            _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);
            _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);
            _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);
            _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);
            _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);
            _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);
            _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);
            _this.viewSpec = viewSpec;
            _this.dateProfileGenerator = dateProfileGenerator;
            _this.type = viewSpec.type;
            _this.eventOrderSpecs = parseFieldSpecs(_this.opt('eventOrder'));
            _this.nextDayThreshold = createDuration(_this.opt('nextDayThreshold'));
            parentEl.appendChild(_this.el);
            _this.initialize();
            return _this;
        }
        View.prototype.initialize = function () {
        };
        Object.defineProperty(View.prototype, "activeStart", {
            // Date Setting/Unsetting
            // -----------------------------------------------------------------------------------------------------------------
            get: function () {
                return this.dateEnv.toDate(this.props.dateProfile.activeRange.start);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "activeEnd", {
            get: function () {
                return this.dateEnv.toDate(this.props.dateProfile.activeRange.end);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "currentStart", {
            get: function () {
                return this.dateEnv.toDate(this.props.dateProfile.currentRange.start);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(View.prototype, "currentEnd", {
            get: function () {
                return this.dateEnv.toDate(this.props.dateProfile.currentRange.end);
            },
            enumerable: true,
            configurable: true
        });
        // General Rendering
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.render = function (props) {
            this.renderDatesMem(props.dateProfile);
            this.renderBusinessHoursMem(props.businessHours);
            this.renderDateSelectionMem(props.dateSelection);
            this.renderEventsMem(props.eventStore);
            this.renderEventSelectionMem(props.eventSelection);
            this.renderEventDragMem(props.eventDrag);
            this.renderEventResizeMem(props.eventResize);
        };
        View.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.renderDatesMem.unrender(); // should unrender everything else
        };
        // Sizing
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.updateSize = function (isResize, viewHeight, isAuto) {
            var calendar = this.calendar;
            if (isResize || // HACKS...
                calendar.isViewUpdated ||
                calendar.isDatesUpdated ||
                calendar.isEventsUpdated) {
                // sort of the catch-all sizing
                // anything that might cause dimension changes
                this.updateBaseSize(isResize, viewHeight, isAuto);
            }
        };
        View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {
        };
        // Date Rendering
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderDatesWrap = function (dateProfile) {
            this.renderDates(dateProfile);
            this.addScroll({
                duration: createDuration(this.opt('scrollTime'))
            });
            this.startNowIndicator(dateProfile); // shouldn't render yet because updateSize will be called soon
        };
        View.prototype.unrenderDatesWrap = function () {
            this.stopNowIndicator();
            this.unrenderDates();
        };
        View.prototype.renderDates = function (dateProfile) { };
        View.prototype.unrenderDates = function () { };
        // Business Hours
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderBusinessHours = function (businessHours) { };
        View.prototype.unrenderBusinessHours = function () { };
        // Date Selection
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderDateSelectionWrap = function (selection) {
            if (selection) {
                this.renderDateSelection(selection);
            }
        };
        View.prototype.unrenderDateSelectionWrap = function (selection) {
            if (selection) {
                this.unrenderDateSelection(selection);
            }
        };
        View.prototype.renderDateSelection = function (selection) { };
        View.prototype.unrenderDateSelection = function (selection) { };
        // Event Rendering
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderEvents = function (eventStore) { };
        View.prototype.unrenderEvents = function () { };
        // util for subclasses
        View.prototype.sliceEvents = function (eventStore, allDay) {
            var props = this.props;
            return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.nextDayThreshold : null).fg;
        };
        View.prototype.computeEventDraggable = function (eventDef, eventUi) {
            var transformers = this.calendar.pluginSystem.hooks.isDraggableTransformers;
            var val = eventUi.startEditable;
            for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
                var transformer = transformers_1[_i];
                val = transformer(val, eventDef, eventUi, this);
            }
            return val;
        };
        View.prototype.computeEventStartResizable = function (eventDef, eventUi) {
            return eventUi.durationEditable && this.opt('eventResizableFromStart');
        };
        View.prototype.computeEventEndResizable = function (eventDef, eventUi) {
            return eventUi.durationEditable;
        };
        // Event Selection
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderEventSelectionWrap = function (instanceId) {
            if (instanceId) {
                this.renderEventSelection(instanceId);
            }
        };
        View.prototype.unrenderEventSelectionWrap = function (instanceId) {
            if (instanceId) {
                this.unrenderEventSelection(instanceId);
            }
        };
        View.prototype.renderEventSelection = function (instanceId) { };
        View.prototype.unrenderEventSelection = function (instanceId) { };
        // Event Drag
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderEventDragWrap = function (state) {
            if (state) {
                this.renderEventDrag(state);
            }
        };
        View.prototype.unrenderEventDragWrap = function (state) {
            if (state) {
                this.unrenderEventDrag(state);
            }
        };
        View.prototype.renderEventDrag = function (state) { };
        View.prototype.unrenderEventDrag = function (state) { };
        // Event Resize
        // -----------------------------------------------------------------------------------------------------------------
        View.prototype.renderEventResizeWrap = function (state) {
            if (state) {
                this.renderEventResize(state);
            }
        };
        View.prototype.unrenderEventResizeWrap = function (state) {
            if (state) {
                this.unrenderEventResize(state);
            }
        };
        View.prototype.renderEventResize = function (state) { };
        View.prototype.unrenderEventResize = function (state) { };
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/
        // Immediately render the current time indicator and begins re-rendering it at an interval,
        // which is defined by this.getNowIndicatorUnit().
        // TODO: somehow do this for the current whole day's background too
        View.prototype.startNowIndicator = function (dateProfile) {
            var _this = this;
            var dateEnv = this.dateEnv;
            var unit;
            var update;
            var delay; // ms wait value
            if (this.opt('nowIndicator')) {
                unit = this.getNowIndicatorUnit(dateProfile);
                if (unit) {
                    update = this.updateNowIndicator.bind(this);
                    this.initialNowDate = this.calendar.getNow();
                    this.initialNowQueriedMs = new Date().valueOf();
                    // wait until the beginning of the next interval
                    delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf();
                    // TODO: maybe always use setTimeout, waiting until start of next unit
                    this.nowIndicatorTimeoutID = setTimeout(function () {
                        _this.nowIndicatorTimeoutID = null;
                        update();
                        if (unit === 'second') {
                            delay = 1000; // every second
                        }
                        else {
                            delay = 1000 * 60; // otherwise, every minute
                        }
                        _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
                    }, delay);
                }
                // rendering will be initiated in updateSize
            }
        };
        // rerenders the now indicator, computing the new current time from the amount of time that has passed
        // since the initial getNow call.
        View.prototype.updateNowIndicator = function () {
            if (this.props.dateProfile && // a way to determine if dates were rendered yet
                this.initialNowDate // activated before?
            ) {
                this.unrenderNowIndicator(); // won't unrender if unnecessary
                this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));
                this.isNowIndicatorRendered = true;
            }
        };
        // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
        // Won't cause side effects if indicator isn't rendered.
        View.prototype.stopNowIndicator = function () {
            if (this.isNowIndicatorRendered) {
                if (this.nowIndicatorTimeoutID) {
                    clearTimeout(this.nowIndicatorTimeoutID);
                    this.nowIndicatorTimeoutID = null;
                }
                if (this.nowIndicatorIntervalID) {
                    clearInterval(this.nowIndicatorIntervalID);
                    this.nowIndicatorIntervalID = null;
                }
                this.unrenderNowIndicator();
                this.isNowIndicatorRendered = false;
            }
        };
        View.prototype.getNowIndicatorUnit = function (dateProfile) {
            // subclasses should implement
        };
        // Renders a current time indicator at the given datetime
        View.prototype.renderNowIndicator = function (date) {
            // SUBCLASSES MUST PASS TO CHILDREN!
        };
        // Undoes the rendering actions from renderNowIndicator
        View.prototype.unrenderNowIndicator = function () {
            // SUBCLASSES MUST PASS TO CHILDREN!
        };
        /* Scroller
        ------------------------------------------------------------------------------------------------------------------*/
        View.prototype.addScroll = function (scroll) {
            var queuedScroll = this.queuedScroll || (this.queuedScroll = {});
            __assign(queuedScroll, scroll);
        };
        View.prototype.popScroll = function (isResize) {
            this.applyQueuedScroll(isResize);
            this.queuedScroll = null;
        };
        View.prototype.applyQueuedScroll = function (isResize) {
            this.applyScroll(this.queuedScroll || {}, isResize);
        };
        View.prototype.queryScroll = function () {
            var scroll = {};
            if (this.props.dateProfile) { // dates rendered yet?
                __assign(scroll, this.queryDateScroll());
            }
            return scroll;
        };
        View.prototype.applyScroll = function (scroll, isResize) {
            var duration = scroll.duration;
            if (duration != null) {
                delete scroll.duration;
                if (this.props.dateProfile) { // dates rendered yet?
                    __assign(scroll, this.computeDateScroll(duration));
                }
            }
            if (this.props.dateProfile) { // dates rendered yet?
                this.applyDateScroll(scroll);
            }
        };
        View.prototype.computeDateScroll = function (duration) {
            return {}; // subclasses must implement
        };
        View.prototype.queryDateScroll = function () {
            return {}; // subclasses must implement
        };
        View.prototype.applyDateScroll = function (scroll) {
            // subclasses must implement
        };
        // for API
        View.prototype.scrollToDuration = function (duration) {
            this.applyScroll({ duration: duration }, false);
        };
        return View;
    }(DateComponent));
    EmitterMixin.mixInto(View);
    View.prototype.usesMinMaxTime = false;
    View.prototype.dateProfileGeneratorClass = DateProfileGenerator;

    var FgEventRenderer = /** @class */ (function () {
        function FgEventRenderer(context) {
            this.segs = [];
            this.isSizeDirty = false;
            this.context = context;
        }
        FgEventRenderer.prototype.renderSegs = function (segs, mirrorInfo) {
            this.rangeUpdated(); // called too frequently :(
            // render an `.el` on each seg
            // returns a subset of the segs. segs that were actually rendered
            segs = this.renderSegEls(segs, mirrorInfo);
            this.segs = segs;
            this.attachSegs(segs, mirrorInfo);
            this.isSizeDirty = true;
            this.context.view.triggerRenderedSegs(this.segs, Boolean(mirrorInfo));
        };
        FgEventRenderer.prototype.unrender = function (_segs, mirrorInfo) {
            this.context.view.triggerWillRemoveSegs(this.segs, Boolean(mirrorInfo));
            this.detachSegs(this.segs);
            this.segs = [];
        };
        // Updates values that rely on options and also relate to range
        FgEventRenderer.prototype.rangeUpdated = function () {
            var options = this.context.options;
            var displayEventTime;
            var displayEventEnd;
            this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);
            displayEventTime = options.displayEventTime;
            if (displayEventTime == null) {
                displayEventTime = this.computeDisplayEventTime(); // might be based off of range
            }
            displayEventEnd = options.displayEventEnd;
            if (displayEventEnd == null) {
                displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
            }
            this.displayEventTime = displayEventTime;
            this.displayEventEnd = displayEventEnd;
        };
        // Renders and assigns an `el` property for each foreground event segment.
        // Only returns segments that successfully rendered.
        FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {
            var html = '';
            var i;
            if (segs.length) { // don't build an empty html string
                // build a large concatenation of event segment HTML
                for (i = 0; i < segs.length; i++) {
                    html += this.renderSegHtml(segs[i], mirrorInfo);
                }
                // Grab individual elements from the combined HTML string. Use each as the default rendering.
                // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.
                htmlToElements(html).forEach(function (el, i) {
                    var seg = segs[i];
                    if (el) {
                        seg.el = el;
                    }
                });
                segs = filterSegsViaEls(this.context.view, segs, Boolean(mirrorInfo));
            }
            return segs;
        };
        // Generic utility for generating the HTML classNames for an event segment's element
        FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {
            var classes = [
                'fc-event',
                seg.isStart ? 'fc-start' : 'fc-not-start',
                seg.isEnd ? 'fc-end' : 'fc-not-end'
            ].concat(seg.eventRange.ui.classNames);
            if (isDraggable) {
                classes.push('fc-draggable');
            }
            if (isResizable) {
                classes.push('fc-resizable');
            }
            if (mirrorInfo) {
                classes.push('fc-mirror');
                if (mirrorInfo.isDragging) {
                    classes.push('fc-dragging');
                }
                if (mirrorInfo.isResizing) {
                    classes.push('fc-resizing');
                }
            }
            return classes;
        };
        // Compute the text that should be displayed on an event's element.
        // `range` can be the Event object itself, or something range-like, with at least a `start`.
        // If event times are disabled, or the event has no time, will return a blank string.
        // If not specified, formatter will default to the eventTimeFormat setting,
        // and displayEnd will default to the displayEventEnd setting.
        FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {
            var def = eventRange.def, instance = eventRange.instance;
            return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);
        };
        FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {
            var dateEnv = this.context.dateEnv;
            if (formatter == null) {
                formatter = this.eventTimeFormat;
            }
            if (displayEnd == null) {
                displayEnd = this.displayEventEnd;
            }
            if (this.displayEventTime && !allDay) {
                if (displayEnd && end) {
                    return dateEnv.formatRange(start, end, formatter, {
                        forcedStartTzo: forcedStartTzo,
                        forcedEndTzo: forcedEndTzo
                    });
                }
                else {
                    return dateEnv.format(start, formatter, {
                        forcedTzo: forcedStartTzo
                    });
                }
            }
            return '';
        };
        FgEventRenderer.prototype.computeEventTimeFormat = function () {
            return {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true
            };
        };
        FgEventRenderer.prototype.computeDisplayEventTime = function () {
            return true;
        };
        FgEventRenderer.prototype.computeDisplayEventEnd = function () {
            return true;
        };
        // Utility for generating event skin-related CSS properties
        FgEventRenderer.prototype.getSkinCss = function (ui) {
            return {
                'background-color': ui.backgroundColor,
                'border-color': ui.borderColor,
                color: ui.textColor
            };
        };
        FgEventRenderer.prototype.sortEventSegs = function (segs) {
            var specs = this.context.view.eventOrderSpecs;
            var objs = segs.map(buildSegCompareObj);
            objs.sort(function (obj0, obj1) {
                return compareByFieldSpecs(obj0, obj1, specs);
            });
            return objs.map(function (c) {
                return c._seg;
            });
        };
        FgEventRenderer.prototype.computeSizes = function (force) {
            if (force || this.isSizeDirty) {
                this.computeSegSizes(this.segs);
            }
        };
        FgEventRenderer.prototype.assignSizes = function (force) {
            if (force || this.isSizeDirty) {
                this.assignSegSizes(this.segs);
                this.isSizeDirty = false;
            }
        };
        FgEventRenderer.prototype.computeSegSizes = function (segs) {
        };
        FgEventRenderer.prototype.assignSegSizes = function (segs) {
        };
        // Manipulation on rendered segs
        FgEventRenderer.prototype.hideByHash = function (hash) {
            if (hash) {
                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
                    var seg = _a[_i];
                    if (hash[seg.eventRange.instance.instanceId]) {
                        seg.el.style.visibility = 'hidden';
                    }
                }
            }
        };
        FgEventRenderer.prototype.showByHash = function (hash) {
            if (hash) {
                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
                    var seg = _a[_i];
                    if (hash[seg.eventRange.instance.instanceId]) {
                        seg.el.style.visibility = '';
                    }
                }
            }
        };
        FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {
            if (instanceId) {
                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
                    var seg = _a[_i];
                    var eventInstance = seg.eventRange.instance;
                    if (eventInstance && eventInstance.instanceId === instanceId &&
                        seg.el // necessary?
                    ) {
                        seg.el.classList.add('fc-selected');
                    }
                }
            }
        };
        FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {
            if (instanceId) {
                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
                    var seg = _a[_i];
                    if (seg.el) { // necessary?
                        seg.el.classList.remove('fc-selected');
                    }
                }
            }
        };
        return FgEventRenderer;
    }());
    // returns a object with all primitive props that can be compared
    function buildSegCompareObj(seg) {
        var eventDef = seg.eventRange.def;
        var range = seg.eventRange.instance.range;
        var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events
        var end = range.end ? range.end.valueOf() : 0; // "
        return __assign({}, eventDef.extendedProps, eventDef, { id: eventDef.publicId, start: start,
            end: end, duration: end - start, allDay: Number(eventDef.allDay), _seg: seg // for later retrieval
         });
    }

    var FillRenderer = /** @class */ (function () {
        function FillRenderer(context) {
            this.fillSegTag = 'div';
            this.dirtySizeFlags = {};
            this.context = context;
            this.containerElsByType = {};
            this.segsByType = {};
        }
        FillRenderer.prototype.getSegsByType = function (type) {
            return this.segsByType[type] || [];
        };
        FillRenderer.prototype.renderSegs = function (type, segs) {
            var _a;
            var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs
            var containerEls = this.attachSegs(type, renderedSegs);
            if (containerEls) {
                (_a = (this.containerElsByType[type] || (this.containerElsByType[type] = []))).push.apply(_a, containerEls);
            }
            this.segsByType[type] = renderedSegs;
            if (type === 'bgEvent') {
                this.context.view.triggerRenderedSegs(renderedSegs, false); // isMirror=false
            }
            this.dirtySizeFlags[type] = true;
        };
        // Unrenders a specific type of fill that is currently rendered on the grid
        FillRenderer.prototype.unrender = function (type) {
            var segs = this.segsByType[type];
            if (segs) {
                if (type === 'bgEvent') {
                    this.context.view.triggerWillRemoveSegs(segs, false); // isMirror=false
                }
                this.detachSegs(type, segs);
            }
        };
        // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
        // Only returns segments that successfully rendered.
        FillRenderer.prototype.renderSegEls = function (type, segs) {
            var _this = this;
            var html = '';
            var i;
            if (segs.length) {
                // build a large concatenation of segment HTML
                for (i = 0; i < segs.length; i++) {
                    html += this.renderSegHtml(type, segs[i]);
                }
                // Grab individual elements from the combined HTML string. Use each as the default rendering.
                // Then, compute the 'el' for each segment.
                htmlToElements(html).forEach(function (el, i) {
                    var seg = segs[i];
                    if (el) {
                        seg.el = el;
                    }
                });
                if (type === 'bgEvent') {
                    segs = filterSegsViaEls(this.context.view, segs, false // isMirror. background events can never be mirror elements
                    );
                }
                // correct element type? (would be bad if a non-TD were inserted into a table for example)
                segs = segs.filter(function (seg) {
                    return elementMatches(seg.el, _this.fillSegTag);
                });
            }
            return segs;
        };
        // Builds the HTML needed for one fill segment. Generic enough to work with different types.
        FillRenderer.prototype.renderSegHtml = function (type, seg) {
            var css = null;
            var classNames = [];
            if (type !== 'highlight' && type !== 'businessHours') {
                css = {
                    'background-color': seg.eventRange.ui.backgroundColor
                };
            }
            if (type !== 'highlight') {
                classNames = classNames.concat(seg.eventRange.ui.classNames);
            }
            if (type === 'businessHours') {
                classNames.push('fc-bgevent');
            }
            else {
                classNames.push('fc-' + type.toLowerCase());
            }
            return '<' + this.fillSegTag +
                (classNames.length ? ' class="' + classNames.join(' ') + '"' : '') +
                (css ? ' style="' + cssToStr(css) + '"' : '') +
                '></' + this.fillSegTag + '>';
        };
        FillRenderer.prototype.detachSegs = function (type, segs) {
            var containerEls = this.containerElsByType[type];
            if (containerEls) {
                containerEls.forEach(removeElement);
                delete this.containerElsByType[type];
            }
        };
        FillRenderer.prototype.computeSizes = function (force) {
            for (var type in this.segsByType) {
                if (force || this.dirtySizeFlags[type]) {
                    this.computeSegSizes(this.segsByType[type]);
                }
            }
        };
        FillRenderer.prototype.assignSizes = function (force) {
            for (var type in this.segsByType) {
                if (force || this.dirtySizeFlags[type]) {
                    this.assignSegSizes(this.segsByType[type]);
                }
            }
            this.dirtySizeFlags = {};
        };
        FillRenderer.prototype.computeSegSizes = function (segs) {
        };
        FillRenderer.prototype.assignSegSizes = function (segs) {
        };
        return FillRenderer;
    }());

    /*
    An abstraction for a dragging interaction originating on an event.
    Does higher-level things than PointerDragger, such as possibly:
    - a "mirror" that moves with the pointer
    - a minimum number of pixels or other criteria for a true drag to begin

    subclasses must emit:
    - pointerdown
    - dragstart
    - dragmove
    - pointerup
    - dragend
    */
    var ElementDragging = /** @class */ (function () {
        function ElementDragging(el) {
            this.emitter = new EmitterMixin();
        }
        ElementDragging.prototype.destroy = function () {
        };
        ElementDragging.prototype.setMirrorIsVisible = function (bool) {
            // optional if subclass doesn't want to support a mirror
        };
        ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {
            // optional if subclass doesn't want to support a mirror
        };
        ElementDragging.prototype.setAutoScrollEnabled = function (bool) {
            // optional
        };
        return ElementDragging;
    }());

    // Computes a default column header formatting string if `colFormat` is not explicitly defined
    function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
        // if more than one week row, or if there are a lot of columns with not much space,
        // put just the day numbers will be in each cell
        if (!datesRepDistinctDays || dayCnt > 10) {
            return { weekday: 'short' }; // "Sat"
        }
        else if (dayCnt > 1) {
            return { weekday: 'short', month: 'numeric', day: 'numeric', omitCommas: true }; // "Sat 11/12"
        }
        else {
            return { weekday: 'long' }; // "Saturday"
        }
    }
    function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {
        var view = context.view, dateEnv = context.dateEnv, theme = context.theme, options = context.options;
        var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.
        var classNames = [
            'fc-day-header',
            theme.getClass('widgetHeader')
        ];
        var innerHtml;
        if (typeof options.columnHeaderHtml === 'function') {
            innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));
        }
        else if (typeof options.columnHeaderText === 'function') {
            innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));
        }
        else {
            innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));
        }
        // if only one row of days, the classNames on the header can represent the specific days beneath
        if (datesRepDistinctDays) {
            classNames = classNames.concat(
            // includes the day-of-week class
            // noThemeHighlight=true (don't highlight the header)
            getDayClasses(dateMarker, dateProfile, context, true));
        }
        else {
            classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class
        }
        return '' +
            '<th class="' + classNames.join(' ') + '"' +
            ((isDateValid && datesRepDistinctDays) ?
                ' data-date="' + dateEnv.formatIso(dateMarker, { omitTime: true }) + '"' :
                '') +
            (colspan > 1 ?
                ' colspan="' + colspan + '"' :
                '') +
            (otherAttrs ?
                ' ' + otherAttrs :
                '') +
            '>' +
            (isDateValid ?
                // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
                buildGotoAnchorHtml(view, { date: dateMarker, forceOff: !datesRepDistinctDays || colCnt === 1 }, innerHtml) :
                // if not valid, display text, but no link
                innerHtml) +
            '</th>';
    }

    var DayHeader = /** @class */ (function (_super) {
        __extends(DayHeader, _super);
        function DayHeader(context, parentEl) {
            var _this = _super.call(this, context) || this;
            parentEl.innerHTML = ''; // because might be nbsp
            parentEl.appendChild(_this.el = htmlToElement('<div class="fc-row ' + _this.theme.getClass('headerRow') + '">' +
                '<table class="' + _this.theme.getClass('tableGrid') + '">' +
                '<thead></thead>' +
                '</table>' +
                '</div>'));
            _this.thead = _this.el.querySelector('thead');
            return _this;
        }
        DayHeader.prototype.destroy = function () {
            removeElement(this.el);
        };
        DayHeader.prototype.render = function (props) {
            var dates = props.dates, datesRepDistinctDays = props.datesRepDistinctDays;
            var parts = [];
            if (props.renderIntroHtml) {
                parts.push(props.renderIntroHtml());
            }
            var colHeadFormat = createFormatter(this.opt('columnHeaderFormat') ||
                computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));
            for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
                var date = dates_1[_i];
                parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, this.context));
            }
            if (this.isRtl) {
                parts.reverse();
            }
            this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';
        };
        return DayHeader;
    }(Component));

    var DaySeries = /** @class */ (function () {
        function DaySeries(range, dateProfileGenerator) {
            var date = range.start;
            var end = range.end;
            var indices = [];
            var dates = [];
            var dayIndex = -1;
            while (date < end) { // loop each day from start to end
                if (dateProfileGenerator.isHiddenDay(date)) {
                    indices.push(dayIndex + 0.5); // mark that it's between indices
                }
                else {
                    dayIndex++;
                    indices.push(dayIndex);
                    dates.push(date);
                }
                date = addDays$1(date, 1);
            }
            this.dates = dates;
            this.indices = indices;
            this.cnt = dates.length;
        }
        DaySeries.prototype.sliceRange = function (range) {
            var firstIndex = this.getDateDayIndex(range.start); // inclusive first index
            var lastIndex = this.getDateDayIndex(addDays$1(range.end, -1)); // inclusive last index
            var clippedFirstIndex = Math.max(0, firstIndex);
            var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);
            // deal with in-between indices
            clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell
            clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell
            if (clippedFirstIndex <= clippedLastIndex) {
                return {
                    firstIndex: clippedFirstIndex,
                    lastIndex: clippedLastIndex,
                    isStart: firstIndex === clippedFirstIndex,
                    isEnd: lastIndex === clippedLastIndex
                };
            }
            else {
                return null;
            }
        };
        // Given a date, returns its chronolocial cell-index from the first cell of the grid.
        // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
        // If before the first offset, returns a negative number.
        // If after the last offset, returns an offset past the last cell offset.
        // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
        DaySeries.prototype.getDateDayIndex = function (date) {
            var indices = this.indices;
            var dayOffset = Math.floor(diffDays(this.dates[0], date));
            if (dayOffset < 0) {
                return indices[0] - 1;
            }
            else if (dayOffset >= indices.length) {
                return indices[indices.length - 1] + 1;
            }
            else {
                return indices[dayOffset];
            }
        };
        return DaySeries;
    }());

    var DayTable = /** @class */ (function () {
        function DayTable(daySeries, breakOnWeeks) {
            var dates = daySeries.dates;
            var daysPerRow;
            var firstDay;
            var rowCnt;
            if (breakOnWeeks) {
                // count columns until the day-of-week repeats
                firstDay = dates[0].getUTCDay();
                for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {
                    if (dates[daysPerRow].getUTCDay() === firstDay) {
                        break;
                    }
                }
                rowCnt = Math.ceil(dates.length / daysPerRow);
            }
            else {
                rowCnt = 1;
                daysPerRow = dates.length;
            }
            this.rowCnt = rowCnt;
            this.colCnt = daysPerRow;
            this.daySeries = daySeries;
            this.cells = this.buildCells();
            this.headerDates = this.buildHeaderDates();
        }
        DayTable.prototype.buildCells = function () {
            var rows = [];
            for (var row = 0; row < this.rowCnt; row++) {
                var cells = [];
                for (var col = 0; col < this.colCnt; col++) {
                    cells.push(this.buildCell(row, col));
                }
                rows.push(cells);
            }
            return rows;
        };
        DayTable.prototype.buildCell = function (row, col) {
            return {
                date: this.daySeries.dates[row * this.colCnt + col]
            };
        };
        DayTable.prototype.buildHeaderDates = function () {
            var dates = [];
            for (var col = 0; col < this.colCnt; col++) {
                dates.push(this.cells[0][col].date);
            }
            return dates;
        };
        DayTable.prototype.sliceRange = function (range) {
            var colCnt = this.colCnt;
            var seriesSeg = this.daySeries.sliceRange(range);
            var segs = [];
            if (seriesSeg) {
                var firstIndex = seriesSeg.firstIndex, lastIndex = seriesSeg.lastIndex;
                var index = firstIndex;
                while (index <= lastIndex) {
                    var row = Math.floor(index / colCnt);
                    var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
                    segs.push({
                        row: row,
                        firstCol: index % colCnt,
                        lastCol: (nextIndex - 1) % colCnt,
                        isStart: seriesSeg.isStart && index === firstIndex,
                        isEnd: seriesSeg.isEnd && (nextIndex - 1) === lastIndex
                    });
                    index = nextIndex;
                }
            }
            return segs;
        };
        return DayTable;
    }());

    var Slicer = /** @class */ (function () {
        function Slicer() {
            this.sliceBusinessHours = memoize$1(this._sliceBusinessHours);
            this.sliceDateSelection = memoize$1(this._sliceDateSpan);
            this.sliceEventStore = memoize$1(this._sliceEventStore);
            this.sliceEventDrag = memoize$1(this._sliceInteraction);
            this.sliceEventResize = memoize$1(this._sliceInteraction);
        }
        Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, component) {
            var extraArgs = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                extraArgs[_i - 4] = arguments[_i];
            }
            var eventUiBases = props.eventUiBases;
            var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));
            return {
                dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),
                businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, component].concat(extraArgs)),
                fgEventSegs: eventSegs.fg,
                bgEventSegs: eventSegs.bg,
                eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
                eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
                eventSelection: props.eventSelection
            }; // TODO: give interactionSegs?
        };
        Slicer.prototype.sliceNowDate = function (// does not memoize
        date, component) {
            var extraArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                extraArgs[_i - 2] = arguments[_i];
            }
            return this._sliceDateSpan.apply(this, [{ range: { start: date, end: addMs(date, 1) }, allDay: false },
                {},
                component].concat(extraArgs));
        };
        Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, component) {
            var extraArgs = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                extraArgs[_i - 4] = arguments[_i];
            }
            if (!businessHours) {
                return [];
            }
            return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), component.calendar),
                {},
                dateProfile,
                nextDayThreshold,
                component].concat(extraArgs)).bg;
        };
        Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {
            var extraArgs = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                extraArgs[_i - 5] = arguments[_i];
            }
            if (eventStore) {
                var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
                return {
                    bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),
                    fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)
                };
            }
            else {
                return { bg: [], fg: [] };
            }
        };
        Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {
            var extraArgs = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                extraArgs[_i - 5] = arguments[_i];
            }
            if (!interaction) {
                return null;
            }
            var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
            return {
                segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),
                affectedInstances: interaction.affectedEvents.instances,
                isEvent: interaction.isEvent,
                sourceSeg: interaction.origSeg
            };
        };
        Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {
            var extraArgs = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                extraArgs[_i - 3] = arguments[_i];
            }
            if (!dateSpan) {
                return [];
            }
            var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.calendar);
            var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));
            for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {
                var seg = segs_1[_a];
                seg.component = component;
                seg.eventRange = eventRange;
            }
            return segs;
        };
        /*
        "complete" seg means it has component and eventRange
        */
        Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill
        extraArgs) {
            var segs = [];
            for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
                var eventRange = eventRanges_1[_i];
                segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));
            }
            return segs;
        };
        /*
        "complete" seg means it has component and eventRange
        */
        Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill
        extraArgs) {
            var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));
            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
                var seg = segs_2[_i];
                seg.component = component;
                seg.eventRange = eventRange;
                seg.isStart = eventRange.isStart && seg.isStart;
                seg.isEnd = eventRange.isEnd && seg.isEnd;
            }
            return segs;
        };
        return Slicer;
    }());
    /*
    for incorporating minTime/maxTime if appropriate
    TODO: should be part of DateProfile!
    TimelineDateProfile already does this btw
    */
    function computeActiveRange(dateProfile, isComponentAllDay) {
        var range = dateProfile.activeRange;
        if (isComponentAllDay) {
            return range;
        }
        return {
            start: addMs(range.start, dateProfile.minTime.milliseconds),
            end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day
        };
    }

    // do not edit .js files directly - edit src/index.jst



    var fastDeepEqual = function equal(a, b) {
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }



        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

        for (i = length; i-- !== 0;) {
          var key = keys[i];

          if (!equal(a[key], b[key])) return false;
        }

        return true;
      }

      // true if both NaN, false otherwise
      return a!==a && b!==b;
    };

    const calendarOptions = [
    	'allDayDefault',
    	'allDayHtml',
    	'allDayMaintainDuration',
    	'allDaySlot',
    	'allDayText',
    	'aspectRatio',
    	'bootstrapFontAwesome',
    	'businessHours',
    	'buttonIcons',
    	'buttonText',
    	'cmdFormatter',
    	'columnHeader',
    	'columnHeaderFormat',
    	'columnHeaderHtml',
    	'columnHeaderText',
    	'contentHeight',
    	'customButtons',
    	'dateAlignment',
    	'dateIncrement',
    	'dayCount',
    	'dayPopoverFormat',
    	'defaultAllDayEventDuration',
    	'defaultDate',
    	'defaultRangeSeparator',
    	'defaultTimedEventDuration',
    	'defaultView',
    	'dir',
    	'displayEventEnd',
    	'displayEventTime',
    	'dragRevertDuration',
    	'dragScroll',
    	'dropAccept',
    	'droppable',
    	'duration',
    	'editable',
    	'endParam',
    	'eventAllow',
    	'eventBackgroundColor',
    	'eventBorderColor',
    	'eventClassName',
    	'eventClassNames',
    	'eventColor',
    	'eventConstraint',
    	'eventDataTransform',
    	'eventDragMinDistance',
    	'eventDurationEditable',
    	'eventLimit',
    	'eventLimitClick',
    	'eventLimitText',
    	'eventLongPressDelay',
    	'eventOrder',
    	'eventOverlap',
    	'eventResizableFromStart',
    	'events',
    	'eventSourceFailure',
    	'eventSources',
    	'eventSourceSuccess',
    	'eventStartEditable',
    	'eventTextColor',
    	'eventTimeFormat',
    	'firstDay',
    	'fixedWeekCount',
    	'footer',
    	'forceEventDuration',
    	'handleWindowResize',
    	'header',
    	'height',
    	'hiddenDays',
    	'lazyFetching',
    	'listDayAltFormat',
    	'listDayFormat',
    	'locale',
    	'locales',
    	'longPressDelay',
    	'maxTime',
    	'minTime',
    	'navLinkDayClick',
    	'navLinks',
    	'navLinkWeekClick',
    	'nextDayThreshold',
    	'noEventsMessage',
    	'now',
    	'nowIndicator',
    	'plugins',
    	'progressiveEventRendering',
    	'rerenderDelay',
    	'schedulerLicenseKey',
    	'scrollTime',
    	'selectable',
    	'selectAllow',
    	'selectConstraint',
    	'selectLongPressDelay',
    	'selectMinDistance',
    	'selectMirror',
    	'selectOverlap',
    	'showNonCurrentDates',
    	'slotDuration',
    	'slotEventOverlap',
    	'slotLabelFormat',
    	'slotLabelInterval',
    	'snapDuration',
    	'startParam',
    	'themeSystem',
    	'timeGridEventMinHeight',
    	'timeZone',
    	'timeZoneParam',
    	'titleFormat',
    	'titleRangeSeparator',
    	'unselectAuto',
    	'unselectCancel',
    	'validRange',
    	'views',
    	'visibleRange',
    	'weekends',
    	'weekLabel',
    	'weekNumberCalculation',
    	'weekNumbers',
    	'weekNumbersWithinDays',
    	'windowResizeDelay',
    ];

    function getCalendarProps(props) {
    	const calendarProps = {};

    	for (const propName in props) {
    		if (calendarOptions.includes(propName)) {
    			calendarProps[propName] = props[propName];
    		}
    	}

    	return calendarProps;
    }

    /* src\components\common\FullCalendar.svelte generated by Svelte v3.18.2 */
    const file$e = "src\\components\\common\\FullCalendar.svelte";

    function create_fragment$f(ctx) {
    	let div;
    	let div_id_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", div_id_value = "calendar-" + /*instanceId*/ ctx[3]);
    			attr_dev(div, "class", /*classes*/ ctx[0]);
    			attr_dev(div, "style", /*style*/ ctx[1]);
    			add_location(div, file$e, 81, 0, 2927);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[12](div);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*classes*/ 1) {
    				attr_dev(div, "class", /*classes*/ ctx[0]);
    			}

    			if (dirty & /*style*/ 2) {
    				attr_dev(div, "style", /*style*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[12](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { class: classes = null } = $$props;
    	let { style = null } = $$props;
    	const dispatch = createEventDispatcher();
    	let calendarEl;
    	let calendar;
    	let calendarProps = {};
    	let oldProps = {};
    	let updates = {};
    	let removals = [];
    	let instanceId = uuid_1();

    	onMount(() => {
    		$$invalidate(6, calendarProps = getCalendarProps($$props));
    		$$invalidate(7, oldProps = { ...calendarProps });

    		$$invalidate(5, calendar = new Calendar(calendarEl,
    		{
    				...calendarProps,
    				dateClick: event => dispatch("dateClick", event),
    				datesDestroy: event => dispatch("datesDestroy", event),
    				datesRender: event => dispatch("datesRender", event),
    				dayRender: event => dispatch("dayRender", event),
    				drop: event => dispatch("drop", event),
    				eventClick: event => dispatch("eventClick", event),
    				eventDestroy: event => dispatch("eventDestroy", event),
    				eventDragStart: event => dispatch("eventDragStart", event),
    				eventDragStop: event => dispatch("eventDragStop", event),
    				eventDrop: event => dispatch("eventDrop", event),
    				eventLeave: event => dispatch("eventLeave", event),
    				eventMouseEnter: event => dispatch("eventMouseEnter", event),
    				eventMouseLeave: event => dispatch("eventMouseLeave", event),
    				eventPositioned: event => dispatch("eventPositioned", event),
    				eventReceive: event => dispatch("eventReceive", event),
    				eventRender: event => dispatch("eventRender", event),
    				eventResize: event => dispatch("eventResize", event),
    				eventResizeStart: event => dispatch("eventResizeStart", event),
    				eventResizeStop: event => dispatch("eventResizeStop", event),
    				loading: event => dispatch("loading", event),
    				select: event => dispatch("select", event),
    				unselect: event => dispatch("unselect", event),
    				resourceRender: event => dispatch("resourceRender", event),
    				viewSkeletonRender: event => dispatch("viewSkeletonRender", event),
    				viewSkeletonDestroy: event => dispatch("viewSkeletonDestroy", event),
    				windowResize: event => dispatch("windowResize", event)
    			}));

    		calendar.render();
    	});

    	onDestroy(() => {
    		calendar.destroy();
    	});

    	function getAPI() {
    		return calendar;
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(2, calendarEl = $$value);
    		});
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("class" in $$new_props) $$invalidate(0, classes = $$new_props.class);
    		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
    	};

    	$$self.$capture_state = () => {
    		return {
    			classes,
    			style,
    			calendarEl,
    			calendar,
    			calendarProps,
    			oldProps,
    			updates,
    			removals,
    			instanceId
    		};
    	};

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
    		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
    		if ("calendarEl" in $$props) $$invalidate(2, calendarEl = $$new_props.calendarEl);
    		if ("calendar" in $$props) $$invalidate(5, calendar = $$new_props.calendar);
    		if ("calendarProps" in $$props) $$invalidate(6, calendarProps = $$new_props.calendarProps);
    		if ("oldProps" in $$props) $$invalidate(7, oldProps = $$new_props.oldProps);
    		if ("updates" in $$props) $$invalidate(8, updates = $$new_props.updates);
    		if ("removals" in $$props) $$invalidate(9, removals = $$new_props.removals);
    		if ("instanceId" in $$props) $$invalidate(3, instanceId = $$new_props.instanceId);
    	};

    	$$self.$$.update = () => {
    		 {
    			if (calendar) {
    				$$invalidate(6, calendarProps = getCalendarProps($$props));
    				$$invalidate(8, updates = {});
    				$$invalidate(9, removals = []);

    				for (const propName in oldProps) {
    					if (!(propName in calendarProps)) {
    						removals.push(propName);
    					}
    				}

    				for (const propName in calendarProps) {
    					if (!fastDeepEqual(calendarProps[propName], oldProps[propName])) {
    						$$invalidate(8, updates[propName] = calendarProps[propName], updates);
    					}
    				}

    				calendar.mutateOptions(updates, removals, false, fastDeepEqual);
    				$$invalidate(7, oldProps = { ...calendarProps });
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		classes,
    		style,
    		calendarEl,
    		instanceId,
    		getAPI,
    		calendar,
    		calendarProps,
    		oldProps,
    		updates,
    		removals,
    		dispatch,
    		$$props,
    		div_binding
    	];
    }

    class FullCalendar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { class: 0, style: 1, getAPI: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FullCalendar",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get class() {
    		throw new Error("<FullCalendar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<FullCalendar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<FullCalendar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<FullCalendar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getAPI() {
    		return this.$$.ctx[4];
    	}

    	set getAPI(value) {
    		throw new Error("<FullCalendar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
    FullCalendar Day Grid Plugin v4.3.0
    Docs & License: https://fullcalendar.io/
    (c) 2019 Adam Shaw
    */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    var DayGridDateProfileGenerator = /** @class */ (function (_super) {
        __extends$1(DayGridDateProfileGenerator, _super);
        function DayGridDateProfileGenerator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // Computes the date range that will be rendered.
        DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
            var dateEnv = this.dateEnv;
            var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);
            var start = renderRange.start;
            var end = renderRange.end;
            var endOfWeek;
            // year and month views should be aligned with weeks. this is already done for week
            if (/^(year|month)$/.test(currentRangeUnit)) {
                start = dateEnv.startOfWeek(start);
                // make end-of-week if not already
                endOfWeek = dateEnv.startOfWeek(end);
                if (endOfWeek.valueOf() !== end.valueOf()) {
                    end = addWeeks$1(endOfWeek, 1);
                }
            }
            // ensure 6 weeks
            if (this.options.monthMode &&
                this.options.fixedWeekCount) {
                var rowCnt = Math.ceil(// could be partial weeks due to hiddenDays
                diffWeeks(start, end));
                end = addWeeks$1(end, 6 - rowCnt);
            }
            return { start: start, end: end };
        };
        return DayGridDateProfileGenerator;
    }(DateProfileGenerator));

    /* A rectangular panel that is absolutely positioned over other content
    ------------------------------------------------------------------------------------------------------------------------
    Options:
      - className (string)
      - content (HTML string, element, or element array)
      - parentEl
      - top
      - left
      - right (the x coord of where the right edge should be. not a "CSS" right)
      - autoHide (boolean)
      - show (callback)
      - hide (callback)
    */
    var Popover$1 = /** @class */ (function () {
        function Popover(options) {
            var _this = this;
            this.isHidden = true;
            this.margin = 10; // the space required between the popover and the edges of the scroll container
            // Triggered when the user clicks *anywhere* in the document, for the autoHide feature
            this.documentMousedown = function (ev) {
                // only hide the popover if the click happened outside the popover
                if (_this.el && !_this.el.contains(ev.target)) {
                    _this.hide();
                }
            };
            this.options = options;
        }
        // Shows the popover on the specified position. Renders it if not already
        Popover.prototype.show = function () {
            if (this.isHidden) {
                if (!this.el) {
                    this.render();
                }
                this.el.style.display = '';
                this.position();
                this.isHidden = false;
                this.trigger('show');
            }
        };
        // Hides the popover, through CSS, but does not remove it from the DOM
        Popover.prototype.hide = function () {
            if (!this.isHidden) {
                this.el.style.display = 'none';
                this.isHidden = true;
                this.trigger('hide');
            }
        };
        // Creates `this.el` and renders content inside of it
        Popover.prototype.render = function () {
            var _this = this;
            var options = this.options;
            var el = this.el = createElement('div', {
                className: 'fc-popover ' + (options.className || ''),
                style: {
                    top: '0',
                    left: '0'
                }
            });
            if (typeof options.content === 'function') {
                options.content(el);
            }
            options.parentEl.appendChild(el);
            // when a click happens on anything inside with a 'fc-close' className, hide the popover
            listenBySelector(el, 'click', '.fc-close', function (ev) {
                _this.hide();
            });
            if (options.autoHide) {
                document.addEventListener('mousedown', this.documentMousedown);
            }
        };
        // Hides and unregisters any handlers
        Popover.prototype.destroy = function () {
            this.hide();
            if (this.el) {
                removeElement(this.el);
                this.el = null;
            }
            document.removeEventListener('mousedown', this.documentMousedown);
        };
        // Positions the popover optimally, using the top/left/right options
        Popover.prototype.position = function () {
            var options = this.options;
            var el = this.el;
            var elDims = el.getBoundingClientRect(); // only used for width,height
            var origin = computeRect(el.offsetParent);
            var clippingRect = computeClippingRect(options.parentEl);
            var top; // the "position" (not "offset") values for the popover
            var left; //
            // compute top and left
            top = options.top || 0;
            if (options.left !== undefined) {
                left = options.left;
            }
            else if (options.right !== undefined) {
                left = options.right - elDims.width; // derive the left value from the right value
            }
            else {
                left = 0;
            }
            // constrain to the view port. if constrained by two edges, give precedence to top/left
            top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);
            top = Math.max(top, clippingRect.top + this.margin);
            left = Math.min(left, clippingRect.right - elDims.width - this.margin);
            left = Math.max(left, clippingRect.left + this.margin);
            applyStyle(el, {
                top: top - origin.top,
                left: left - origin.left
            });
        };
        // Triggers a callback. Calls a function in the option hash of the same name.
        // Arguments beyond the first `name` are forwarded on.
        // TODO: better code reuse for this. Repeat code
        // can kill this???
        Popover.prototype.trigger = function (name) {
            if (this.options[name]) {
                this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        };
        return Popover;
    }());

    /* Event-rendering methods for the DayGrid class
    ----------------------------------------------------------------------------------------------------------------------*/
    // "Simple" is bad a name. has nothing to do with SimpleDayGrid
    var SimpleDayGridEventRenderer = /** @class */ (function (_super) {
        __extends$1(SimpleDayGridEventRenderer, _super);
        function SimpleDayGridEventRenderer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // Builds the HTML to be used for the default element for an individual segment
        SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
            var _a = this.context, view = _a.view, options = _a.options;
            var eventRange = seg.eventRange;
            var eventDef = eventRange.def;
            var eventUi = eventRange.ui;
            var allDay = eventDef.allDay;
            var isDraggable = view.computeEventDraggable(eventDef, eventUi);
            var isResizableFromStart = allDay && seg.isStart && view.computeEventStartResizable(eventDef, eventUi);
            var isResizableFromEnd = allDay && seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);
            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
            var skinCss = cssToStr(this.getSkinCss(eventUi));
            var timeHtml = '';
            var timeText;
            var titleHtml;
            classes.unshift('fc-day-grid-event', 'fc-h-event');
            // Only display a timed events time if it is the starting segment
            if (seg.isStart) {
                timeText = this.getTimeText(eventRange);
                if (timeText) {
                    timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';
                }
            }
            titleHtml =
                '<span class="fc-title">' +
                    (htmlEscape(eventDef.title || '') || '&nbsp;') + // we always want one line of height
                    '</span>';
            return '<a class="' + classes.join(' ') + '"' +
                (eventDef.url ?
                    ' href="' + htmlEscape(eventDef.url) + '"' :
                    '') +
                (skinCss ?
                    ' style="' + skinCss + '"' :
                    '') +
                '>' +
                '<div class="fc-content">' +
                (options.dir === 'rtl' ?
                    titleHtml + ' ' + timeHtml : // put a natural space in between
                    timeHtml + ' ' + titleHtml //
                ) +
                '</div>' +
                (isResizableFromStart ?
                    '<div class="fc-resizer fc-start-resizer"></div>' :
                    '') +
                (isResizableFromEnd ?
                    '<div class="fc-resizer fc-end-resizer"></div>' :
                    '') +
                '</a>';
        };
        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined
        SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {
            return {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true,
                meridiem: 'narrow'
            };
        };
        SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {
            return false; // TODO: somehow consider the originating DayGrid's column count
        };
        return SimpleDayGridEventRenderer;
    }(FgEventRenderer));

    /* Event-rendering methods for the DayGrid class
    ----------------------------------------------------------------------------------------------------------------------*/
    var DayGridEventRenderer = /** @class */ (function (_super) {
        __extends$1(DayGridEventRenderer, _super);
        function DayGridEventRenderer(dayGrid) {
            var _this = _super.call(this, dayGrid.context) || this;
            _this.dayGrid = dayGrid;
            return _this;
        }
        // Renders the given foreground event segments onto the grid
        DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
            var rowStructs = this.rowStructs = this.renderSegRows(segs);
            // append to each row's content skeleton
            this.dayGrid.rowEls.forEach(function (rowNode, i) {
                rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);
            });
            // removes the "more.." events popover
            if (!mirrorInfo) {
                this.dayGrid.removeSegPopover();
            }
        };
        // Unrenders all currently rendered foreground event segments
        DayGridEventRenderer.prototype.detachSegs = function () {
            var rowStructs = this.rowStructs || [];
            var rowStruct;
            while ((rowStruct = rowStructs.pop())) {
                removeElement(rowStruct.tbodyEl);
            }
            this.rowStructs = null;
        };
        // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.
        // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).
        // PRECONDITION: each segment shoud already have a rendered and assigned `.el`
        DayGridEventRenderer.prototype.renderSegRows = function (segs) {
            var rowStructs = [];
            var segRows;
            var row;
            segRows = this.groupSegRows(segs); // group into nested arrays
            // iterate each row of segment groupings
            for (row = 0; row < segRows.length; row++) {
                rowStructs.push(this.renderSegRow(row, segRows[row]));
            }
            return rowStructs;
        };
        // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains
        // the segments. Returns object with a bunch of internal data about how the render was calculated.
        // NOTE: modifies rowSegs
        DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {
            var dayGrid = this.dayGrid;
            var colCnt = dayGrid.colCnt, isRtl = dayGrid.isRtl;
            var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels
            var levelCnt = Math.max(1, segLevels.length); // ensure at least one level
            var tbody = document.createElement('tbody');
            var segMatrix = []; // lookup for which segments are rendered into which level+col cells
            var cellMatrix = []; // lookup for all <td> elements of the level+col matrix
            var loneCellMatrix = []; // lookup for <td> elements that only take up a single column
            var i;
            var levelSegs;
            var col;
            var tr;
            var j;
            var seg;
            var td;
            // populates empty cells from the current column (`col`) to `endCol`
            function emptyCellsUntil(endCol) {
                while (col < endCol) {
                    // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell
                    td = (loneCellMatrix[i - 1] || [])[col];
                    if (td) {
                        td.rowSpan = (td.rowSpan || 1) + 1;
                    }
                    else {
                        td = document.createElement('td');
                        tr.appendChild(td);
                    }
                    cellMatrix[i][col] = td;
                    loneCellMatrix[i][col] = td;
                    col++;
                }
            }
            for (i = 0; i < levelCnt; i++) { // iterate through all levels
                levelSegs = segLevels[i];
                col = 0;
                tr = document.createElement('tr');
                segMatrix.push([]);
                cellMatrix.push([]);
                loneCellMatrix.push([]);
                // levelCnt might be 1 even though there are no actual levels. protect against this.
                // this single empty row is useful for styling.
                if (levelSegs) {
                    for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level
                        seg = levelSegs[j];
                        var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;
                        var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;
                        emptyCellsUntil(leftCol);
                        // create a container that occupies or more columns. append the event element.
                        td = createElement('td', { className: 'fc-event-container' }, seg.el);
                        if (leftCol !== rightCol) {
                            td.colSpan = rightCol - leftCol + 1;
                        }
                        else { // a single-column segment
                            loneCellMatrix[i][col] = td;
                        }
                        while (col <= rightCol) {
                            cellMatrix[i][col] = td;
                            segMatrix[i][col] = seg;
                            col++;
                        }
                        tr.appendChild(td);
                    }
                }
                emptyCellsUntil(colCnt); // finish off the row
                var introHtml = dayGrid.renderProps.renderIntroHtml();
                if (introHtml) {
                    if (dayGrid.isRtl) {
                        appendToElement(tr, introHtml);
                    }
                    else {
                        prependToElement(tr, introHtml);
                    }
                }
                tbody.appendChild(tr);
            }
            return {
                row: row,
                tbodyEl: tbody,
                cellMatrix: cellMatrix,
                segMatrix: segMatrix,
                segLevels: segLevels,
                segs: rowSegs
            };
        };
        // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.
        // NOTE: modifies segs
        DayGridEventRenderer.prototype.buildSegLevels = function (segs) {
            var _a = this.dayGrid, isRtl = _a.isRtl, colCnt = _a.colCnt;
            var levels = [];
            var i;
            var seg;
            var j;
            // Give preference to elements with certain criteria, so they have
            // a chance to be closer to the top.
            segs = this.sortEventSegs(segs);
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                // loop through levels, starting with the topmost, until the segment doesn't collide with other segments
                for (j = 0; j < levels.length; j++) {
                    if (!isDaySegCollision(seg, levels[j])) {
                        break;
                    }
                }
                // `j` now holds the desired subrow index
                seg.level = j;
                seg.leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol; // for sorting only
                seg.rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol // for sorting only
                ;
                (levels[j] || (levels[j] = [])).push(seg);
            }
            // order segments left-to-right. very important if calendar is RTL
            for (j = 0; j < levels.length; j++) {
                levels[j].sort(compareDaySegCols);
            }
            return levels;
        };
        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row
        DayGridEventRenderer.prototype.groupSegRows = function (segs) {
            var segRows = [];
            var i;
            for (i = 0; i < this.dayGrid.rowCnt; i++) {
                segRows.push([]);
            }
            for (i = 0; i < segs.length; i++) {
                segRows[segs[i].row].push(segs[i]);
            }
            return segRows;
        };
        // Computes a default `displayEventEnd` value if one is not expliclty defined
        DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {
            return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day
        };
        return DayGridEventRenderer;
    }(SimpleDayGridEventRenderer));
    // Computes whether two segments' columns collide. They are assumed to be in the same row.
    function isDaySegCollision(seg, otherSegs) {
        var i;
        var otherSeg;
        for (i = 0; i < otherSegs.length; i++) {
            otherSeg = otherSegs[i];
            if (otherSeg.firstCol <= seg.lastCol &&
                otherSeg.lastCol >= seg.firstCol) {
                return true;
            }
        }
        return false;
    }
    // A cmp function for determining the leftmost event
    function compareDaySegCols(a, b) {
        return a.leftCol - b.leftCol;
    }

    var DayGridMirrorRenderer = /** @class */ (function (_super) {
        __extends$1(DayGridMirrorRenderer, _super);
        function DayGridMirrorRenderer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
            var sourceSeg = mirrorInfo.sourceSeg;
            var rowStructs = this.rowStructs = this.renderSegRows(segs);
            // inject each new event skeleton into each associated row
            this.dayGrid.rowEls.forEach(function (rowNode, row) {
                var skeletonEl = htmlToElement('<div class="fc-mirror-skeleton"><table></table></div>'); // will be absolutely positioned
                var skeletonTopEl;
                var skeletonTop;
                // If there is an original segment, match the top position. Otherwise, put it at the row's top level
                if (sourceSeg && sourceSeg.row === row) {
                    skeletonTopEl = sourceSeg.el;
                }
                else {
                    skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');
                    if (!skeletonTopEl) { // when no events
                        skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');
                    }
                }
                skeletonTop = skeletonTopEl.getBoundingClientRect().top -
                    rowNode.getBoundingClientRect().top; // the offsetParent origin
                skeletonEl.style.top = skeletonTop + 'px';
                skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);
                rowNode.appendChild(skeletonEl);
            });
        };
        return DayGridMirrorRenderer;
    }(DayGridEventRenderer));

    var EMPTY_CELL_HTML = '<td style="pointer-events:none"></td>';
    var DayGridFillRenderer = /** @class */ (function (_super) {
        __extends$1(DayGridFillRenderer, _super);
        function DayGridFillRenderer(dayGrid) {
            var _this = _super.call(this, dayGrid.context) || this;
            _this.fillSegTag = 'td'; // override the default tag name
            _this.dayGrid = dayGrid;
            return _this;
        }
        DayGridFillRenderer.prototype.renderSegs = function (type, segs) {
            // don't render timed background events
            if (type === 'bgEvent') {
                segs = segs.filter(function (seg) {
                    return seg.eventRange.def.allDay;
                });
            }
            _super.prototype.renderSegs.call(this, type, segs);
        };
        DayGridFillRenderer.prototype.attachSegs = function (type, segs) {
            var els = [];
            var i;
            var seg;
            var skeletonEl;
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                skeletonEl = this.renderFillRow(type, seg);
                this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);
                els.push(skeletonEl);
            }
            return els;
        };
        // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.
        DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {
            var dayGrid = this.dayGrid;
            var colCnt = dayGrid.colCnt, isRtl = dayGrid.isRtl;
            var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;
            var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;
            var startCol = leftCol;
            var endCol = rightCol + 1;
            var className;
            var skeletonEl;
            var trEl;
            if (type === 'businessHours') {
                className = 'bgevent';
            }
            else {
                className = type.toLowerCase();
            }
            skeletonEl = htmlToElement('<div class="fc-' + className + '-skeleton">' +
                '<table><tr></tr></table>' +
                '</div>');
            trEl = skeletonEl.getElementsByTagName('tr')[0];
            if (startCol > 0) {
                appendToElement(trEl, 
                // will create (startCol + 1) td's
                new Array(startCol + 1).join(EMPTY_CELL_HTML));
            }
            seg.el.colSpan = endCol - startCol;
            trEl.appendChild(seg.el);
            if (endCol < colCnt) {
                appendToElement(trEl, 
                // will create (colCnt - endCol) td's
                new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));
            }
            var introHtml = dayGrid.renderProps.renderIntroHtml();
            if (introHtml) {
                if (dayGrid.isRtl) {
                    appendToElement(trEl, introHtml);
                }
                else {
                    prependToElement(trEl, introHtml);
                }
            }
            return skeletonEl;
        };
        return DayGridFillRenderer;
    }(FillRenderer));

    var DayTile = /** @class */ (function (_super) {
        __extends$1(DayTile, _super);
        function DayTile(context, el) {
            var _this = _super.call(this, context, el) || this;
            var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);
            var renderFrame = _this.renderFrame = memoizeRendering(_this._renderFrame);
            _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);
            _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
            _this.renderEventDrag = memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);
            _this.renderEventResize = memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);
            context.calendar.registerInteractiveComponent(_this, {
                el: _this.el,
                useEventCenter: false
            });
            return _this;
        }
        DayTile.prototype.render = function (props) {
            this.renderFrame(props.date);
            this.renderFgEvents(props.fgSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDragInstances);
            this.renderEventResize(props.eventResizeInstances);
        };
        DayTile.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.renderFrame.unrender(); // should unrender everything else
            this.calendar.unregisterInteractiveComponent(this);
        };
        DayTile.prototype._renderFrame = function (date) {
            var _a = this, theme = _a.theme, dateEnv = _a.dateEnv;
            var title = dateEnv.format(date, createFormatter(this.opt('dayPopoverFormat')) // TODO: cache
            );
            this.el.innerHTML =
                '<div class="fc-header ' + theme.getClass('popoverHeader') + '">' +
                    '<span class="fc-title">' +
                    htmlEscape(title) +
                    '</span>' +
                    '<span class="fc-close ' + theme.getIconClass('close') + '"></span>' +
                    '</div>' +
                    '<div class="fc-body ' + theme.getClass('popoverContent') + '">' +
                    '<div class="fc-event-container"></div>' +
                    '</div>';
            this.segContainerEl = this.el.querySelector('.fc-event-container');
        };
        DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
            var date = this.props.date; // HACK
            if (positionLeft < elWidth && positionTop < elHeight) {
                return {
                    component: this,
                    dateSpan: {
                        allDay: true,
                        range: { start: date, end: addDays$1(date, 1) }
                    },
                    dayEl: this.el,
                    rect: {
                        left: 0,
                        top: 0,
                        right: elWidth,
                        bottom: elHeight
                    },
                    layer: 1
                };
            }
        };
        return DayTile;
    }(DateComponent));
    var DayTileEventRenderer = /** @class */ (function (_super) {
        __extends$1(DayTileEventRenderer, _super);
        function DayTileEventRenderer(dayTile) {
            var _this = _super.call(this, dayTile.context) || this;
            _this.dayTile = dayTile;
            return _this;
        }
        DayTileEventRenderer.prototype.attachSegs = function (segs) {
            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
                var seg = segs_1[_i];
                this.dayTile.segContainerEl.appendChild(seg.el);
            }
        };
        DayTileEventRenderer.prototype.detachSegs = function (segs) {
            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
                var seg = segs_2[_i];
                removeElement(seg.el);
            }
        };
        return DayTileEventRenderer;
    }(SimpleDayGridEventRenderer));

    var DayBgRow = /** @class */ (function () {
        function DayBgRow(context) {
            this.context = context;
        }
        DayBgRow.prototype.renderHtml = function (props) {
            var parts = [];
            if (props.renderIntroHtml) {
                parts.push(props.renderIntroHtml());
            }
            for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));
            }
            if (!props.cells.length) {
                parts.push('<td class="fc-day ' + this.context.theme.getClass('widgetContent') + '"></td>');
            }
            if (this.context.options.dir === 'rtl') {
                parts.reverse();
            }
            return '<tr>' + parts.join('') + '</tr>';
        };
        return DayBgRow;
    }());
    function renderCellHtml(date, dateProfile, context, otherAttrs) {
        var dateEnv = context.dateEnv, theme = context.theme;
        var isDateValid = rangeContainsMarker(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.
        var classes = getDayClasses(date, dateProfile, context);
        classes.unshift('fc-day', theme.getClass('widgetContent'));
        return '<td class="' + classes.join(' ') + '"' +
            (isDateValid ?
                ' data-date="' + dateEnv.formatIso(date, { omitTime: true }) + '"' :
                '') +
            (otherAttrs ?
                ' ' + otherAttrs :
                '') +
            '></td>';
    }

    var DAY_NUM_FORMAT = createFormatter({ day: 'numeric' });
    var WEEK_NUM_FORMAT = createFormatter({ week: 'numeric' });
    var DayGrid = /** @class */ (function (_super) {
        __extends$1(DayGrid, _super);
        function DayGrid(context, el, renderProps) {
            var _this = _super.call(this, context, el) || this;
            _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid
            _this.isCellSizesDirty = false;
            var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);
            var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);
            _this.mirrorRenderer = new DayGridMirrorRenderer(_this);
            var renderCells = _this.renderCells = memoizeRendering(_this._renderCells, _this._unrenderCells);
            _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);
            _this.renderDateSelection = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);
            _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);
            _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);
            _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
            _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);
            _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);
            _this.renderProps = renderProps;
            return _this;
        }
        DayGrid.prototype.render = function (props) {
            var cells = props.cells;
            this.rowCnt = cells.length;
            this.colCnt = cells[0].length;
            this.renderCells(cells, props.isRigid);
            this.renderBusinessHours(props.businessHourSegs);
            this.renderDateSelection(props.dateSelectionSegs);
            this.renderBgEvents(props.bgEventSegs);
            this.renderFgEvents(props.fgEventSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDrag);
            this.renderEventResize(props.eventResize);
            if (this.segPopoverTile) {
                this.updateSegPopoverTile();
            }
        };
        DayGrid.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.renderCells.unrender(); // will unrender everything else
        };
        DayGrid.prototype.getCellRange = function (row, col) {
            var start = this.props.cells[row][col].date;
            var end = addDays$1(start, 1);
            return { start: start, end: end };
        };
        DayGrid.prototype.updateSegPopoverTile = function (date, segs) {
            var ownProps = this.props;
            this.segPopoverTile.receiveProps({
                date: date || this.segPopoverTile.props.date,
                fgSegs: segs || this.segPopoverTile.props.fgSegs,
                eventSelection: ownProps.eventSelection,
                eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,
                eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null
            });
        };
        /* Date Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderCells = function (cells, isRigid) {
            var _a = this, view = _a.view, dateEnv = _a.dateEnv;
            var _b = this, rowCnt = _b.rowCnt, colCnt = _b.colCnt;
            var html = '';
            var row;
            var col;
            for (row = 0; row < rowCnt; row++) {
                html += this.renderDayRowHtml(row, isRigid);
            }
            this.el.innerHTML = html;
            this.rowEls = findElements(this.el, '.fc-row');
            this.cellEls = findElements(this.el, '.fc-day, .fc-disabled-day');
            if (this.isRtl) {
                this.cellEls.reverse();
            }
            this.rowPositions = new PositionCache(this.el, this.rowEls, false, true // vertical
            );
            this.colPositions = new PositionCache(this.el, this.cellEls.slice(0, colCnt), // only the first row
            true, false // horizontal
            );
            // trigger dayRender with each cell's element
            for (row = 0; row < rowCnt; row++) {
                for (col = 0; col < colCnt; col++) {
                    this.publiclyTrigger('dayRender', [
                        {
                            date: dateEnv.toDate(cells[row][col].date),
                            el: this.getCellEl(row, col),
                            view: view
                        }
                    ]);
                }
            }
            this.isCellSizesDirty = true;
        };
        DayGrid.prototype._unrenderCells = function () {
            this.removeSegPopover();
        };
        // Generates the HTML for a single row, which is a div that wraps a table.
        // `row` is the row number.
        DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {
            var theme = this.theme;
            var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];
            if (isRigid) {
                classes.push('fc-rigid');
            }
            var bgRow = new DayBgRow(this.context);
            return '' +
                '<div class="' + classes.join(' ') + '">' +
                '<div class="fc-bg">' +
                '<table class="' + theme.getClass('tableGrid') + '">' +
                bgRow.renderHtml({
                    cells: this.props.cells[row],
                    dateProfile: this.props.dateProfile,
                    renderIntroHtml: this.renderProps.renderBgIntroHtml
                }) +
                '</table>' +
                '</div>' +
                '<div class="fc-content-skeleton">' +
                '<table>' +
                (this.getIsNumbersVisible() ?
                    '<thead>' +
                        this.renderNumberTrHtml(row) +
                        '</thead>' :
                    '') +
                '</table>' +
                '</div>' +
                '</div>';
        };
        DayGrid.prototype.getIsNumbersVisible = function () {
            return this.getIsDayNumbersVisible() ||
                this.renderProps.cellWeekNumbersVisible ||
                this.renderProps.colWeekNumbersVisible;
        };
        DayGrid.prototype.getIsDayNumbersVisible = function () {
            return this.rowCnt > 1;
        };
        /* Grid Number Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.renderNumberTrHtml = function (row) {
            var intro = this.renderProps.renderNumberIntroHtml(row, this);
            return '' +
                '<tr>' +
                (this.isRtl ? '' : intro) +
                this.renderNumberCellsHtml(row) +
                (this.isRtl ? intro : '') +
                '</tr>';
        };
        DayGrid.prototype.renderNumberCellsHtml = function (row) {
            var htmls = [];
            var col;
            var date;
            for (col = 0; col < this.colCnt; col++) {
                date = this.props.cells[row][col].date;
                htmls.push(this.renderNumberCellHtml(date));
            }
            if (this.isRtl) {
                htmls.reverse();
            }
            return htmls.join('');
        };
        // Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.
        // The number row will only exist if either day numbers or week numbers are turned on.
        DayGrid.prototype.renderNumberCellHtml = function (date) {
            var _a = this, view = _a.view, dateEnv = _a.dateEnv;
            var html = '';
            var isDateValid = rangeContainsMarker(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.
            var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;
            var classes;
            var weekCalcFirstDow;
            if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {
                // no numbers in day cell (week number must be along the side)
                return '<td></td>'; //  will create an empty space above events :(
            }
            classes = getDayClasses(date, this.props.dateProfile, this.context);
            classes.unshift('fc-day-top');
            if (this.renderProps.cellWeekNumbersVisible) {
                weekCalcFirstDow = dateEnv.weekDow;
            }
            html += '<td class="' + classes.join(' ') + '"' +
                (isDateValid ?
                    ' data-date="' + dateEnv.formatIso(date, { omitTime: true }) + '"' :
                    '') +
                '>';
            if (this.renderProps.cellWeekNumbersVisible && (date.getUTCDay() === weekCalcFirstDow)) {
                html += buildGotoAnchorHtml(view, { date: date, type: 'week' }, { 'class': 'fc-week-number' }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML
                );
            }
            if (isDayNumberVisible) {
                html += buildGotoAnchorHtml(view, date, { 'class': 'fc-day-number' }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML
                );
            }
            html += '</td>';
            return html;
        };
        /* Sizing
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.updateSize = function (isResize) {
            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;
            if (isResize ||
                this.isCellSizesDirty ||
                this.view.calendar.isEventsUpdated // hack
            ) {
                this.buildPositionCaches();
                this.isCellSizesDirty = false;
            }
            fillRenderer.computeSizes(isResize);
            eventRenderer.computeSizes(isResize);
            mirrorRenderer.computeSizes(isResize);
            fillRenderer.assignSizes(isResize);
            eventRenderer.assignSizes(isResize);
            mirrorRenderer.assignSizes(isResize);
        };
        DayGrid.prototype.buildPositionCaches = function () {
            this.buildColPositions();
            this.buildRowPositions();
        };
        DayGrid.prototype.buildColPositions = function () {
            this.colPositions.build();
        };
        DayGrid.prototype.buildRowPositions = function () {
            this.rowPositions.build();
            this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack
        };
        /* Hit System
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {
            var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;
            var col = colPositions.leftToIndex(leftPosition);
            var row = rowPositions.topToIndex(topPosition);
            if (row != null && col != null) {
                return {
                    row: row,
                    col: col,
                    dateSpan: {
                        range: this.getCellRange(row, col),
                        allDay: true
                    },
                    dayEl: this.getCellEl(row, col),
                    relativeRect: {
                        left: colPositions.lefts[col],
                        right: colPositions.rights[col],
                        top: rowPositions.tops[row],
                        bottom: rowPositions.bottoms[row]
                    }
                };
            }
        };
        /* Cell System
        ------------------------------------------------------------------------------------------------------------------*/
        // FYI: the first column is the leftmost column, regardless of date
        DayGrid.prototype.getCellEl = function (row, col) {
            return this.cellEls[row * this.colCnt + col];
        };
        /* Event Drag Visualization
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderEventDrag = function (state) {
            if (state) {
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.fillRenderer.renderSegs('highlight', state.segs);
            }
        };
        DayGrid.prototype._unrenderEventDrag = function (state) {
            if (state) {
                this.eventRenderer.showByHash(state.affectedInstances);
                this.fillRenderer.unrender('highlight');
            }
        };
        /* Event Resize Visualization
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderEventResize = function (state) {
            if (state) {
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.fillRenderer.renderSegs('highlight', state.segs);
                this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });
            }
        };
        DayGrid.prototype._unrenderEventResize = function (state) {
            if (state) {
                this.eventRenderer.showByHash(state.affectedInstances);
                this.fillRenderer.unrender('highlight');
                this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });
            }
        };
        /* More+ Link Popover
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.removeSegPopover = function () {
            if (this.segPopover) {
                this.segPopover.hide(); // in handler, will call segPopover's removeElement
            }
        };
        // Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.
        // `levelLimit` can be false (don't limit), a number, or true (should be computed).
        DayGrid.prototype.limitRows = function (levelLimit) {
            var rowStructs = this.eventRenderer.rowStructs || [];
            var row; // row #
            var rowLevelLimit;
            for (row = 0; row < rowStructs.length; row++) {
                this.unlimitRow(row);
                if (!levelLimit) {
                    rowLevelLimit = false;
                }
                else if (typeof levelLimit === 'number') {
                    rowLevelLimit = levelLimit;
                }
                else {
                    rowLevelLimit = this.computeRowLevelLimit(row);
                }
                if (rowLevelLimit !== false) {
                    this.limitRow(row, rowLevelLimit);
                }
            }
        };
        // Computes the number of levels a row will accomodate without going outside its bounds.
        // Assumes the row is "rigid" (maintains a constant height regardless of what is inside).
        // `row` is the row number.
        DayGrid.prototype.computeRowLevelLimit = function (row) {
            var rowEl = this.rowEls[row]; // the containing "fake" row div
            var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!
            var trEls = findChildren(this.eventRenderer.rowStructs[row].tbodyEl);
            var i;
            var trEl;
            // Reveal one level <tr> at a time and stop when we find one out of bounds
            for (i = 0; i < trEls.length; i++) {
                trEl = trEls[i];
                trEl.classList.remove('fc-limited'); // reset to original state (reveal)
                if (trEl.getBoundingClientRect().bottom > rowBottom) {
                    return i;
                }
            }
            return false; // should not limit at all
        };
        // Limits the given grid row to the maximum number of levels and injects "more" links if necessary.
        // `row` is the row number.
        // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.
        DayGrid.prototype.limitRow = function (row, levelLimit) {
            var _this = this;
            var _a = this, colCnt = _a.colCnt, isRtl = _a.isRtl;
            var rowStruct = this.eventRenderer.rowStructs[row];
            var moreNodes = []; // array of "more" <a> links and <td> DOM nodes
            var col = 0; // col #, left-to-right (not chronologically)
            var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right
            var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row
            var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes
            var i;
            var seg;
            var segsBelow; // array of segment objects below `seg` in the current `col`
            var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies
            var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)
            var td;
            var rowSpan;
            var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell
            var j;
            var moreTd;
            var moreWrap;
            var moreLink;
            // Iterates through empty level cells and places "more" links inside if need be
            var emptyCellsUntil = function (endCol) {
                while (col < endCol) {
                    segsBelow = _this.getCellSegs(row, col, levelLimit);
                    if (segsBelow.length) {
                        td = cellMatrix[levelLimit - 1][col];
                        moreLink = _this.renderMoreLink(row, col, segsBelow);
                        moreWrap = createElement('div', null, moreLink);
                        td.appendChild(moreWrap);
                        moreNodes.push(moreWrap);
                    }
                    col++;
                }
            };
            if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?
                levelSegs = rowStruct.segLevels[levelLimit - 1];
                cellMatrix = rowStruct.cellMatrix;
                limitedNodes = findChildren(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit
                limitedNodes.forEach(function (node) {
                    node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array
                });
                // iterate though segments in the last allowable level
                for (i = 0; i < levelSegs.length; i++) {
                    seg = levelSegs[i];
                    var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;
                    var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;
                    emptyCellsUntil(leftCol); // process empty cells before the segment
                    // determine *all* segments below `seg` that occupy the same columns
                    colSegsBelow = [];
                    totalSegsBelow = 0;
                    while (col <= rightCol) {
                        segsBelow = this.getCellSegs(row, col, levelLimit);
                        colSegsBelow.push(segsBelow);
                        totalSegsBelow += segsBelow.length;
                        col++;
                    }
                    if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?
                        td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell
                        rowSpan = td.rowSpan || 1;
                        segMoreNodes = [];
                        // make a replacement <td> for each column the segment occupies. will be one for each colspan
                        for (j = 0; j < colSegsBelow.length; j++) {
                            moreTd = createElement('td', { className: 'fc-more-cell', rowSpan: rowSpan });
                            segsBelow = colSegsBelow[j];
                            moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too
                            );
                            moreWrap = createElement('div', null, moreLink);
                            moreTd.appendChild(moreWrap);
                            segMoreNodes.push(moreTd);
                            moreNodes.push(moreTd);
                        }
                        td.classList.add('fc-limited');
                        insertAfterElement(td, segMoreNodes);
                        limitedNodes.push(td);
                    }
                }
                emptyCellsUntil(this.colCnt); // finish off the level
                rowStruct.moreEls = moreNodes; // for easy undoing later
                rowStruct.limitedEls = limitedNodes; // for easy undoing later
            }
        };
        // Reveals all levels and removes all "more"-related elements for a grid's row.
        // `row` is a row number.
        DayGrid.prototype.unlimitRow = function (row) {
            var rowStruct = this.eventRenderer.rowStructs[row];
            if (rowStruct.moreEls) {
                rowStruct.moreEls.forEach(removeElement);
                rowStruct.moreEls = null;
            }
            if (rowStruct.limitedEls) {
                rowStruct.limitedEls.forEach(function (limitedEl) {
                    limitedEl.classList.remove('fc-limited');
                });
                rowStruct.limitedEls = null;
            }
        };
        // Renders an <a> element that represents hidden event element for a cell.
        // Responsible for attaching click handler as well.
        DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {
            var _this = this;
            var _a = this, view = _a.view, dateEnv = _a.dateEnv;
            var a = createElement('a', { className: 'fc-more' });
            a.innerText = this.getMoreLinkText(hiddenSegs.length);
            a.addEventListener('click', function (ev) {
                var clickOption = _this.opt('eventLimitClick');
                var _col = _this.isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?
                var date = _this.props.cells[row][_col].date;
                var moreEl = ev.currentTarget;
                var dayEl = _this.getCellEl(row, col);
                var allSegs = _this.getCellSegs(row, col);
                // rescope the segments to be within the cell's date
                var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);
                var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);
                if (typeof clickOption === 'function') {
                    // the returned value can be an atomic option
                    clickOption = _this.publiclyTrigger('eventLimitClick', [
                        {
                            date: dateEnv.toDate(date),
                            allDay: true,
                            dayEl: dayEl,
                            moreEl: moreEl,
                            segs: reslicedAllSegs,
                            hiddenSegs: reslicedHiddenSegs,
                            jsEvent: ev,
                            view: view
                        }
                    ]);
                }
                if (clickOption === 'popover') {
                    _this.showSegPopover(row, col, moreEl, reslicedAllSegs);
                }
                else if (typeof clickOption === 'string') { // a view name
                    view.calendar.zoomTo(date, clickOption);
                }
            });
            return a;
        };
        // Reveals the popover that displays all events within a cell
        DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {
            var _this = this;
            var _a = this, calendar = _a.calendar, view = _a.view, theme = _a.theme;
            var _col = this.isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?
            var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>
            var topEl; // the element we want to match the top coordinate of
            var options;
            if (this.rowCnt === 1) {
                topEl = view.el; // will cause the popover to cover any sort of header
            }
            else {
                topEl = this.rowEls[row]; // will align with top of row
            }
            options = {
                className: 'fc-more-popover ' + theme.getClass('popover'),
                parentEl: view.el,
                top: computeRect(topEl).top,
                autoHide: true,
                content: function (el) {
                    _this.segPopoverTile = new DayTile(_this.context, el);
                    _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);
                },
                hide: function () {
                    _this.segPopoverTile.destroy();
                    _this.segPopoverTile = null;
                    _this.segPopover.destroy();
                    _this.segPopover = null;
                }
            };
            // Determine horizontal coordinate.
            // We use the moreWrap instead of the <td> to avoid border confusion.
            if (this.isRtl) {
                options.right = computeRect(moreWrap).right + 1; // +1 to be over cell border
            }
            else {
                options.left = computeRect(moreWrap).left - 1; // -1 to be over cell border
            }
            this.segPopover = new Popover$1(options);
            this.segPopover.show();
            calendar.releaseAfterSizingTriggers(); // hack for eventPositioned
        };
        // Given the events within an array of segment objects, reslice them to be in a single day
        DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {
            var dayStart = dayDate;
            var dayEnd = addDays$1(dayStart, 1);
            var dayRange = { start: dayStart, end: dayEnd };
            var newSegs = [];
            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
                var seg = segs_1[_i];
                var eventRange = seg.eventRange;
                var origRange = eventRange.range;
                var slicedRange = intersectRanges(origRange, dayRange);
                if (slicedRange) {
                    newSegs.push(__assign$1({}, seg, { eventRange: {
                            def: eventRange.def,
                            ui: __assign$1({}, eventRange.ui, { durationEditable: false }),
                            instance: eventRange.instance,
                            range: slicedRange
                        }, isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(), isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf() }));
                }
            }
            return newSegs;
        };
        // Generates the text that should be inside a "more" link, given the number of events it represents
        DayGrid.prototype.getMoreLinkText = function (num) {
            var opt = this.opt('eventLimitText');
            if (typeof opt === 'function') {
                return opt(num);
            }
            else {
                return '+' + num + ' ' + opt;
            }
        };
        // Returns segments within a given cell.
        // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.
        DayGrid.prototype.getCellSegs = function (row, col, startLevel) {
            var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;
            var level = startLevel || 0;
            var segs = [];
            var seg;
            while (level < segMatrix.length) {
                seg = segMatrix[level][col];
                if (seg) {
                    segs.push(seg);
                }
                level++;
            }
            return segs;
        };
        return DayGrid;
    }(DateComponent));

    var WEEK_NUM_FORMAT$1 = createFormatter({ week: 'numeric' });
    /* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.
    ----------------------------------------------------------------------------------------------------------------------*/
    // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.
    // It is responsible for managing width/height.
    var DayGridView = /** @class */ (function (_super) {
        __extends$1(DayGridView, _super);
        function DayGridView(context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;
            /* Header Rendering
            ------------------------------------------------------------------------------------------------------------------*/
            // Generates the HTML that will go before the day-of week header cells
            _this.renderHeadIntroHtml = function () {
                var theme = _this.theme;
                if (_this.colWeekNumbersVisible) {
                    return '' +
                        '<th class="fc-week-number ' + theme.getClass('widgetHeader') + '" ' + _this.weekNumberStyleAttr() + '>' +
                        '<span>' + // needed for matchCellWidths
                        htmlEscape(_this.opt('weekLabel')) +
                        '</span>' +
                        '</th>';
                }
                return '';
            };
            /* Day Grid Rendering
            ------------------------------------------------------------------------------------------------------------------*/
            // Generates the HTML that will go before content-skeleton cells that display the day/week numbers
            _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {
                var dateEnv = _this.dateEnv;
                var weekStart = dayGrid.props.cells[row][0].date;
                if (_this.colWeekNumbersVisible) {
                    return '' +
                        '<td class="fc-week-number" ' + _this.weekNumberStyleAttr() + '>' +
                        buildGotoAnchorHtml(// aside from link, important for matchCellWidths
                        _this, { date: weekStart, type: 'week', forceOff: dayGrid.colCnt === 1 }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML
                        ) +
                        '</td>';
                }
                return '';
            };
            // Generates the HTML that goes before the day bg cells for each day-row
            _this.renderDayGridBgIntroHtml = function () {
                var theme = _this.theme;
                if (_this.colWeekNumbersVisible) {
                    return '<td class="fc-week-number ' + theme.getClass('widgetContent') + '" ' + _this.weekNumberStyleAttr() + '></td>';
                }
                return '';
            };
            // Generates the HTML that goes before every other type of row generated by DayGrid.
            // Affects mirror-skeleton and highlight-skeleton rows.
            _this.renderDayGridIntroHtml = function () {
                if (_this.colWeekNumbersVisible) {
                    return '<td class="fc-week-number" ' + _this.weekNumberStyleAttr() + '></td>';
                }
                return '';
            };
            _this.el.classList.add('fc-dayGrid-view');
            _this.el.innerHTML = _this.renderSkeletonHtml();
            _this.scroller = new ScrollComponent('hidden', // overflow x
            'auto' // overflow y
            );
            var dayGridContainerEl = _this.scroller.el;
            _this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);
            dayGridContainerEl.classList.add('fc-day-grid-container');
            var dayGridEl = createElement('div', { className: 'fc-day-grid' });
            dayGridContainerEl.appendChild(dayGridEl);
            var cellWeekNumbersVisible;
            if (_this.opt('weekNumbers')) {
                if (_this.opt('weekNumbersWithinDays')) {
                    cellWeekNumbersVisible = true;
                    _this.colWeekNumbersVisible = false;
                }
                else {
                    cellWeekNumbersVisible = false;
                    _this.colWeekNumbersVisible = true;
                }
            }
            else {
                _this.colWeekNumbersVisible = false;
                cellWeekNumbersVisible = false;
            }
            _this.dayGrid = new DayGrid(_this.context, dayGridEl, {
                renderNumberIntroHtml: _this.renderDayGridNumberIntroHtml,
                renderBgIntroHtml: _this.renderDayGridBgIntroHtml,
                renderIntroHtml: _this.renderDayGridIntroHtml,
                colWeekNumbersVisible: _this.colWeekNumbersVisible,
                cellWeekNumbersVisible: cellWeekNumbersVisible
            });
            return _this;
        }
        DayGridView.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.dayGrid.destroy();
            this.scroller.destroy();
        };
        // Builds the HTML skeleton for the view.
        // The day-grid component will render inside of a container defined by this HTML.
        DayGridView.prototype.renderSkeletonHtml = function () {
            var theme = this.theme;
            return '' +
                '<table class="' + theme.getClass('tableGrid') + '">' +
                (this.opt('columnHeader') ?
                    '<thead class="fc-head">' +
                        '<tr>' +
                        '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' +
                        '</tr>' +
                        '</thead>' :
                    '') +
                '<tbody class="fc-body">' +
                '<tr>' +
                '<td class="' + theme.getClass('widgetContent') + '"></td>' +
                '</tr>' +
                '</tbody>' +
                '</table>';
        };
        // Generates an HTML attribute string for setting the width of the week number column, if it is known
        DayGridView.prototype.weekNumberStyleAttr = function () {
            if (this.weekNumberWidth != null) {
                return 'style="width:' + this.weekNumberWidth + 'px"';
            }
            return '';
        };
        // Determines whether each row should have a constant height
        DayGridView.prototype.hasRigidRows = function () {
            var eventLimit = this.opt('eventLimit');
            return eventLimit && typeof eventLimit !== 'number';
        };
        /* Dimensions
        ------------------------------------------------------------------------------------------------------------------*/
        DayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first
            this.dayGrid.updateSize(isResize);
        };
        // Refreshes the horizontal dimensions of the view
        DayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {
            var dayGrid = this.dayGrid;
            var eventLimit = this.opt('eventLimit');
            var headRowEl = this.header ? this.header.el : null; // HACK
            var scrollerHeight;
            var scrollbarWidths;
            // hack to give the view some height prior to dayGrid's columns being rendered
            // TODO: separate setting height from scroller VS dayGrid.
            if (!dayGrid.rowEls) {
                if (!isAuto) {
                    scrollerHeight = this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                return;
            }
            if (this.colWeekNumbersVisible) {
                // Make sure all week number cells running down the side have the same width.
                this.weekNumberWidth = matchCellWidths(findElements(this.el, '.fc-week-number'));
            }
            // reset all heights to be natural
            this.scroller.clear();
            if (headRowEl) {
                uncompensateScroll(headRowEl);
            }
            dayGrid.removeSegPopover(); // kill the "more" popover if displayed
            // is the event limit a constant level number?
            if (eventLimit && typeof eventLimit === 'number') {
                dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after
            }
            // distribute the height to the rows
            // (viewHeight is a "recommended" value if isAuto)
            scrollerHeight = this.computeScrollerHeight(viewHeight);
            this.setGridHeight(scrollerHeight, isAuto);
            // is the event limit dynamically calculated?
            if (eventLimit && typeof eventLimit !== 'number') {
                dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set
            }
            if (!isAuto) { // should we force dimensions of the scroll container?
                this.scroller.setHeight(scrollerHeight);
                scrollbarWidths = this.scroller.getScrollbarWidths();
                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?
                    if (headRowEl) {
                        compensateScroll(headRowEl, scrollbarWidths);
                    }
                    // doing the scrollbar compensation might have created text overflow which created more height. redo
                    scrollerHeight = this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                // guarantees the same scrollbar widths
                this.scroller.lockOverflow(scrollbarWidths);
            }
        };
        // given a desired total height of the view, returns what the height of the scroller should be
        DayGridView.prototype.computeScrollerHeight = function (viewHeight) {
            return viewHeight -
                subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
        };
        // Sets the height of just the DayGrid component in this view
        DayGridView.prototype.setGridHeight = function (height, isAuto) {
            if (this.opt('monthMode')) {
                // if auto, make the height of each row the height that it would be if there were 6 weeks
                if (isAuto) {
                    height *= this.dayGrid.rowCnt / 6;
                }
                distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows
            }
            else {
                if (isAuto) {
                    undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding
                }
                else {
                    distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows
                }
            }
        };
        /* Scroll
        ------------------------------------------------------------------------------------------------------------------*/
        DayGridView.prototype.computeDateScroll = function (duration) {
            return { top: 0 };
        };
        DayGridView.prototype.queryDateScroll = function () {
            return { top: this.scroller.getScrollTop() };
        };
        DayGridView.prototype.applyDateScroll = function (scroll) {
            if (scroll.top !== undefined) {
                this.scroller.setScrollTop(scroll.top);
            }
        };
        return DayGridView;
    }(View));
    DayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;

    var SimpleDayGrid = /** @class */ (function (_super) {
        __extends$1(SimpleDayGrid, _super);
        function SimpleDayGrid(context, dayGrid) {
            var _this = _super.call(this, context, dayGrid.el) || this;
            _this.slicer = new DayGridSlicer();
            _this.dayGrid = dayGrid;
            context.calendar.registerInteractiveComponent(_this, { el: _this.dayGrid.el });
            return _this;
        }
        SimpleDayGrid.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.calendar.unregisterInteractiveComponent(this);
        };
        SimpleDayGrid.prototype.render = function (props) {
            var dayGrid = this.dayGrid;
            var dateProfile = props.dateProfile, dayTable = props.dayTable;
            dayGrid.receiveProps(__assign$1({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, dayGrid, dayTable), { dateProfile: dateProfile, cells: dayTable.cells, isRigid: props.isRigid }));
        };
        SimpleDayGrid.prototype.buildPositionCaches = function () {
            this.dayGrid.buildPositionCaches();
        };
        SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {
            var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);
            if (rawHit) {
                return {
                    component: this.dayGrid,
                    dateSpan: rawHit.dateSpan,
                    dayEl: rawHit.dayEl,
                    rect: {
                        left: rawHit.relativeRect.left,
                        right: rawHit.relativeRect.right,
                        top: rawHit.relativeRect.top,
                        bottom: rawHit.relativeRect.bottom
                    },
                    layer: 0
                };
            }
        };
        return SimpleDayGrid;
    }(DateComponent));
    var DayGridSlicer = /** @class */ (function (_super) {
        __extends$1(DayGridSlicer, _super);
        function DayGridSlicer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {
            return dayTable.sliceRange(dateRange);
        };
        return DayGridSlicer;
    }(Slicer));

    var DayGridView$1 = /** @class */ (function (_super) {
        __extends$1(DayGridView, _super);
        function DayGridView(_context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;
            _this.buildDayTable = memoize$1(buildDayTable);
            if (_this.opt('columnHeader')) {
                _this.header = new DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));
            }
            _this.simpleDayGrid = new SimpleDayGrid(_this.context, _this.dayGrid);
            return _this;
        }
        DayGridView.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            if (this.header) {
                this.header.destroy();
            }
            this.simpleDayGrid.destroy();
        };
        DayGridView.prototype.render = function (props) {
            _super.prototype.render.call(this, props);
            var dateProfile = this.props.dateProfile;
            var dayTable = this.dayTable =
                this.buildDayTable(dateProfile, this.dateProfileGenerator);
            if (this.header) {
                this.header.receiveProps({
                    dateProfile: dateProfile,
                    dates: dayTable.headerDates,
                    datesRepDistinctDays: dayTable.rowCnt === 1,
                    renderIntroHtml: this.renderHeadIntroHtml
                });
            }
            this.simpleDayGrid.receiveProps({
                dateProfile: dateProfile,
                dayTable: dayTable,
                businessHours: props.businessHours,
                dateSelection: props.dateSelection,
                eventStore: props.eventStore,
                eventUiBases: props.eventUiBases,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                isRigid: this.hasRigidRows(),
                nextDayThreshold: this.nextDayThreshold
            });
        };
        return DayGridView;
    }(DayGridView));
    function buildDayTable(dateProfile, dateProfileGenerator) {
        var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);
        return new DayTable(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));
    }

    var main = createPlugin({
        defaultView: 'dayGridMonth',
        views: {
            dayGrid: DayGridView$1,
            dayGridDay: {
                type: 'dayGrid',
                duration: { days: 1 }
            },
            dayGridWeek: {
                type: 'dayGrid',
                duration: { weeks: 1 }
            },
            dayGridMonth: {
                type: 'dayGrid',
                duration: { months: 1 },
                monthMode: true,
                fixedWeekCount: true
            }
        }
    });

    /*!
    FullCalendar Time Grid Plugin v4.3.0
    Docs & License: https://fullcalendar.io/
    (c) 2019 Adam Shaw
    */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$2(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    /*
    Only handles foreground segs.
    Does not own rendering. Use for low-level util methods by TimeGrid.
    */
    var TimeGridEventRenderer = /** @class */ (function (_super) {
        __extends$2(TimeGridEventRenderer, _super);
        function TimeGridEventRenderer(timeGrid) {
            var _this = _super.call(this, timeGrid.context) || this;
            _this.timeGrid = timeGrid;
            _this.fullTimeFormat = createFormatter({
                hour: 'numeric',
                minute: '2-digit',
                separator: _this.context.options.defaultRangeSeparator
            });
            return _this;
        }
        // Given an array of foreground segments, render a DOM element for each, computes position,
        // and attaches to the column inner-container elements.
        TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
            var segsByCol = this.timeGrid.groupSegsByCol(segs);
            // order the segs within each column
            // TODO: have groupSegsByCol do this?
            for (var col = 0; col < segsByCol.length; col++) {
                segsByCol[col] = this.sortEventSegs(segsByCol[col]);
            }
            this.segsByCol = segsByCol;
            this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);
        };
        TimeGridEventRenderer.prototype.detachSegs = function (segs) {
            segs.forEach(function (seg) {
                removeElement(seg.el);
            });
            this.segsByCol = null;
        };
        TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {
            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;
            var colCnt = timeGrid.colCnt;
            timeGrid.computeSegVerticals(allSegs); // horizontals relies on this
            if (segsByCol) {
                for (var col = 0; col < colCnt; col++) {
                    this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array
                }
            }
        };
        TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {
            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;
            var colCnt = timeGrid.colCnt;
            timeGrid.assignSegVerticals(allSegs); // horizontals relies on this
            if (segsByCol) {
                for (var col = 0; col < colCnt; col++) {
                    this.assignSegCss(segsByCol[col]);
                }
            }
        };
        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined
        TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {
            return {
                hour: 'numeric',
                minute: '2-digit',
                meridiem: false
            };
        };
        // Computes a default `displayEventEnd` value if one is not expliclty defined
        TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {
            return true;
        };
        // Renders the HTML for a single event segment's default rendering
        TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
            var view = this.context.view;
            var eventRange = seg.eventRange;
            var eventDef = eventRange.def;
            var eventUi = eventRange.ui;
            var allDay = eventDef.allDay;
            var isDraggable = view.computeEventDraggable(eventDef, eventUi);
            var isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi);
            var isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);
            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
            var skinCss = cssToStr(this.getSkinCss(eventUi));
            var timeText;
            var fullTimeText; // more verbose time text. for the print stylesheet
            var startTimeText; // just the start time text
            classes.unshift('fc-time-grid-event');
            // if the event appears to span more than one day...
            if (isMultiDayRange(eventRange.range)) {
                // Don't display time text on segments that run entirely through a day.
                // That would appear as midnight-midnight and would look dumb.
                // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)
                if (seg.isStart || seg.isEnd) {
                    var unzonedStart = seg.start;
                    var unzonedEnd = seg.end;
                    timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones
                    fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);
                    startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false
                }
            }
            else {
                // Display the normal time text for the *event's* times
                timeText = this.getTimeText(eventRange);
                fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);
                startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false
            }
            return '<a class="' + classes.join(' ') + '"' +
                (eventDef.url ?
                    ' href="' + htmlEscape(eventDef.url) + '"' :
                    '') +
                (skinCss ?
                    ' style="' + skinCss + '"' :
                    '') +
                '>' +
                '<div class="fc-content">' +
                (timeText ?
                    '<div class="fc-time"' +
                        ' data-start="' + htmlEscape(startTimeText) + '"' +
                        ' data-full="' + htmlEscape(fullTimeText) + '"' +
                        '>' +
                        '<span>' + htmlEscape(timeText) + '</span>' +
                        '</div>' :
                    '') +
                (eventDef.title ?
                    '<div class="fc-title">' +
                        htmlEscape(eventDef.title) +
                        '</div>' :
                    '') +
                '</div>' +
                /* TODO: write CSS for this
                (isResizableFromStart ?
                  '<div class="fc-resizer fc-start-resizer"></div>' :
                  ''
                  ) +
                */
                (isResizableFromEnd ?
                    '<div class="fc-resizer fc-end-resizer"></div>' :
                    '') +
                '</a>';
        };
        // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.
        // Assumed the segs are already ordered.
        // NOTE: Also reorders the given array by date!
        TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {
            var levels;
            var level0;
            var i;
            levels = buildSlotSegLevels(segs);
            computeForwardSlotSegs(levels);
            if ((level0 = levels[0])) {
                for (i = 0; i < level0.length; i++) {
                    computeSlotSegPressures(level0[i]);
                }
                for (i = 0; i < level0.length; i++) {
                    this.computeSegForwardBack(level0[i], 0, 0);
                }
            }
        };
        // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range
        // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and
        // seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.
        //
        // The segment might be part of a "series", which means consecutive segments with the same pressure
        // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of
        // segments behind this one in the current series, and `seriesBackwardCoord` is the starting
        // coordinate of the first segment in the series.
        TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {
            var forwardSegs = seg.forwardSegs;
            var i;
            if (seg.forwardCoord === undefined) { // not already computed
                if (!forwardSegs.length) {
                    // if there are no forward segments, this segment should butt up against the edge
                    seg.forwardCoord = 1;
                }
                else {
                    // sort highest pressure first
                    this.sortForwardSegs(forwardSegs);
                    // this segment's forwardCoord will be calculated from the backwardCoord of the
                    // highest-pressure forward segment.
                    this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);
                    seg.forwardCoord = forwardSegs[0].backwardCoord;
                }
                // calculate the backwardCoord from the forwardCoord. consider the series
                seg.backwardCoord = seg.forwardCoord -
                    (seg.forwardCoord - seriesBackwardCoord) / // available width for series
                        (seriesBackwardPressure + 1); // # of segments in the series
                // use this segment's coordinates to computed the coordinates of the less-pressurized
                // forward segments
                for (i = 0; i < forwardSegs.length; i++) {
                    this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);
                }
            }
        };
        TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {
            var objs = forwardSegs.map(buildTimeGridSegCompareObj);
            var specs = [
                // put higher-pressure first
                { field: 'forwardPressure', order: -1 },
                // put segments that are closer to initial edge first (and favor ones with no coords yet)
                { field: 'backwardCoord', order: 1 }
            ].concat(this.context.view.eventOrderSpecs);
            objs.sort(function (obj0, obj1) {
                return compareByFieldSpecs(obj0, obj1, specs);
            });
            return objs.map(function (c) {
                return c._seg;
            });
        };
        // Given foreground event segments that have already had their position coordinates computed,
        // assigns position-related CSS values to their elements.
        TimeGridEventRenderer.prototype.assignSegCss = function (segs) {
            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
                var seg = segs_1[_i];
                applyStyle(seg.el, this.generateSegCss(seg));
                if (seg.level > 0) {
                    seg.el.classList.add('fc-time-grid-event-inset');
                }
                // if the event is short that the title will be cut off,
                // attach a className that condenses the title into the time area.
                if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {
                    seg.el.classList.add('fc-short'); // TODO: "condensed" is a better name
                }
            }
        };
        // Generates an object with CSS properties/values that should be applied to an event segment element.
        // Contains important positioning-related properties that should be applied to any event element, customized or not.
        TimeGridEventRenderer.prototype.generateSegCss = function (seg) {
            var shouldOverlap = this.context.options.slotEventOverlap;
            var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point
            var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point
            var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first
            var isRtl = this.timeGrid.isRtl;
            var left; // amount of space from left edge, a fraction of the total width
            var right; // amount of space from right edge, a fraction of the total width
            if (shouldOverlap) {
                // double the width, but don't go beyond the maximum forward coordinate (1.0)
                forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);
            }
            if (isRtl) {
                left = 1 - forwardCoord;
                right = backwardCoord;
            }
            else {
                left = backwardCoord;
                right = 1 - forwardCoord;
            }
            props.zIndex = seg.level + 1; // convert from 0-base to 1-based
            props.left = left * 100 + '%';
            props.right = right * 100 + '%';
            if (shouldOverlap && seg.forwardPressure) {
                // add padding to the edge so that forward stacked events don't cover the resizer's icon
                props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width
            }
            return props;
        };
        return TimeGridEventRenderer;
    }(FgEventRenderer));
    // Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is
    // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
    function buildSlotSegLevels(segs) {
        var levels = [];
        var i;
        var seg;
        var j;
        for (i = 0; i < segs.length; i++) {
            seg = segs[i];
            // go through all the levels and stop on the first level where there are no collisions
            for (j = 0; j < levels.length; j++) {
                if (!computeSlotSegCollisions(seg, levels[j]).length) {
                    break;
                }
            }
            seg.level = j;
            (levels[j] || (levels[j] = [])).push(seg);
        }
        return levels;
    }
    // For every segment, figure out the other segments that are in subsequent
    // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs
    function computeForwardSlotSegs(levels) {
        var i;
        var level;
        var j;
        var seg;
        var k;
        for (i = 0; i < levels.length; i++) {
            level = levels[i];
            for (j = 0; j < level.length; j++) {
                seg = level[j];
                seg.forwardSegs = [];
                for (k = i + 1; k < levels.length; k++) {
                    computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);
                }
            }
        }
    }
    // Figure out which path forward (via seg.forwardSegs) results in the longest path until
    // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure
    function computeSlotSegPressures(seg) {
        var forwardSegs = seg.forwardSegs;
        var forwardPressure = 0;
        var i;
        var forwardSeg;
        if (seg.forwardPressure === undefined) { // not already computed
            for (i = 0; i < forwardSegs.length; i++) {
                forwardSeg = forwardSegs[i];
                // figure out the child's maximum forward path
                computeSlotSegPressures(forwardSeg);
                // either use the existing maximum, or use the child's forward pressure
                // plus one (for the forwardSeg itself)
                forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);
            }
            seg.forwardPressure = forwardPressure;
        }
    }
    // Find all the segments in `otherSegs` that vertically collide with `seg`.
    // Append into an optionally-supplied `results` array and return.
    function computeSlotSegCollisions(seg, otherSegs, results) {
        if (results === void 0) { results = []; }
        for (var i = 0; i < otherSegs.length; i++) {
            if (isSlotSegCollision(seg, otherSegs[i])) {
                results.push(otherSegs[i]);
            }
        }
        return results;
    }
    // Do these segments occupy the same vertical space?
    function isSlotSegCollision(seg1, seg2) {
        return seg1.bottom > seg2.top && seg1.top < seg2.bottom;
    }
    function buildTimeGridSegCompareObj(seg) {
        var obj = buildSegCompareObj(seg);
        obj.forwardPressure = seg.forwardPressure;
        obj.backwardCoord = seg.backwardCoord;
        return obj;
    }

    var TimeGridMirrorRenderer = /** @class */ (function (_super) {
        __extends$2(TimeGridMirrorRenderer, _super);
        function TimeGridMirrorRenderer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
            this.segsByCol = this.timeGrid.groupSegsByCol(segs);
            this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);
            this.sourceSeg = mirrorInfo.sourceSeg;
        };
        TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {
            var props = _super.prototype.generateSegCss.call(this, seg);
            var sourceSeg = this.sourceSeg;
            if (sourceSeg && sourceSeg.col === seg.col) {
                var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);
                props.left = sourceSegProps.left;
                props.right = sourceSegProps.right;
                props.marginLeft = sourceSegProps.marginLeft;
                props.marginRight = sourceSegProps.marginRight;
            }
            return props;
        };
        return TimeGridMirrorRenderer;
    }(TimeGridEventRenderer));

    var TimeGridFillRenderer = /** @class */ (function (_super) {
        __extends$2(TimeGridFillRenderer, _super);
        function TimeGridFillRenderer(timeGrid) {
            var _this = _super.call(this, timeGrid.context) || this;
            _this.timeGrid = timeGrid;
            return _this;
        }
        TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {
            var timeGrid = this.timeGrid;
            var containerEls;
            // TODO: more efficient lookup
            if (type === 'bgEvent') {
                containerEls = timeGrid.bgContainerEls;
            }
            else if (type === 'businessHours') {
                containerEls = timeGrid.businessContainerEls;
            }
            else if (type === 'highlight') {
                containerEls = timeGrid.highlightContainerEls;
            }
            timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);
            return segs.map(function (seg) {
                return seg.el;
            });
        };
        TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {
            this.timeGrid.computeSegVerticals(segs);
        };
        TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {
            this.timeGrid.assignSegVerticals(segs);
        };
        return TimeGridFillRenderer;
    }(FillRenderer));

    /* A component that renders one or more columns of vertical time slots
    ----------------------------------------------------------------------------------------------------------------------*/
    // potential nice values for the slot-duration and interval-duration
    // from largest to smallest
    var AGENDA_STOCK_SUB_DURATIONS = [
        { hours: 1 },
        { minutes: 30 },
        { minutes: 15 },
        { seconds: 30 },
        { seconds: 15 }
    ];
    var TimeGrid = /** @class */ (function (_super) {
        __extends$2(TimeGrid, _super);
        function TimeGrid(context, el, renderProps) {
            var _this = _super.call(this, context, el) || this;
            _this.isSlatSizesDirty = false;
            _this.isColSizesDirty = false;
            _this.renderSlats = memoizeRendering(_this._renderSlats);
            var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);
            var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);
            _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);
            var renderColumns = _this.renderColumns = memoizeRendering(_this._renderColumns, _this._unrenderColumns);
            _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);
            _this.renderDateSelection = memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);
            _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);
            _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);
            _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
            _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);
            _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);
            _this.processOptions();
            el.innerHTML =
                '<div class="fc-bg"></div>' +
                    '<div class="fc-slats"></div>' +
                    '<hr class="fc-divider ' + _this.theme.getClass('widgetHeader') + '" style="display:none" />';
            _this.rootBgContainerEl = el.querySelector('.fc-bg');
            _this.slatContainerEl = el.querySelector('.fc-slats');
            _this.bottomRuleEl = el.querySelector('.fc-divider');
            _this.renderProps = renderProps;
            return _this;
        }
        /* Options
        ------------------------------------------------------------------------------------------------------------------*/
        // Parses various options into properties of this object
        TimeGrid.prototype.processOptions = function () {
            var slotDuration = this.opt('slotDuration');
            var snapDuration = this.opt('snapDuration');
            var snapsPerSlot;
            var input;
            slotDuration = createDuration(slotDuration);
            snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration;
            snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);
            if (snapsPerSlot === null) {
                snapDuration = slotDuration;
                snapsPerSlot = 1;
                // TODO: say warning?
            }
            this.slotDuration = slotDuration;
            this.snapDuration = snapDuration;
            this.snapsPerSlot = snapsPerSlot;
            // might be an array value (for TimelineView).
            // if so, getting the most granular entry (the last one probably).
            input = this.opt('slotLabelFormat');
            if (Array.isArray(input)) {
                input = input[input.length - 1];
            }
            this.labelFormat = createFormatter(input || {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: true,
                meridiem: 'short'
            });
            input = this.opt('slotLabelInterval');
            this.labelInterval = input ?
                createDuration(input) :
                this.computeLabelInterval(slotDuration);
        };
        // Computes an automatic value for slotLabelInterval
        TimeGrid.prototype.computeLabelInterval = function (slotDuration) {
            var i;
            var labelInterval;
            var slotsPerLabel;
            // find the smallest stock label interval that results in more than one slots-per-label
            for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {
                labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);
                slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);
                if (slotsPerLabel !== null && slotsPerLabel > 1) {
                    return labelInterval;
                }
            }
            return slotDuration; // fall back
        };
        /* Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.render = function (props) {
            var cells = props.cells;
            this.colCnt = cells.length;
            this.renderSlats(props.dateProfile);
            this.renderColumns(props.cells, props.dateProfile);
            this.renderBusinessHours(props.businessHourSegs);
            this.renderDateSelection(props.dateSelectionSegs);
            this.renderFgEvents(props.fgEventSegs);
            this.renderBgEvents(props.bgEventSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDrag);
            this.renderEventResize(props.eventResize);
        };
        TimeGrid.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            // should unrender everything else too
            this.renderSlats.unrender();
            this.renderColumns.unrender();
        };
        TimeGrid.prototype.updateSize = function (isResize) {
            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;
            if (isResize || this.isSlatSizesDirty) {
                this.buildSlatPositions();
                this.isSlatSizesDirty = false;
            }
            if (isResize || this.isColSizesDirty) {
                this.buildColPositions();
                this.isColSizesDirty = false;
            }
            fillRenderer.computeSizes(isResize);
            eventRenderer.computeSizes(isResize);
            mirrorRenderer.computeSizes(isResize);
            fillRenderer.assignSizes(isResize);
            eventRenderer.assignSizes(isResize);
            mirrorRenderer.assignSizes(isResize);
        };
        TimeGrid.prototype._renderSlats = function (dateProfile) {
            var theme = this.theme;
            this.slatContainerEl.innerHTML =
                '<table class="' + theme.getClass('tableGrid') + '">' +
                    this.renderSlatRowHtml(dateProfile) +
                    '</table>';
            this.slatEls = findElements(this.slatContainerEl, 'tr');
            this.slatPositions = new PositionCache(this.el, this.slatEls, false, true // vertical
            );
            this.isSlatSizesDirty = true;
        };
        // Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
        TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {
            var _a = this, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;
            var html = '';
            var dayStart = startOfDay(dateProfile.renderRange.start);
            var slotTime = dateProfile.minTime;
            var slotIterator = createDuration(0);
            var slotDate; // will be on the view's first day, but we only care about its time
            var isLabeled;
            var axisHtml;
            // Calculate the time for each slot
            while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {
                slotDate = dateEnv.add(dayStart, slotTime);
                isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null;
                axisHtml =
                    '<td class="fc-axis fc-time ' + theme.getClass('widgetContent') + '">' +
                        (isLabeled ?
                            '<span>' + // for matchCellWidths
                                htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +
                                '</span>' :
                            '') +
                        '</td>';
                html +=
                    '<tr data-time="' + formatIsoTimeString(slotDate) + '"' +
                        (isLabeled ? '' : ' class="fc-minor"') +
                        '>' +
                        (!isRtl ? axisHtml : '') +
                        '<td class="' + theme.getClass('widgetContent') + '"></td>' +
                        (isRtl ? axisHtml : '') +
                        '</tr>';
                slotTime = addDurations(slotTime, this.slotDuration);
                slotIterator = addDurations(slotIterator, this.slotDuration);
            }
            return html;
        };
        TimeGrid.prototype._renderColumns = function (cells, dateProfile) {
            var _a = this, theme = _a.theme, dateEnv = _a.dateEnv, view = _a.view;
            var bgRow = new DayBgRow(this.context);
            this.rootBgContainerEl.innerHTML =
                '<table class="' + theme.getClass('tableGrid') + '">' +
                    bgRow.renderHtml({
                        cells: cells,
                        dateProfile: dateProfile,
                        renderIntroHtml: this.renderProps.renderBgIntroHtml
                    }) +
                    '</table>';
            this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day');
            for (var col = 0; col < this.colCnt; col++) {
                this.publiclyTrigger('dayRender', [
                    {
                        date: dateEnv.toDate(cells[col].date),
                        el: this.colEls[col],
                        view: view
                    }
                ]);
            }
            if (this.isRtl) {
                this.colEls.reverse();
            }
            this.colPositions = new PositionCache(this.el, this.colEls, true, // horizontal
            false);
            this.renderContentSkeleton();
            this.isColSizesDirty = true;
        };
        TimeGrid.prototype._unrenderColumns = function () {
            this.unrenderContentSkeleton();
        };
        /* Content Skeleton
        ------------------------------------------------------------------------------------------------------------------*/
        // Renders the DOM that the view's content will live in
        TimeGrid.prototype.renderContentSkeleton = function () {
            var parts = [];
            var skeletonEl;
            parts.push(this.renderProps.renderIntroHtml());
            for (var i = 0; i < this.colCnt; i++) {
                parts.push('<td>' +
                    '<div class="fc-content-col">' +
                    '<div class="fc-event-container fc-mirror-container"></div>' +
                    '<div class="fc-event-container"></div>' +
                    '<div class="fc-highlight-container"></div>' +
                    '<div class="fc-bgevent-container"></div>' +
                    '<div class="fc-business-container"></div>' +
                    '</div>' +
                    '</td>');
            }
            if (this.isRtl) {
                parts.reverse();
            }
            skeletonEl = this.contentSkeletonEl = htmlToElement('<div class="fc-content-skeleton">' +
                '<table>' +
                '<tr>' + parts.join('') + '</tr>' +
                '</table>' +
                '</div>');
            this.colContainerEls = findElements(skeletonEl, '.fc-content-col');
            this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container');
            this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');
            this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container');
            this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container');
            this.businessContainerEls = findElements(skeletonEl, '.fc-business-container');
            if (this.isRtl) {
                this.colContainerEls.reverse();
                this.mirrorContainerEls.reverse();
                this.fgContainerEls.reverse();
                this.bgContainerEls.reverse();
                this.highlightContainerEls.reverse();
                this.businessContainerEls.reverse();
            }
            this.el.appendChild(skeletonEl);
        };
        TimeGrid.prototype.unrenderContentSkeleton = function () {
            removeElement(this.contentSkeletonEl);
        };
        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col
        TimeGrid.prototype.groupSegsByCol = function (segs) {
            var segsByCol = [];
            var i;
            for (i = 0; i < this.colCnt; i++) {
                segsByCol.push([]);
            }
            for (i = 0; i < segs.length; i++) {
                segsByCol[segs[i].col].push(segs[i]);
            }
            return segsByCol;
        };
        // Given segments grouped by column, insert the segments' elements into a parallel array of container
        // elements, each living within a column.
        TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {
            var col;
            var segs;
            var i;
            for (col = 0; col < this.colCnt; col++) { // iterate each column grouping
                segs = segsByCol[col];
                for (i = 0; i < segs.length; i++) {
                    containerEls[col].appendChild(segs[i].el);
                }
            }
        };
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.getNowIndicatorUnit = function () {
            return 'minute'; // will refresh on the minute
        };
        TimeGrid.prototype.renderNowIndicator = function (segs, date) {
            // HACK: if date columns not ready for some reason (scheduler)
            if (!this.colContainerEls) {
                return;
            }
            var top = this.computeDateTop(date);
            var nodes = [];
            var i;
            // render lines within the columns
            for (i = 0; i < segs.length; i++) {
                var lineEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });
                lineEl.style.top = top + 'px';
                this.colContainerEls[segs[i].col].appendChild(lineEl);
                nodes.push(lineEl);
            }
            // render an arrow over the axis
            if (segs.length > 0) { // is the current time in view?
                var arrowEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });
                arrowEl.style.top = top + 'px';
                this.contentSkeletonEl.appendChild(arrowEl);
                nodes.push(arrowEl);
            }
            this.nowIndicatorEls = nodes;
        };
        TimeGrid.prototype.unrenderNowIndicator = function () {
            if (this.nowIndicatorEls) {
                this.nowIndicatorEls.forEach(removeElement);
                this.nowIndicatorEls = null;
            }
        };
        /* Coordinates
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.getTotalSlatHeight = function () {
            return this.slatContainerEl.getBoundingClientRect().height;
        };
        // Computes the top coordinate, relative to the bounds of the grid, of the given date.
        // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
        TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {
            if (!startOfDayDate) {
                startOfDayDate = startOfDay(when);
            }
            return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));
        };
        // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
        TimeGrid.prototype.computeTimeTop = function (duration) {
            var len = this.slatEls.length;
            var dateProfile = this.props.dateProfile;
            var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration); // floating-point value of # of slots covered
            var slatIndex;
            var slatRemainder;
            // compute a floating-point number for how many slats should be progressed through.
            // from 0 to number of slats (inclusive)
            // constrained because minTime/maxTime might be customized.
            slatCoverage = Math.max(0, slatCoverage);
            slatCoverage = Math.min(len, slatCoverage);
            // an integer index of the furthest whole slat
            // from 0 to number slats (*exclusive*, so len-1)
            slatIndex = Math.floor(slatCoverage);
            slatIndex = Math.min(slatIndex, len - 1);
            // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
            // could be 1.0 if slatCoverage is covering *all* the slots
            slatRemainder = slatCoverage - slatIndex;
            return this.slatPositions.tops[slatIndex] +
                this.slatPositions.getHeight(slatIndex) * slatRemainder;
        };
        // For each segment in an array, computes and assigns its top and bottom properties
        TimeGrid.prototype.computeSegVerticals = function (segs) {
            var eventMinHeight = this.opt('timeGridEventMinHeight');
            var i;
            var seg;
            var dayDate;
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                dayDate = this.props.cells[seg.col].date;
                seg.top = this.computeDateTop(seg.start, dayDate);
                seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));
            }
        };
        // Given segments that already have their top/bottom properties computed, applies those values to
        // the segments' elements.
        TimeGrid.prototype.assignSegVerticals = function (segs) {
            var i;
            var seg;
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                applyStyle(seg.el, this.generateSegVerticalCss(seg));
            }
        };
        // Generates an object with CSS properties for the top/bottom coordinates of a segment element
        TimeGrid.prototype.generateSegVerticalCss = function (seg) {
            return {
                top: seg.top,
                bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container
            };
        };
        /* Sizing
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.buildPositionCaches = function () {
            this.buildColPositions();
            this.buildSlatPositions();
        };
        TimeGrid.prototype.buildColPositions = function () {
            this.colPositions.build();
        };
        TimeGrid.prototype.buildSlatPositions = function () {
            this.slatPositions.build();
        };
        /* Hit System
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {
            var _a = this, dateEnv = _a.dateEnv, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;
            var colIndex = colPositions.leftToIndex(positionLeft);
            var slatIndex = slatPositions.topToIndex(positionTop);
            if (colIndex != null && slatIndex != null) {
                var slatTop = slatPositions.tops[slatIndex];
                var slatHeight = slatPositions.getHeight(slatIndex);
                var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1
                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat
                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
                var dayDate = this.props.cells[colIndex].date;
                var time = addDurations(this.props.dateProfile.minTime, multiplyDuration(this.snapDuration, snapIndex));
                var start = dateEnv.add(dayDate, time);
                var end = dateEnv.add(start, this.snapDuration);
                return {
                    col: colIndex,
                    dateSpan: {
                        range: { start: start, end: end },
                        allDay: false
                    },
                    dayEl: this.colEls[colIndex],
                    relativeRect: {
                        left: colPositions.lefts[colIndex],
                        right: colPositions.rights[colIndex],
                        top: slatTop,
                        bottom: slatTop + slatHeight
                    }
                };
            }
        };
        /* Event Drag Visualization
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype._renderEventDrag = function (state) {
            if (state) {
                this.eventRenderer.hideByHash(state.affectedInstances);
                if (state.isEvent) {
                    this.mirrorRenderer.renderSegs(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });
                }
                else {
                    this.fillRenderer.renderSegs('highlight', state.segs);
                }
            }
        };
        TimeGrid.prototype._unrenderEventDrag = function (state) {
            if (state) {
                this.eventRenderer.showByHash(state.affectedInstances);
                this.mirrorRenderer.unrender(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });
                this.fillRenderer.unrender('highlight');
            }
        };
        /* Event Resize Visualization
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype._renderEventResize = function (state) {
            if (state) {
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });
            }
        };
        TimeGrid.prototype._unrenderEventResize = function (state) {
            if (state) {
                this.eventRenderer.showByHash(state.affectedInstances);
                this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });
            }
        };
        /* Selection
        ------------------------------------------------------------------------------------------------------------------*/
        // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.
        TimeGrid.prototype._renderDateSelection = function (segs) {
            if (segs) {
                if (this.opt('selectMirror')) {
                    this.mirrorRenderer.renderSegs(segs, { isSelecting: true });
                }
                else {
                    this.fillRenderer.renderSegs('highlight', segs);
                }
            }
        };
        TimeGrid.prototype._unrenderDateSelection = function (segs) {
            this.mirrorRenderer.unrender(segs, { isSelecting: true });
            this.fillRenderer.unrender('highlight');
        };
        return TimeGrid;
    }(DateComponent));

    var AllDaySplitter = /** @class */ (function (_super) {
        __extends$2(AllDaySplitter, _super);
        function AllDaySplitter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AllDaySplitter.prototype.getKeyInfo = function () {
            return {
                allDay: {},
                timed: {}
            };
        };
        AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {
            if (dateSpan.allDay) {
                return ['allDay'];
            }
            else {
                return ['timed'];
            }
        };
        AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {
            if (!eventDef.allDay) {
                return ['timed'];
            }
            else if (hasBgRendering(eventDef)) {
                return ['timed', 'allDay'];
            }
            else {
                return ['allDay'];
            }
        };
        return AllDaySplitter;
    }(Splitter));

    var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;
    var WEEK_HEADER_FORMAT = createFormatter({ week: 'short' });
    /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.
    ----------------------------------------------------------------------------------------------------------------------*/
    // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).
    // Responsible for managing width/height.
    var TimeGridView = /** @class */ (function (_super) {
        __extends$2(TimeGridView, _super);
        function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;
            _this.splitter = new AllDaySplitter();
            /* Header Render Methods
            ------------------------------------------------------------------------------------------------------------------*/
            // Generates the HTML that will go before the day-of week header cells
            _this.renderHeadIntroHtml = function () {
                var _a = _this, theme = _a.theme, dateEnv = _a.dateEnv;
                var range = _this.props.dateProfile.renderRange;
                var dayCnt = diffDays(range.start, range.end);
                var weekText;
                if (_this.opt('weekNumbers')) {
                    weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);
                    return '' +
                        '<th class="fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '" ' + _this.axisStyleAttr() + '>' +
                        buildGotoAnchorHtml(// aside from link, important for matchCellWidths
                        _this, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, htmlEscape(weekText) // inner HTML
                        ) +
                        '</th>';
                }
                else {
                    return '<th class="fc-axis ' + theme.getClass('widgetHeader') + '" ' + _this.axisStyleAttr() + '></th>';
                }
            };
            /* Time Grid Render Methods
            ------------------------------------------------------------------------------------------------------------------*/
            // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.
            _this.renderTimeGridBgIntroHtml = function () {
                var theme = _this.theme;
                return '<td class="fc-axis ' + theme.getClass('widgetContent') + '" ' + _this.axisStyleAttr() + '></td>';
            };
            // Generates the HTML that goes before all other types of cells.
            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.
            _this.renderTimeGridIntroHtml = function () {
                return '<td class="fc-axis" ' + _this.axisStyleAttr() + '></td>';
            };
            /* Day Grid Render Methods
            ------------------------------------------------------------------------------------------------------------------*/
            // Generates the HTML that goes before the all-day cells
            _this.renderDayGridBgIntroHtml = function () {
                var theme = _this.theme;
                return '' +
                    '<td class="fc-axis ' + theme.getClass('widgetContent') + '" ' + _this.axisStyleAttr() + '>' +
                    '<span>' + // needed for matchCellWidths
                    getAllDayHtml(_this) +
                    '</span>' +
                    '</td>';
            };
            // Generates the HTML that goes before all other types of cells.
            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.
            _this.renderDayGridIntroHtml = function () {
                return '<td class="fc-axis" ' + _this.axisStyleAttr() + '></td>';
            };
            _this.el.classList.add('fc-timeGrid-view');
            _this.el.innerHTML = _this.renderSkeletonHtml();
            _this.scroller = new ScrollComponent('hidden', // overflow x
            'auto' // overflow y
            );
            var timeGridWrapEl = _this.scroller.el;
            _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);
            timeGridWrapEl.classList.add('fc-time-grid-container');
            var timeGridEl = createElement('div', { className: 'fc-time-grid' });
            timeGridWrapEl.appendChild(timeGridEl);
            _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {
                renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,
                renderIntroHtml: _this.renderTimeGridIntroHtml
            });
            if (_this.opt('allDaySlot')) { // should we display the "all-day" area?
                _this.dayGrid = new DayGrid(// the all-day subcomponent of this view
                _this.context, _this.el.querySelector('.fc-day-grid'), {
                    renderNumberIntroHtml: _this.renderDayGridIntroHtml,
                    renderBgIntroHtml: _this.renderDayGridBgIntroHtml,
                    renderIntroHtml: _this.renderDayGridIntroHtml,
                    colWeekNumbersVisible: false,
                    cellWeekNumbersVisible: false
                });
                // have the day-grid extend it's coordinate area over the <hr> dividing the two grids
                var dividerEl = _this.el.querySelector('.fc-divider');
                _this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;
            }
            return _this;
        }
        TimeGridView.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.timeGrid.destroy();
            if (this.dayGrid) {
                this.dayGrid.destroy();
            }
            this.scroller.destroy();
        };
        /* Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        // Builds the HTML skeleton for the view.
        // The day-grid and time-grid components will render inside containers defined by this HTML.
        TimeGridView.prototype.renderSkeletonHtml = function () {
            var theme = this.theme;
            return '' +
                '<table class="' + theme.getClass('tableGrid') + '">' +
                (this.opt('columnHeader') ?
                    '<thead class="fc-head">' +
                        '<tr>' +
                        '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' +
                        '</tr>' +
                        '</thead>' :
                    '') +
                '<tbody class="fc-body">' +
                '<tr>' +
                '<td class="' + theme.getClass('widgetContent') + '">' +
                (this.opt('allDaySlot') ?
                    '<div class="fc-day-grid"></div>' +
                        '<hr class="fc-divider ' + theme.getClass('widgetHeader') + '" />' :
                    '') +
                '</td>' +
                '</tr>' +
                '</tbody>' +
                '</table>';
        };
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGridView.prototype.getNowIndicatorUnit = function () {
            return this.timeGrid.getNowIndicatorUnit();
        };
        // subclasses should implement
        // renderNowIndicator(date: DateMarker) {
        // }
        TimeGridView.prototype.unrenderNowIndicator = function () {
            this.timeGrid.unrenderNowIndicator();
        };
        /* Dimensions
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first
            this.timeGrid.updateSize(isResize);
            if (this.dayGrid) {
                this.dayGrid.updateSize(isResize);
            }
        };
        // Adjusts the vertical dimensions of the view to the specified values
        TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {
            var _this = this;
            var eventLimit;
            var scrollerHeight;
            var scrollbarWidths;
            // make all axis cells line up
            this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis'));
            // hack to give the view some height prior to timeGrid's columns being rendered
            // TODO: separate setting height from scroller VS timeGrid.
            if (!this.timeGrid.colEls) {
                if (!isAuto) {
                    scrollerHeight = this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                return;
            }
            // set of fake row elements that must compensate when scroller has scrollbars
            var noScrollRowEls = findElements(this.el, '.fc-row').filter(function (node) {
                return !_this.scroller.el.contains(node);
            });
            // reset all dimensions back to the original state
            this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary
            this.scroller.clear(); // sets height to 'auto' and clears overflow
            noScrollRowEls.forEach(uncompensateScroll);
            // limit number of events in the all-day area
            if (this.dayGrid) {
                this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed
                eventLimit = this.opt('eventLimit');
                if (eventLimit && typeof eventLimit !== 'number') {
                    eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number
                }
                if (eventLimit) {
                    this.dayGrid.limitRows(eventLimit);
                }
            }
            if (!isAuto) { // should we force dimensions of the scroll container?
                scrollerHeight = this.computeScrollerHeight(viewHeight);
                this.scroller.setHeight(scrollerHeight);
                scrollbarWidths = this.scroller.getScrollbarWidths();
                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?
                    // make the all-day and header rows lines up
                    noScrollRowEls.forEach(function (rowEl) {
                        compensateScroll(rowEl, scrollbarWidths);
                    });
                    // the scrollbar compensation might have changed text flow, which might affect height, so recalculate
                    // and reapply the desired height to the scroller.
                    scrollerHeight = this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                // guarantees the same scrollbar widths
                this.scroller.lockOverflow(scrollbarWidths);
                // if there's any space below the slats, show the horizontal rule.
                // this won't cause any new overflow, because lockOverflow already called.
                if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {
                    this.timeGrid.bottomRuleEl.style.display = '';
                }
            }
        };
        // given a desired total height of the view, returns what the height of the scroller should be
        TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {
            return viewHeight -
                subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
        };
        /* Scroll
        ------------------------------------------------------------------------------------------------------------------*/
        // Computes the initial pre-configured scroll state prior to allowing the user to change it
        TimeGridView.prototype.computeDateScroll = function (duration) {
            var top = this.timeGrid.computeTimeTop(duration);
            // zoom can give weird floating-point values. rather scroll a little bit further
            top = Math.ceil(top);
            if (top) {
                top++; // to overcome top border that slots beyond the first have. looks better
            }
            return { top: top };
        };
        TimeGridView.prototype.queryDateScroll = function () {
            return { top: this.scroller.getScrollTop() };
        };
        TimeGridView.prototype.applyDateScroll = function (scroll) {
            if (scroll.top !== undefined) {
                this.scroller.setScrollTop(scroll.top);
            }
        };
        // Generates an HTML attribute string for setting the width of the axis, if it is known
        TimeGridView.prototype.axisStyleAttr = function () {
            if (this.axisWidth != null) {
                return 'style="width:' + this.axisWidth + 'px"';
            }
            return '';
        };
        return TimeGridView;
    }(View));
    TimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering

    var SimpleTimeGrid = /** @class */ (function (_super) {
        __extends$2(SimpleTimeGrid, _super);
        function SimpleTimeGrid(context, timeGrid) {
            var _this = _super.call(this, context, timeGrid.el) || this;
            _this.buildDayRanges = memoize$1(buildDayRanges);
            _this.slicer = new TimeGridSlicer();
            _this.timeGrid = timeGrid;
            context.calendar.registerInteractiveComponent(_this, {
                el: _this.timeGrid.el
            });
            return _this;
        }
        SimpleTimeGrid.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.calendar.unregisterInteractiveComponent(this);
        };
        SimpleTimeGrid.prototype.render = function (props) {
            var dateProfile = props.dateProfile, dayTable = props.dayTable;
            var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);
            this.timeGrid.receiveProps(__assign$2({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }));
        };
        SimpleTimeGrid.prototype.renderNowIndicator = function (date) {
            this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);
        };
        SimpleTimeGrid.prototype.buildPositionCaches = function () {
            this.timeGrid.buildPositionCaches();
        };
        SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {
            var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);
            if (rawHit) {
                return {
                    component: this.timeGrid,
                    dateSpan: rawHit.dateSpan,
                    dayEl: rawHit.dayEl,
                    rect: {
                        left: rawHit.relativeRect.left,
                        right: rawHit.relativeRect.right,
                        top: rawHit.relativeRect.top,
                        bottom: rawHit.relativeRect.bottom
                    },
                    layer: 0
                };
            }
        };
        return SimpleTimeGrid;
    }(DateComponent));
    function buildDayRanges(dayTable, dateProfile, dateEnv) {
        var ranges = [];
        for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {
            var date = _a[_i];
            ranges.push({
                start: dateEnv.add(date, dateProfile.minTime),
                end: dateEnv.add(date, dateProfile.maxTime)
            });
        }
        return ranges;
    }
    var TimeGridSlicer = /** @class */ (function (_super) {
        __extends$2(TimeGridSlicer, _super);
        function TimeGridSlicer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {
            var segs = [];
            for (var col = 0; col < dayRanges.length; col++) {
                var segRange = intersectRanges(range, dayRanges[col]);
                if (segRange) {
                    segs.push({
                        start: segRange.start,
                        end: segRange.end,
                        isStart: segRange.start.valueOf() === range.start.valueOf(),
                        isEnd: segRange.end.valueOf() === range.end.valueOf(),
                        col: col
                    });
                }
            }
            return segs;
        };
        return TimeGridSlicer;
    }(Slicer));

    var TimeGridView$1 = /** @class */ (function (_super) {
        __extends$2(TimeGridView, _super);
        function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;
            _this.buildDayTable = memoize$1(buildDayTable$1);
            if (_this.opt('columnHeader')) {
                _this.header = new DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));
            }
            _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);
            if (_this.dayGrid) {
                _this.simpleDayGrid = new SimpleDayGrid(_this.context, _this.dayGrid);
            }
            return _this;
        }
        TimeGridView.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            if (this.header) {
                this.header.destroy();
            }
            this.simpleTimeGrid.destroy();
            if (this.simpleDayGrid) {
                this.simpleDayGrid.destroy();
            }
        };
        TimeGridView.prototype.render = function (props) {
            _super.prototype.render.call(this, props); // for flags for updateSize
            var dateProfile = this.props.dateProfile;
            var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);
            var splitProps = this.splitter.splitProps(props);
            if (this.header) {
                this.header.receiveProps({
                    dateProfile: dateProfile,
                    dates: dayTable.headerDates,
                    datesRepDistinctDays: true,
                    renderIntroHtml: this.renderHeadIntroHtml
                });
            }
            this.simpleTimeGrid.receiveProps(__assign$2({}, splitProps['timed'], { dateProfile: dateProfile,
                dayTable: dayTable }));
            if (this.simpleDayGrid) {
                this.simpleDayGrid.receiveProps(__assign$2({}, splitProps['allDay'], { dateProfile: dateProfile,
                    dayTable: dayTable, nextDayThreshold: this.nextDayThreshold, isRigid: false }));
            }
        };
        TimeGridView.prototype.renderNowIndicator = function (date) {
            this.simpleTimeGrid.renderNowIndicator(date);
        };
        return TimeGridView;
    }(TimeGridView));
    function buildDayTable$1(dateProfile, dateProfileGenerator) {
        var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);
        return new DayTable(daySeries, false);
    }

    var main$1 = createPlugin({
        defaultView: 'timeGridWeek',
        views: {
            timeGrid: {
                class: TimeGridView$1,
                allDaySlot: true,
                slotDuration: '00:30:00',
                slotEventOverlap: true // a bad name. confused with overlap/constraint system
            },
            timeGridDay: {
                type: 'timeGrid',
                duration: { days: 1 }
            },
            timeGridWeek: {
                type: 'timeGrid',
                duration: { weeks: 1 }
            }
        }
    });

    /*!
    FullCalendar List View Plugin v4.3.0
    Docs & License: https://fullcalendar.io/
    (c) 2019 Adam Shaw
    */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$3 = function(d, b) {
        extendStatics$3 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$3(d, b);
    };

    function __extends$3(d, b) {
        extendStatics$3(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var ListEventRenderer = /** @class */ (function (_super) {
        __extends$3(ListEventRenderer, _super);
        function ListEventRenderer(listView) {
            var _this = _super.call(this, listView.context) || this;
            _this.listView = listView;
            return _this;
        }
        ListEventRenderer.prototype.attachSegs = function (segs) {
            if (!segs.length) {
                this.listView.renderEmptyMessage();
            }
            else {
                this.listView.renderSegList(segs);
            }
        };
        ListEventRenderer.prototype.detachSegs = function () {
        };
        // generates the HTML for a single event row
        ListEventRenderer.prototype.renderSegHtml = function (seg) {
            var _a = this.context, view = _a.view, theme = _a.theme;
            var eventRange = seg.eventRange;
            var eventDef = eventRange.def;
            var eventInstance = eventRange.instance;
            var eventUi = eventRange.ui;
            var url = eventDef.url;
            var classes = ['fc-list-item'].concat(eventUi.classNames);
            var bgColor = eventUi.backgroundColor;
            var timeHtml;
            if (eventDef.allDay) {
                timeHtml = getAllDayHtml(view);
            }
            else if (isMultiDayRange(eventRange.range)) {
                if (seg.isStart) {
                    timeHtml = htmlEscape(this._getTimeText(eventInstance.range.start, seg.end, false // allDay
                    ));
                }
                else if (seg.isEnd) {
                    timeHtml = htmlEscape(this._getTimeText(seg.start, eventInstance.range.end, false // allDay
                    ));
                }
                else { // inner segment that lasts the whole day
                    timeHtml = getAllDayHtml(view);
                }
            }
            else {
                // Display the normal time text for the *event's* times
                timeHtml = htmlEscape(this.getTimeText(eventRange));
            }
            if (url) {
                classes.push('fc-has-url');
            }
            return '<tr class="' + classes.join(' ') + '">' +
                (this.displayEventTime ?
                    '<td class="fc-list-item-time ' + theme.getClass('widgetContent') + '">' +
                        (timeHtml || '') +
                        '</td>' :
                    '') +
                '<td class="fc-list-item-marker ' + theme.getClass('widgetContent') + '">' +
                '<span class="fc-event-dot"' +
                (bgColor ?
                    ' style="background-color:' + bgColor + '"' :
                    '') +
                '></span>' +
                '</td>' +
                '<td class="fc-list-item-title ' + theme.getClass('widgetContent') + '">' +
                '<a' + (url ? ' href="' + htmlEscape(url) + '"' : '') + '>' +
                htmlEscape(eventDef.title || '') +
                '</a>' +
                '</td>' +
                '</tr>';
        };
        // like "4:00am"
        ListEventRenderer.prototype.computeEventTimeFormat = function () {
            return {
                hour: 'numeric',
                minute: '2-digit',
                meridiem: 'short'
            };
        };
        return ListEventRenderer;
    }(FgEventRenderer));

    /*
    Responsible for the scroller, and forwarding event-related actions into the "grid".
    */
    var ListView = /** @class */ (function (_super) {
        __extends$3(ListView, _super);
        function ListView(context, viewSpec, dateProfileGenerator, parentEl) {
            var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;
            _this.computeDateVars = memoize$1(computeDateVars);
            _this.eventStoreToSegs = memoize$1(_this._eventStoreToSegs);
            var eventRenderer = _this.eventRenderer = new ListEventRenderer(_this);
            _this.renderContent = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer));
            _this.el.classList.add('fc-list-view');
            var listViewClassNames = (_this.theme.getClass('listView') || '').split(' '); // wish we didn't have to do this
            for (var _i = 0, listViewClassNames_1 = listViewClassNames; _i < listViewClassNames_1.length; _i++) {
                var listViewClassName = listViewClassNames_1[_i];
                if (listViewClassName) { // in case input was empty string
                    _this.el.classList.add(listViewClassName);
                }
            }
            _this.scroller = new ScrollComponent('hidden', // overflow x
            'auto' // overflow y
            );
            _this.el.appendChild(_this.scroller.el);
            _this.contentEl = _this.scroller.el; // shortcut
            context.calendar.registerInteractiveComponent(_this, {
                el: _this.el
                // TODO: make aware that it doesn't do Hits
            });
            return _this;
        }
        ListView.prototype.render = function (props) {
            var _a = this.computeDateVars(props.dateProfile), dayDates = _a.dayDates, dayRanges = _a.dayRanges;
            this.dayDates = dayDates;
            this.renderContent(this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges));
        };
        ListView.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.renderContent.unrender();
            this.scroller.destroy(); // will remove the Grid too
            this.calendar.unregisterInteractiveComponent(this);
        };
        ListView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto);
            this.eventRenderer.computeSizes(isResize);
            this.eventRenderer.assignSizes(isResize);
            this.scroller.clear(); // sets height to 'auto' and clears overflow
            if (!isAuto) {
                this.scroller.setHeight(this.computeScrollerHeight(viewHeight));
            }
        };
        ListView.prototype.computeScrollerHeight = function (viewHeight) {
            return viewHeight -
                subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller
        };
        ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {
            return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.nextDayThreshold).fg, dayRanges);
        };
        ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {
            var segs = [];
            for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
                var eventRange = eventRanges_1[_i];
                segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));
            }
            return segs;
        };
        ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {
            var _a = this, dateEnv = _a.dateEnv, nextDayThreshold = _a.nextDayThreshold;
            var range = eventRange.range;
            var allDay = eventRange.def.allDay;
            var dayIndex;
            var segRange;
            var seg;
            var segs = [];
            for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {
                segRange = intersectRanges(range, dayRanges[dayIndex]);
                if (segRange) {
                    seg = {
                        component: this,
                        eventRange: eventRange,
                        start: segRange.start,
                        end: segRange.end,
                        isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),
                        isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),
                        dayIndex: dayIndex
                    };
                    segs.push(seg);
                    // detect when range won't go fully into the next day,
                    // and mutate the latest seg to the be the end.
                    if (!seg.isEnd && !allDay &&
                        dayIndex + 1 < dayRanges.length &&
                        range.end <
                            dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {
                        seg.end = range.end;
                        seg.isEnd = true;
                        break;
                    }
                }
            }
            return segs;
        };
        ListView.prototype.renderEmptyMessage = function () {
            this.contentEl.innerHTML =
                '<div class="fc-list-empty-wrap2">' + // TODO: try less wraps
                    '<div class="fc-list-empty-wrap1">' +
                    '<div class="fc-list-empty">' +
                    htmlEscape(this.opt('noEventsMessage')) +
                    '</div>' +
                    '</div>' +
                    '</div>';
        };
        // called by ListEventRenderer
        ListView.prototype.renderSegList = function (allSegs) {
            var segsByDay = this.groupSegsByDay(allSegs); // sparse array
            var dayIndex;
            var daySegs;
            var i;
            var tableEl = htmlToElement('<table class="fc-list-table ' + this.calendar.theme.getClass('tableList') + '"><tbody></tbody></table>');
            var tbodyEl = tableEl.querySelector('tbody');
            for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {
                daySegs = segsByDay[dayIndex];
                if (daySegs) { // sparse array, so might be undefined
                    // append a day header
                    tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));
                    daySegs = this.eventRenderer.sortEventSegs(daySegs);
                    for (i = 0; i < daySegs.length; i++) {
                        tbodyEl.appendChild(daySegs[i].el); // append event row
                    }
                }
            }
            this.contentEl.innerHTML = '';
            this.contentEl.appendChild(tableEl);
        };
        // Returns a sparse array of arrays, segs grouped by their dayIndex
        ListView.prototype.groupSegsByDay = function (segs) {
            var segsByDay = []; // sparse array
            var i;
            var seg;
            for (i = 0; i < segs.length; i++) {
                seg = segs[i];
                (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))
                    .push(seg);
            }
            return segsByDay;
        };
        // generates the HTML for the day headers that live amongst the event rows
        ListView.prototype.buildDayHeaderRow = function (dayDate) {
            var dateEnv = this.dateEnv;
            var mainFormat = createFormatter(this.opt('listDayFormat')); // TODO: cache
            var altFormat = createFormatter(this.opt('listDayAltFormat')); // TODO: cache
            return createElement('tr', {
                className: 'fc-list-heading',
                'data-date': dateEnv.formatIso(dayDate, { omitTime: true })
            }, '<td class="' + (this.calendar.theme.getClass('tableListHeading') ||
                this.calendar.theme.getClass('widgetHeader')) + '" colspan="3">' +
                (mainFormat ?
                    buildGotoAnchorHtml(this, dayDate, { 'class': 'fc-list-heading-main' }, htmlEscape(dateEnv.format(dayDate, mainFormat)) // inner HTML
                    ) :
                    '') +
                (altFormat ?
                    buildGotoAnchorHtml(this, dayDate, { 'class': 'fc-list-heading-alt' }, htmlEscape(dateEnv.format(dayDate, altFormat)) // inner HTML
                    ) :
                    '') +
                '</td>');
        };
        return ListView;
    }(View));
    ListView.prototype.fgSegSelector = '.fc-list-item'; // which elements accept event actions
    function computeDateVars(dateProfile) {
        var dayStart = startOfDay(dateProfile.renderRange.start);
        var viewEnd = dateProfile.renderRange.end;
        var dayDates = [];
        var dayRanges = [];
        while (dayStart < viewEnd) {
            dayDates.push(dayStart);
            dayRanges.push({
                start: dayStart,
                end: addDays$1(dayStart, 1)
            });
            dayStart = addDays$1(dayStart, 1);
        }
        return { dayDates: dayDates, dayRanges: dayRanges };
    }

    var main$2 = createPlugin({
        views: {
            list: {
                class: ListView,
                buttonTextKey: 'list',
                listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' } // like "January 1, 2016"
            },
            listDay: {
                type: 'list',
                duration: { days: 1 },
                listDayFormat: { weekday: 'long' } // day-of-week is all we need. full date is probably in header
            },
            listWeek: {
                type: 'list',
                duration: { weeks: 1 },
                listDayFormat: { weekday: 'long' },
                listDayAltFormat: { month: 'long', day: 'numeric', year: 'numeric' }
            },
            listMonth: {
                type: 'list',
                duration: { month: 1 },
                listDayAltFormat: { weekday: 'long' } // day-of-week is nice-to-have
            },
            listYear: {
                type: 'list',
                duration: { year: 1 },
                listDayAltFormat: { weekday: 'long' } // day-of-week is nice-to-have
            }
        }
    });

    /*!
    FullCalendar Interaction Plugin v4.3.0
    Docs & License: https://fullcalendar.io/
    (c) 2019 Adam Shaw
    */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$4 = function(d, b) {
        extendStatics$4 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$4(d, b);
    };

    function __extends$4(d, b) {
        extendStatics$4(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$3 = function() {
        __assign$3 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$3.apply(this, arguments);
    };

    config.touchMouseIgnoreWait = 500;
    var ignoreMouseDepth = 0;
    var listenerCnt = 0;
    var isWindowTouchMoveCancelled = false;
    /*
    Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
    Tracks when the pointer "drags" on a certain element, meaning down+move+up.

    Also, tracks if there was touch-scrolling.
    Also, can prevent touch-scrolling from happening.
    Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.

    emits:
    - pointerdown
    - pointermove
    - pointerup
    */
    var PointerDragging = /** @class */ (function () {
        function PointerDragging(containerEl) {
            var _this = this;
            this.subjectEl = null;
            this.downEl = null;
            // options that can be directly assigned by caller
            this.selector = ''; // will cause subjectEl in all emitted events to be this element
            this.handleSelector = '';
            this.shouldIgnoreMove = false;
            this.shouldWatchScroll = true; // for simulating pointermove on scroll
            // internal states
            this.isDragging = false;
            this.isTouchDragging = false;
            this.wasTouchScroll = false;
            // Mouse
            // ----------------------------------------------------------------------------------------------------
            this.handleMouseDown = function (ev) {
                if (!_this.shouldIgnoreMouse() &&
                    isPrimaryMouseButton(ev) &&
                    _this.tryStart(ev)) {
                    var pev = _this.createEventFromMouse(ev, true);
                    _this.emitter.trigger('pointerdown', pev);
                    _this.initScrollWatch(pev);
                    if (!_this.shouldIgnoreMove) {
                        document.addEventListener('mousemove', _this.handleMouseMove);
                    }
                    document.addEventListener('mouseup', _this.handleMouseUp);
                }
            };
            this.handleMouseMove = function (ev) {
                var pev = _this.createEventFromMouse(ev);
                _this.recordCoords(pev);
                _this.emitter.trigger('pointermove', pev);
            };
            this.handleMouseUp = function (ev) {
                document.removeEventListener('mousemove', _this.handleMouseMove);
                document.removeEventListener('mouseup', _this.handleMouseUp);
                _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));
                _this.cleanup(); // call last so that pointerup has access to props
            };
            // Touch
            // ----------------------------------------------------------------------------------------------------
            this.handleTouchStart = function (ev) {
                if (_this.tryStart(ev)) {
                    _this.isTouchDragging = true;
                    var pev = _this.createEventFromTouch(ev, true);
                    _this.emitter.trigger('pointerdown', pev);
                    _this.initScrollWatch(pev);
                    // unlike mouse, need to attach to target, not document
                    // https://stackoverflow.com/a/45760014
                    var target = ev.target;
                    if (!_this.shouldIgnoreMove) {
                        target.addEventListener('touchmove', _this.handleTouchMove);
                    }
                    target.addEventListener('touchend', _this.handleTouchEnd);
                    target.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end
                    // attach a handler to get called when ANY scroll action happens on the page.
                    // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
                    // http://stackoverflow.com/a/32954565/96342
                    window.addEventListener('scroll', _this.handleTouchScroll, true // useCapture
                    );
                }
            };
            this.handleTouchMove = function (ev) {
                var pev = _this.createEventFromTouch(ev);
                _this.recordCoords(pev);
                _this.emitter.trigger('pointermove', pev);
            };
            this.handleTouchEnd = function (ev) {
                if (_this.isDragging) { // done to guard against touchend followed by touchcancel
                    var target = ev.target;
                    target.removeEventListener('touchmove', _this.handleTouchMove);
                    target.removeEventListener('touchend', _this.handleTouchEnd);
                    target.removeEventListener('touchcancel', _this.handleTouchEnd);
                    window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true
                    _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));
                    _this.cleanup(); // call last so that pointerup has access to props
                    _this.isTouchDragging = false;
                    startIgnoringMouse();
                }
            };
            this.handleTouchScroll = function () {
                _this.wasTouchScroll = true;
            };
            this.handleScroll = function (ev) {
                if (!_this.shouldIgnoreMove) {
                    var pageX = (window.pageXOffset - _this.prevScrollX) + _this.prevPageX;
                    var pageY = (window.pageYOffset - _this.prevScrollY) + _this.prevPageY;
                    _this.emitter.trigger('pointermove', {
                        origEvent: ev,
                        isTouch: _this.isTouchDragging,
                        subjectEl: _this.subjectEl,
                        pageX: pageX,
                        pageY: pageY,
                        deltaX: pageX - _this.origPageX,
                        deltaY: pageY - _this.origPageY
                    });
                }
            };
            this.containerEl = containerEl;
            this.emitter = new EmitterMixin();
            containerEl.addEventListener('mousedown', this.handleMouseDown);
            containerEl.addEventListener('touchstart', this.handleTouchStart, { passive: true });
            listenerCreated();
        }
        PointerDragging.prototype.destroy = function () {
            this.containerEl.removeEventListener('mousedown', this.handleMouseDown);
            this.containerEl.removeEventListener('touchstart', this.handleTouchStart, { passive: true });
            listenerDestroyed();
        };
        PointerDragging.prototype.tryStart = function (ev) {
            var subjectEl = this.querySubjectEl(ev);
            var downEl = ev.target;
            if (subjectEl &&
                (!this.handleSelector || elementClosest(downEl, this.handleSelector))) {
                this.subjectEl = subjectEl;
                this.downEl = downEl;
                this.isDragging = true; // do this first so cancelTouchScroll will work
                this.wasTouchScroll = false;
                return true;
            }
            return false;
        };
        PointerDragging.prototype.cleanup = function () {
            isWindowTouchMoveCancelled = false;
            this.isDragging = false;
            this.subjectEl = null;
            this.downEl = null;
            // keep wasTouchScroll around for later access
            this.destroyScrollWatch();
        };
        PointerDragging.prototype.querySubjectEl = function (ev) {
            if (this.selector) {
                return elementClosest(ev.target, this.selector);
            }
            else {
                return this.containerEl;
            }
        };
        PointerDragging.prototype.shouldIgnoreMouse = function () {
            return ignoreMouseDepth || this.isTouchDragging;
        };
        // can be called by user of this class, to cancel touch-based scrolling for the current drag
        PointerDragging.prototype.cancelTouchScroll = function () {
            if (this.isDragging) {
                isWindowTouchMoveCancelled = true;
            }
        };
        // Scrolling that simulates pointermoves
        // ----------------------------------------------------------------------------------------------------
        PointerDragging.prototype.initScrollWatch = function (ev) {
            if (this.shouldWatchScroll) {
                this.recordCoords(ev);
                window.addEventListener('scroll', this.handleScroll, true); // useCapture=true
            }
        };
        PointerDragging.prototype.recordCoords = function (ev) {
            if (this.shouldWatchScroll) {
                this.prevPageX = ev.pageX;
                this.prevPageY = ev.pageY;
                this.prevScrollX = window.pageXOffset;
                this.prevScrollY = window.pageYOffset;
            }
        };
        PointerDragging.prototype.destroyScrollWatch = function () {
            if (this.shouldWatchScroll) {
                window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true
            }
        };
        // Event Normalization
        // ----------------------------------------------------------------------------------------------------
        PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {
            var deltaX = 0;
            var deltaY = 0;
            // TODO: repeat code
            if (isFirst) {
                this.origPageX = ev.pageX;
                this.origPageY = ev.pageY;
            }
            else {
                deltaX = ev.pageX - this.origPageX;
                deltaY = ev.pageY - this.origPageY;
            }
            return {
                origEvent: ev,
                isTouch: false,
                subjectEl: this.subjectEl,
                pageX: ev.pageX,
                pageY: ev.pageY,
                deltaX: deltaX,
                deltaY: deltaY
            };
        };
        PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {
            var touches = ev.touches;
            var pageX;
            var pageY;
            var deltaX = 0;
            var deltaY = 0;
            // if touch coords available, prefer,
            // because FF would give bad ev.pageX ev.pageY
            if (touches && touches.length) {
                pageX = touches[0].pageX;
                pageY = touches[0].pageY;
            }
            else {
                pageX = ev.pageX;
                pageY = ev.pageY;
            }
            // TODO: repeat code
            if (isFirst) {
                this.origPageX = pageX;
                this.origPageY = pageY;
            }
            else {
                deltaX = pageX - this.origPageX;
                deltaY = pageY - this.origPageY;
            }
            return {
                origEvent: ev,
                isTouch: true,
                subjectEl: this.subjectEl,
                pageX: pageX,
                pageY: pageY,
                deltaX: deltaX,
                deltaY: deltaY
            };
        };
        return PointerDragging;
    }());
    // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)
    function isPrimaryMouseButton(ev) {
        return ev.button === 0 && !ev.ctrlKey;
    }
    // Ignoring fake mouse events generated by touch
    // ----------------------------------------------------------------------------------------------------
    function startIgnoringMouse() {
        ignoreMouseDepth++;
        setTimeout(function () {
            ignoreMouseDepth--;
        }, config.touchMouseIgnoreWait);
    }
    // We want to attach touchmove as early as possible for Safari
    // ----------------------------------------------------------------------------------------------------
    function listenerCreated() {
        if (!(listenerCnt++)) {
            window.addEventListener('touchmove', onWindowTouchMove, { passive: false });
        }
    }
    function listenerDestroyed() {
        if (!(--listenerCnt)) {
            window.removeEventListener('touchmove', onWindowTouchMove, { passive: false });
        }
    }
    function onWindowTouchMove(ev) {
        if (isWindowTouchMoveCancelled) {
            ev.preventDefault();
        }
    }

    /*
    An effect in which an element follows the movement of a pointer across the screen.
    The moving element is a clone of some other element.
    Must call start + handleMove + stop.
    */
    var ElementMirror = /** @class */ (function () {
        function ElementMirror() {
            this.isVisible = false; // must be explicitly enabled
            this.sourceEl = null;
            this.mirrorEl = null;
            this.sourceElRect = null; // screen coords relative to viewport
            // options that can be set directly by caller
            this.parentNode = document.body;
            this.zIndex = 9999;
            this.revertDuration = 0;
        }
        ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {
            this.sourceEl = sourceEl;
            this.sourceElRect = this.sourceEl.getBoundingClientRect();
            this.origScreenX = pageX - window.pageXOffset;
            this.origScreenY = pageY - window.pageYOffset;
            this.deltaX = 0;
            this.deltaY = 0;
            this.updateElPosition();
        };
        ElementMirror.prototype.handleMove = function (pageX, pageY) {
            this.deltaX = (pageX - window.pageXOffset) - this.origScreenX;
            this.deltaY = (pageY - window.pageYOffset) - this.origScreenY;
            this.updateElPosition();
        };
        // can be called before start
        ElementMirror.prototype.setIsVisible = function (bool) {
            if (bool) {
                if (!this.isVisible) {
                    if (this.mirrorEl) {
                        this.mirrorEl.style.display = '';
                    }
                    this.isVisible = bool; // needs to happen before updateElPosition
                    this.updateElPosition(); // because was not updating the position while invisible
                }
            }
            else {
                if (this.isVisible) {
                    if (this.mirrorEl) {
                        this.mirrorEl.style.display = 'none';
                    }
                    this.isVisible = bool;
                }
            }
        };
        // always async
        ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {
            var _this = this;
            var done = function () {
                _this.cleanup();
                callback();
            };
            if (needsRevertAnimation &&
                this.mirrorEl &&
                this.isVisible &&
                this.revertDuration && // if 0, transition won't work
                (this.deltaX || this.deltaY) // if same coords, transition won't work
            ) {
                this.doRevertAnimation(done, this.revertDuration);
            }
            else {
                setTimeout(done, 0);
            }
        };
        ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {
            var mirrorEl = this.mirrorEl;
            var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened
            mirrorEl.style.transition =
                'top ' + revertDuration + 'ms,' +
                    'left ' + revertDuration + 'ms';
            applyStyle(mirrorEl, {
                left: finalSourceElRect.left,
                top: finalSourceElRect.top
            });
            whenTransitionDone(mirrorEl, function () {
                mirrorEl.style.transition = '';
                callback();
            });
        };
        ElementMirror.prototype.cleanup = function () {
            if (this.mirrorEl) {
                removeElement(this.mirrorEl);
                this.mirrorEl = null;
            }
            this.sourceEl = null;
        };
        ElementMirror.prototype.updateElPosition = function () {
            if (this.sourceEl && this.isVisible) {
                applyStyle(this.getMirrorEl(), {
                    left: this.sourceElRect.left + this.deltaX,
                    top: this.sourceElRect.top + this.deltaY
                });
            }
        };
        ElementMirror.prototype.getMirrorEl = function () {
            var sourceElRect = this.sourceElRect;
            var mirrorEl = this.mirrorEl;
            if (!mirrorEl) {
                mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true
                // we don't want long taps or any mouse interaction causing selection/menus.
                // would use preventSelection(), but that prevents selectstart, causing problems.
                mirrorEl.classList.add('fc-unselectable');
                mirrorEl.classList.add('fc-dragging');
                applyStyle(mirrorEl, {
                    position: 'fixed',
                    zIndex: this.zIndex,
                    visibility: '',
                    boxSizing: 'border-box',
                    width: sourceElRect.right - sourceElRect.left,
                    height: sourceElRect.bottom - sourceElRect.top,
                    right: 'auto',
                    bottom: 'auto',
                    margin: 0
                });
                this.parentNode.appendChild(mirrorEl);
            }
            return mirrorEl;
        };
        return ElementMirror;
    }());

    /*
    Is a cache for a given element's scroll information (all the info that ScrollController stores)
    in addition the "client rectangle" of the element.. the area within the scrollbars.

    The cache can be in one of two modes:
    - doesListening:false - ignores when the container is scrolled by someone else
    - doesListening:true - watch for scrolling and update the cache
    */
    var ScrollGeomCache = /** @class */ (function (_super) {
        __extends$4(ScrollGeomCache, _super);
        function ScrollGeomCache(scrollController, doesListening) {
            var _this = _super.call(this) || this;
            _this.handleScroll = function () {
                _this.scrollTop = _this.scrollController.getScrollTop();
                _this.scrollLeft = _this.scrollController.getScrollLeft();
                _this.handleScrollChange();
            };
            _this.scrollController = scrollController;
            _this.doesListening = doesListening;
            _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();
            _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();
            _this.scrollWidth = scrollController.getScrollWidth();
            _this.scrollHeight = scrollController.getScrollHeight();
            _this.clientWidth = scrollController.getClientWidth();
            _this.clientHeight = scrollController.getClientHeight();
            _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values
            if (_this.doesListening) {
                _this.getEventTarget().addEventListener('scroll', _this.handleScroll);
            }
            return _this;
        }
        ScrollGeomCache.prototype.destroy = function () {
            if (this.doesListening) {
                this.getEventTarget().removeEventListener('scroll', this.handleScroll);
            }
        };
        ScrollGeomCache.prototype.getScrollTop = function () {
            return this.scrollTop;
        };
        ScrollGeomCache.prototype.getScrollLeft = function () {
            return this.scrollLeft;
        };
        ScrollGeomCache.prototype.setScrollTop = function (top) {
            this.scrollController.setScrollTop(top);
            if (!this.doesListening) {
                // we are not relying on the element to normalize out-of-bounds scroll values
                // so we need to sanitize ourselves
                this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);
                this.handleScrollChange();
            }
        };
        ScrollGeomCache.prototype.setScrollLeft = function (top) {
            this.scrollController.setScrollLeft(top);
            if (!this.doesListening) {
                // we are not relying on the element to normalize out-of-bounds scroll values
                // so we need to sanitize ourselves
                this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);
                this.handleScrollChange();
            }
        };
        ScrollGeomCache.prototype.getClientWidth = function () {
            return this.clientWidth;
        };
        ScrollGeomCache.prototype.getClientHeight = function () {
            return this.clientHeight;
        };
        ScrollGeomCache.prototype.getScrollWidth = function () {
            return this.scrollWidth;
        };
        ScrollGeomCache.prototype.getScrollHeight = function () {
            return this.scrollHeight;
        };
        ScrollGeomCache.prototype.handleScrollChange = function () {
        };
        return ScrollGeomCache;
    }(ScrollController));
    var ElementScrollGeomCache = /** @class */ (function (_super) {
        __extends$4(ElementScrollGeomCache, _super);
        function ElementScrollGeomCache(el, doesListening) {
            return _super.call(this, new ElementScrollController(el), doesListening) || this;
        }
        ElementScrollGeomCache.prototype.getEventTarget = function () {
            return this.scrollController.el;
        };
        ElementScrollGeomCache.prototype.computeClientRect = function () {
            return computeInnerRect(this.scrollController.el);
        };
        return ElementScrollGeomCache;
    }(ScrollGeomCache));
    var WindowScrollGeomCache = /** @class */ (function (_super) {
        __extends$4(WindowScrollGeomCache, _super);
        function WindowScrollGeomCache(doesListening) {
            return _super.call(this, new WindowScrollController(), doesListening) || this;
        }
        WindowScrollGeomCache.prototype.getEventTarget = function () {
            return window;
        };
        WindowScrollGeomCache.prototype.computeClientRect = function () {
            return {
                left: this.scrollLeft,
                right: this.scrollLeft + this.clientWidth,
                top: this.scrollTop,
                bottom: this.scrollTop + this.clientHeight
            };
        };
        // the window is the only scroll object that changes it's rectangle relative
        // to the document's topleft as it scrolls
        WindowScrollGeomCache.prototype.handleScrollChange = function () {
            this.clientRect = this.computeClientRect();
        };
        return WindowScrollGeomCache;
    }(ScrollGeomCache));

    // If available we are using native "performance" API instead of "Date"
    // Read more about it on MDN:
    // https://developer.mozilla.org/en-US/docs/Web/API/Performance
    var getTime = typeof performance === 'function' ? performance.now : Date.now;
    /*
    For a pointer interaction, automatically scrolls certain scroll containers when the pointer
    approaches the edge.

    The caller must call start + handleMove + stop.
    */
    var AutoScroller = /** @class */ (function () {
        function AutoScroller() {
            var _this = this;
            // options that can be set by caller
            this.isEnabled = true;
            this.scrollQuery = [window, '.fc-scroller'];
            this.edgeThreshold = 50; // pixels
            this.maxVelocity = 300; // pixels per second
            // internal state
            this.pointerScreenX = null;
            this.pointerScreenY = null;
            this.isAnimating = false;
            this.scrollCaches = null;
            // protect against the initial pointerdown being too close to an edge and starting the scroll
            this.everMovedUp = false;
            this.everMovedDown = false;
            this.everMovedLeft = false;
            this.everMovedRight = false;
            this.animate = function () {
                if (_this.isAnimating) { // wasn't cancelled between animation calls
                    var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);
                    if (edge) {
                        var now = getTime();
                        _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);
                        _this.requestAnimation(now);
                    }
                    else {
                        _this.isAnimating = false; // will stop animation
                    }
                }
            };
        }
        AutoScroller.prototype.start = function (pageX, pageY) {
            if (this.isEnabled) {
                this.scrollCaches = this.buildCaches();
                this.pointerScreenX = null;
                this.pointerScreenY = null;
                this.everMovedUp = false;
                this.everMovedDown = false;
                this.everMovedLeft = false;
                this.everMovedRight = false;
                this.handleMove(pageX, pageY);
            }
        };
        AutoScroller.prototype.handleMove = function (pageX, pageY) {
            if (this.isEnabled) {
                var pointerScreenX = pageX - window.pageXOffset;
                var pointerScreenY = pageY - window.pageYOffset;
                var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;
                var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;
                if (yDelta < 0) {
                    this.everMovedUp = true;
                }
                else if (yDelta > 0) {
                    this.everMovedDown = true;
                }
                if (xDelta < 0) {
                    this.everMovedLeft = true;
                }
                else if (xDelta > 0) {
                    this.everMovedRight = true;
                }
                this.pointerScreenX = pointerScreenX;
                this.pointerScreenY = pointerScreenY;
                if (!this.isAnimating) {
                    this.isAnimating = true;
                    this.requestAnimation(getTime());
                }
            }
        };
        AutoScroller.prototype.stop = function () {
            if (this.isEnabled) {
                this.isAnimating = false; // will stop animation
                for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                    var scrollCache = _a[_i];
                    scrollCache.destroy();
                }
                this.scrollCaches = null;
            }
        };
        AutoScroller.prototype.requestAnimation = function (now) {
            this.msSinceRequest = now;
            requestAnimationFrame(this.animate);
        };
        AutoScroller.prototype.handleSide = function (edge, seconds) {
            var scrollCache = edge.scrollCache;
            var edgeThreshold = this.edgeThreshold;
            var invDistance = edgeThreshold - edge.distance;
            var velocity = // the closer to the edge, the faster we scroll
             (invDistance * invDistance) / (edgeThreshold * edgeThreshold) * // quadratic
                this.maxVelocity * seconds;
            var sign = 1;
            switch (edge.name) {
                case 'left':
                    sign = -1;
                // falls through
                case 'right':
                    scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);
                    break;
                case 'top':
                    sign = -1;
                // falls through
                case 'bottom':
                    scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);
                    break;
            }
        };
        // left/top are relative to document topleft
        AutoScroller.prototype.computeBestEdge = function (left, top) {
            var edgeThreshold = this.edgeThreshold;
            var bestSide = null;
            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                var scrollCache = _a[_i];
                var rect = scrollCache.clientRect;
                var leftDist = left - rect.left;
                var rightDist = rect.right - left;
                var topDist = top - rect.top;
                var bottomDist = rect.bottom - top;
                // completely within the rect?
                if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {
                    if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() &&
                        (!bestSide || bestSide.distance > topDist)) {
                        bestSide = { scrollCache: scrollCache, name: 'top', distance: topDist };
                    }
                    if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() &&
                        (!bestSide || bestSide.distance > bottomDist)) {
                        bestSide = { scrollCache: scrollCache, name: 'bottom', distance: bottomDist };
                    }
                    if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() &&
                        (!bestSide || bestSide.distance > leftDist)) {
                        bestSide = { scrollCache: scrollCache, name: 'left', distance: leftDist };
                    }
                    if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() &&
                        (!bestSide || bestSide.distance > rightDist)) {
                        bestSide = { scrollCache: scrollCache, name: 'right', distance: rightDist };
                    }
                }
            }
            return bestSide;
        };
        AutoScroller.prototype.buildCaches = function () {
            return this.queryScrollEls().map(function (el) {
                if (el === window) {
                    return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls
                }
                else {
                    return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls
                }
            });
        };
        AutoScroller.prototype.queryScrollEls = function () {
            var els = [];
            for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {
                var query = _a[_i];
                if (typeof query === 'object') {
                    els.push(query);
                }
                else {
                    els.push.apply(els, Array.prototype.slice.call(document.querySelectorAll(query)));
                }
            }
            return els;
        };
        return AutoScroller;
    }());

    /*
    Monitors dragging on an element. Has a number of high-level features:
    - minimum distance required before dragging
    - minimum wait time ("delay") before dragging
    - a mirror element that follows the pointer
    */
    var FeaturefulElementDragging = /** @class */ (function (_super) {
        __extends$4(FeaturefulElementDragging, _super);
        function FeaturefulElementDragging(containerEl) {
            var _this = _super.call(this, containerEl) || this;
            // options that can be directly set by caller
            // the caller can also set the PointerDragging's options as well
            _this.delay = null;
            _this.minDistance = 0;
            _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag
            _this.mirrorNeedsRevert = false;
            _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup
            _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation
            _this.isDelayEnded = false;
            _this.isDistanceSurpassed = false;
            _this.delayTimeoutId = null;
            _this.onPointerDown = function (ev) {
                if (!_this.isDragging) { // so new drag doesn't happen while revert animation is going
                    _this.isInteracting = true;
                    _this.isDelayEnded = false;
                    _this.isDistanceSurpassed = false;
                    preventSelection(document.body);
                    preventContextMenu(document.body);
                    // prevent links from being visited if there's an eventual drag.
                    // also prevents selection in older browsers (maybe?).
                    // not necessary for touch, besides, browser would complain about passiveness.
                    if (!ev.isTouch) {
                        ev.origEvent.preventDefault();
                    }
                    _this.emitter.trigger('pointerdown', ev);
                    if (!_this.pointer.shouldIgnoreMove) {
                        // actions related to initiating dragstart+dragmove+dragend...
                        _this.mirror.setIsVisible(false); // reset. caller must set-visible
                        _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down
                        _this.startDelay(ev);
                        if (!_this.minDistance) {
                            _this.handleDistanceSurpassed(ev);
                        }
                    }
                }
            };
            _this.onPointerMove = function (ev) {
                if (_this.isInteracting) { // if false, still waiting for previous drag's revert
                    _this.emitter.trigger('pointermove', ev);
                    if (!_this.isDistanceSurpassed) {
                        var minDistance = _this.minDistance;
                        var distanceSq = void 0; // current distance from the origin, squared
                        var deltaX = ev.deltaX, deltaY = ev.deltaY;
                        distanceSq = deltaX * deltaX + deltaY * deltaY;
                        if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem
                            _this.handleDistanceSurpassed(ev);
                        }
                    }
                    if (_this.isDragging) {
                        // a real pointer move? (not one simulated by scrolling)
                        if (ev.origEvent.type !== 'scroll') {
                            _this.mirror.handleMove(ev.pageX, ev.pageY);
                            _this.autoScroller.handleMove(ev.pageX, ev.pageY);
                        }
                        _this.emitter.trigger('dragmove', ev);
                    }
                }
            };
            _this.onPointerUp = function (ev) {
                if (_this.isInteracting) { // if false, still waiting for previous drag's revert
                    _this.isInteracting = false;
                    allowSelection(document.body);
                    allowContextMenu(document.body);
                    _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert
                    if (_this.isDragging) {
                        _this.autoScroller.stop();
                        _this.tryStopDrag(ev); // which will stop the mirror
                    }
                    if (_this.delayTimeoutId) {
                        clearTimeout(_this.delayTimeoutId);
                        _this.delayTimeoutId = null;
                    }
                }
            };
            var pointer = _this.pointer = new PointerDragging(containerEl);
            pointer.emitter.on('pointerdown', _this.onPointerDown);
            pointer.emitter.on('pointermove', _this.onPointerMove);
            pointer.emitter.on('pointerup', _this.onPointerUp);
            _this.mirror = new ElementMirror();
            _this.autoScroller = new AutoScroller();
            return _this;
        }
        FeaturefulElementDragging.prototype.destroy = function () {
            this.pointer.destroy();
        };
        FeaturefulElementDragging.prototype.startDelay = function (ev) {
            var _this = this;
            if (typeof this.delay === 'number') {
                this.delayTimeoutId = setTimeout(function () {
                    _this.delayTimeoutId = null;
                    _this.handleDelayEnd(ev);
                }, this.delay); // not assignable to number!
            }
            else {
                this.handleDelayEnd(ev);
            }
        };
        FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {
            this.isDelayEnded = true;
            this.tryStartDrag(ev);
        };
        FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {
            this.isDistanceSurpassed = true;
            this.tryStartDrag(ev);
        };
        FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {
            if (this.isDelayEnded && this.isDistanceSurpassed) {
                if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {
                    this.isDragging = true;
                    this.mirrorNeedsRevert = false;
                    this.autoScroller.start(ev.pageX, ev.pageY);
                    this.emitter.trigger('dragstart', ev);
                    if (this.touchScrollAllowed === false) {
                        this.pointer.cancelTouchScroll();
                    }
                }
            }
        };
        FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {
            // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
            // that come from the document to fire beforehand. much more convenient this way.
            this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev) // bound with args
            );
        };
        FeaturefulElementDragging.prototype.stopDrag = function (ev) {
            this.isDragging = false;
            this.emitter.trigger('dragend', ev);
        };
        // fill in the implementations...
        FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {
            this.pointer.shouldIgnoreMove = bool;
        };
        FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {
            this.mirror.setIsVisible(bool);
        };
        FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {
            this.mirrorNeedsRevert = bool;
        };
        FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {
            this.autoScroller.isEnabled = bool;
        };
        return FeaturefulElementDragging;
    }(ElementDragging));

    /*
    When this class is instantiated, it records the offset of an element (relative to the document topleft),
    and continues to monitor scrolling, updating the cached coordinates if it needs to.
    Does not access the DOM after instantiation, so highly performant.

    Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
    and an determine if a given point is inside the combined clipping rectangle.
    */
    var OffsetTracker = /** @class */ (function () {
        function OffsetTracker(el) {
            this.origRect = computeRect(el);
            // will work fine for divs that have overflow:hidden
            this.scrollCaches = getClippingParents(el).map(function (el) {
                return new ElementScrollGeomCache(el, true); // listen=true
            });
        }
        OffsetTracker.prototype.destroy = function () {
            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                var scrollCache = _a[_i];
                scrollCache.destroy();
            }
        };
        OffsetTracker.prototype.computeLeft = function () {
            var left = this.origRect.left;
            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                var scrollCache = _a[_i];
                left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();
            }
            return left;
        };
        OffsetTracker.prototype.computeTop = function () {
            var top = this.origRect.top;
            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                var scrollCache = _a[_i];
                top += scrollCache.origScrollTop - scrollCache.getScrollTop();
            }
            return top;
        };
        OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {
            var point = { left: pageX, top: pageY };
            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
                var scrollCache = _a[_i];
                if (!isIgnoredClipping(scrollCache.getEventTarget()) &&
                    !pointInsideRect(point, scrollCache.clientRect)) {
                    return false;
                }
            }
            return true;
        };
        return OffsetTracker;
    }());
    // certain clipping containers should never constrain interactions, like <html> and <body>
    // https://github.com/fullcalendar/fullcalendar/issues/3615
    function isIgnoredClipping(node) {
        var tagName = node.tagName;
        return tagName === 'HTML' || tagName === 'BODY';
    }

    /*
    Tracks movement over multiple droppable areas (aka "hits")
    that exist in one or more DateComponents.
    Relies on an existing draggable.

    emits:
    - pointerdown
    - dragstart
    - hitchange - fires initially, even if not over a hit
    - pointerup
    - (hitchange - again, to null, if ended over a hit)
    - dragend
    */
    var HitDragging = /** @class */ (function () {
        function HitDragging(dragging, droppableStore) {
            var _this = this;
            // options that can be set by caller
            this.useSubjectCenter = false;
            this.requireInitial = true; // if doesn't start out on a hit, won't emit any events
            this.initialHit = null;
            this.movingHit = null;
            this.finalHit = null; // won't ever be populated if shouldIgnoreMove
            this.handlePointerDown = function (ev) {
                var dragging = _this.dragging;
                _this.initialHit = null;
                _this.movingHit = null;
                _this.finalHit = null;
                _this.prepareHits();
                _this.processFirstCoord(ev);
                if (_this.initialHit || !_this.requireInitial) {
                    dragging.setIgnoreMove(false);
                    _this.emitter.trigger('pointerdown', ev); // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(
                }
                else {
                    dragging.setIgnoreMove(true);
                }
            };
            this.handleDragStart = function (ev) {
                _this.emitter.trigger('dragstart', ev);
                _this.handleMove(ev, true); // force = fire even if initially null
            };
            this.handleDragMove = function (ev) {
                _this.emitter.trigger('dragmove', ev);
                _this.handleMove(ev);
            };
            this.handlePointerUp = function (ev) {
                _this.releaseHits();
                _this.emitter.trigger('pointerup', ev);
            };
            this.handleDragEnd = function (ev) {
                if (_this.movingHit) {
                    _this.emitter.trigger('hitupdate', null, true, ev);
                }
                _this.finalHit = _this.movingHit;
                _this.movingHit = null;
                _this.emitter.trigger('dragend', ev);
            };
            this.droppableStore = droppableStore;
            dragging.emitter.on('pointerdown', this.handlePointerDown);
            dragging.emitter.on('dragstart', this.handleDragStart);
            dragging.emitter.on('dragmove', this.handleDragMove);
            dragging.emitter.on('pointerup', this.handlePointerUp);
            dragging.emitter.on('dragend', this.handleDragEnd);
            this.dragging = dragging;
            this.emitter = new EmitterMixin();
        }
        // sets initialHit
        // sets coordAdjust
        HitDragging.prototype.processFirstCoord = function (ev) {
            var origPoint = { left: ev.pageX, top: ev.pageY };
            var adjustedPoint = origPoint;
            var subjectEl = ev.subjectEl;
            var subjectRect;
            if (subjectEl !== document) {
                subjectRect = computeRect(subjectEl);
                adjustedPoint = constrainPoint(adjustedPoint, subjectRect);
            }
            var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);
            if (initialHit) {
                if (this.useSubjectCenter && subjectRect) {
                    var slicedSubjectRect = intersectRects(subjectRect, initialHit.rect);
                    if (slicedSubjectRect) {
                        adjustedPoint = getRectCenter(slicedSubjectRect);
                    }
                }
                this.coordAdjust = diffPoints(adjustedPoint, origPoint);
            }
            else {
                this.coordAdjust = { left: 0, top: 0 };
            }
        };
        HitDragging.prototype.handleMove = function (ev, forceHandle) {
            var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);
            if (forceHandle || !isHitsEqual(this.movingHit, hit)) {
                this.movingHit = hit;
                this.emitter.trigger('hitupdate', hit, false, ev);
            }
        };
        HitDragging.prototype.prepareHits = function () {
            this.offsetTrackers = mapHash(this.droppableStore, function (interactionSettings) {
                interactionSettings.component.buildPositionCaches();
                return new OffsetTracker(interactionSettings.el);
            });
        };
        HitDragging.prototype.releaseHits = function () {
            var offsetTrackers = this.offsetTrackers;
            for (var id in offsetTrackers) {
                offsetTrackers[id].destroy();
            }
            this.offsetTrackers = {};
        };
        HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {
            var _a = this, droppableStore = _a.droppableStore, offsetTrackers = _a.offsetTrackers;
            var bestHit = null;
            for (var id in droppableStore) {
                var component = droppableStore[id].component;
                var offsetTracker = offsetTrackers[id];
                if (offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {
                    var originLeft = offsetTracker.computeLeft();
                    var originTop = offsetTracker.computeTop();
                    var positionLeft = offsetLeft - originLeft;
                    var positionTop = offsetTop - originTop;
                    var origRect = offsetTracker.origRect;
                    var width = origRect.right - origRect.left;
                    var height = origRect.bottom - origRect.top;
                    if (
                    // must be within the element's bounds
                    positionLeft >= 0 && positionLeft < width &&
                        positionTop >= 0 && positionTop < height) {
                        var hit = component.queryHit(positionLeft, positionTop, width, height);
                        if (hit &&
                            (
                            // make sure the hit is within activeRange, meaning it's not a deal cell
                            !component.props.dateProfile || // hack for DayTile
                                rangeContainsRange(component.props.dateProfile.activeRange, hit.dateSpan.range)) &&
                            (!bestHit || hit.layer > bestHit.layer)) {
                            // TODO: better way to re-orient rectangle
                            hit.rect.left += originLeft;
                            hit.rect.right += originLeft;
                            hit.rect.top += originTop;
                            hit.rect.bottom += originTop;
                            bestHit = hit;
                        }
                    }
                }
            }
            return bestHit;
        };
        return HitDragging;
    }());
    function isHitsEqual(hit0, hit1) {
        if (!hit0 && !hit1) {
            return true;
        }
        if (Boolean(hit0) !== Boolean(hit1)) {
            return false;
        }
        return isDateSpansEqual(hit0.dateSpan, hit1.dateSpan);
    }

    /*
    Monitors when the user clicks on a specific date/time of a component.
    A pointerdown+pointerup on the same "hit" constitutes a click.
    */
    var DateClicking = /** @class */ (function (_super) {
        __extends$4(DateClicking, _super);
        function DateClicking(settings) {
            var _this = _super.call(this, settings) || this;
            _this.handlePointerDown = function (ev) {
                var dragging = _this.dragging;
                // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired
                dragging.setIgnoreMove(!_this.component.isValidDateDownEl(dragging.pointer.downEl));
            };
            // won't even fire if moving was ignored
            _this.handleDragEnd = function (ev) {
                var component = _this.component;
                var pointer = _this.dragging.pointer;
                if (!pointer.wasTouchScroll) {
                    var _a = _this.hitDragging, initialHit = _a.initialHit, finalHit = _a.finalHit;
                    if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {
                        component.calendar.triggerDateClick(initialHit.dateSpan, initialHit.dayEl, component.view, ev.origEvent);
                    }
                }
            };
            var component = settings.component;
            // we DO want to watch pointer moves because otherwise finalHit won't get populated
            _this.dragging = new FeaturefulElementDragging(component.el);
            _this.dragging.autoScroller.isEnabled = false;
            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));
            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
            hitDragging.emitter.on('dragend', _this.handleDragEnd);
            return _this;
        }
        DateClicking.prototype.destroy = function () {
            this.dragging.destroy();
        };
        return DateClicking;
    }(Interaction));

    /*
    Tracks when the user selects a portion of time of a component,
    constituted by a drag over date cells, with a possible delay at the beginning of the drag.
    */
    var DateSelecting = /** @class */ (function (_super) {
        __extends$4(DateSelecting, _super);
        function DateSelecting(settings) {
            var _this = _super.call(this, settings) || this;
            _this.dragSelection = null;
            _this.handlePointerDown = function (ev) {
                var _a = _this, component = _a.component, dragging = _a.dragging;
                var canSelect = component.opt('selectable') &&
                    component.isValidDateDownEl(ev.origEvent.target);
                // don't bother to watch expensive moves if component won't do selection
                dragging.setIgnoreMove(!canSelect);
                // if touch, require user to hold down
                dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null;
            };
            _this.handleDragStart = function (ev) {
                _this.component.calendar.unselect(ev); // unselect previous selections
            };
            _this.handleHitUpdate = function (hit, isFinal) {
                var calendar = _this.component.calendar;
                var dragSelection = null;
                var isInvalid = false;
                if (hit) {
                    dragSelection = joinHitsIntoSelection(_this.hitDragging.initialHit, hit, calendar.pluginSystem.hooks.dateSelectionTransformers);
                    if (!dragSelection || !_this.component.isDateSelectionValid(dragSelection)) {
                        isInvalid = true;
                        dragSelection = null;
                    }
                }
                if (dragSelection) {
                    calendar.dispatch({ type: 'SELECT_DATES', selection: dragSelection });
                }
                else if (!isFinal) { // only unselect if moved away while dragging
                    calendar.dispatch({ type: 'UNSELECT_DATES' });
                }
                if (!isInvalid) {
                    enableCursor();
                }
                else {
                    disableCursor();
                }
                if (!isFinal) {
                    _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging
                }
            };
            _this.handlePointerUp = function (pev) {
                if (_this.dragSelection) {
                    // selection is already rendered, so just need to report selection
                    _this.component.calendar.triggerDateSelect(_this.dragSelection, pev);
                    _this.dragSelection = null;
                }
            };
            var component = settings.component;
            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
            dragging.touchScrollAllowed = false;
            dragging.minDistance = component.opt('selectMinDistance') || 0;
            dragging.autoScroller.isEnabled = component.opt('dragScroll');
            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));
            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
            hitDragging.emitter.on('dragstart', _this.handleDragStart);
            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
            hitDragging.emitter.on('pointerup', _this.handlePointerUp);
            return _this;
        }
        DateSelecting.prototype.destroy = function () {
            this.dragging.destroy();
        };
        return DateSelecting;
    }(Interaction));
    function getComponentTouchDelay(component) {
        var delay = component.opt('selectLongPressDelay');
        if (delay == null) {
            delay = component.opt('longPressDelay');
        }
        return delay;
    }
    function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {
        var dateSpan0 = hit0.dateSpan;
        var dateSpan1 = hit1.dateSpan;
        var ms = [
            dateSpan0.range.start,
            dateSpan0.range.end,
            dateSpan1.range.start,
            dateSpan1.range.end
        ];
        ms.sort(compareNumbers);
        var props = {};
        for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {
            var transformer = dateSelectionTransformers_1[_i];
            var res = transformer(hit0, hit1);
            if (res === false) {
                return null;
            }
            else if (res) {
                __assign$3(props, res);
            }
        }
        props.range = { start: ms[0], end: ms[3] };
        props.allDay = dateSpan0.allDay;
        return props;
    }

    var EventDragging = /** @class */ (function (_super) {
        __extends$4(EventDragging, _super);
        function EventDragging(settings) {
            var _this = _super.call(this, settings) || this;
            // internal state
            _this.subjectSeg = null; // the seg being selected/dragged
            _this.isDragging = false;
            _this.eventRange = null;
            _this.relevantEvents = null; // the events being dragged
            _this.receivingCalendar = null;
            _this.validMutation = null;
            _this.mutatedRelevantEvents = null;
            _this.handlePointerDown = function (ev) {
                var origTarget = ev.origEvent.target;
                var _a = _this, component = _a.component, dragging = _a.dragging;
                var mirror = dragging.mirror;
                var initialCalendar = component.calendar;
                var subjectSeg = _this.subjectSeg = getElSeg(ev.subjectEl);
                var eventRange = _this.eventRange = subjectSeg.eventRange;
                var eventInstanceId = eventRange.instance.instanceId;
                _this.relevantEvents = getRelevantEvents(initialCalendar.state.eventStore, eventInstanceId);
                dragging.minDistance = ev.isTouch ? 0 : component.opt('eventDragMinDistance');
                dragging.delay =
                    // only do a touch delay if touch and this event hasn't been selected yet
                    (ev.isTouch && eventInstanceId !== component.props.eventSelection) ?
                        getComponentTouchDelay$1(component) :
                        null;
                mirror.parentNode = initialCalendar.el;
                mirror.revertDuration = component.opt('dragRevertDuration');
                var isValid = component.isValidSegDownEl(origTarget) &&
                    !elementClosest(origTarget, '.fc-resizer'); // NOT on a resizer
                dragging.setIgnoreMove(!isValid);
                // disable dragging for elements that are resizable (ie, selectable)
                // but are not draggable
                _this.isDragging = isValid &&
                    ev.subjectEl.classList.contains('fc-draggable');
            };
            _this.handleDragStart = function (ev) {
                var initialCalendar = _this.component.calendar;
                var eventRange = _this.eventRange;
                var eventInstanceId = eventRange.instance.instanceId;
                if (ev.isTouch) {
                    // need to select a different event?
                    if (eventInstanceId !== _this.component.props.eventSelection) {
                        initialCalendar.dispatch({ type: 'SELECT_EVENT', eventInstanceId: eventInstanceId });
                    }
                }
                else {
                    // if now using mouse, but was previous touch interaction, clear selected event
                    initialCalendar.dispatch({ type: 'UNSELECT_EVENT' });
                }
                if (_this.isDragging) {
                    initialCalendar.unselect(ev); // unselect *date* selection
                    initialCalendar.publiclyTrigger('eventDragStart', [
                        {
                            el: _this.subjectSeg.el,
                            event: new EventApi(initialCalendar, eventRange.def, eventRange.instance),
                            jsEvent: ev.origEvent,
                            view: _this.component.view
                        }
                    ]);
                }
            };
            _this.handleHitUpdate = function (hit, isFinal) {
                if (!_this.isDragging) {
                    return;
                }
                var relevantEvents = _this.relevantEvents;
                var initialHit = _this.hitDragging.initialHit;
                var initialCalendar = _this.component.calendar;
                // states based on new hit
                var receivingCalendar = null;
                var mutation = null;
                var mutatedRelevantEvents = null;
                var isInvalid = false;
                var interaction = {
                    affectedEvents: relevantEvents,
                    mutatedEvents: createEmptyEventStore(),
                    isEvent: true,
                    origSeg: _this.subjectSeg
                };
                if (hit) {
                    var receivingComponent = hit.component;
                    receivingCalendar = receivingComponent.calendar;
                    if (initialCalendar === receivingCalendar ||
                        receivingComponent.opt('editable') && receivingComponent.opt('droppable')) {
                        mutation = computeEventMutation(initialHit, hit, receivingCalendar.pluginSystem.hooks.eventDragMutationMassagers);
                        if (mutation) {
                            mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, receivingCalendar.eventUiBases, mutation, receivingCalendar);
                            interaction.mutatedEvents = mutatedRelevantEvents;
                            if (!receivingComponent.isInteractionValid(interaction)) {
                                isInvalid = true;
                                mutation = null;
                                mutatedRelevantEvents = null;
                                interaction.mutatedEvents = createEmptyEventStore();
                            }
                        }
                    }
                    else {
                        receivingCalendar = null;
                    }
                }
                _this.displayDrag(receivingCalendar, interaction);
                if (!isInvalid) {
                    enableCursor();
                }
                else {
                    disableCursor();
                }
                if (!isFinal) {
                    if (initialCalendar === receivingCalendar && // TODO: write test for this
                        isHitsEqual(initialHit, hit)) {
                        mutation = null;
                    }
                    _this.dragging.setMirrorNeedsRevert(!mutation);
                    // render the mirror if no already-rendered mirror
                    // TODO: wish we could somehow wait for dispatch to guarantee render
                    _this.dragging.setMirrorIsVisible(!hit || !document.querySelector('.fc-mirror'));
                    // assign states based on new hit
                    _this.receivingCalendar = receivingCalendar;
                    _this.validMutation = mutation;
                    _this.mutatedRelevantEvents = mutatedRelevantEvents;
                }
            };
            _this.handlePointerUp = function () {
                if (!_this.isDragging) {
                    _this.cleanup(); // because handleDragEnd won't fire
                }
            };
            _this.handleDragEnd = function (ev) {
                if (_this.isDragging) {
                    var initialCalendar_1 = _this.component.calendar;
                    var initialView = _this.component.view;
                    var _a = _this, receivingCalendar = _a.receivingCalendar, validMutation = _a.validMutation;
                    var eventDef = _this.eventRange.def;
                    var eventInstance = _this.eventRange.instance;
                    var eventApi = new EventApi(initialCalendar_1, eventDef, eventInstance);
                    var relevantEvents_1 = _this.relevantEvents;
                    var mutatedRelevantEvents = _this.mutatedRelevantEvents;
                    var finalHit = _this.hitDragging.finalHit;
                    _this.clearDrag(); // must happen after revert animation
                    initialCalendar_1.publiclyTrigger('eventDragStop', [
                        {
                            el: _this.subjectSeg.el,
                            event: eventApi,
                            jsEvent: ev.origEvent,
                            view: initialView
                        }
                    ]);
                    if (validMutation) {
                        // dropped within same calendar
                        if (receivingCalendar === initialCalendar_1) {
                            initialCalendar_1.dispatch({
                                type: 'MERGE_EVENTS',
                                eventStore: mutatedRelevantEvents
                            });
                            var transformed = {};
                            for (var _i = 0, _b = initialCalendar_1.pluginSystem.hooks.eventDropTransformers; _i < _b.length; _i++) {
                                var transformer = _b[_i];
                                __assign$3(transformed, transformer(validMutation, initialCalendar_1));
                            }
                            var eventDropArg = __assign$3({}, transformed, { el: ev.subjectEl, delta: validMutation.datesDelta, oldEvent: eventApi, event: new EventApi(// the data AFTER the mutation
                                initialCalendar_1, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null), revert: function () {
                                    initialCalendar_1.dispatch({
                                        type: 'MERGE_EVENTS',
                                        eventStore: relevantEvents_1
                                    });
                                }, jsEvent: ev.origEvent, view: initialView });
                            initialCalendar_1.publiclyTrigger('eventDrop', [eventDropArg]);
                            // dropped in different calendar
                        }
                        else if (receivingCalendar) {
                            initialCalendar_1.publiclyTrigger('eventLeave', [
                                {
                                    draggedEl: ev.subjectEl,
                                    event: eventApi,
                                    view: initialView
                                }
                            ]);
                            initialCalendar_1.dispatch({
                                type: 'REMOVE_EVENT_INSTANCES',
                                instances: _this.mutatedRelevantEvents.instances
                            });
                            receivingCalendar.dispatch({
                                type: 'MERGE_EVENTS',
                                eventStore: _this.mutatedRelevantEvents
                            });
                            if (ev.isTouch) {
                                receivingCalendar.dispatch({
                                    type: 'SELECT_EVENT',
                                    eventInstanceId: eventInstance.instanceId
                                });
                            }
                            var dropArg = __assign$3({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), { draggedEl: ev.subjectEl, jsEvent: ev.origEvent, view: finalHit.component // should this be finalHit.component.view? See #4644
                             });
                            receivingCalendar.publiclyTrigger('drop', [dropArg]);
                            receivingCalendar.publiclyTrigger('eventReceive', [
                                {
                                    draggedEl: ev.subjectEl,
                                    event: new EventApi(// the data AFTER the mutation
                                    receivingCalendar, mutatedRelevantEvents.defs[eventDef.defId], mutatedRelevantEvents.instances[eventInstance.instanceId]),
                                    view: finalHit.component // should this be finalHit.component.view? See #4644
                                }
                            ]);
                        }
                    }
                    else {
                        initialCalendar_1.publiclyTrigger('_noEventDrop');
                    }
                }
                _this.cleanup();
            };
            var component = _this.component;
            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
            dragging.pointer.selector = EventDragging.SELECTOR;
            dragging.touchScrollAllowed = false;
            dragging.autoScroller.isEnabled = component.opt('dragScroll');
            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsStore);
            hitDragging.useSubjectCenter = settings.useEventCenter;
            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
            hitDragging.emitter.on('dragstart', _this.handleDragStart);
            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
            hitDragging.emitter.on('pointerup', _this.handlePointerUp);
            hitDragging.emitter.on('dragend', _this.handleDragEnd);
            return _this;
        }
        EventDragging.prototype.destroy = function () {
            this.dragging.destroy();
        };
        // render a drag state on the next receivingCalendar
        EventDragging.prototype.displayDrag = function (nextCalendar, state) {
            var initialCalendar = this.component.calendar;
            var prevCalendar = this.receivingCalendar;
            // does the previous calendar need to be cleared?
            if (prevCalendar && prevCalendar !== nextCalendar) {
                // does the initial calendar need to be cleared?
                // if so, don't clear all the way. we still need to to hide the affectedEvents
                if (prevCalendar === initialCalendar) {
                    prevCalendar.dispatch({
                        type: 'SET_EVENT_DRAG',
                        state: {
                            affectedEvents: state.affectedEvents,
                            mutatedEvents: createEmptyEventStore(),
                            isEvent: true,
                            origSeg: state.origSeg
                        }
                    });
                    // completely clear the old calendar if it wasn't the initial
                }
                else {
                    prevCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });
                }
            }
            if (nextCalendar) {
                nextCalendar.dispatch({ type: 'SET_EVENT_DRAG', state: state });
            }
        };
        EventDragging.prototype.clearDrag = function () {
            var initialCalendar = this.component.calendar;
            var receivingCalendar = this.receivingCalendar;
            if (receivingCalendar) {
                receivingCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });
            }
            // the initial calendar might have an dummy drag state from displayDrag
            if (initialCalendar !== receivingCalendar) {
                initialCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });
            }
        };
        EventDragging.prototype.cleanup = function () {
            this.subjectSeg = null;
            this.isDragging = false;
            this.eventRange = null;
            this.relevantEvents = null;
            this.receivingCalendar = null;
            this.validMutation = null;
            this.mutatedRelevantEvents = null;
        };
        EventDragging.SELECTOR = '.fc-draggable, .fc-resizable'; // TODO: test this in IE11
        return EventDragging;
    }(Interaction));
    function computeEventMutation(hit0, hit1, massagers) {
        var dateSpan0 = hit0.dateSpan;
        var dateSpan1 = hit1.dateSpan;
        var date0 = dateSpan0.range.start;
        var date1 = dateSpan1.range.start;
        var standardProps = {};
        if (dateSpan0.allDay !== dateSpan1.allDay) {
            standardProps.allDay = dateSpan1.allDay;
            standardProps.hasEnd = hit1.component.opt('allDayMaintainDuration');
            if (dateSpan1.allDay) {
                // means date1 is already start-of-day,
                // but date0 needs to be converted
                date0 = startOfDay(date0);
            }
        }
        var delta = diffDates(date0, date1, hit0.component.dateEnv, hit0.component === hit1.component ?
            hit0.component.largeUnit :
            null);
        if (delta.milliseconds) { // has hours/minutes/seconds
            standardProps.allDay = false;
        }
        var mutation = {
            datesDelta: delta,
            standardProps: standardProps
        };
        for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {
            var massager = massagers_1[_i];
            massager(mutation, hit0, hit1);
        }
        return mutation;
    }
    function getComponentTouchDelay$1(component) {
        var delay = component.opt('eventLongPressDelay');
        if (delay == null) {
            delay = component.opt('longPressDelay');
        }
        return delay;
    }

    var EventDragging$1 = /** @class */ (function (_super) {
        __extends$4(EventDragging, _super);
        function EventDragging(settings) {
            var _this = _super.call(this, settings) || this;
            // internal state
            _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?
            _this.eventRange = null;
            _this.relevantEvents = null;
            _this.validMutation = null;
            _this.mutatedRelevantEvents = null;
            _this.handlePointerDown = function (ev) {
                var component = _this.component;
                var seg = _this.querySeg(ev);
                var eventRange = _this.eventRange = seg.eventRange;
                _this.dragging.minDistance = component.opt('eventDragMinDistance');
                // if touch, need to be working with a selected event
                _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) ||
                    (ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId));
            };
            _this.handleDragStart = function (ev) {
                var calendar = _this.component.calendar;
                var eventRange = _this.eventRange;
                _this.relevantEvents = getRelevantEvents(calendar.state.eventStore, _this.eventRange.instance.instanceId);
                _this.draggingSeg = _this.querySeg(ev);
                calendar.unselect();
                calendar.publiclyTrigger('eventResizeStart', [
                    {
                        el: _this.draggingSeg.el,
                        event: new EventApi(calendar, eventRange.def, eventRange.instance),
                        jsEvent: ev.origEvent,
                        view: _this.component.view
                    }
                ]);
            };
            _this.handleHitUpdate = function (hit, isFinal, ev) {
                var calendar = _this.component.calendar;
                var relevantEvents = _this.relevantEvents;
                var initialHit = _this.hitDragging.initialHit;
                var eventInstance = _this.eventRange.instance;
                var mutation = null;
                var mutatedRelevantEvents = null;
                var isInvalid = false;
                var interaction = {
                    affectedEvents: relevantEvents,
                    mutatedEvents: createEmptyEventStore(),
                    isEvent: true,
                    origSeg: _this.draggingSeg
                };
                if (hit) {
                    mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-start-resizer'), eventInstance.range, calendar.pluginSystem.hooks.eventResizeJoinTransforms);
                }
                if (mutation) {
                    mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, calendar.eventUiBases, mutation, calendar);
                    interaction.mutatedEvents = mutatedRelevantEvents;
                    if (!_this.component.isInteractionValid(interaction)) {
                        isInvalid = true;
                        mutation = null;
                        mutatedRelevantEvents = null;
                        interaction.mutatedEvents = null;
                    }
                }
                if (mutatedRelevantEvents) {
                    calendar.dispatch({
                        type: 'SET_EVENT_RESIZE',
                        state: interaction
                    });
                }
                else {
                    calendar.dispatch({ type: 'UNSET_EVENT_RESIZE' });
                }
                if (!isInvalid) {
                    enableCursor();
                }
                else {
                    disableCursor();
                }
                if (!isFinal) {
                    if (mutation && isHitsEqual(initialHit, hit)) {
                        mutation = null;
                    }
                    _this.validMutation = mutation;
                    _this.mutatedRelevantEvents = mutatedRelevantEvents;
                }
            };
            _this.handleDragEnd = function (ev) {
                var calendar = _this.component.calendar;
                var view = _this.component.view;
                var eventDef = _this.eventRange.def;
                var eventInstance = _this.eventRange.instance;
                var eventApi = new EventApi(calendar, eventDef, eventInstance);
                var relevantEvents = _this.relevantEvents;
                var mutatedRelevantEvents = _this.mutatedRelevantEvents;
                calendar.publiclyTrigger('eventResizeStop', [
                    {
                        el: _this.draggingSeg.el,
                        event: eventApi,
                        jsEvent: ev.origEvent,
                        view: view
                    }
                ]);
                if (_this.validMutation) {
                    calendar.dispatch({
                        type: 'MERGE_EVENTS',
                        eventStore: mutatedRelevantEvents
                    });
                    calendar.publiclyTrigger('eventResize', [
                        {
                            el: _this.draggingSeg.el,
                            startDelta: _this.validMutation.startDelta || createDuration(0),
                            endDelta: _this.validMutation.endDelta || createDuration(0),
                            prevEvent: eventApi,
                            event: new EventApi(// the data AFTER the mutation
                            calendar, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
                            revert: function () {
                                calendar.dispatch({
                                    type: 'MERGE_EVENTS',
                                    eventStore: relevantEvents
                                });
                            },
                            jsEvent: ev.origEvent,
                            view: view
                        }
                    ]);
                }
                else {
                    calendar.publiclyTrigger('_noEventResize');
                }
                // reset all internal state
                _this.draggingSeg = null;
                _this.relevantEvents = null;
                _this.validMutation = null;
                // okay to keep eventInstance around. useful to set it in handlePointerDown
            };
            var component = settings.component;
            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
            dragging.pointer.selector = '.fc-resizer';
            dragging.touchScrollAllowed = false;
            dragging.autoScroller.isEnabled = component.opt('dragScroll');
            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));
            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
            hitDragging.emitter.on('dragstart', _this.handleDragStart);
            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
            hitDragging.emitter.on('dragend', _this.handleDragEnd);
            return _this;
        }
        EventDragging.prototype.destroy = function () {
            this.dragging.destroy();
        };
        EventDragging.prototype.querySeg = function (ev) {
            return getElSeg(elementClosest(ev.subjectEl, this.component.fgSegSelector));
        };
        return EventDragging;
    }(Interaction));
    function computeMutation(hit0, hit1, isFromStart, instanceRange, transforms) {
        var dateEnv = hit0.component.dateEnv;
        var date0 = hit0.dateSpan.range.start;
        var date1 = hit1.dateSpan.range.start;
        var delta = diffDates(date0, date1, dateEnv, hit0.component.largeUnit);
        var props = {};
        for (var _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {
            var transform = transforms_1[_i];
            var res = transform(hit0, hit1);
            if (res === false) {
                return null;
            }
            else if (res) {
                __assign$3(props, res);
            }
        }
        if (isFromStart) {
            if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {
                props.startDelta = delta;
                return props;
            }
        }
        else {
            if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {
                props.endDelta = delta;
                return props;
            }
        }
        return null;
    }

    var UnselectAuto = /** @class */ (function () {
        function UnselectAuto(calendar) {
            var _this = this;
            this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system
            this.onSelect = function (selectInfo) {
                if (selectInfo.jsEvent) {
                    _this.isRecentPointerDateSelect = true;
                }
            };
            this.onDocumentPointerUp = function (pev) {
                var _a = _this, calendar = _a.calendar, documentPointer = _a.documentPointer;
                var state = calendar.state;
                // touch-scrolling should never unfocus any type of selection
                if (!documentPointer.wasTouchScroll) {
                    if (state.dateSelection && // an existing date selection?
                        !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?
                    ) {
                        var unselectAuto = calendar.viewOpt('unselectAuto');
                        var unselectCancel = calendar.viewOpt('unselectCancel');
                        if (unselectAuto && (!unselectAuto || !elementClosest(documentPointer.downEl, unselectCancel))) {
                            calendar.unselect(pev);
                        }
                    }
                    if (state.eventSelection && // an existing event selected?
                        !elementClosest(documentPointer.downEl, EventDragging.SELECTOR) // interaction DIDN'T start on an event
                    ) {
                        calendar.dispatch({ type: 'UNSELECT_EVENT' });
                    }
                }
                _this.isRecentPointerDateSelect = false;
            };
            this.calendar = calendar;
            var documentPointer = this.documentPointer = new PointerDragging(document);
            documentPointer.shouldIgnoreMove = true;
            documentPointer.shouldWatchScroll = false;
            documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);
            /*
            TODO: better way to know about whether there was a selection with the pointer
            */
            calendar.on('select', this.onSelect);
        }
        UnselectAuto.prototype.destroy = function () {
            this.calendar.off('select', this.onSelect);
            this.documentPointer.destroy();
        };
        return UnselectAuto;
    }());
    config.dataAttrPrefix = '';

    /*
    Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
    The third-party system is responsible for drawing the visuals effects of the drag.
    This class simply monitors for pointer movements and fires events.
    It also has the ability to hide the moving element (the "mirror") during the drag.
    */
    var InferredElementDragging = /** @class */ (function (_super) {
        __extends$4(InferredElementDragging, _super);
        function InferredElementDragging(containerEl) {
            var _this = _super.call(this, containerEl) || this;
            _this.shouldIgnoreMove = false;
            _this.mirrorSelector = '';
            _this.currentMirrorEl = null;
            _this.handlePointerDown = function (ev) {
                _this.emitter.trigger('pointerdown', ev);
                if (!_this.shouldIgnoreMove) {
                    // fire dragstart right away. does not support delay or min-distance
                    _this.emitter.trigger('dragstart', ev);
                }
            };
            _this.handlePointerMove = function (ev) {
                if (!_this.shouldIgnoreMove) {
                    _this.emitter.trigger('dragmove', ev);
                }
            };
            _this.handlePointerUp = function (ev) {
                _this.emitter.trigger('pointerup', ev);
                if (!_this.shouldIgnoreMove) {
                    // fire dragend right away. does not support a revert animation
                    _this.emitter.trigger('dragend', ev);
                }
            };
            var pointer = _this.pointer = new PointerDragging(containerEl);
            pointer.emitter.on('pointerdown', _this.handlePointerDown);
            pointer.emitter.on('pointermove', _this.handlePointerMove);
            pointer.emitter.on('pointerup', _this.handlePointerUp);
            return _this;
        }
        InferredElementDragging.prototype.destroy = function () {
            this.pointer.destroy();
        };
        InferredElementDragging.prototype.setIgnoreMove = function (bool) {
            this.shouldIgnoreMove = bool;
        };
        InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {
            if (bool) {
                // restore a previously hidden element.
                // use the reference in case the selector class has already been removed.
                if (this.currentMirrorEl) {
                    this.currentMirrorEl.style.visibility = '';
                    this.currentMirrorEl = null;
                }
            }
            else {
                var mirrorEl = this.mirrorSelector ?
                    document.querySelector(this.mirrorSelector) :
                    null;
                if (mirrorEl) {
                    this.currentMirrorEl = mirrorEl;
                    mirrorEl.style.visibility = 'hidden';
                }
            }
        };
        return InferredElementDragging;
    }(ElementDragging));

    var main$3 = createPlugin({
        componentInteractions: [DateClicking, DateSelecting, EventDragging, EventDragging$1],
        calendarInteractions: [UnselectAuto],
        elementDraggingImpl: FeaturefulElementDragging
    });

    /* src\pages\list\items\Timesheet.svelte generated by Svelte v3.18.2 */

    const { console: console_1$3 } = globals;
    const file$f = "src\\pages\\list\\items\\Timesheet.svelte";

    function create_fragment$g(ctx) {
    	let div2;
    	let div0;
    	let button0;
    	let t1;
    	let button1;
    	let t3;
    	let t4;
    	let div1;
    	let current;
    	let dispose;

    	let fullcalendar_props = {
    		defaultView: "timeGridWeek",
    		events: /*events*/ ctx[4],
    		header: {
    			left: "prev,next today",
    			center: "title",
    			right: "dayGridMonth,timeGridWeek,timeGridDay,listWeek"
    		},
    		height: 800,
    		plugins: [main, main$1, main$3, main$2],
    		weekends: /*calendarWeekends*/ ctx[1]
    	};

    	const fullcalendar = new FullCalendar({
    			props: fullcalendar_props,
    			$$inline: true
    		});

    	/*fullcalendar_binding*/ ctx[13](fullcalendar);

    	fullcalendar.$on("dateClick", function () {
    		if (is_function(/*handleDateClick*/ ctx[6])) /*handleDateClick*/ ctx[6].apply(this, arguments);
    	});

    	fullcalendar.$on("eventClick", function () {
    		if (is_function(/*eventClick*/ ctx[2])) /*eventClick*/ ctx[2].apply(this, arguments);
    	});

    	fullcalendar.$on("eventDrop", function () {
    		if (is_function(/*eventResize*/ ctx[3])) /*eventResize*/ ctx[3].apply(this, arguments);
    	});

    	fullcalendar.$on("eventResize", function () {
    		if (is_function(/*eventResize*/ ctx[3])) /*eventResize*/ ctx[3].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "toggle weekends";
    			t1 = text("\n\t\t \n\t\t");
    			button1 = element("button");
    			button1.textContent = "go to a date in the past";
    			t3 = text("\n\t\t  (also, click a date/time to add an event)");
    			t4 = space();
    			div1 = element("div");
    			create_component(fullcalendar.$$.fragment);
    			add_location(button0, file$f, 128, 2, 2606);
    			add_location(button1, file$f, 130, 2, 2676);
    			attr_dev(div0, "class", "demo-app-top svelte-jbaful");
    			add_location(div0, file$f, 127, 1, 2577);
    			attr_dev(div1, "class", "demo-app-calendar svelte-jbaful");
    			add_location(div1, file$f, 133, 1, 2798);
    			attr_dev(div2, "class", "demo-app svelte-jbaful");
    			add_location(div2, file$f, 126, 0, 2553);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, button0);
    			append_dev(div0, t1);
    			append_dev(div0, button1);
    			append_dev(div0, t3);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			mount_component(fullcalendar, div1, null);
    			current = true;

    			dispose = [
    				listen_dev(
    					button0,
    					"click",
    					function () {
    						if (is_function(/*toggleWeekends*/ ctx[7])) /*toggleWeekends*/ ctx[7].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button1,
    					"click",
    					function () {
    						if (is_function(/*gotoPast*/ ctx[5])) /*gotoPast*/ ctx[5].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const fullcalendar_changes = {};
    			if (dirty & /*events*/ 16) fullcalendar_changes.events = /*events*/ ctx[4];
    			if (dirty & /*calendarWeekends*/ 2) fullcalendar_changes.weekends = /*calendarWeekends*/ ctx[1];
    			fullcalendar.$set(fullcalendar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fullcalendar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fullcalendar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			/*fullcalendar_binding*/ ctx[13](null);
    			destroy_component(fullcalendar);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var calendarComponentRef,
    		calendarWeekends,
    		eventClick,
    		eventDrop,
    		eventResize,
    		events,
    		gotoPast,
    		handleDateClick,
    		plugins,
    		saveCb,
    		toggleWeekends,
    		update;

    	plugins = [main, main$1, main$3];
    	calendarComponentRef = null;
    	calendarWeekends = true;

    	//console.log JSON.stringify(item, null, 2)
    	events = item.data.events;

    	toggleWeekends = function () {
    		$$invalidate(1, calendarWeekends = !calendarWeekends);
    	};

    	gotoPast = function () {
    		var calendarApi;
    		calendarApi = calendarComponentRef.getAPI();
    		calendarApi.gotoDate("2000-01-01");
    	};

    	// call a method on the Calendar object
    	saveCb = function (r) {
    		console.log("saved!");
    		console.log(r);
    	};

    	update = function () {
    		collection.save({ id: item.id, data: { events } }, saveCb);
    	};

    	handleDateClick = function (e) {
    		var arg, argDate;
    		arg = e.detail;
    		console.log("-------------");
    		console.log(arg);
    		console.log("-------------");
    		argDate = Date.create(argDate);

    		$$invalidate(4, events = [
    			...events,
    			{
    				id: uuid_1(),
    				title: "New Entry",
    				start: arg.date,
    				end: arg.date.clone().set({ hour: 17, minute: 0, second: 0 }),
    				allDay: false,
    				editable: true,
    				startEditable: true,
    				durationEditable: true,
    				overlap: false
    			}
    		]);

    		console.log(events);
    		return update();
    	};

    	eventClick = function (e) {
    		console.log("eventClick");
    		console.log("e");
    		return console.log(e.detail);
    	};

    	eventDrop = function (e) {
    		console.log("eventDrop");
    		console.log("e");
    		return console.log(e.detail);
    	};

    	eventResize = function (e) {
    		var index;
    		console.log("eventResize");
    		console.log("e");
    		console.log(e.detail.event);

    		index = events.findIndex(function (o) {
    			return o.id === e.detail.event.id;
    		});

    		$$invalidate(4, events[index].start = e.detail.event.start, events);
    		$$invalidate(4, events[index].end = e.detail.event.end, events);
    		return update();
    	};

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<Timesheet> was created with unknown prop '${key}'`);
    	});

    	function fullcalendar_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(0, calendarComponentRef = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(8, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			calendarComponentRef,
    			calendarWeekends,
    			eventClick,
    			eventDrop,
    			eventResize,
    			events,
    			gotoPast,
    			handleDateClick,
    			plugins,
    			saveCb,
    			toggleWeekends,
    			update
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(8, item = $$props.item);
    		if ("calendarComponentRef" in $$props) $$invalidate(0, calendarComponentRef = $$props.calendarComponentRef);
    		if ("calendarWeekends" in $$props) $$invalidate(1, calendarWeekends = $$props.calendarWeekends);
    		if ("eventClick" in $$props) $$invalidate(2, eventClick = $$props.eventClick);
    		if ("eventDrop" in $$props) eventDrop = $$props.eventDrop;
    		if ("eventResize" in $$props) $$invalidate(3, eventResize = $$props.eventResize);
    		if ("events" in $$props) $$invalidate(4, events = $$props.events);
    		if ("gotoPast" in $$props) $$invalidate(5, gotoPast = $$props.gotoPast);
    		if ("handleDateClick" in $$props) $$invalidate(6, handleDateClick = $$props.handleDateClick);
    		if ("plugins" in $$props) plugins = $$props.plugins;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("toggleWeekends" in $$props) $$invalidate(7, toggleWeekends = $$props.toggleWeekends);
    		if ("update" in $$props) update = $$props.update;
    	};

    	return [
    		calendarComponentRef,
    		calendarWeekends,
    		eventClick,
    		eventResize,
    		events,
    		gotoPast,
    		handleDateClick,
    		toggleWeekends,
    		item,
    		eventDrop,
    		plugins,
    		saveCb,
    		update,
    		fullcalendar_binding
    	];
    }

    class Timesheet$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { item: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Timesheet",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[8] === undefined && !("item" in props)) {
    			console_1$3.warn("<Timesheet> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Timesheet>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Timesheet>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var DEFAULT_CONFIG = {
      // minimum relative difference between two compared values,
      // used by all comparison functions
      epsilon: 1e-12,
      // type of default matrix output. Choose 'matrix' (default) or 'array'
      matrix: 'Matrix',
      // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
      number: 'number',
      // number of significant digits in BigNumbers
      precision: 64,
      // predictable output type of functions. When true, output type depends only
      // on the input types. When false (default), output type can vary depending
      // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
      // predictable is false, and returns `NaN` when true.
      predictable: false,
      // random seed for seeded pseudo random number generation
      // null = randomly seed
      randomSeed: null
    };

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    // type checks for all known types
    //
    // note that:
    //
    // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
    //   instanceof cannot be used because that would not allow to pass data from
    //   one instance of math.js to another since each has it's own instance of Unit.
    // - check the `isUnit` property via the constructor, so there will be no
    //   matches for "fake" instances like plain objects with a property `isUnit`.
    //   That is important for security reasons.
    // - It must not be possible to override the type checks used internally,
    //   for security reasons, so these functions are not exposed in the expression
    //   parser.
    function isNumber$f(x) {
      return typeof x === 'number';
    }
    function isBigNumber(x) {
      return x && x.constructor.prototype.isBigNumber === true || false;
    }
    function isComplex(x) {
      return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
    }
    function isFraction(x) {
      return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
    }
    function isUnit(x) {
      return x && x.constructor.prototype.isUnit === true || false;
    }
    function isString$m(x) {
      return typeof x === 'string';
    }
    var isArray$i = Array.isArray;
    function isMatrix(x) {
      return x && x.constructor.prototype.isMatrix === true || false;
    }
    /**
     * Test whether a value is a collection: an Array or Matrix
     * @param {*} x
     * @returns {boolean} isCollection
     */

    function isCollection(x) {
      return Array.isArray(x) || isMatrix(x);
    }
    function isDenseMatrix(x) {
      return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isSparseMatrix(x) {
      return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
    }
    function isRange(x) {
      return x && x.constructor.prototype.isRange === true || false;
    }
    function isIndex(x) {
      return x && x.constructor.prototype.isIndex === true || false;
    }
    function isBoolean$7(x) {
      return typeof x === 'boolean';
    }
    function isResultSet(x) {
      return x && x.constructor.prototype.isResultSet === true || false;
    }
    function isHelp(x) {
      return x && x.constructor.prototype.isHelp === true || false;
    }
    function isFunction$f(x) {
      return typeof x === 'function';
    }
    function isDate$c(x) {
      return x instanceof Date;
    }
    function isRegExp$9(x) {
      return x instanceof RegExp;
    }
    function isObject$1(x) {
      return !!(x && _typeof(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
    }
    function isNull(x) {
      return x === null;
    }
    function isUndefined$1(x) {
      return x === undefined;
    }
    function isAccessorNode(x) {
      return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isArrayNode(x) {
      return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isAssignmentNode(x) {
      return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isBlockNode(x) {
      return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConditionalNode(x) {
      return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isConstantNode(x) {
      return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionAssignmentNode(x) {
      return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isFunctionNode(x) {
      return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isIndexNode(x) {
      return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isNode(x) {
      return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isObjectNode(x) {
      return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isOperatorNode(x) {
      return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isParenthesisNode(x) {
      return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isRangeNode(x) {
      return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isSymbolNode(x) {
      return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
    }
    function isChain(x) {
      return x && x.constructor.prototype.isChain === true || false;
    }
    function typeOf(x) {
      var t = _typeof(x);

      if (t === 'object') {
        // JavaScript types
        if (x === null) return 'null';
        if (Array.isArray(x)) return 'Array';
        if (x instanceof Date) return 'Date';
        if (x instanceof RegExp) return 'RegExp'; // math.js types

        if (isBigNumber(x)) return 'BigNumber';
        if (isComplex(x)) return 'Complex';
        if (isFraction(x)) return 'Fraction';
        if (isMatrix(x)) return 'Matrix';
        if (isUnit(x)) return 'Unit';
        if (isIndex(x)) return 'Index';
        if (isRange(x)) return 'Range';
        if (isResultSet(x)) return 'ResultSet';
        if (isNode(x)) return x.type;
        if (isChain(x)) return 'Chain';
        if (isHelp(x)) return 'Help';
        return 'Object';
      }

      if (t === 'function') return 'Function';
      return t; // can be 'string', 'number', 'boolean', ...
    }

    function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }
    /**
     * Clone an object
     *
     *     clone(x)
     *
     * Can clone any primitive type, array, and object.
     * If x has a function clone, this function will be invoked to clone the object.
     *
     * @param {*} x
     * @return {*} clone
     */

    function clone$3(x) {
      var type = _typeof$1(x); // immutable primitive types


      if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
        return x;
      } // use clone function of the object when available


      if (typeof x.clone === 'function') {
        return x.clone();
      } // array


      if (Array.isArray(x)) {
        return x.map(function (value) {
          return clone$3(value);
        });
      }

      if (x instanceof Date) return new Date(x.valueOf());
      if (isBigNumber(x)) return x; // bignumbers are immutable

      if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
      // object

      return mapObject(x, clone$3);
    }
    /**
     * Apply map to all properties of an object
     * @param {Object} object
     * @param {function} callback
     * @return {Object} Returns a copy of the object with mapped properties
     */

    function mapObject(object, callback) {
      var clone = {};

      for (var key in object) {
        if (hasOwnProperty$1(object, key)) {
          clone[key] = callback(object[key]);
        }
      }

      return clone;
    }
    /**
     * Extend object a with the properties of object b
     * @param {Object} a
     * @param {Object} b
     * @return {Object} a
     */

    function extend$1(a, b) {
      for (var prop in b) {
        if (hasOwnProperty$1(b, prop)) {
          a[prop] = b[prop];
        }
      }

      return a;
    }
    /**
     * Deep extend an object a with the properties of object b
     * @param {Object} a
     * @param {Object} b
     * @returns {Object}
     */

    function deepExtend(a, b) {
      // TODO: add support for Arrays to deepExtend
      if (Array.isArray(b)) {
        throw new TypeError('Arrays are not supported by deepExtend');
      }

      for (var prop in b) {
        if (hasOwnProperty$1(b, prop)) {
          if (b[prop] && b[prop].constructor === Object) {
            if (a[prop] === undefined) {
              a[prop] = {};
            }

            if (a[prop] && a[prop].constructor === Object) {
              deepExtend(a[prop], b[prop]);
            } else {
              a[prop] = b[prop];
            }
          } else if (Array.isArray(b[prop])) {
            throw new TypeError('Arrays are not supported by deepExtend');
          } else {
            a[prop] = b[prop];
          }
        }
      }

      return a;
    }
    /**
     * Deep test equality of all fields in two pairs of arrays or objects.
     * Compares values and functions strictly (ie. 2 is not the same as '2').
     * @param {Array | Object} a
     * @param {Array | Object} b
     * @returns {boolean}
     */

    function deepStrictEqual(a, b) {
      var prop, i, len;

      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }

        if (a.length !== b.length) {
          return false;
        }

        for (i = 0, len = a.length; i < len; i++) {
          if (!deepStrictEqual(a[i], b[i])) {
            return false;
          }
        }

        return true;
      } else if (typeof a === 'function') {
        return a === b;
      } else if (a instanceof Object) {
        if (Array.isArray(b) || !(b instanceof Object)) {
          return false;
        }

        for (prop in a) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
            return false;
          }
        }

        for (prop in b) {
          // noinspection JSUnfilteredForInLoop
          if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
            return false;
          }
        }

        return true;
      } else {
        return a === b;
      }
    }
    /**
     * Recursively flatten a nested object.
     * @param {Object} nestedObject
     * @return {Object} Returns the flattened object
     */

    function deepFlatten(nestedObject) {
      var flattenedObject = {};

      _deepFlatten(nestedObject, flattenedObject);

      return flattenedObject;
    } // helper function used by deepFlatten

    function _deepFlatten(nestedObject, flattenedObject) {
      for (var prop in nestedObject) {
        if (hasOwnProperty$1(nestedObject, prop)) {
          var value = nestedObject[prop];

          if (_typeof$1(value) === 'object' && value !== null) {
            _deepFlatten(value, flattenedObject);
          } else {
            flattenedObject[prop] = value;
          }
        }
      }
    }
    /**
     * Attach a lazy loading property to a constant.
     * The given function `fn` is called once when the property is first requested.
     *
     * @param {Object} object         Object where to add the property
     * @param {string} prop           Property name
     * @param {Function} valueResolver Function returning the property value. Called
     *                                without arguments.
     */

    function lazy$1(object, prop, valueResolver) {
      var _uninitialized = true;

      var _value;

      Object.defineProperty(object, prop, {
        get: function get() {
          if (_uninitialized) {
            _value = valueResolver();
            _uninitialized = false;
          }

          return _value;
        },
        set: function set(value) {
          _value = value;
          _uninitialized = false;
        },
        configurable: true,
        enumerable: true
      });
    }
    /**
     * Traverse a path into an object.
     * When a namespace is missing, it will be created
     * @param {Object} object
     * @param {string | string[]} path   A dot separated string like 'name.space'
     * @return {Object} Returns the object at the end of the path
     */

    function traverse(object, path) {
      if (path && typeof path === 'string') {
        return traverse(object, path.split('.'));
      }

      var obj = object;

      if (path) {
        for (var i = 0; i < path.length; i++) {
          var key = path[i];

          if (!(key in obj)) {
            obj[key] = {};
          }

          obj = obj[key];
        }
      }

      return obj;
    }
    /**
     * A safe hasOwnProperty
     * @param {Object} object
     * @param {string} property
     */

    function hasOwnProperty$1(object, property) {
      return object && Object.hasOwnProperty.call(object, property);
    }
    /**
     * Test whether an object is a factory. a factory has fields:
     *
     * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
     * - name: string (optional)
     * - path: string    A dot separated path (optional)
     * - math: boolean   If true (false by default), the math namespace is passed
     *                   as fifth argument of the factory function
     *
     * @param {*} object
     * @returns {boolean}
     */

    function isLegacyFactory(object) {
      return object && typeof object.factory === 'function';
    }
    /**
     * Shallow version of pick, creating an object composed of the picked object properties
     * but not for nested properties
     * @param {Object} object
     * @param {string[]} properties
     * @return {Object}
     */

    function pickShallow(object, properties) {
      var copy = {};

      for (var i = 0; i < properties.length; i++) {
        var key = properties[i];
        var value = object[key];

        if (value !== undefined) {
          copy[key] = value;
        }
      }

      return copy;
    }
    function values$1(object) {
      return Object.keys(object).map(function (key) {
        return object[key];
      });
    } // helper function to test whether a string contains a path like 'user.name'

    var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

    var NUMBER_OPTIONS$1 = ['number', 'BigNumber', 'Fraction']; // valid values for option number

    function configFactory(config, emit) {
      /**
       * Set configuration options for math.js, and get current options.
       * Will emit a 'config' event, with arguments (curr, prev, changes).
       *
       * This function is only available on a mathjs instance created using `create`.
       *
       * Syntax:
       *
       *     math.config(config: Object): Object
       *
       * Examples:
       *
       *
       *     import { create, all } from 'mathjs'
       *
       *     // create a mathjs instance
       *     const math = create(all)
       *
       *     math.config().number                // outputs 'number'
       *     math.evaluate('0.4')                // outputs number 0.4
       *     math.config({number: 'Fraction'})
       *     math.evaluate('0.4')                // outputs Fraction 2/5
       *
       * @param {Object} [options] Available options:
       *                            {number} epsilon
       *                              Minimum relative difference between two
       *                              compared values, used by all comparison functions.
       *                            {string} matrix
       *                              A string 'Matrix' (default) or 'Array'.
       *                            {string} number
       *                              A string 'number' (default), 'BigNumber', or 'Fraction'
       *                            {number} precision
       *                              The number of significant digits for BigNumbers.
       *                              Not applicable for Numbers.
       *                            {string} parenthesis
       *                              How to display parentheses in LaTeX and string
       *                              output.
       *                            {string} randomSeed
       *                              Random seed for seeded pseudo random number generator.
       *                              Set to null to randomly seed.
       * @return {Object} Returns the current configuration
       */
      function _config(options) {
        if (options) {
          var prev = mapObject(config, clone$3); // validate some of the options

          validateOption(options, 'matrix', MATRIX_OPTIONS);
          validateOption(options, 'number', NUMBER_OPTIONS$1); // merge options

          deepExtend(config, options);
          var curr = mapObject(config, clone$3);
          var changes = mapObject(options, clone$3); // emit 'config' event

          emit('config', curr, prev, changes);
          return curr;
        } else {
          return mapObject(config, clone$3);
        }
      } // attach the valid options to the function so they can be extended


      _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
      _config.NUMBER_OPTIONS = NUMBER_OPTIONS$1; // attach the config properties as readonly properties to the config function

      Object.keys(DEFAULT_CONFIG).forEach(function (key) {
        Object.defineProperty(_config, key, {
          get: function get() {
            return config[key];
          },
          enumerable: true,
          configurable: true
        });
      });
      return _config;
    }
    /**
     * Test whether an Array contains a specific item.
     * @param {Array.<string>} array
     * @param {string} item
     * @return {boolean}
     */

    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }
    /**
     * Find a string in an array. Case insensitive search
     * @param {Array.<string>} array
     * @param {string} item
     * @return {number} Returns the index when found. Returns -1 when not found
     */


    function findIndex$1(array, item) {
      return array.map(function (i) {
        return i.toLowerCase();
      }).indexOf(item.toLowerCase());
    }
    /**
     * Validate an option
     * @param {Object} options         Object with options
     * @param {string} name            Name of the option to validate
     * @param {Array.<string>} values  Array with valid values for this option
     */


    function validateOption(options, name, values) {
      if (options[name] !== undefined && !contains(values, options[name])) {
        var index = findIndex$1(values, options[name]);

        if (index !== -1) {
          // right value, wrong casing
          // TODO: lower case values are deprecated since v3, remove this warning some day.
          console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
          options[name] = values[index]; // change the option to the right casing
        } else {
          // unknown value
          console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
        }
      }
    }

    var typedFunction = createCommonjsModule(function (module, exports) {

    (function (root, factory) {
      {
        // OldNode. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like OldNode.
        module.exports = factory();
      }
    }(commonjsGlobal, function () {

      function ok () {
        return true;
      }

      function notOk () {
        return false;
      }

      function undef () {
        return undefined;
      }

      /**
       * @typedef {{
       *   params: Param[],
       *   fn: function
       * }} Signature
       *
       * @typedef {{
       *   types: Type[],
       *   restParam: boolean
       * }} Param
       *
       * @typedef {{
       *   name: string,
       *   typeIndex: number,
       *   test: function,
       *   conversion?: ConversionDef,
       *   conversionIndex: number,
       * }} Type
       *
       * @typedef {{
       *   from: string,
       *   to: string,
       *   convert: function (*) : *
       * }} ConversionDef
       *
       * @typedef {{
       *   name: string,
       *   test: function(*) : boolean
       * }} TypeDef
       */

      // create a new instance of typed-function
      function create () {
        // data type tests
        var _types = [
          { name: 'number',    test: function (x) { return typeof x === 'number' } },
          { name: 'string',    test: function (x) { return typeof x === 'string' } },
          { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
          { name: 'Function',  test: function (x) { return typeof x === 'function'} },
          { name: 'Array',     test: Array.isArray },
          { name: 'Date',      test: function (x) { return x instanceof Date } },
          { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
          { name: 'Object',    test: function (x) {
            return typeof x === 'object' && x !== null && x.constructor === Object
          }},
          { name: 'null',      test: function (x) { return x === null } },
          { name: 'undefined', test: function (x) { return x === undefined } }
        ];

        var anyType = {
          name: 'any',
          test: ok
        };

        // types which need to be ignored
        var _ignore = [];

        // type conversions
        var _conversions = [];

        // This is a temporary object, will be replaced with a typed function at the end
        var typed = {
          types: _types,
          conversions: _conversions,
          ignore: _ignore
        };

        /**
         * Find the test function for a type
         * @param {String} typeName
         * @return {TypeDef} Returns the type definition when found,
         *                    Throws a TypeError otherwise
         */
        function findTypeByName (typeName) {
          var entry = findInArray(typed.types, function (entry) {
            return entry.name === typeName;
          });

          if (entry) {
            return entry;
          }

          if (typeName === 'any') { // special baked-in case 'any'
            return anyType;
          }

          var hint = findInArray(typed.types, function (entry) {
            return entry.name.toLowerCase() === typeName.toLowerCase();
          });

          throw new TypeError('Unknown type "' + typeName + '"' +
              (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
        }

        /**
         * Find the index of a type definition. Handles special case 'any'
         * @param {TypeDef} type
         * @return {number}
         */
        function findTypeIndex(type) {
          if (type === anyType) {
            return 999;
          }

          return typed.types.indexOf(type);
        }

        /**
         * Find a type that matches a value.
         * @param {*} value
         * @return {string} Returns the name of the first type for which
         *                  the type test matches the value.
         */
        function findTypeName(value) {
          var entry = findInArray(typed.types, function (entry) {
            return entry.test(value);
          });

          if (entry) {
            return entry.name;
          }

          throw new TypeError('Value has unknown type. Value: ' + value);
        }

        /**
         * Find a specific signature from a (composed) typed function, for example:
         *
         *   typed.find(fn, ['number', 'string'])
         *   typed.find(fn, 'number, string')
         *
         * Function find only only works for exact matches.
         *
         * @param {Function} fn                   A typed-function
         * @param {string | string[]} signature   Signature to be found, can be
         *                                        an array or a comma separated string.
         * @return {Function}                     Returns the matching signature, or
         *                                        throws an error when no signature
         *                                        is found.
         */
        function find (fn, signature) {
          if (!fn.signatures) {
            throw new TypeError('Function is no typed-function');
          }

          // normalize input
          var arr;
          if (typeof signature === 'string') {
            arr = signature.split(',');
            for (var i = 0; i < arr.length; i++) {
              arr[i] = arr[i].trim();
            }
          }
          else if (Array.isArray(signature)) {
            arr = signature;
          }
          else {
            throw new TypeError('String array or a comma separated string expected');
          }

          var str = arr.join(',');

          // find an exact match
          var match = fn.signatures[str];
          if (match) {
            return match;
          }

          // TODO: extend find to match non-exact signatures

          throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
        }

        /**
         * Convert a given value to another data type.
         * @param {*} value
         * @param {string} type
         */
        function convert (value, type) {
          var from = findTypeName(value);

          // check conversion is needed
          if (type === from) {
            return value;
          }

          for (var i = 0; i < typed.conversions.length; i++) {
            var conversion = typed.conversions[i];
            if (conversion.from === from && conversion.to === type) {
              return conversion.convert(value);
            }
          }

          throw new Error('Cannot convert from ' + from + ' to ' + type);
        }
        
        /**
         * Stringify parameters in a normalized way
         * @param {Param[]} params
         * @return {string}
         */
        function stringifyParams (params) {
          return params
              .map(function (param) {
                var typeNames = param.types.map(getTypeName);

                return (param.restParam ? '...' : '') + typeNames.join('|');
              })
              .join(',');
        }

        /**
         * Parse a parameter, like "...number | boolean"
         * @param {string} param
         * @param {ConversionDef[]} conversions
         * @return {Param} param
         */
        function parseParam (param, conversions) {
          var restParam = param.indexOf('...') === 0;
          var types = (!restParam)
              ? param
              : (param.length > 3)
                  ? param.slice(3)
                  : 'any';

          var typeNames = types.split('|').map(trim)
              .filter(notEmpty)
              .filter(notIgnore);

          var matchingConversions = filterConversions(conversions, typeNames);

          var exactTypes = typeNames.map(function (typeName) {
            var type = findTypeByName(typeName);

            return {
              name: typeName,
              typeIndex: findTypeIndex(type),
              test: type.test,
              conversion: null,
              conversionIndex: -1
            };
          });

          var convertibleTypes = matchingConversions.map(function (conversion) {
            var type = findTypeByName(conversion.from);

            return {
              name: conversion.from,
              typeIndex: findTypeIndex(type),
              test: type.test,
              conversion: conversion,
              conversionIndex: conversions.indexOf(conversion)
            };
          });

          return {
            types: exactTypes.concat(convertibleTypes),
            restParam: restParam
          };
        }

        /**
         * Parse a signature with comma separated parameters,
         * like "number | boolean, ...string"
         * @param {string} signature
         * @param {function} fn
         * @param {ConversionDef[]} conversions
         * @return {Signature | null} signature
         */
        function parseSignature (signature, fn, conversions) {
          var params = [];

          if (signature.trim() !== '') {
            params = signature
                .split(',')
                .map(trim)
                .map(function (param, index, array) {
                  var parsedParam = parseParam(param, conversions);

                  if (parsedParam.restParam && (index !== array.length - 1)) {
                    throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
                        'only allowed for the last parameter');
                  }

                  return parsedParam;
              });
          }

          if (params.some(isInvalidParam)) {
            // invalid signature: at least one parameter has no types
            // (they may have been filtered)
            return null;
          }

          return {
            params: params,
            fn: fn
          };
        }

        /**
         * Test whether a set of params contains a restParam
         * @param {Param[]} params
         * @return {boolean} Returns true when the last parameter is a restParam
         */
        function hasRestParam(params) {
          var param = last(params);
          return param ? param.restParam : false;
        }

        /**
         * Test whether a parameter contains conversions
         * @param {Param} param
         * @return {boolean} Returns true when at least one of the parameters
         *                   contains a conversion.
         */
        function hasConversions(param) {
          return param.types.some(function (type) {
            return type.conversion != null;
          });
        }

        /**
         * Create a type test for a single parameter, which can have one or multiple
         * types.
         * @param {Param} param
         * @return {function(x: *) : boolean} Returns a test function
         */
        function compileTest(param) {
          if (!param || param.types.length === 0) {
            // nothing to do
            return ok;
          }
          else if (param.types.length === 1) {
            return findTypeByName(param.types[0].name).test;
          }
          else if (param.types.length === 2) {
            var test0 = findTypeByName(param.types[0].name).test;
            var test1 = findTypeByName(param.types[1].name).test;
            return function or(x) {
              return test0(x) || test1(x);
            }
          }
          else { // param.types.length > 2
            var tests = param.types.map(function (type) {
              return findTypeByName(type.name).test;
            });
            return function or(x) {
              for (var i = 0; i < tests.length; i++) {
                if (tests[i](x)) {
                  return true;
                }
              }
              return false;
            }
          }
        }

        /**
         * Create a test for all parameters of a signature
         * @param {Param[]} params
         * @return {function(args: Array<*>) : boolean}
         */
        function compileTests(params) {
          var tests, test0, test1;

          if (hasRestParam(params)) {
            // variable arguments like '...number'
            tests = initial(params).map(compileTest);
            var varIndex = tests.length;
            var lastTest = compileTest(last(params));
            var testRestParam = function (args) {
              for (var i = varIndex; i < args.length; i++) {
                if (!lastTest(args[i])) {
                  return false;
                }
              }
              return true;
            };

            return function testArgs(args) {
              for (var i = 0; i < tests.length; i++) {
                if (!tests[i](args[i])) {
                  return false;
                }
              }
              return testRestParam(args) && (args.length >= varIndex + 1);
            };
          }
          else {
            // no variable arguments
            if (params.length === 0) {
              return function testArgs(args) {
                return args.length === 0;
              };
            }
            else if (params.length === 1) {
              test0 = compileTest(params[0]);
              return function testArgs(args) {
                return test0(args[0]) && args.length === 1;
              };
            }
            else if (params.length === 2) {
              test0 = compileTest(params[0]);
              test1 = compileTest(params[1]);
              return function testArgs(args) {
                return test0(args[0]) && test1(args[1]) && args.length === 2;
              };
            }
            else { // arguments.length > 2
              tests = params.map(compileTest);
              return function testArgs(args) {
                for (var i = 0; i < tests.length; i++) {
                  if (!tests[i](args[i])) {
                    return false;
                  }
                }
                return args.length === tests.length;
              };
            }
          }
        }

        /**
         * Find the parameter at a specific index of a signature.
         * Handles rest parameters.
         * @param {Signature} signature
         * @param {number} index
         * @return {Param | null} Returns the matching parameter when found,
         *                        null otherwise.
         */
        function getParamAtIndex(signature, index) {
          return index < signature.params.length
              ? signature.params[index]
              : hasRestParam(signature.params)
                  ? last(signature.params)
                  : null
        }

        /**
         * Get all type names of a parameter
         * @param {Signature} signature
         * @param {number} index
         * @param {boolean} excludeConversions
         * @return {string[]} Returns an array with type names
         */
        function getExpectedTypeNames (signature, index, excludeConversions) {
          var param = getParamAtIndex(signature, index);
          var types = param
              ? excludeConversions
                      ? param.types.filter(isExactType)
                      : param.types
              : [];

          return types.map(getTypeName);
        }

        /**
         * Returns the name of a type
         * @param {Type} type
         * @return {string} Returns the type name
         */
        function getTypeName(type) {
          return type.name;
        }

        /**
         * Test whether a type is an exact type or conversion
         * @param {Type} type
         * @return {boolean} Returns true when
         */
        function isExactType(type) {
          return type.conversion === null || type.conversion === undefined;
        }

        /**
         * Helper function for creating error messages: create an array with
         * all available types on a specific argument index.
         * @param {Signature[]} signatures
         * @param {number} index
         * @return {string[]} Returns an array with available types
         */
        function mergeExpectedParams(signatures, index) {
          var typeNames = uniq(flatMap(signatures, function (signature) {
            return getExpectedTypeNames(signature, index, false);
          }));

          return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
        }

        /**
         * Create
         * @param {string} name             The name of the function
         * @param {array.<*>} args          The actual arguments passed to the function
         * @param {Signature[]} signatures  A list with available signatures
         * @return {TypeError} Returns a type error with additional data
         *                     attached to it in the property `data`
         */
        function createError(name, args, signatures) {
          var err, expected;
          var _name = name || 'unnamed';

          // test for wrong type at some index
          var matchingSignatures = signatures;
          var index;
          for (index = 0; index < args.length; index++) {
            var nextMatchingDefs = matchingSignatures.filter(function (signature) {
              var test = compileTest(getParamAtIndex(signature, index));
              return (index < signature.params.length || hasRestParam(signature.params)) &&
                  test(args[index]);
            });

            if (nextMatchingDefs.length === 0) {
              // no matching signatures anymore, throw error "wrong type"
              expected = mergeExpectedParams(matchingSignatures, index);
              if (expected.length > 0) {
                var actualType = findTypeName(args[index]);

                err = new TypeError('Unexpected type of argument in function ' + _name +
                    ' (expected: ' + expected.join(' or ') +
                    ', actual: ' + actualType + ', index: ' + index + ')');
                err.data = {
                  category: 'wrongType',
                  fn: _name,
                  index: index,
                  actual: actualType,
                  expected: expected
                };
                return err;
              }
            }
            else {
              matchingSignatures = nextMatchingDefs;
            }
          }

          // test for too few arguments
          var lengths = matchingSignatures.map(function (signature) {
            return hasRestParam(signature.params) ? Infinity : signature.params.length;
          });
          if (args.length < Math.min.apply(null, lengths)) {
            expected = mergeExpectedParams(matchingSignatures, index);
            err = new TypeError('Too few arguments in function ' + _name +
                ' (expected: ' + expected.join(' or ') +
                ', index: ' + args.length + ')');
            err.data = {
              category: 'tooFewArgs',
              fn: _name,
              index: args.length,
              expected: expected
            };
            return err;
          }

          // test for too many arguments
          var maxLength = Math.max.apply(null, lengths);
          if (args.length > maxLength) {
            err = new TypeError('Too many arguments in function ' + _name +
                ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
            err.data = {
              category: 'tooManyArgs',
              fn: _name,
              index: args.length,
              expectedLength: maxLength
            };
            return err;
          }

          err = new TypeError('Arguments of type "' + args.join(', ') +
              '" do not match any of the defined signatures of function ' + _name + '.');
          err.data = {
            category: 'mismatch',
            actual: args.map(findTypeName)
          };
          return err;
        }

        /**
         * Find the lowest index of all exact types of a parameter (no conversions)
         * @param {Param} param
         * @return {number} Returns the index of the lowest type in typed.types
         */
        function getLowestTypeIndex (param) {
          var min = 999;

          for (var i = 0; i < param.types.length; i++) {
            if (isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].typeIndex);
            }
          }

          return min;
        }

        /**
         * Find the lowest index of the conversion of all types of the parameter
         * having a conversion
         * @param {Param} param
         * @return {number} Returns the lowest index of the conversions of this type
         */
        function getLowestConversionIndex (param) {
          var min = 999;

          for (var i = 0; i < param.types.length; i++) {
            if (!isExactType(param.types[i])) {
              min = Math.min(min, param.types[i].conversionIndex);
            }
          }

          return min;
        }

        /**
         * Compare two params
         * @param {Param} param1
         * @param {Param} param2
         * @return {number} returns a negative number when param1 must get a lower
         *                  index than param2, a positive number when the opposite,
         *                  or zero when both are equal
         */
        function compareParams (param1, param2) {
          var c;

          // compare having a rest parameter or not
          c = param1.restParam - param2.restParam;
          if (c !== 0) {
            return c;
          }

          // compare having conversions or not
          c = hasConversions(param1) - hasConversions(param2);
          if (c !== 0) {
            return c;
          }

          // compare the index of the types
          c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
          if (c !== 0) {
            return c;
          }

          // compare the index of any conversion
          return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
        }

        /**
         * Compare two signatures
         * @param {Signature} signature1
         * @param {Signature} signature2
         * @return {number} returns a negative number when param1 must get a lower
         *                  index than param2, a positive number when the opposite,
         *                  or zero when both are equal
         */
        function compareSignatures (signature1, signature2) {
          var len = Math.min(signature1.params.length, signature2.params.length);
          var i;
          var c;

          // compare whether the params have conversions at all or not
          c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
          if (c !== 0) {
            return c;
          }

          // next compare whether the params have conversions one by one
          for (i = 0; i < len; i++) {
            c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
            if (c !== 0) {
              return c;
            }
          }

          // compare the types of the params one by one
          for (i = 0; i < len; i++) {
            c = compareParams(signature1.params[i], signature2.params[i]);
            if (c !== 0) {
              return c;
            }
          }

          // compare the number of params
          return signature1.params.length - signature2.params.length;
        }

        /**
         * Get params containing all types that can be converted to the defined types.
         *
         * @param {ConversionDef[]} conversions
         * @param {string[]} typeNames
         * @return {ConversionDef[]} Returns the conversions that are available
         *                        for every type (if any)
         */
        function filterConversions(conversions, typeNames) {
          var matches = {};

          conversions.forEach(function (conversion) {
            if (typeNames.indexOf(conversion.from) === -1 &&
                typeNames.indexOf(conversion.to) !== -1 &&
                !matches[conversion.from]) {
              matches[conversion.from] = conversion;
            }
          });

          return Object.keys(matches).map(function (from) {
            return matches[from];
          });
        }

        /**
         * Preprocess arguments before calling the original function:
         * - if needed convert the parameters
         * - in case of rest parameters, move the rest parameters into an Array
         * @param {Param[]} params
         * @param {function} fn
         * @return {function} Returns a wrapped function
         */
        function compileArgsPreprocessing(params, fn) {
          var fnConvert = fn;

          // TODO: can we make this wrapper function smarter/simpler?

          if (params.some(hasConversions)) {
            var restParam = hasRestParam(params);
            var compiledConversions = params.map(compileArgConversion);

            fnConvert = function convertArgs() {
              var args = [];
              var last = restParam ? arguments.length - 1 : arguments.length;
              for (var i = 0; i < last; i++) {
                args[i] = compiledConversions[i](arguments[i]);
              }
              if (restParam) {
                args[last] = arguments[last].map(compiledConversions[last]);
              }

              return fn.apply(null, args);
            };
          }

          var fnPreprocess = fnConvert;
          if (hasRestParam(params)) {
            var offset = params.length - 1;

            fnPreprocess = function preprocessRestParams () {
              return fnConvert.apply(null,
                  slice(arguments, 0, offset).concat([slice(arguments, offset)]));
            };
          }

          return fnPreprocess;
        }

        /**
         * Compile conversion for a parameter to the right type
         * @param {Param} param
         * @return {function} Returns the wrapped function that will convert arguments
         *
         */
        function compileArgConversion(param) {
          var test0, test1, conversion0, conversion1;
          var tests = [];
          var conversions = [];

          param.types.forEach(function (type) {
            if (type.conversion) {
              tests.push(findTypeByName(type.conversion.from).test);
              conversions.push(type.conversion.convert);
            }
          });

          // create optimized conversion functions depending on the number of conversions
          switch (conversions.length) {
            case 0:
              return function convertArg(arg) {
                return arg;
              }

            case 1:
              test0 = tests[0];
              conversion0 = conversions[0];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg)
                }
                return arg;
              }

            case 2:
              test0 = tests[0];
              test1 = tests[1];
              conversion0 = conversions[0];
              conversion1 = conversions[1];
              return function convertArg(arg) {
                if (test0(arg)) {
                  return conversion0(arg)
                }
                if (test1(arg)) {
                  return conversion1(arg)
                }
                return arg;
              }

            default:
              return function convertArg(arg) {
                for (var i = 0; i < conversions.length; i++) {
                  if (tests[i](arg)) {
                    return conversions[i](arg);
                  }
                }
                return arg;
              }
          }
        }

        /**
         * Convert an array with signatures into a map with signatures,
         * where signatures with union types are split into separate signatures
         *
         * Throws an error when there are conflicting types
         *
         * @param {Signature[]} signatures
         * @return {Object.<string, function>}  Returns a map with signatures
         *                                      as key and the original function
         *                                      of this signature as value.
         */
        function createSignaturesMap(signatures) {
          var signaturesMap = {};
          signatures.forEach(function (signature) {
            if (!signature.params.some(hasConversions)) {
              splitParams(signature.params, true).forEach(function (params) {
                signaturesMap[stringifyParams(params)] = signature.fn;
              });
            }
          });

          return signaturesMap;
        }

        /**
         * Split params with union types in to separate params.
         *
         * For example:
         *
         *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
         *     // returns:
         *     // [
         *     //   ['Array', 'string'],
         *     //   ['Array', 'RegExp'],
         *     //   ['Object', 'string'],
         *     //   ['Object', 'RegExp']
         *     // ]
         *
         * @param {Param[]} params
         * @param {boolean} ignoreConversionTypes
         * @return {Param[]}
         */
        function splitParams(params, ignoreConversionTypes) {
          function _splitParams(params, index, types) {
            if (index < params.length) {
              var param = params[index];
              var filteredTypes = ignoreConversionTypes
                  ? param.types.filter(isExactType)
                  : param.types;
              var typeGroups;

              if (param.restParam) {
                // split the types of a rest parameter in two:
                // one with only exact types, and one with exact types and conversions
                var exactTypes = filteredTypes.filter(isExactType);
                typeGroups = exactTypes.length < filteredTypes.length
                    ? [exactTypes, filteredTypes]
                    : [filteredTypes];

              }
              else {
                // split all the types of a regular parameter into one type per group
                typeGroups = filteredTypes.map(function (type) {
                  return [type]
                });
              }

              // recurse over the groups with types
              return flatMap(typeGroups, function (typeGroup) {
                return _splitParams(params, index + 1, types.concat([typeGroup]));
              });

            }
            else {
              // we've reached the end of the parameters. Now build a new Param
              var splittedParams = types.map(function (type, typeIndex) {
                return {
                  types: type,
                  restParam: (typeIndex === params.length - 1) && hasRestParam(params)
                }
              });

              return [splittedParams];
            }
          }

          return _splitParams(params, 0, []);
        }

        /**
         * Test whether two signatures have a conflicting signature
         * @param {Signature} signature1
         * @param {Signature} signature2
         * @return {boolean} Returns true when the signatures conflict, false otherwise.
         */
        function hasConflictingParams(signature1, signature2) {
          var ii = Math.max(signature1.params.length, signature2.params.length);

          for (var i = 0; i < ii; i++) {
            var typesNames1 = getExpectedTypeNames(signature1, i, true);
            var typesNames2 = getExpectedTypeNames(signature2, i, true);

            if (!hasOverlap(typesNames1, typesNames2)) {
              return false;
            }
          }

          var len1 = signature1.params.length;
          var len2 = signature2.params.length;
          var restParam1 = hasRestParam(signature1.params);
          var restParam2 = hasRestParam(signature2.params);

          return restParam1
              ? restParam2 ? (len1 === len2) : (len2 >= len1)
              : restParam2 ? (len1 >= len2)  : (len1 === len2)
        }

        /**
         * Create a typed function
         * @param {String} name               The name for the typed function
         * @param {Object.<string, function>} signaturesMap
         *                                    An object with one or
         *                                    multiple signatures as key, and the
         *                                    function corresponding to the
         *                                    signature as value.
         * @return {function}  Returns the created typed function.
         */
        function createTypedFunction(name, signaturesMap) {
          if (Object.keys(signaturesMap).length === 0) {
            throw new SyntaxError('No signatures provided');
          }

          // parse the signatures, and check for conflicts
          var parsedSignatures = [];
          Object.keys(signaturesMap)
              .map(function (signature) {
                return parseSignature(signature, signaturesMap[signature], typed.conversions);
              })
              .filter(notNull)
              .forEach(function (parsedSignature) {
                // check whether this parameter conflicts with already parsed signatures
                var conflictingSignature = findInArray(parsedSignatures, function (s) {
                  return hasConflictingParams(s, parsedSignature)
                });
                if (conflictingSignature) {
                  throw new TypeError('Conflicting signatures "' +
                      stringifyParams(conflictingSignature.params) + '" and "' +
                      stringifyParams(parsedSignature.params) + '".');
                }

                parsedSignatures.push(parsedSignature);
              });

          // split and filter the types of the signatures, and then order them
          var signatures = flatMap(parsedSignatures, function (parsedSignature) {
            var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];

            return params.map(function (params) {
              return {
                params: params,
                fn: parsedSignature.fn
              };
            });
          }).filter(notNull);

          signatures.sort(compareSignatures);

          // we create a highly optimized checks for the first couple of signatures with max 2 arguments
          var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
          var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
          var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
          var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
          var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
          var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
          var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

          // compile the tests
          var tests = signatures.map(function (signature) {
            return compileTests(signature.params);
          });

          var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
          var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
          var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
          var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
          var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
          var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

          var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
          var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
          var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
          var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
          var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
          var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

          // compile the functions
          var fns = signatures.map(function(signature) {
            return compileArgsPreprocessing(signature.params, signature.fn)
          });

          var fn0 = ok0 ? fns[0] : undef;
          var fn1 = ok1 ? fns[1] : undef;
          var fn2 = ok2 ? fns[2] : undef;
          var fn3 = ok3 ? fns[3] : undef;
          var fn4 = ok4 ? fns[4] : undef;
          var fn5 = ok5 ? fns[5] : undef;

          var len0 = ok0 ? signatures[0].params.length : -1;
          var len1 = ok1 ? signatures[1].params.length : -1;
          var len2 = ok2 ? signatures[2].params.length : -1;
          var len3 = ok3 ? signatures[3].params.length : -1;
          var len4 = ok4 ? signatures[4].params.length : -1;
          var len5 = ok5 ? signatures[5].params.length : -1;

          // simple and generic, but also slow
          var iStart = allOk ? 6 : 0;
          var iEnd = signatures.length;
          var generic = function generic() {

            for (var i = iStart; i < iEnd; i++) {
              if (tests[i](arguments)) {
                return fns[i].apply(null, arguments);
              }
            }

            throw createError(name, arguments, signatures);
          };

          // create the typed function
          // fast, specialized version. Falls back to the slower, generic one if needed
          var fn = function fn(arg0, arg1) {

            if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }
            if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }
            if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }
            if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }
            if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }
            if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }

            return generic.apply(null, arguments);
          };

          // attach name the typed function
          try {
            Object.defineProperty(fn, 'name', {value: name});
          }
          catch (err) {
            // old browsers do not support Object.defineProperty and some don't support setting the name property
            // the function name is not essential for the functioning, it's mostly useful for debugging,
            // so it's fine to have unnamed functions.
          }

          // attach signatures to the function
          fn.signatures = createSignaturesMap(signatures);

          return fn;
        }

        /**
         * Test whether a type should be NOT be ignored
         * @param {string} typeName
         * @return {boolean}
         */
        function notIgnore(typeName) {
          return typed.ignore.indexOf(typeName) === -1;
        }

        /**
         * trim a string
         * @param {string} str
         * @return {string}
         */
        function trim(str) {
          return str.trim();
        }

        /**
         * Test whether a string is not empty
         * @param {string} str
         * @return {boolean}
         */
        function notEmpty(str) {
          return !!str;
        }

        /**
         * test whether a value is not strict equal to null
         * @param {*} value
         * @return {boolean}
         */
        function notNull(value) {
          return value !== null;
        }

        /**
         * Test whether a parameter has no types defined
         * @param {Param} param
         * @return {boolean}
         */
        function isInvalidParam (param) {
          return param.types.length === 0;
        }

        /**
         * Return all but the last items of an array
         * @param {Array} arr
         * @return {Array}
         */
        function initial(arr) {
          return arr.slice(0, arr.length - 1);
        }

        /**
         * return the last item of an array
         * @param {Array} arr
         * @return {*}
         */
        function last(arr) {
          return arr[arr.length - 1];
        }

        /**
         * Slice an array or function Arguments
         * @param {Array | Arguments | IArguments} arr
         * @param {number} start
         * @param {number} [end]
         * @return {Array}
         */
        function slice(arr, start, end) {
          return Array.prototype.slice.call(arr, start, end);
        }

        /**
         * Test whether an array contains some item
         * @param {Array} array
         * @param {*} item
         * @return {boolean} Returns true if array contains item, false if not.
         */
        function contains(array, item) {
          return array.indexOf(item) !== -1;
        }

        /**
         * Test whether two arrays have overlapping items
         * @param {Array} array1
         * @param {Array} array2
         * @return {boolean} Returns true when at least one item exists in both arrays
         */
        function hasOverlap(array1, array2) {
          for (var i = 0; i < array1.length; i++) {
            if (contains(array2, array1[i])) {
              return true;
            }
          }

          return false;
        }

        /**
         * Return the first item from an array for which test(arr[i]) returns true
         * @param {Array} arr
         * @param {function} test
         * @return {* | undefined} Returns the first matching item
         *                         or undefined when there is no match
         */
        function findInArray(arr, test) {
          for (var i = 0; i < arr.length; i++) {
            if (test(arr[i])) {
              return arr[i];
            }
          }
          return undefined;
        }

        /**
         * Filter unique items of an array with strings
         * @param {string[]} arr
         * @return {string[]}
         */
        function uniq(arr) {
          var entries = {};
          for (var i = 0; i < arr.length; i++) {
            entries[arr[i]] = true;
          }
          return Object.keys(entries);
        }

        /**
         * Flat map the result invoking a callback for every item in an array.
         * https://gist.github.com/samgiles/762ee337dff48623e729
         * @param {Array} arr
         * @param {function} callback
         * @return {Array}
         */
        function flatMap(arr, callback) {
          return Array.prototype.concat.apply([], arr.map(callback));
        }

        /**
         * Retrieve the function name from a set of typed functions,
         * and check whether the name of all functions match (if given)
         * @param {function[]} fns
         */
        function getName (fns) {
          var name = '';

          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];

            // check whether the names are the same when defined
            if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
              if (name === '') {
                name = fn.name;
              }
              else if (name !== fn.name) {
                var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
                err.data = {
                  actual: fn.name,
                  expected: name
                };
                throw err;
              }
            }
          }

          return name;
        }

        // extract and merge all signatures of a list with typed functions
        function extractSignatures(fns) {
          var err;
          var signaturesMap = {};

          function validateUnique(_signature, _fn) {
            if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
              err = new Error('Signature "' + _signature + '" is defined twice');
              err.data = {signature: _signature};
              throw err;
              // else: both signatures point to the same function, that's fine
            }
          }

          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];

            // test whether this is a typed-function
            if (typeof fn.signatures === 'object') {
              // merge the signatures
              for (var signature in fn.signatures) {
                if (fn.signatures.hasOwnProperty(signature)) {
                  validateUnique(signature, fn.signatures[signature]);
                  signaturesMap[signature] = fn.signatures[signature];
                }
              }
            }
            else if (typeof fn.signature === 'string') {
              validateUnique(fn.signature, fn);
              signaturesMap[fn.signature] = fn;
            }
            else {
              err = new TypeError('Function is no typed-function (index: ' + i + ')');
              err.data = {index: i};
              throw err;
            }
          }

          return signaturesMap;
        }

        typed = createTypedFunction('typed', {
          'string, Object': createTypedFunction,
          'Object': function (signaturesMap) {
            // find existing name
            var fns = [];
            for (var signature in signaturesMap) {
              if (signaturesMap.hasOwnProperty(signature)) {
                fns.push(signaturesMap[signature]);
              }
            }
            var name = getName(fns);
            return createTypedFunction(name, signaturesMap);
          },
          '...Function': function (fns) {
            return createTypedFunction(getName(fns), extractSignatures(fns));
          },
          'string, ...Function': function (name, fns) {
            return createTypedFunction(name, extractSignatures(fns));
          }
        });

        typed.create = create;
        typed.types = _types;
        typed.conversions = _conversions;
        typed.ignore = _ignore;
        typed.convert = convert;
        typed.find = find;

        /**
         * add a type
         * @param {{name: string, test: function}} type
         * @param {boolean} [beforeObjectTest=true]
         *                          If true, the new test will be inserted before
         *                          the test with name 'Object' (if any), since
         *                          tests for Object match Array and classes too.
         */
        typed.addType = function (type, beforeObjectTest) {
          if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
            throw new TypeError('Object with properties {name: string, test: function} expected');
          }

          if (beforeObjectTest !== false) {
            for (var i = 0; i < typed.types.length; i++) {
              if (typed.types[i].name === 'Object') {
                typed.types.splice(i, 0, type);
                return
              }
            }
          }

          typed.types.push(type);
        };

        // add a conversion
        typed.addConversion = function (conversion) {
          if (!conversion
              || typeof conversion.from !== 'string'
              || typeof conversion.to !== 'string'
              || typeof conversion.convert !== 'function') {
            throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
          }

          typed.conversions.push(conversion);
        };

        return typed;
      }

      return create();
    }));
    });

    /**
     * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
     */

    /**
     * Check if a number is integer
     * @param {number | boolean} value
     * @return {boolean} isInteger
     */

    function isInteger$1(value) {
      if (typeof value === 'boolean') {
        return true;
      }

      return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
    }
    /**
     * Calculate the sign of a number
     * @param {number} x
     * @returns {number}
     */

    var sign =
    /* #__PURE__ */
    Math.sign || function (x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    /**
     * Calculate the base-2 logarithm of a number
     * @param {number} x
     * @returns {number}
     */

    var log2 =
    /* #__PURE__ */
    Math.log2 || function log2(x) {
      return Math.log(x) / Math.LN2;
    };
    /**
     * Calculate the base-10 logarithm of a number
     * @param {number} x
     * @returns {number}
     */

    var log10 =
    /* #__PURE__ */
    Math.log10 || function log10(x) {
      return Math.log(x) / Math.LN10;
    };
    /**
     * Calculate the natural logarithm of a number + 1
     * @param {number} x
     * @returns {number}
     */

    var log1p =
    /* #__PURE__ */
    Math.log1p || function (x) {
      return Math.log(x + 1);
    };
    /**
     * Calculate cubic root for a number
     *
     * Code from es6-shim.js:
     *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
     *
     * @param {number} x
     * @returns {number} Returns the cubic root of x
     */

    var cbrt =
    /* #__PURE__ */
    Math.cbrt || function cbrt(x) {
      if (x === 0) {
        return x;
      }

      var negate = x < 0;
      var result;

      if (negate) {
        x = -x;
      }

      if (isFinite(x)) {
        result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

        result = (x / (result * result) + 2 * result) / 3;
      } else {
        result = x;
      }

      return negate ? -result : result;
    };
    /**
     * Calculates exponentiation minus 1
     * @param {number} x
     * @return {number} res
     */

    var expm1 =
    /* #__PURE__ */
    Math.expm1 || function expm1(x) {
      return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
    };
    /**
     * Convert a number to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'engineering'    Always use engineering notation.
     *                                          For example '123.4e+0' and '14.0e+6'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lowerExp` and `upperExp` bounds, and
     *                                          uses exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default,
     *                                          not rounding any digits.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12.071, {notation: 'fixed'})                // '12'
     *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
     *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
     *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
     *
     * @param {number} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */

    function format$3(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      } // handle special cases


      if (value === Infinity) {
        return 'Infinity';
      } else if (value === -Infinity) {
        return '-Infinity';
      } else if (isNaN(value)) {
        return 'NaN';
      } // default values for options


      var notation = 'auto';
      var precision;

      if (options) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        } // determine precision from options


        if (isNumber$f(options)) {
          precision = options;
        } else if (isNumber$f(options.precision)) {
          precision = options.precision;
        }
      } // handle the various notations


      switch (notation) {
        case 'fixed':
          return toFixed(value, precision);

        case 'exponential':
          return toExponential(value, precision);

        case 'engineering':
          return toEngineering(value, precision);

        case 'auto':
          // TODO: clean up some day. Deprecated since: 2018-01-24
          // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
          if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
            var fixedOptions = mapObject(options, function (x) {
              return x;
            });
            fixedOptions.exponential = undefined;

            if (options.exponential.lower !== undefined) {
              fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
            }

            if (options.exponential.upper !== undefined) {
              fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
            }

            console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
            return toPrecision(value, precision, fixedOptions);
          } // remove trailing zeros after the decimal point


          return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
            var digits = arguments[2];
            var e = arguments[4];
            return digits !== '.' ? digits + e : e;
          });

        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
      }
    }
    /**
     * Split a number into sign, coefficients, and exponent
     * @param {number | string} value
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     */

    function splitNumber(value) {
      // parse the input value
      var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

      if (!match) {
        throw new SyntaxError('Invalid number ' + value);
      }

      var sign = match[1];
      var digits = match[2];
      var exponent = parseFloat(match[4] || '0');
      var dot = digits.indexOf('.');
      exponent += dot !== -1 ? dot - 1 : digits.length - 1;
      var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
      .replace(/^0*/, function (zeros) {
        // remove leading zeros, add their count to the exponent
        exponent -= zeros.length;
        return '';
      }).replace(/0*$/, '') // remove trailing zeros
      .split('').map(function (d) {
        return parseInt(d);
      });

      if (coefficients.length === 0) {
        coefficients.push(0);
        exponent++;
      }

      return {
        sign: sign,
        coefficients: coefficients,
        exponent: exponent
      };
    }
    /**
     * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */

    function toEngineering(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      var rounded = roundDigits(splitNumber(value), precision);
      var e = rounded.exponent;
      var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

      if (isNumber$f(precision)) {
        // add zeroes to give correct sig figs
        while (precision > c.length || e - newExp + 1 > c.length) {
          c.push(0);
        }
      } else {
        // concatenate coefficients with necessary zeros
        var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)

        while (c.length - 1 < significandsDiff) {
          c.push(0);
        }
      } // find difference in exponents


      var expDiff = Math.abs(e - newExp);
      var decimalIdx = 1; // push decimal index over by expDiff times

      while (expDiff > 0) {
        decimalIdx++;
        expDiff--;
      } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
      // otherwise concat with the rest of the coefficients


      var decimals = c.slice(decimalIdx).join('');
      var decimalVal = isNumber$f(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
      var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
      return rounded.sign + str;
    }
    /**
     * Format a number with fixed notation.
     * @param {number | string} value
     * @param {number} [precision=undefined]  Optional number of decimals after the
     *                                        decimal point. null by default.
     */

    function toFixed(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }

      var splitValue = splitNumber(value);
      var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
      var c = rounded.coefficients;
      var p = rounded.exponent + 1; // exponent may have changed
      // append zeros if needed

      var pp = p + (precision || 0);

      if (c.length < pp) {
        c = c.concat(zeros(pp - c.length));
      } // prepend zeros if needed


      if (p < 0) {
        c = zeros(-p + 1).concat(c);
        p = 1;
      } // insert a dot if needed


      if (p < c.length) {
        c.splice(p, 0, p === 0 ? '0.' : '.');
      }

      return rounded.sign + c.join('');
    }
    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {number | string} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     */

    function toExponential(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      } // round if needed, else create a clone


      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;
      var c = rounded.coefficients;
      var e = rounded.exponent; // append zeros if needed

      if (c.length < precision) {
        c = c.concat(zeros(precision - c.length));
      } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


      var first = c.shift();
      return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
    }
    /**
     * Format a number with a certain precision
     * @param {number | string} value
     * @param {number} [precision=undefined] Optional number of digits.
     * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
     *                                       By default:
     *                                         lowerExp = -3 (incl)
     *                                         upper = +5 (excl)
     * @return {string}
     */

    function toPrecision(value, precision, options) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      } // determine lower and upper bound for exponential notation.


      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
      var split = splitNumber(value);
      var rounded = precision ? roundDigits(split, precision) : split;

      if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
        // exponential notation
        return toExponential(value, precision);
      } else {
        var c = rounded.coefficients;
        var e = rounded.exponent; // append trailing zeros

        if (c.length < precision) {
          c = c.concat(zeros(precision - c.length));
        } // append trailing zeros
        // TODO: simplify the next statement


        c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

        c = zeros(-e).concat(c);
        var dot = e > 0 ? e : 0;

        if (dot < c.length - 1) {
          c.splice(dot + 1, 0, '.');
        }

        return rounded.sign + c.join('');
      }
    }
    /**
     * Round the number of digits of a number *
     * @param {SplitValue} split       A value split with .splitNumber(value)
     * @param {number} precision  A positive integer
     * @return {SplitValue}
     *              Returns an object containing sign, coefficients, and exponent
     *              with rounded digits
     */

    function roundDigits(split, precision) {
      // create a clone
      var rounded = {
        sign: split.sign,
        coefficients: split.coefficients,
        exponent: split.exponent
      };
      var c = rounded.coefficients; // prepend zeros if needed

      while (precision <= 0) {
        c.unshift(0);
        rounded.exponent++;
        precision++;
      }

      if (c.length > precision) {
        var removed = c.splice(precision, c.length - precision);

        if (removed[0] >= 5) {
          var i = precision - 1;
          c[i]++;

          while (c[i] === 10) {
            c.pop();

            if (i === 0) {
              c.unshift(0);
              rounded.exponent++;
              i++;
            }

            i--;
            c[i]++;
          }
        }
      }

      return rounded;
    }
    /**
     * Create an array filled with zeros.
     * @param {number} length
     * @return {Array}
     */

    function zeros(length) {
      var arr = [];

      for (var i = 0; i < length; i++) {
        arr.push(0);
      }

      return arr;
    }
    /**
     * Count the number of significant digits of a number.
     *
     * For example:
     *   2.34 returns 3
     *   0.0034 returns 2
     *   120.5e+30 returns 4
     *
     * @param {number} value
     * @return {number} digits   Number of significant digits
     */


    function digits(value) {
      return value.toExponential().replace(/e.*$/, '') // remove exponential notation
      .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
      .length;
    }
    /**
     * Minimum number added to one that makes the result different than one
     */

    var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
    /**
     * Compares two floating point numbers.
     * @param {number} x          First value to compare
     * @param {number} y          Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
    */

    function nearlyEqual(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x === y;
      }

      if (x === y) {
        return true;
      } // NaN


      if (isNaN(x) || isNaN(y)) {
        return false;
      } // at this point x and y should be finite


      if (isFinite(x) && isFinite(y)) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = Math.abs(x - y);

        if (diff < DBL_EPSILON) {
          return true;
        } else {
          // use relative error
          return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
        }
      } // Infinite and Number or negative Infinite and positive Infinite cases


      return false;
    }
    /**
     * Calculate the hyperbolic arccos of a number
     * @param {number} x
     * @return {number}
     */

    var acosh = Math.acosh || function (x) {
      return Math.log(Math.sqrt(x * x - 1) + x);
    };
    var asinh = Math.asinh || function (x) {
      return Math.log(Math.sqrt(x * x + 1) + x);
    };
    /**
     * Calculate the hyperbolic arctangent of a number
     * @param {number} x
     * @return {number}
     */

    var atanh = Math.atanh || function (x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    };
    /**
     * Calculate the hyperbolic cosine of a number
     * @param {number} x
     * @returns {number}
     */

    var cosh = Math.cosh || function (x) {
      return (Math.exp(x) + Math.exp(-x)) / 2;
    };
    /**
     * Calculate the hyperbolic sine of a number
     * @param {number} x
     * @returns {number}
     */

    var sinh = Math.sinh || function (x) {
      return (Math.exp(x) - Math.exp(-x)) / 2;
    };
    /**
     * Calculate the hyperbolic tangent of a number
     * @param {number} x
     * @returns {number}
     */

    var tanh = Math.tanh || function (x) {
      var e = Math.exp(2 * x);
      return (e - 1) / (e + 1);
    };

    /**
     * Convert a BigNumber to a formatted string representation.
     *
     * Syntax:
     *
     *    format(value)
     *    format(value, options)
     *    format(value, precision)
     *    format(value, fn)
     *
     * Where:
     *
     *    {number} value   The value to be formatted
     *    {Object} options An object with formatting options. Available options:
     *                     {string} notation
     *                         Number notation. Choose from:
     *                         'fixed'          Always use regular number notation.
     *                                          For example '123.40' and '14000000'
     *                         'exponential'    Always use exponential notation.
     *                                          For example '1.234e+2' and '1.4e+7'
     *                         'auto' (default) Regular number notation for numbers
     *                                          having an absolute value between
     *                                          `lower` and `upper` bounds, and uses
     *                                          exponential notation elsewhere.
     *                                          Lower bound is included, upper bound
     *                                          is excluded.
     *                                          For example '123.4' and '1.4e7'.
     *                     {number} precision   A number between 0 and 16 to round
     *                                          the digits of the number.
     *                                          In case of notations 'exponential',
     *                                          'engineering', and 'auto',
     *                                          `precision` defines the total
     *                                          number of significant digits returned.
     *                                          In case of notation 'fixed',
     *                                          `precision` defines the number of
     *                                          significant digits after the decimal
     *                                          point.
     *                                          `precision` is undefined by default.
     *                     {number} lowerExp    Exponent determining the lower boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `-3`.
     *                     {number} upperExp    Exponent determining the upper boundary
     *                                          for formatting a value with an exponent
     *                                          when `notation='auto`.
     *                                          Default value is `5`.
     *    {Function} fn    A custom formatting function. Can be used to override the
     *                     built-in notations. Function `fn` is called with `value` as
     *                     parameter and must return a string. Is useful for example to
     *                     format all values inside a matrix in a particular way.
     *
     * Examples:
     *
     *    format(6.4)                                        // '6.4'
     *    format(1240000)                                    // '1.24e6'
     *    format(1/3)                                        // '0.3333333333333333'
     *    format(1/3, 3)                                     // '0.333'
     *    format(21385, 2)                                   // '21000'
     *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
     *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
     *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
     *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
     *
     * @param {BigNumber} value
     * @param {Object | Function | number} [options]
     * @return {string} str The formatted value
     */

    function format$4(value, options) {
      if (typeof options === 'function') {
        // handle format(value, fn)
        return options(value);
      } // handle special cases


      if (!value.isFinite()) {
        return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
      } // default values for options


      var notation = 'auto';
      var precision;

      if (options !== undefined) {
        // determine notation from options
        if (options.notation) {
          notation = options.notation;
        } // determine precision from options


        if (typeof options === 'number') {
          precision = options;
        } else if (options.precision) {
          precision = options.precision;
        }
      } // handle the various notations


      switch (notation) {
        case 'fixed':
          return toFixed$1(value, precision);

        case 'exponential':
          return toExponential$1(value, precision);

        case 'engineering':
          return toEngineering$1(value, precision);

        case 'auto':
          {
            // TODO: clean up some day. Deprecated since: 2018-01-24
            // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
            if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
              var fixedOptions = mapObject(options, function (x) {
                return x;
              });
              fixedOptions.exponential = undefined;

              if (options.exponential.lower !== undefined) {
                fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
              }

              if (options.exponential.upper !== undefined) {
                fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
              }

              console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
              return format$4(value, fixedOptions);
            } // determine lower and upper bound for exponential notation.
            // TODO: implement support for upper and lower to be BigNumbers themselves


            var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
            var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

            if (value.isZero()) return '0'; // determine whether or not to output exponential notation

            var str;
            var rounded = value.toSignificantDigits(precision);
            var exp = rounded.e;

            if (exp >= lowerExp && exp < upperExp) {
              // normal number notation
              str = rounded.toFixed();
            } else {
              // exponential notation
              str = toExponential$1(value, precision);
            } // remove trailing zeros after the decimal point


            return str.replace(/((\.\d*?)(0+))($|e)/, function () {
              var digits = arguments[2];
              var e = arguments[4];
              return digits !== '.' ? digits + e : e;
            });
          }

        default:
          throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
      }
    }
    /**
     * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
     * @param {BigNumber | string} value
     * @param {number} [precision]        Optional number of significant figures to return.
     */

    function toEngineering$1(value, precision) {
      // find nearest lower multiple of 3 for exponent
      var e = value.e;
      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

      var valueWithoutExp = value.mul(Math.pow(10, -newExp));
      var valueStr = valueWithoutExp.toPrecision(precision);

      if (valueStr.indexOf('e') !== -1) {
        valueStr = valueWithoutExp.toString();
      }

      return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
    }
    /**
     * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
     * @param {BigNumber} value
     * @param {number} [precision]  Number of digits in formatted output.
     *                              If not provided, the maximum available digits
     *                              is used.
     * @returns {string} str
     */

    function toExponential$1(value, precision) {
      if (precision !== undefined) {
        return value.toExponential(precision - 1); // Note the offset of one
      } else {
        return value.toExponential();
      }
    }
    /**
     * Format a number with fixed notation.
     * @param {BigNumber} value
     * @param {number} [precision=undefined] Optional number of decimals after the
     *                                       decimal point. Undefined by default.
     */

    function toFixed$1(value, precision) {
      return value.toFixed(precision);
    }

    function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }
    /**
     * Check if a text ends with a certain string.
     * @param {string} text
     * @param {string} search
     */

    function endsWith(text, search) {
      var start = text.length - search.length;
      var end = text.length;
      return text.substring(start, end) === search;
    }
    /**
     * Format a value of any type into a string.
     *
     * Usage:
     *     math.format(value)
     *     math.format(value, precision)
     *
     * When value is a function:
     *
     * - When the function has a property `syntax`, it returns this
     *   syntax description.
     * - In other cases, a string `'function'` is returned.
     *
     * When `value` is an Object:
     *
     * - When the object contains a property `format` being a function, this
     *   function is invoked as `value.format(options)` and the result is returned.
     * - When the object has its own `toString` method, this method is invoked
     *   and the result is returned.
     * - In other cases the function will loop over all object properties and
     *   return JSON object notation like '{"a": 2, "b": 3}'.
     *
     * Example usage:
     *     math.format(2/7)                // '0.2857142857142857'
     *     math.format(math.pi, 3)         // '3.14'
     *     math.format(new Complex(2, 3))  // '2 + 3i'
     *     math.format('hello')            // '"hello"'
     *
     * @param {*} value             Value to be stringified
     * @param {Object | number | Function} [options]  Formatting options. See
     *                                                lib/utils/number:format for a
     *                                                description of the available
     *                                                options.
     * @return {string} str
     */

    function format$5(value, options) {
      if (typeof value === 'number') {
        return format$3(value, options);
      }

      if (isBigNumber(value)) {
        return format$4(value, options);
      } // note: we use unsafe duck-typing here to check for Fractions, this is
      // ok here since we're only invoking toString or concatenating its values


      if (looksLikeFraction(value)) {
        if (!options || options.fraction !== 'decimal') {
          // output as ratio, like '1/3'
          return value.s * value.n + '/' + value.d;
        } else {
          // output as decimal, like '0.(3)'
          return value.toString();
        }
      }

      if (Array.isArray(value)) {
        return formatArray(value, options);
      }

      if (isString$m(value)) {
        return '"' + value + '"';
      }

      if (typeof value === 'function') {
        return value.syntax ? String(value.syntax) : 'function';
      }

      if (value && _typeof$2(value) === 'object') {
        if (typeof value.format === 'function') {
          return value.format(options);
        } else if (value && value.toString(options) !== {}.toString()) {
          // this object has a non-native toString method, use that one
          return value.toString(options);
        } else {
          var entries = Object.keys(value).map(function (key) {
            return '"' + key + '": ' + format$5(value[key], options);
          });
          return '{' + entries.join(', ') + '}';
        }
      }

      return String(value);
    }
    /**
     * Stringify a value into a string enclosed in double quotes.
     * Unescaped double quotes and backslashes inside the value are escaped.
     * @param {*} value
     * @return {string}
     */

    function stringify(value) {
      var text = String(value);
      var escaped = '';
      var i = 0;

      while (i < text.length) {
        var c = text.charAt(i);

        if (c === '\\') {
          escaped += c;
          i++;
          c = text.charAt(i);

          if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
            escaped += '\\'; // no valid escape character -> escape it
          }

          escaped += c;
        } else if (c === '"') {
          escaped += '\\"';
        } else {
          escaped += c;
        }

        i++;
      }

      return '"' + escaped + '"';
    }
    /**
     * Escape special HTML characters
     * @param {*} value
     * @return {string}
     */

    function escape$2(value) {
      var text = String(value);
      text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return text;
    }
    /**
     * Recursively format an n-dimensional matrix
     * Example output: "[[1, 2], [3, 4]]"
     * @param {Array} array
     * @param {Object | number | Function} [options]  Formatting options. See
     *                                                lib/utils/number:format for a
     *                                                description of the available
     *                                                options.
     * @returns {string} str
     */

    function formatArray(array, options) {
      if (Array.isArray(array)) {
        var str = '[';
        var len = array.length;

        for (var i = 0; i < len; i++) {
          if (i !== 0) {
            str += ', ';
          }

          str += formatArray(array[i], options);
        }

        str += ']';
        return str;
      } else {
        return format$5(array, options);
      }
    }
    /**
     * Check whether a value looks like a Fraction (unsafe duck-type check)
     * @param {*} value
     * @return {boolean}
     */


    function looksLikeFraction(value) {
      return value && _typeof$2(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
    }
    /**
     * Compare two strings
     * @param {string} x
     * @param {string} y
     * @returns {number}
     */


    function compareText(x, y) {
      // we don't want to convert numbers to string, only accept string input
      if (!isString$m(x)) {
        throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');
      }

      if (!isString$m(y)) {
        throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');
      }

      return x === y ? 0 : x > y ? 1 : -1;
    }

    /**
     * Create a range error with the message:
     *     'Dimension mismatch (<actual size> != <expected size>)'
     * @param {number | number[]} actual        The actual size
     * @param {number | number[]} expected      The expected size
     * @param {string} [relation='!=']          Optional relation between actual
     *                                          and expected size: '!=', '<', etc.
     * @extends RangeError
     */
    function DimensionError(actual, expected, relation) {
      if (!(this instanceof DimensionError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.actual = actual;
      this.expected = expected;
      this.relation = relation;
      this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
      this.stack = new Error().stack;
    }
    DimensionError.prototype = new RangeError();
    DimensionError.prototype.constructor = RangeError;
    DimensionError.prototype.name = 'DimensionError';
    DimensionError.prototype.isDimensionError = true;

    /**
     * Create a range error with the message:
     *     'Index out of range (index < min)'
     *     'Index out of range (index < max)'
     *
     * @param {number} index     The actual index
     * @param {number} [min=0]   Minimum index (included)
     * @param {number} [max]     Maximum index (excluded)
     * @extends RangeError
     */
    function IndexError(index, min, max) {
      if (!(this instanceof IndexError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.index = index;

      if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
      } else {
        this.min = min;
        this.max = max;
      }

      if (this.min !== undefined && this.index < this.min) {
        this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
      } else if (this.max !== undefined && this.index >= this.max) {
        this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
      } else {
        this.message = 'Index out of range (' + this.index + ')';
      }

      this.stack = new Error().stack;
    }
    IndexError.prototype = new RangeError();
    IndexError.prototype.constructor = RangeError;
    IndexError.prototype.name = 'IndexError';
    IndexError.prototype.isIndexError = true;

    /**
     * Calculate the size of a multi dimensional array.
     * This function checks the size of the first entry, it does not validate
     * whether all dimensions match. (use function `validate` for that)
     * @param {Array} x
     * @Return {Number[]} size
     */

    function arraySize(x) {
      var s = [];

      while (Array.isArray(x)) {
        s.push(x.length);
        x = x[0];
      }

      return s;
    }
    /**
     * Recursively validate whether each element in a multi dimensional array
     * has a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @param {number} dim   Current dimension
     * @throws DimensionError
     * @private
     */

    function _validate(array, size, dim) {
      var i;
      var len = array.length;

      if (len !== size[dim]) {
        throw new DimensionError(len, size[dim]);
      }

      if (dim < size.length - 1) {
        // recursively validate each child array
        var dimNext = dim + 1;

        for (i = 0; i < len; i++) {
          var child = array[i];

          if (!Array.isArray(child)) {
            throw new DimensionError(size.length - 1, size.length, '<');
          }

          _validate(array[i], size, dimNext);
        }
      } else {
        // last dimension. none of the childs may be an array
        for (i = 0; i < len; i++) {
          if (Array.isArray(array[i])) {
            throw new DimensionError(size.length + 1, size.length, '>');
          }
        }
      }
    }
    /**
     * Validate whether each element in a multi dimensional array has
     * a size corresponding to the provided size array.
     * @param {Array} array    Array to be validated
     * @param {number[]} size  Array with the size of each dimension
     * @throws DimensionError
     */


    function validate(array, size) {
      var isScalar = size.length === 0;

      if (isScalar) {
        // scalar
        if (Array.isArray(array)) {
          throw new DimensionError(array.length, 0);
        }
      } else {
        // array
        _validate(array, size, 0);
      }
    }
    /**
     * Test whether index is an integer number with index >= 0 and index < length
     * when length is provided
     * @param {number} index    Zero-based index
     * @param {number} [length] Length of the array
     */

    function validateIndex(index, length) {
      if (!isNumber$f(index) || !isInteger$1(index)) {
        throw new TypeError('Index must be an integer (value: ' + index + ')');
      }

      if (index < 0 || typeof length === 'number' && index >= length) {
        throw new IndexError(index, length);
      }
    }
    /**
     * Resize a multi dimensional array. The resized array is returned.
     * @param {Array} array         Array to be resized
     * @param {Array.<number>} size Array with the size of each dimension
     * @param {*} [defaultValue=0]  Value to be filled in in new entries,
     *                              zero by default. Specify for example `null`,
     *                              to clearly see entries that are not explicitly
     *                              set.
     * @return {Array} array         The resized array
     */

    function resize(array, size, defaultValue) {
      // TODO: add support for scalars, having size=[] ?
      // check the type of the arguments
      if (!Array.isArray(array) || !Array.isArray(size)) {
        throw new TypeError('Array expected');
      }

      if (size.length === 0) {
        throw new Error('Resizing to scalar is not supported');
      } // check whether size contains positive integers


      size.forEach(function (value) {
        if (!isNumber$f(value) || !isInteger$1(value) || value < 0) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$5(size) + ')');
        }
      }); // recursively resize the array

      var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

      _resize(array, size, 0, _defaultValue);

      return array;
    }
    /**
     * Recursively resize a multi dimensional array
     * @param {Array} array         Array to be resized
     * @param {number[]} size       Array with the size of each dimension
     * @param {number} dim          Current dimension
     * @param {*} [defaultValue]    Value to be filled in in new entries,
     *                              undefined by default.
     * @private
     */

    function _resize(array, size, dim, defaultValue) {
      var i;
      var elem;
      var oldLen = array.length;
      var newLen = size[dim];
      var minLen = Math.min(oldLen, newLen); // apply new length

      array.length = newLen;

      if (dim < size.length - 1) {
        // non-last dimension
        var dimNext = dim + 1; // resize existing child arrays

        for (i = 0; i < minLen; i++) {
          // resize child array
          elem = array[i];

          if (!Array.isArray(elem)) {
            elem = [elem]; // add a dimension

            array[i] = elem;
          }

          _resize(elem, size, dimNext, defaultValue);
        } // create new child arrays


        for (i = minLen; i < newLen; i++) {
          // get child array
          elem = [];
          array[i] = elem; // resize new child array

          _resize(elem, size, dimNext, defaultValue);
        }
      } else {
        // last dimension
        // remove dimensions of existing values
        for (i = 0; i < minLen; i++) {
          while (Array.isArray(array[i])) {
            array[i] = array[i][0];
          }
        } // fill new elements with the default value


        for (i = minLen; i < newLen; i++) {
          array[i] = defaultValue;
        }
      }
    }
    /**
     * Re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     *
     * @throws {DimensionError}       If the product of the new dimension sizes does
     *                                not equal that of the old ones
     */


    function reshape(array, sizes) {
      var flatArray = flatten$2(array);
      var newArray;

      function product(arr) {
        return arr.reduce(function (prev, curr) {
          return prev * curr;
        });
      }

      if (!Array.isArray(array) || !Array.isArray(sizes)) {
        throw new TypeError('Array expected');
      }

      if (sizes.length === 0) {
        throw new DimensionError(0, product(arraySize(array)), '!=');
      }

      var totalSize = 1;

      for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
        totalSize *= sizes[sizeIndex];
      }

      if (flatArray.length !== totalSize) {
        throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
      }

      try {
        newArray = _reshape(flatArray, sizes);
      } catch (e) {
        if (e instanceof DimensionError) {
          throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
        }

        throw e;
      }

      return newArray;
    }
    /**
     * Iteratively re-shape a multi dimensional array to fit the specified dimensions
     * @param {Array} array           Array to be reshaped
     * @param {Array.<number>} sizes  List of sizes for each dimension
     * @returns {Array}               Array whose data has been formatted to fit the
     *                                specified dimensions
     */

    function _reshape(array, sizes) {
      // testing if there are enough elements for the requested shape
      var tmpArray = array;
      var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

      for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
        var size = sizes[sizeIndex];
        tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

        var length = tmpArray.length / size;

        for (var i = 0; i < length; i++) {
          tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
        } // set it as the new tmpArray for the next loop turn or for return


        tmpArray = tmpArray2;
      }

      return tmpArray;
    }
    /**
     * Squeeze a multi dimensional array
     * @param {Array} array
     * @param {Array} [size]
     * @returns {Array} returns the array itself
     */


    function squeeze(array, size) {
      var s = size || arraySize(array); // squeeze outer dimensions

      while (Array.isArray(array) && array.length === 1) {
        array = array[0];
        s.shift();
      } // find the first dimension to be squeezed


      var dims = s.length;

      while (s[dims - 1] === 1) {
        dims--;
      } // squeeze inner dimensions


      if (dims < s.length) {
        array = _squeeze(array, dims, 0);
        s.length = dims;
      }

      return array;
    }
    /**
     * Recursively squeeze a multi dimensional array
     * @param {Array} array
     * @param {number} dims Required number of dimensions
     * @param {number} dim  Current dimension
     * @returns {Array | *} Returns the squeezed array
     * @private
     */

    function _squeeze(array, dims, dim) {
      var i, ii;

      if (dim < dims) {
        var next = dim + 1;

        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _squeeze(array[i], dims, next);
        }
      } else {
        while (Array.isArray(array)) {
          array = array[0];
        }
      }

      return array;
    }
    /**
     * Unsqueeze a multi dimensional array: add dimensions when missing
     *
     * Paramter `size` will be mutated to match the new, unqueezed matrix size.
     *
     * @param {Array} array
     * @param {number} dims       Desired number of dimensions of the array
     * @param {number} [outer]    Number of outer dimensions to be added
     * @param {Array} [size] Current size of array.
     * @returns {Array} returns the array itself
     * @private
     */


    function unsqueeze(array, dims, outer, size) {
      var s = size || arraySize(array); // unsqueeze outer dimensions

      if (outer) {
        for (var i = 0; i < outer; i++) {
          array = [array];
          s.unshift(1);
        }
      } // unsqueeze inner dimensions


      array = _unsqueeze(array, dims, 0);

      while (s.length < dims) {
        s.push(1);
      }

      return array;
    }
    /**
     * Recursively unsqueeze a multi dimensional array
     * @param {Array} array
     * @param {number} dims Required number of dimensions
     * @param {number} dim  Current dimension
     * @returns {Array | *} Returns the squeezed array
     * @private
     */

    function _unsqueeze(array, dims, dim) {
      var i, ii;

      if (Array.isArray(array)) {
        var next = dim + 1;

        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _unsqueeze(array[i], dims, next);
        }
      } else {
        for (var d = dim; d < dims; d++) {
          array = [array];
        }
      }

      return array;
    }
    /**
     * Flatten a multi dimensional array, put all elements in a one dimensional
     * array
     * @param {Array} array   A multi dimensional array
     * @return {Array}        The flattened array (1 dimensional)
     */


    function flatten$2(array) {
      if (!Array.isArray(array)) {
        // if not an array, return as is
        return array;
      }

      var flat = [];
      array.forEach(function callback(value) {
        if (Array.isArray(value)) {
          value.forEach(callback); // traverse through sub-arrays recursively
        } else {
          flat.push(value);
        }
      });
      return flat;
    }
    /**
     * A safe map
     * @param {Array} array
     * @param {function} callback
     */

    function map$4(array, callback) {
      return Array.prototype.map.call(array, callback);
    }
    /**
     * A safe forEach
     * @param {Array} array
     * @param {function} callback
     */

    function forEach$3(array, callback) {
      Array.prototype.forEach.call(array, callback);
    }
    /**
     * A safe filter
     * @param {Array} array
     * @param {function} callback
     */

    function filter$3(array, callback) {
      if (arraySize(array).length !== 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return Array.prototype.filter.call(array, callback);
    }
    /**
     * Filter values in a callback given a regular expression
     * @param {Array} array
     * @param {RegExp} regexp
     * @return {Array} Returns the filtered array
     * @private
     */

    function filterRegExp(array, regexp) {
      if (arraySize(array).length !== 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return Array.prototype.filter.call(array, function (entry) {
        return regexp.test(entry);
      });
    }
    /**
     * A safe join
     * @param {Array} array
     * @param {string} separator
     */

    function join(array, separator) {
      return Array.prototype.join.call(array, separator);
    }
    /**
     * Assign a numeric identifier to every element of a sorted array
     * @param {Array} a  An array
     * @return {Array} An array of objects containing the original value and its identifier
     */

    function identify(a) {
      if (!Array.isArray(a)) {
        throw new TypeError('Array input expected');
      }

      if (a.length === 0) {
        return a;
      }

      var b = [];
      var count = 0;
      b[0] = {
        value: a[0],
        identifier: 0
      };

      for (var i = 1; i < a.length; i++) {
        if (a[i] === a[i - 1]) {
          count++;
        } else {
          count = 0;
        }

        b.push({
          value: a[i],
          identifier: count
        });
      }

      return b;
    }
    /**
     * Remove the numeric identifier from the elements
     * @param {array} a  An array
     * @return {array} An array of values without identifiers
     */

    function generalize(a) {
      if (!Array.isArray(a)) {
        throw new TypeError('Array input expected');
      }

      if (a.length === 0) {
        return a;
      }

      var b = [];

      for (var i = 0; i < a.length; i++) {
        b.push(a[i].value);
      }

      return b;
    }
    /**
     * Check the datatype of a given object
     * This is a low level implementation that should only be used by
     * parent Matrix classes such as SparseMatrix or DenseMatrix
     * This method does not validate Array Matrix shape
     * @param {Array} array
     * @param {function} typeOf   Callback function to use to determine the type of a value
     * @return string
     */

    function getArrayDataType(array, typeOf) {
      var type; // to hold type info

      var length = 0; // to hold length value to ensure it has consistent sizes

      for (var i = 0; i < array.length; i++) {
        var item = array[i];
        var isArray = Array.isArray(item); // Saving the target matrix row size

        if (i === 0 && isArray) {
          length = item.length;
        } // If the current item is an array but the length does not equal the targetVectorSize


        if (isArray && item.length !== length) {
          return undefined;
        }

        var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
        : typeOf(item);

        if (type === undefined) {
          type = itemType; // first item
        } else if (type !== itemType) {
          return 'mixed';
        }
      }

      return type;
    }
    /**
     * Return the last item from an array
     * @param array
     * @returns {*}
     */

    function last$2(array) {
      return array[array.length - 1];
    }
    /**
     * Get all but the last element of array.
     */

    function initial(array) {
      return array.slice(0, array.length - 1);
    }
    /**
     * Test whether an array or string contains an item
     * @param {Array | string} array
     * @param {*} item
     * @return {boolean}
     */

    function contains$1(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * Create a factory function, which can be used to inject dependencies.
     *
     * The created functions are memoized, a consecutive call of the factory
     * with the exact same inputs will return the same function instance.
     * The memoized cache is exposed on `factory.cache` and can be cleared
     * if needed.
     *
     * Example:
     *
     *     const name = 'log'
     *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
     *
     *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
     *       // ... create the function log here and return it
     *     }
     *
     * @param {string} name           Name of the function to be created
     * @param {string[]} dependencies The names of all required dependencies
     * @param {function} create       Callback function called with an object with all dependencies
     * @param {Object} [meta]         Optional object with meta information that will be attached
     *                                to the created factory function as property `meta`.
     * @returns {function}
     */

    function factory(name, dependencies, create, meta) {
      function assertAndCreate(scope) {
        // we only pass the requested dependencies to the factory function
        // to prevent functions to rely on dependencies that are not explicitly
        // requested.
        var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
        assertDependencies(name, dependencies, scope);
        return create(deps);
      }

      assertAndCreate.isFactory = true;
      assertAndCreate.fn = name;
      assertAndCreate.dependencies = dependencies.slice().sort();

      if (meta) {
        assertAndCreate.meta = meta;
      }

      return assertAndCreate;
    }
    /**
     * Test whether an object is a factory. This is the case when it has
     * properties name, dependencies, and a function create.
     * @param {*} obj
     * @returns {boolean}
     */

    function isFactory(obj) {
      return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
    }
    /**
     * Assert that all dependencies of a list with dependencies are available in the provided scope.
     *
     * Will throw an exception when there are dependencies missing.
     *
     * @param {string} name   Name for the function to be created. Used to generate a useful error message
     * @param {string[]} dependencies
     * @param {Object} scope
     */

    function assertDependencies(name, dependencies, scope) {
      var allDefined = dependencies.filter(function (dependency) {
        return !isOptionalDependency(dependency);
      }) // filter optionals
      .every(function (dependency) {
        return scope[dependency] !== undefined;
      });

      if (!allDefined) {
        var missingDependencies = dependencies.filter(function (dependency) {
          return scope[dependency] === undefined;
        }); // TODO: create a custom error class for this, a MathjsError or something like that

        throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(function (d) {
          return "\"".concat(d, "\"");
        }).join(', '), "."));
      }
    }
    function isOptionalDependency(dependency) {
      return dependency && dependency[0] === '?';
    }
    function stripOptionalNotation(dependency) {
      return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
    }

    /**
     * Create a typed-function which checks the types of the arguments and
     * can match them against multiple provided signatures. The typed-function
     * automatically converts inputs in order to find a matching signature.
     * Typed functions throw informative errors in case of wrong input arguments.
     *
     * See the library [typed-function](https://github.com/josdejong/typed-function)
     * for detailed documentation.
     *
     * Syntax:
     *
     *     math.typed(name, signatures) : function
     *     math.typed(signatures) : function
     *
     * Examples:
     *
     *     // create a typed function with multiple types per argument (type union)
     *     const fn2 = typed({
     *       'number | boolean': function (b) {
     *         return 'b is a number or boolean'
     *       },
     *       'string, number | boolean': function (a, b) {
     *         return 'a is a string, b is a number or boolean'
     *       }
     *     })
     *
     *     // create a typed function with an any type argument
     *     const log = typed({
     *       'string, any': function (event, data) {
     *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
     *       }
     *     })
     *
     * @param {string} [name]                          Optional name for the typed-function
     * @param {Object<string, function>} signatures   Object with one or multiple function signatures
     * @returns {function} The created typed-function.
     */

    var _createTyped2 = function _createTyped() {
      // initially, return the original instance of typed-function
      // consecutively, return a new instance from typed.create.
      _createTyped2 = typedFunction.create;
      return typedFunction;
    };

    var dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
    /**
     * Factory function for creating a new typed instance
     * @param {Object} dependencies   Object with data types like Complex and BigNumber
     * @returns {Function}
     */

    var createTyped =
    /* #__PURE__ */
    factory('typed', dependencies, function createTyped(_ref) {
      var BigNumber = _ref.BigNumber,
          Complex = _ref.Complex,
          DenseMatrix = _ref.DenseMatrix,
          Fraction = _ref.Fraction;

      // TODO: typed-function must be able to silently ignore signatures with unknown data types
      // get a new instance of typed-function
      var typed = _createTyped2(); // define all types. The order of the types determines in which order function
      // arguments are type-checked (so for performance it's important to put the
      // most used types first).


      typed.types = [{
        name: 'number',
        test: isNumber$f
      }, {
        name: 'Complex',
        test: isComplex
      }, {
        name: 'BigNumber',
        test: isBigNumber
      }, {
        name: 'Fraction',
        test: isFraction
      }, {
        name: 'Unit',
        test: isUnit
      }, {
        name: 'string',
        test: isString$m
      }, {
        name: 'Chain',
        test: isChain
      }, {
        name: 'Array',
        test: isArray$i
      }, {
        name: 'Matrix',
        test: isMatrix
      }, {
        name: 'DenseMatrix',
        test: isDenseMatrix
      }, {
        name: 'SparseMatrix',
        test: isSparseMatrix
      }, {
        name: 'Range',
        test: isRange
      }, {
        name: 'Index',
        test: isIndex
      }, {
        name: 'boolean',
        test: isBoolean$7
      }, {
        name: 'ResultSet',
        test: isResultSet
      }, {
        name: 'Help',
        test: isHelp
      }, {
        name: 'function',
        test: isFunction$f
      }, {
        name: 'Date',
        test: isDate$c
      }, {
        name: 'RegExp',
        test: isRegExp$9
      }, {
        name: 'null',
        test: isNull
      }, {
        name: 'undefined',
        test: isUndefined$1
      }, {
        name: 'AccessorNode',
        test: isAccessorNode
      }, {
        name: 'ArrayNode',
        test: isArrayNode
      }, {
        name: 'AssignmentNode',
        test: isAssignmentNode
      }, {
        name: 'BlockNode',
        test: isBlockNode
      }, {
        name: 'ConditionalNode',
        test: isConditionalNode
      }, {
        name: 'ConstantNode',
        test: isConstantNode
      }, {
        name: 'FunctionNode',
        test: isFunctionNode
      }, {
        name: 'FunctionAssignmentNode',
        test: isFunctionAssignmentNode
      }, {
        name: 'IndexNode',
        test: isIndexNode
      }, {
        name: 'Node',
        test: isNode
      }, {
        name: 'ObjectNode',
        test: isObjectNode
      }, {
        name: 'OperatorNode',
        test: isOperatorNode
      }, {
        name: 'ParenthesisNode',
        test: isParenthesisNode
      }, {
        name: 'RangeNode',
        test: isRangeNode
      }, {
        name: 'SymbolNode',
        test: isSymbolNode
      }, {
        name: 'Object',
        test: isObject$1
      } // order 'Object' last, it matches on other classes too
      ];
      typed.conversions = [{
        from: 'number',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          } // note: conversion from number to BigNumber can fail if x has >15 digits


          if (digits(x) > 15) {
            throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
          }

          return new BigNumber(x);
        }
      }, {
        from: 'number',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x, 0);
        }
      }, {
        from: 'number',
        to: 'string',
        convert: function convert(x) {
          return x + '';
        }
      }, {
        from: 'BigNumber',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x.toNumber(), 0);
        }
      }, {
        from: 'Fraction',
        to: 'BigNumber',
        convert: function convert(x) {
          throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
        }
      }, {
        from: 'Fraction',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          return new Complex(x.valueOf(), 0);
        }
      }, {
        from: 'number',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          var f = new Fraction(x);

          if (f.valueOf() !== x) {
            throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
          }

          return f;
        }
      }, {
        // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
        //  from: 'Fraction',
        //  to: 'number',
        //  convert: function (x) {
        //    return x.valueOf()
        //  }
        // }, {
        from: 'string',
        to: 'number',
        convert: function convert(x) {
          var n = Number(x);

          if (isNaN(n)) {
            throw new Error('Cannot convert "' + x + '" to a number');
          }

          return n;
        }
      }, {
        from: 'string',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }

          try {
            return new BigNumber(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to BigNumber');
          }
        }
      }, {
        from: 'string',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          try {
            return new Fraction(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Fraction');
          }
        }
      }, {
        from: 'string',
        to: 'Complex',
        convert: function convert(x) {
          if (!Complex) {
            throwNoComplex(x);
          }

          try {
            return new Complex(x);
          } catch (err) {
            throw new Error('Cannot convert "' + x + '" to Complex');
          }
        }
      }, {
        from: 'boolean',
        to: 'number',
        convert: function convert(x) {
          return +x;
        }
      }, {
        from: 'boolean',
        to: 'BigNumber',
        convert: function convert(x) {
          if (!BigNumber) {
            throwNoBignumber(x);
          }

          return new BigNumber(+x);
        }
      }, {
        from: 'boolean',
        to: 'Fraction',
        convert: function convert(x) {
          if (!Fraction) {
            throwNoFraction(x);
          }

          return new Fraction(+x);
        }
      }, {
        from: 'boolean',
        to: 'string',
        convert: function convert(x) {
          return String(x);
        }
      }, {
        from: 'Array',
        to: 'Matrix',
        convert: function convert(array) {
          if (!DenseMatrix) {
            throwNoMatrix();
          }

          return new DenseMatrix(array);
        }
      }, {
        from: 'Matrix',
        to: 'Array',
        convert: function convert(matrix) {
          return matrix.valueOf();
        }
      }];
      return typed;
    });

    function throwNoBignumber(x) {
      throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
    }

    function throwNoComplex(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
    }

    function throwNoMatrix() {
      throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
    }

    function throwNoFraction(x) {
      throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
    }

    var name = 'ResultSet';
    var dependencies$1 = [];
    var createResultSet =
    /* #__PURE__ */
    factory(name, dependencies$1, function () {
      /**
       * A ResultSet contains a list or results
       * @class ResultSet
       * @param {Array} entries
       * @constructor ResultSet
       */
      function ResultSet(entries) {
        if (!(this instanceof ResultSet)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.entries = entries || [];
      }
      /**
       * Attach type information
       */


      ResultSet.prototype.type = 'ResultSet';
      ResultSet.prototype.isResultSet = true;
      /**
       * Returns the array with results hold by this ResultSet
       * @memberof ResultSet
       * @returns {Array} entries
       */

      ResultSet.prototype.valueOf = function () {
        return this.entries;
      };
      /**
       * Returns the stringified results of the ResultSet
       * @memberof ResultSet
       * @returns {string} string
       */


      ResultSet.prototype.toString = function () {
        return '[' + this.entries.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the ResultSet
       * @memberof ResultSet
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "ResultSet", "entries": [...]}`
       */


      ResultSet.prototype.toJSON = function () {
        return {
          mathjs: 'ResultSet',
          entries: this.entries
        };
      };
      /**
       * Instantiate a ResultSet from a JSON object
       * @memberof ResultSet
       * @param {Object} json  A JSON object structured as:
       *                       `{"mathjs": "ResultSet", "entries": [...]}`
       * @return {ResultSet}
       */


      ResultSet.fromJSON = function (json) {
        return new ResultSet(json.entries);
      };

      return ResultSet;
    }, {
      isClass: true
    });

    var decimal = createCommonjsModule(function (module) {
    (function (globalScope) {


      /*
       *  decimal.js v10.2.0
       *  An arbitrary-precision Decimal type for JavaScript.
       *  https://github.com/MikeMcl/decimal.js
       *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
       *  MIT Licence
       */


      // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


        // The maximum exponent magnitude.
        // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
      var EXP_LIMIT = 9e15,                      // 0 to 9e15

        // The limit on the value of `precision`, and on the value of the first argument to
        // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
        MAX_DIGITS = 1e9,                        // 0 to 1e9

        // Base conversion alphabet.
        NUMERALS = '0123456789abcdef',

        // The natural logarithm of 10 (1025 digits).
        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

        // Pi (1025 digits).
        PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


        // The initial configuration properties of the Decimal constructor.
        DEFAULTS = {

          // These values must be integers within the stated ranges (inclusive).
          // Most of these values can be changed at run-time using the `Decimal.config` method.

          // The maximum number of significant digits of the result of a calculation or base conversion.
          // E.g. `Decimal.config({ precision: 20 });`
          precision: 20,                         // 1 to MAX_DIGITS

          // The rounding mode used when rounding to `precision`.
          //
          // ROUND_UP         0 Away from zero.
          // ROUND_DOWN       1 Towards zero.
          // ROUND_CEIL       2 Towards +Infinity.
          // ROUND_FLOOR      3 Towards -Infinity.
          // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          //
          // E.g.
          // `Decimal.rounding = 4;`
          // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
          rounding: 4,                           // 0 to 8

          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP         0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
          // FLOOR      3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN  6 The IEEE 754 remainder function.
          // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
          //
          // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
          // division (9) are commonly used for the modulus operation. The other rounding modes can also
          // be used, but they may not give useful results.
          modulo: 1,                             // 0 to 9

          // The exponent value at and beneath which `toString` returns exponential notation.
          // JavaScript numbers: -7
          toExpNeg: -7,                          // 0 to -EXP_LIMIT

          // The exponent value at and above which `toString` returns exponential notation.
          // JavaScript numbers: 21
          toExpPos:  21,                         // 0 to EXP_LIMIT

          // The minimum exponent value, beneath which underflow to zero occurs.
          // JavaScript numbers: -324  (5e-324)
          minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

          // The maximum exponent value, above which overflow to Infinity occurs.
          // JavaScript numbers: 308  (1.7976931348623157e+308)
          maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

          // Whether to use cryptographically-secure random number generation, if available.
          crypto: false                          // true/false
        },


      // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


        Decimal, inexact, noConflict, quadrant,
        external = true,

        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
        cryptoUnavailable = decimalError + 'crypto unavailable',

        mathfloor = Math.floor,
        mathpow = Math.pow,

        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,

        LN10_PRECISION = LN10.length - 1,
        PI_PRECISION = PI.length - 1,

        // Decimal.prototype object
        P = { name: '[object Decimal]' };


      // Decimal prototype methods


      /*
       *  absoluteValue             abs
       *  ceil
       *  comparedTo                cmp
       *  cosine                    cos
       *  cubeRoot                  cbrt
       *  decimalPlaces             dp
       *  dividedBy                 div
       *  dividedToIntegerBy        divToInt
       *  equals                    eq
       *  floor
       *  greaterThan               gt
       *  greaterThanOrEqualTo      gte
       *  hyperbolicCosine          cosh
       *  hyperbolicSine            sinh
       *  hyperbolicTangent         tanh
       *  inverseCosine             acos
       *  inverseHyperbolicCosine   acosh
       *  inverseHyperbolicSine     asinh
       *  inverseHyperbolicTangent  atanh
       *  inverseSine               asin
       *  inverseTangent            atan
       *  isFinite
       *  isInteger                 isInt
       *  isNaN
       *  isNegative                isNeg
       *  isPositive                isPos
       *  isZero
       *  lessThan                  lt
       *  lessThanOrEqualTo         lte
       *  logarithm                 log
       *  [maximum]                 [max]
       *  [minimum]                 [min]
       *  minus                     sub
       *  modulo                    mod
       *  naturalExponential        exp
       *  naturalLogarithm          ln
       *  negated                   neg
       *  plus                      add
       *  precision                 sd
       *  round
       *  sine                      sin
       *  squareRoot                sqrt
       *  tangent                   tan
       *  times                     mul
       *  toBinary
       *  toDecimalPlaces           toDP
       *  toExponential
       *  toFixed
       *  toFraction
       *  toHexadecimal             toHex
       *  toNearest
       *  toNumber
       *  toOctal
       *  toPower                   pow
       *  toPrecision
       *  toSignificantDigits       toSD
       *  toString
       *  truncated                 trunc
       *  valueOf                   toJSON
       */


      /*
       * Return a new Decimal whose value is the absolute value of this Decimal.
       *
       */
      P.absoluteValue = P.abs = function () {
        var x = new this.constructor(this);
        if (x.s < 0) x.s = 1;
        return finalise(x);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of positive Infinity.
       *
       */
      P.ceil = function () {
        return finalise(new this.constructor(this), this.e + 1, 2);
      };


      /*
       * Return
       *   1    if the value of this Decimal is greater than the value of `y`,
       *  -1    if the value of this Decimal is less than the value of `y`,
       *   0    if they have the same value,
       *   NaN  if the value of either Decimal is NaN.
       *
       */
      P.comparedTo = P.cmp = function (y) {
        var i, j, xdL, ydL,
          x = this,
          xd = x.d,
          yd = (y = new x.constructor(y)).d,
          xs = x.s,
          ys = y.s;

        // Either NaN or ±Infinity?
        if (!xd || !yd) {
          return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
        }

        // Either zero?
        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

        // Signs differ?
        if (xs !== ys) return xs;

        // Compare exponents.
        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

        xdL = xd.length;
        ydL = yd.length;

        // Compare digit by digit.
        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
          if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
        }

        // Compare lengths.
        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
      };


      /*
       * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * cos(0)         = 1
       * cos(-0)        = 1
       * cos(Infinity)  = NaN
       * cos(-Infinity) = NaN
       * cos(NaN)       = NaN
       *
       */
      P.cosine = P.cos = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.d) return new Ctor(NaN);

        // cos(0) = cos(-0) = 1
        if (!x.d[0]) return new Ctor(1);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;

        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
      };


      /*
       *
       * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       *  cbrt(0)  =  0
       *  cbrt(-0) = -0
       *  cbrt(1)  =  1
       *  cbrt(-1) = -1
       *  cbrt(N)  =  N
       *  cbrt(-I) = -I
       *  cbrt(I)  =  I
       *
       * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
       *
       */
      P.cubeRoot = P.cbrt = function () {
        var e, m, n, r, rep, s, sd, t, t3, t3plusx,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        external = false;

        // Initial estimate.
        s = x.s * mathpow(x.s * x, 1 / 3);

         // Math.cbrt underflow/overflow?
         // Pass x to Math.pow as integer, then adjust the exponent of the result.
        if (!s || Math.abs(s) == 1 / 0) {
          n = digitsToString(x.d);
          e = x.e;

          // Adjust n exponent so it is a multiple of 3 away from x exponent.
          if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
          s = mathpow(n, 1 / 3);

          // Rarely, e may be one less than the result exponent value.
          e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

          if (s == 1 / 0) {
            n = '5e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }

          r = new Ctor(n);
          r.s = x.s;
        } else {
          r = new Ctor(s.toString());
        }

        sd = (e = Ctor.precision) + 3;

        // Halley's method.
        // TODO? Compare Newton's method.
        for (;;) {
          t = r;
          t3 = t.times(t).times(t);
          t3plusx = t3.plus(x);
          r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
            // , i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);

                if (t.times(t).times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              sd += 4;
              rep = 1;
            } else {

              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).times(r).eq(x);
              }

              break;
            }
          }
        }

        external = true;

        return finalise(r, e, Ctor.rounding, m);
      };


      /*
       * Return the number of decimal places of the value of this Decimal.
       *
       */
      P.decimalPlaces = P.dp = function () {
        var w,
          d = this.d,
          n = NaN;

        if (d) {
          w = d.length - 1;
          n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last word.
          w = d[w];
          if (w) for (; w % 10 == 0; w /= 10) n--;
          if (n < 0) n = 0;
        }

        return n;
      };


      /*
       *  n / 0 = I
       *  n / N = N
       *  n / I = 0
       *  0 / n = 0
       *  0 / 0 = N
       *  0 / N = N
       *  0 / I = 0
       *  N / n = N
       *  N / 0 = N
       *  N / N = N
       *  N / I = N
       *  I / n = I
       *  I / 0 = I
       *  I / N = N
       *  I / I = N
       *
       * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedBy = P.div = function (y) {
        return divide(this, new this.constructor(y));
      };


      /*
       * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
       * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.dividedToIntegerBy = P.divToInt = function (y) {
        var x = this,
          Ctor = x.constructor;
        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
      };


      /*
       * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
       *
       */
      P.equals = P.eq = function (y) {
        return this.cmp(y) === 0;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
       * direction of negative Infinity.
       *
       */
      P.floor = function () {
        return finalise(new this.constructor(this), this.e + 1, 3);
      };


      /*
       * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
       * false.
       *
       */
      P.greaterThan = P.gt = function (y) {
        return this.cmp(y) > 0;
      };


      /*
       * Return true if the value of this Decimal is greater than or equal to the value of `y`,
       * otherwise return false.
       *
       */
      P.greaterThanOrEqualTo = P.gte = function (y) {
        var k = this.cmp(y);
        return k == 1 || k === 0;
      };


      /*
       * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [1, Infinity]
       *
       * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
       *
       * cosh(0)         = 1
       * cosh(-0)        = 1
       * cosh(Infinity)  = Infinity
       * cosh(-Infinity) = Infinity
       * cosh(NaN)       = NaN
       *
       *  x        time taken (ms)   result
       * 1000      9                 9.8503555700852349694e+433
       * 10000     25                4.4034091128314607936e+4342
       * 100000    171               1.4033316802130615897e+43429
       * 1000000   3817              1.5166076984010437725e+434294
       * 10000000  abandoned after 2 minute wait
       *
       * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
       *
       */
      P.hyperbolicCosine = P.cosh = function () {
        var k, n, pr, rm, len,
          x = this,
          Ctor = x.constructor,
          one = new Ctor(1);

        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
        if (x.isZero()) return one;

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;

        // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
        // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

        // Estimate the optimum number of times to use the argument reduction.
        // TODO? Estimation reused from cosine() and may not be optimal here.
        if (len < 32) {
          k = Math.ceil(len / 3);
          n = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          n = '2.3283064365386962890625e-10';
        }

        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

        // Reverse argument reduction
        var cosh2_x,
          i = k,
          d8 = new Ctor(8);
        for (; i--;) {
          cosh2_x = x.times(x);
          x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
        }

        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
      };


      /*
       * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
       *
       * sinh(0)         = 0
       * sinh(-0)        = -0
       * sinh(Infinity)  = Infinity
       * sinh(-Infinity) = -Infinity
       * sinh(NaN)       = NaN
       *
       * x        time taken (ms)
       * 10       2 ms
       * 100      5 ms
       * 1000     14 ms
       * 10000    82 ms
       * 100000   886 ms            1.4033316802130615897e+43429
       * 200000   2613 ms
       * 300000   5407 ms
       * 400000   8824 ms
       * 500000   13026 ms          8.7080643612718084129e+217146
       * 1000000  48543 ms
       *
       * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
       *
       */
      P.hyperbolicSine = P.sinh = function () {
        var k, pr, rm, len,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;

        if (len < 3) {
          x = taylorSeries(Ctor, 2, x, x, true);
        } else {

          // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
          // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
          // 3 multiplications and 1 addition

          // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
          // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
          // 4 multiplications and 2 additions

          // Estimate the optimum number of times to use the argument reduction.
          k = 1.4 * Math.sqrt(len);
          k = k > 16 ? 16 : k | 0;

          x = x.times(1 / tinyPow(5, k));
          x = taylorSeries(Ctor, 2, x, x, true);

          // Reverse argument reduction
          var sinh2_x,
            d5 = new Ctor(5),
            d16 = new Ctor(16),
            d20 = new Ctor(20);
          for (; k--;) {
            sinh2_x = x.times(x);
            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
          }
        }

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(x, pr, rm, true);
      };


      /*
       * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * tanh(x) = sinh(x) / cosh(x)
       *
       * tanh(0)         = 0
       * tanh(-0)        = -0
       * tanh(Infinity)  = 1
       * tanh(-Infinity) = -1
       * tanh(NaN)       = NaN
       *
       */
      P.hyperbolicTangent = P.tanh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(x.s);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 7;
        Ctor.rounding = 1;

        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
      };


      /*
       * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
       * this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [0, pi]
       *
       * acos(x) = pi/2 - asin(x)
       *
       * acos(0)       = pi/2
       * acos(-0)      = pi/2
       * acos(1)       = 0
       * acos(-1)      = pi
       * acos(1/2)     = pi/3
       * acos(-1/2)    = 2*pi/3
       * acos(|x| > 1) = NaN
       * acos(NaN)     = NaN
       *
       */
      P.inverseCosine = P.acos = function () {
        var halfPi,
          x = this,
          Ctor = x.constructor,
          k = x.abs().cmp(1),
          pr = Ctor.precision,
          rm = Ctor.rounding;

        if (k !== -1) {
          return k === 0
            // |x| is 1
            ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
            // |x| > 1 or x is NaN
            : new Ctor(NaN);
        }

        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

        // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;

        x = x.asin();
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return halfPi.minus(x);
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
       * value of this Decimal.
       *
       * Domain: [1, Infinity]
       * Range: [0, Infinity]
       *
       * acosh(x) = ln(x + sqrt(x^2 - 1))
       *
       * acosh(x < 1)     = NaN
       * acosh(NaN)       = NaN
       * acosh(Infinity)  = Infinity
       * acosh(-Infinity) = NaN
       * acosh(0)         = NaN
       * acosh(-0)        = NaN
       * acosh(1)         = 0
       * acosh(-1)        = NaN
       *
       */
      P.inverseHyperbolicCosine = P.acosh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
        if (!x.isFinite()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
        Ctor.rounding = 1;
        external = false;

        x = x.times(x).minus(1).sqrt().plus(x);

        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.ln();
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * asinh(x) = ln(x + sqrt(x^2 + 1))
       *
       * asinh(NaN)       = NaN
       * asinh(Infinity)  = Infinity
       * asinh(-Infinity) = -Infinity
       * asinh(0)         = 0
       * asinh(-0)        = -0
       *
       */
      P.inverseHyperbolicSine = P.asinh = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite() || x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
        Ctor.rounding = 1;
        external = false;

        x = x.times(x).plus(1).sqrt().plus(x);

        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.ln();
      };


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
       * value of this Decimal.
       *
       * Domain: [-1, 1]
       * Range: [-Infinity, Infinity]
       *
       * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
       *
       * atanh(|x| > 1)   = NaN
       * atanh(NaN)       = NaN
       * atanh(Infinity)  = NaN
       * atanh(-Infinity) = NaN
       * atanh(0)         = 0
       * atanh(-0)        = -0
       * atanh(1)         = Infinity
       * atanh(-1)        = -Infinity
       *
       */
      P.inverseHyperbolicTangent = P.atanh = function () {
        var pr, rm, wpr, xsd,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        xsd = x.sd();

        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

        Ctor.precision = wpr = xsd - x.e;

        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

        Ctor.precision = pr + 4;
        Ctor.rounding = 1;

        x = x.ln();

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.times(0.5);
      };


      /*
       * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
       * Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
       *
       * asin(0)       = 0
       * asin(-0)      = -0
       * asin(1/2)     = pi/6
       * asin(-1/2)    = -pi/6
       * asin(1)       = pi/2
       * asin(-1)      = -pi/2
       * asin(|x| > 1) = NaN
       * asin(NaN)     = NaN
       *
       * TODO? Compare performance of Taylor series.
       *
       */
      P.inverseSine = P.asin = function () {
        var halfPi, k,
          pr, rm,
          x = this,
          Ctor = x.constructor;

        if (x.isZero()) return new Ctor(x);

        k = x.abs().cmp(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;

        if (k !== -1) {

          // |x| is 1
          if (k === 0) {
            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
            halfPi.s = x.s;
            return halfPi;
          }

          // |x| > 1 or x is NaN
          return new Ctor(NaN);
        }

        // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

        Ctor.precision = pr + 6;
        Ctor.rounding = 1;

        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return x.times(2);
      };


      /*
       * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
       * of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi/2, pi/2]
       *
       * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
       *
       * atan(0)         = 0
       * atan(-0)        = -0
       * atan(1)         = pi/4
       * atan(-1)        = -pi/4
       * atan(Infinity)  = pi/2
       * atan(-Infinity) = -pi/2
       * atan(NaN)       = NaN
       *
       */
      P.inverseTangent = P.atan = function () {
        var i, j, k, n, px, t, r, wpr, x2,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding;

        if (!x.isFinite()) {
          if (!x.s) return new Ctor(NaN);
          if (pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.5);
            r.s = x.s;
            return r;
          }
        } else if (x.isZero()) {
          return new Ctor(x);
        } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.25);
          r.s = x.s;
          return r;
        }

        Ctor.precision = wpr = pr + 10;
        Ctor.rounding = 1;

        // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

        // Argument reduction
        // Ensure |x| < 0.42
        // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

        k = Math.min(28, wpr / LOG_BASE + 2 | 0);

        for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

        external = false;

        j = Math.ceil(wpr / LOG_BASE);
        n = 1;
        x2 = x.times(x);
        r = new Ctor(x);
        px = x;

        // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
        for (; i !== -1;) {
          px = px.times(x2);
          t = r.minus(px.div(n += 2));

          px = px.times(x2);
          r = t.plus(px.div(n += 2));

          if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
        }

        if (k) r = r.times(2 << (k - 1));

        external = true;

        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
      };


      /*
       * Return true if the value of this Decimal is a finite number, otherwise return false.
       *
       */
      P.isFinite = function () {
        return !!this.d;
      };


      /*
       * Return true if the value of this Decimal is an integer, otherwise return false.
       *
       */
      P.isInteger = P.isInt = function () {
        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
      };


      /*
       * Return true if the value of this Decimal is NaN, otherwise return false.
       *
       */
      P.isNaN = function () {
        return !this.s;
      };


      /*
       * Return true if the value of this Decimal is negative, otherwise return false.
       *
       */
      P.isNegative = P.isNeg = function () {
        return this.s < 0;
      };


      /*
       * Return true if the value of this Decimal is positive, otherwise return false.
       *
       */
      P.isPositive = P.isPos = function () {
        return this.s > 0;
      };


      /*
       * Return true if the value of this Decimal is 0 or -0, otherwise return false.
       *
       */
      P.isZero = function () {
        return !!this.d && this.d[0] === 0;
      };


      /*
       * Return true if the value of this Decimal is less than `y`, otherwise return false.
       *
       */
      P.lessThan = P.lt = function (y) {
        return this.cmp(y) < 0;
      };


      /*
       * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
       *
       */
      P.lessThanOrEqualTo = P.lte = function (y) {
        return this.cmp(y) < 1;
      };


      /*
       * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * If no base is specified, return log[10](arg).
       *
       * log[base](arg) = ln(arg) / ln(base)
       *
       * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
       * otherwise:
       *
       * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
       * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
       * between the result and the correctly rounded result will be one ulp (unit in the last place).
       *
       * log[-b](a)       = NaN
       * log[0](a)        = NaN
       * log[1](a)        = NaN
       * log[NaN](a)      = NaN
       * log[Infinity](a) = NaN
       * log[b](0)        = -Infinity
       * log[b](-0)       = -Infinity
       * log[b](-a)       = NaN
       * log[b](1)        = 0
       * log[b](Infinity) = Infinity
       * log[b](NaN)      = NaN
       *
       * [base] {number|string|Decimal} The base of the logarithm.
       *
       */
      P.logarithm = P.log = function (base) {
        var isBase10, d, denominator, k, inf, num, sd, r,
          arg = this,
          Ctor = arg.constructor,
          pr = Ctor.precision,
          rm = Ctor.rounding,
          guard = 5;

        // Default base is 10.
        if (base == null) {
          base = new Ctor(10);
          isBase10 = true;
        } else {
          base = new Ctor(base);
          d = base.d;

          // Return NaN if base is negative, or non-finite, or is 0 or 1.
          if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

          isBase10 = base.eq(10);
        }

        d = arg.d;

        // Is arg negative, non-finite, 0 or 1?
        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
          return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
        }

        // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
        // integer power of 10.
        if (isBase10) {
          if (d.length > 1) {
            inf = true;
          } else {
            for (k = d[0]; k % 10 === 0;) k /= 10;
            inf = k !== 1;
          }
        }

        external = false;
        sd = pr + guard;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

        // The result will have 5 rounding digits.
        r = divide(num, denominator, sd, 1);

        // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
        // calculate 10 further digits.
        //
        // If the result is known to have an infinite decimal expansion, repeat this until it is clear
        // that the result is above or below the boundary. Otherwise, if after calculating the 10
        // further digits, the last 14 are nines, round up and assume the result is exact.
        // Also assume the result is exact if the last 14 are zero.
        //
        // Example of a result that will be incorrectly rounded:
        // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
        // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
        // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
        // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
        // place is still 2.6.
        if (checkRoundingDigits(r.d, k = pr, rm)) {

          do {
            sd += 10;
            num = naturalLogarithm(arg, sd);
            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
            r = divide(num, denominator, sd, 1);

            if (!inf) {

              // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
              if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                r = finalise(r, pr + 1, 0);
              }

              break;
            }
          } while (checkRoundingDigits(r.d, k += 10, rm));
        }

        external = true;

        return finalise(r, pr, rm);
      };


      /*
       * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|Decimal}
       *
      P.max = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, 'lt');
      };
       */


      /*
       * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
       *
       * arguments {number|string|Decimal}
       *
      P.min = function () {
        Array.prototype.push.call(arguments, this);
        return maxOrMin(this.constructor, arguments, 'gt');
      };
       */


      /*
       *  n - 0 = n
       *  n - N = N
       *  n - I = -I
       *  0 - n = -n
       *  0 - 0 = 0
       *  0 - N = N
       *  0 - I = -I
       *  N - n = N
       *  N - 0 = N
       *  N - N = N
       *  N - I = N
       *  I - n = I
       *  I - 0 = I
       *  I - N = N
       *  I - I = N
       *
       * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.minus = P.sub = function (y) {
        var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {

          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return y negated if x is finite and y is ±Infinity.
          else if (x.d) y.s = -y.s;

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with different signs.
          // Return NaN if both are ±Infinity with the same sign.
          else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

          return y;
        }

        // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.plus(y);
        }

        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {

          // Return y negated if x is zero and y is non-zero.
          if (yd[0]) y.s = -y.s;

          // Return x if y is zero and x is non-zero.
          else if (xd[0]) y = new Ctor(x);

          // Return zero if both are zero.
          // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
          else return new Ctor(rm === 3 ? -0 : 0);

          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        e = mathfloor(y.e / LOG_BASE);
        xe = mathfloor(x.e / LOG_BASE);

        xd = xd.slice();
        k = xe - e;

        // If base 1e7 exponents differ...
        if (k) {
          xLTy = k < 0;

          if (xLTy) {
            d = xd;
            k = -k;
            len = yd.length;
          } else {
            d = yd;
            e = xe;
            len = xd.length;
          }

          // Numbers with massively different exponents would result in a very high number of
          // zeros needing to be prepended, but this can be avoided while still ensuring correct
          // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
          i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

          if (k > i) {
            k = i;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents.
          d.reverse();
          for (i = k; i--;) d.push(0);
          d.reverse();

        // Base 1e7 exponents equal.
        } else {

          // Check digits to determine which is the bigger number.

          i = xd.length;
          len = yd.length;
          xLTy = i < len;
          if (xLTy) len = i;

          for (i = 0; i < len; i++) {
            if (xd[i] != yd[i]) {
              xLTy = xd[i] < yd[i];
              break;
            }
          }

          k = 0;
        }

        if (xLTy) {
          d = xd;
          xd = yd;
          yd = d;
          y.s = -y.s;
        }

        len = xd.length;

        // Append zeros to `xd` if shorter.
        // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

        // Subtract yd from xd.
        for (i = yd.length; i > k;) {

          if (xd[--i] < yd[i]) {
            for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
            --xd[j];
            xd[i] += BASE;
          }

          xd[i] -= yd[i];
        }

        // Remove trailing zeros.
        for (; xd[--len] === 0;) xd.pop();

        // Remove leading zeros and adjust exponent accordingly.
        for (; xd[0] === 0; xd.shift()) --e;

        // Zero?
        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

        y.d = xd;
        y.e = getBase10Exponent(xd, e);

        return external ? finalise(y, pr, rm) : y;
      };


      /*
       *   n % 0 =  N
       *   n % N =  N
       *   n % I =  n
       *   0 % n =  0
       *  -0 % n = -0
       *   0 % 0 =  N
       *   0 % N =  N
       *   0 % I =  0
       *   N % n =  N
       *   N % 0 =  N
       *   N % N =  N
       *   N % I =  N
       *   I % n =  N
       *   I % 0 =  N
       *   I % N =  N
       *   I % I =  N
       *
       * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * The result depends on the modulo mode.
       *
       */
      P.modulo = P.mod = function (y) {
        var q,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

        // Return x if y is ±Infinity or x is ±0.
        if (!y.d || x.d && !x.d[0]) {
          return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
        }

        // Prevent rounding of intermediate calculations.
        external = false;

        if (Ctor.modulo == 9) {

          // Euclidian division: q = sign(y) * floor(x / abs(y))
          // result = x - q * y    where  0 <= result < abs(y)
          q = divide(x, y.abs(), 0, 3, 1);
          q.s *= y.s;
        } else {
          q = divide(x, y, 0, Ctor.modulo, 1);
        }

        q = q.times(y);

        external = true;

        return x.minus(q);
      };


      /*
       * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
       * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.naturalExponential = P.exp = function () {
        return naturalExponential(this);
      };


      /*
       * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       */
      P.naturalLogarithm = P.ln = function () {
        return naturalLogarithm(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
       * -1.
       *
       */
      P.negated = P.neg = function () {
        var x = new this.constructor(this);
        x.s = -x.s;
        return finalise(x);
      };


      /*
       *  n + 0 = n
       *  n + N = N
       *  n + I = I
       *  0 + n = n
       *  0 + 0 = 0
       *  0 + N = N
       *  0 + I = I
       *  N + n = N
       *  N + 0 = N
       *  N + N = N
       *  N + I = N
       *  I + n = I
       *  I + 0 = I
       *  I + N = N
       *  I + I = I
       *
       * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       */
      P.plus = P.add = function (y) {
        var carry, d, e, i, k, len, pr, rm, xd, yd,
          x = this,
          Ctor = x.constructor;

        y = new Ctor(y);

        // If either is not finite...
        if (!x.d || !y.d) {

          // Return NaN if either is NaN.
          if (!x.s || !y.s) y = new Ctor(NaN);

          // Return x if y is finite and x is ±Infinity.
          // Return x if both are ±Infinity with the same sign.
          // Return NaN if both are ±Infinity with different signs.
          // Return y if x is finite and y is ±Infinity.
          else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

          return y;
        }

         // If signs differ...
        if (x.s != y.s) {
          y.s = -y.s;
          return x.minus(y);
        }

        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;

        // If either is zero...
        if (!xd[0] || !yd[0]) {

          // Return x if y is zero.
          // Return y if y is non-zero.
          if (!yd[0]) y = new Ctor(x);

          return external ? finalise(y, pr, rm) : y;
        }

        // x and y are finite, non-zero numbers with the same sign.

        // Calculate base 1e7 exponents.
        k = mathfloor(x.e / LOG_BASE);
        e = mathfloor(y.e / LOG_BASE);

        xd = xd.slice();
        i = k - e;

        // If base 1e7 exponents differ...
        if (i) {

          if (i < 0) {
            d = xd;
            i = -i;
            len = yd.length;
          } else {
            d = yd;
            e = k;
            len = xd.length;
          }

          // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
          k = Math.ceil(pr / LOG_BASE);
          len = k > len ? k + 1 : len + 1;

          if (i > len) {
            i = len;
            d.length = 1;
          }

          // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
          d.reverse();
          for (; i--;) d.push(0);
          d.reverse();
        }

        len = xd.length;
        i = yd.length;

        // If yd is longer than xd, swap xd and yd so xd points to the longer array.
        if (len - i < 0) {
          i = len;
          d = yd;
          yd = xd;
          xd = d;
        }

        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
        for (carry = 0; i;) {
          carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
          xd[i] %= BASE;
        }

        if (carry) {
          xd.unshift(carry);
          ++e;
        }

        // Remove trailing zeros.
        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
        for (len = xd.length; xd[--len] == 0;) xd.pop();

        y.d = xd;
        y.e = getBase10Exponent(xd, e);

        return external ? finalise(y, pr, rm) : y;
      };


      /*
       * Return the number of significant digits of the value of this Decimal.
       *
       * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
       *
       */
      P.precision = P.sd = function (z) {
        var k,
          x = this;

        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

        if (x.d) {
          k = getPrecision(x.d);
          if (z && x.e + 1 > k) k = x.e + 1;
        } else {
          k = NaN;
        }

        return k;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
       * rounding mode `rounding`.
       *
       */
      P.round = function () {
        var x = this,
          Ctor = x.constructor;

        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
      };


      /*
       * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-1, 1]
       *
       * sin(x) = x - x^3/3! + x^5/5! - ...
       *
       * sin(0)         = 0
       * sin(-0)        = -0
       * sin(Infinity)  = NaN
       * sin(-Infinity) = NaN
       * sin(NaN)       = NaN
       *
       */
      P.sine = P.sin = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;

        x = sine(Ctor, toLessThanHalfPi(Ctor, x));

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
      };


      /*
       * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       *  sqrt(-n) =  N
       *  sqrt(N)  =  N
       *  sqrt(-I) =  N
       *  sqrt(I)  =  I
       *  sqrt(0)  =  0
       *  sqrt(-0) = -0
       *
       */
      P.squareRoot = P.sqrt = function () {
        var m, n, sd, r, rep, t,
          x = this,
          d = x.d,
          e = x.e,
          s = x.s,
          Ctor = x.constructor;

        // Negative/NaN/Infinity/zero?
        if (s !== 1 || !d || !d[0]) {
          return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
        }

        external = false;

        // Initial estimate.
        s = Math.sqrt(+x);

        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
        if (s == 0 || s == 1 / 0) {
          n = digitsToString(d);

          if ((n.length + e) % 2 == 0) n += '0';
          s = Math.sqrt(n);
          e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

          if (s == 1 / 0) {
            n = '1e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }

          r = new Ctor(n);
        } else {
          r = new Ctor(s.toString());
        }

        sd = (e = Ctor.precision) + 3;

        // Newton-Raphson iteration.
        for (;;) {
          t = r;
          r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

          // TODO? Replace with for-loop and checkRoundingDigits.
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
            // 4999, i.e. approaching a rounding boundary, continue the iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the exact result as the
              // nines may infinitely repeat.
              if (!rep) {
                finalise(t, e + 1, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              sd += 4;
              rep = 1;
            } else {

              // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
              // If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                finalise(r, e + 1, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }

        external = true;

        return finalise(r, e, Ctor.rounding, m);
      };


      /*
       * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-Infinity, Infinity]
       *
       * tan(0)         = 0
       * tan(-0)        = -0
       * tan(Infinity)  = NaN
       * tan(-Infinity) = NaN
       * tan(NaN)       = NaN
       *
       */
      P.tangent = P.tan = function () {
        var pr, rm,
          x = this,
          Ctor = x.constructor;

        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);

        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 10;
        Ctor.rounding = 1;

        x = x.sin();
        x.s = 1;
        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

        Ctor.precision = pr;
        Ctor.rounding = rm;

        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
      };


      /*
       *  n * 0 = 0
       *  n * N = N
       *  n * I = I
       *  0 * n = 0
       *  0 * 0 = 0
       *  0 * N = N
       *  0 * I = N
       *  N * n = N
       *  N * 0 = N
       *  N * N = N
       *  N * I = N
       *  I * n = I
       *  I * 0 = N
       *  I * N = N
       *  I * I = I
       *
       * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       */
      P.times = P.mul = function (y) {
        var carry, e, i, k, r, rL, t, xdL, ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d;

        y.s *= x.s;

         // If either is NaN, ±Infinity or ±0...
        if (!xd || !xd[0] || !yd || !yd[0]) {

          return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

            // Return NaN if either is NaN.
            // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
            ? NaN

            // Return ±Infinity if either is ±Infinity.
            // Return ±0 if either is ±0.
            : !xd || !yd ? y.s / 0 : y.s * 0);
        }

        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
        xdL = xd.length;
        ydL = yd.length;

        // Ensure xd points to the longer array.
        if (xdL < ydL) {
          r = xd;
          xd = yd;
          yd = r;
          rL = xdL;
          xdL = ydL;
          ydL = rL;
        }

        // Initialise the result array with zeros.
        r = [];
        rL = xdL + ydL;
        for (i = rL; i--;) r.push(0);

        // Multiply!
        for (i = ydL; --i >= 0;) {
          carry = 0;
          for (k = xdL + i; k > i;) {
            t = r[k] + yd[i] * xd[k - i - 1] + carry;
            r[k--] = t % BASE | 0;
            carry = t / BASE | 0;
          }

          r[k] = (r[k] + carry) % BASE | 0;
        }

        // Remove trailing zeros.
        for (; !r[--rL];) r.pop();

        if (carry) ++e;
        else r.shift();

        y.d = r;
        y.e = getBase10Exponent(r, e);

        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
      };


      /*
       * Return a string representing the value of this Decimal in base 2, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toBinary = function (sd, rm) {
        return toStringBinary(this, 2, sd, rm);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
       * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
       *
       * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toDecimalPlaces = P.toDP = function (dp, rm) {
        var x = this,
          Ctor = x.constructor;

        x = new Ctor(x);
        if (dp === void 0) return x;

        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        return finalise(x, dp + x.e + 1, rm);
      };


      /*
       * Return a string representing the value of this Decimal in exponential notation rounded to
       * `dp` fixed decimal places using rounding mode `rounding`.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toExponential = function (dp, rm) {
        var str,
          x = this,
          Ctor = x.constructor;

        if (dp === void 0) {
          str = finiteToString(x, true);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          x = finalise(new Ctor(x), dp + 1, rm);
          str = finiteToString(x, true, dp + 1);
        }

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a string representing the value of this Decimal in normal (fixed-point) notation to
       * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
       * omitted.
       *
       * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
       * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
       * (-0).toFixed(3) is '0.000'.
       * (-0.5).toFixed(0) is '-0'.
       *
       */
      P.toFixed = function (dp, rm) {
        var str, y,
          x = this,
          Ctor = x.constructor;

        if (dp === void 0) {
          str = finiteToString(x);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          y = finalise(new Ctor(x), dp + x.e + 1, rm);
          str = finiteToString(y, false, dp + y.e + 1);
        }

        // To determine whether to add the minus sign look at the value before it was rounded,
        // i.e. look at `x` rather than `y`.
        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return an array representing the value of this Decimal as a simple fraction with an integer
       * numerator and an integer denominator.
       *
       * The denominator will be a positive non-zero value less than or equal to the specified maximum
       * denominator. If a maximum denominator is not specified, the denominator will be the lowest
       * value necessary to represent the number exactly.
       *
       * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
       *
       */
      P.toFraction = function (maxD) {
        var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
          x = this,
          xd = x.d,
          Ctor = x.constructor;

        if (!xd) return new Ctor(x);

        n1 = d0 = new Ctor(1);
        d1 = n0 = new Ctor(0);

        d = new Ctor(d1);
        e = d.e = getPrecision(xd) - x.e - 1;
        k = e % LOG_BASE;
        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

        if (maxD == null) {

          // d is 10**e, the minimum max-denominator needed.
          maxD = e > 0 ? d : n1;
        } else {
          n = new Ctor(maxD);
          if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
          maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
        }

        external = false;
        n = new Ctor(digitsToString(xd));
        pr = Ctor.precision;
        Ctor.precision = e = xd.length * LOG_BASE * 2;

        for (;;)  {
          q = divide(n, d, 0, 1, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.cmp(maxD) == 1) break;
          d0 = d1;
          d1 = d2;
          d2 = n1;
          n1 = n0.plus(q.times(d2));
          n0 = d2;
          d2 = d;
          d = n.minus(q.times(d2));
          n = d2;
        }

        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;

        // Determine which fraction is closer to x, n0/d0 or n1/d1?
        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
            ? [n1, d1] : [n0, d0];

        Ctor.precision = pr;
        external = true;

        return r;
      };


      /*
       * Return a string representing the value of this Decimal in base 16, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toHexadecimal = P.toHex = function (sd, rm) {
        return toStringBinary(this, 16, sd, rm);
      };


      /*
       * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
       * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
       *
       * The return value will always have the same sign as this Decimal, unless either this Decimal
       * or `y` is NaN, in which case the return value will be also be NaN.
       *
       * The return value is not affected by the value of `precision`.
       *
       * y {number|string|Decimal} The magnitude to round to a multiple of.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toNearest() rounding mode not an integer: {rm}'
       * 'toNearest() rounding mode out of range: {rm}'
       *
       */
      P.toNearest = function (y, rm) {
        var x = this,
          Ctor = x.constructor;

        x = new Ctor(x);

        if (y == null) {

          // If x is not finite, return x.
          if (!x.d) return x;

          y = new Ctor(1);
          rm = Ctor.rounding;
        } else {
          y = new Ctor(y);
          if (rm === void 0) {
            rm = Ctor.rounding;
          } else {
            checkInt32(rm, 0, 8);
          }

          // If x is not finite, return x if y is not NaN, else NaN.
          if (!x.d) return y.s ? x : y;

          // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
          if (!y.d) {
            if (y.s) y.s = x.s;
            return y;
          }
        }

        // If y is not zero, calculate the nearest multiple of y to x.
        if (y.d[0]) {
          external = false;
          x = divide(x, y, 0, rm, 1).times(y);
          external = true;
          finalise(x);

        // If y is zero, return zero with the sign of x.
        } else {
          y.s = x.s;
          x = y;
        }

        return x;
      };


      /*
       * Return the value of this Decimal converted to a number primitive.
       * Zero keeps its sign.
       *
       */
      P.toNumber = function () {
        return +this;
      };


      /*
       * Return a string representing the value of this Decimal in base 8, round to `sd` significant
       * digits using rounding mode `rm`.
       *
       * If the optional `sd` argument is present then return binary exponential notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toOctal = function (sd, rm) {
        return toStringBinary(this, 8, sd, rm);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
       * to `precision` significant digits using rounding mode `rounding`.
       *
       * ECMAScript compliant.
       *
       *   pow(x, NaN)                           = NaN
       *   pow(x, ±0)                            = 1

       *   pow(NaN, non-zero)                    = NaN
       *   pow(abs(x) > 1, +Infinity)            = +Infinity
       *   pow(abs(x) > 1, -Infinity)            = +0
       *   pow(abs(x) == 1, ±Infinity)           = NaN
       *   pow(abs(x) < 1, +Infinity)            = +0
       *   pow(abs(x) < 1, -Infinity)            = +Infinity
       *   pow(+Infinity, y > 0)                 = +Infinity
       *   pow(+Infinity, y < 0)                 = +0
       *   pow(-Infinity, odd integer > 0)       = -Infinity
       *   pow(-Infinity, even integer > 0)      = +Infinity
       *   pow(-Infinity, odd integer < 0)       = -0
       *   pow(-Infinity, even integer < 0)      = +0
       *   pow(+0, y > 0)                        = +0
       *   pow(+0, y < 0)                        = +Infinity
       *   pow(-0, odd integer > 0)              = -0
       *   pow(-0, even integer > 0)             = +0
       *   pow(-0, odd integer < 0)              = -Infinity
       *   pow(-0, even integer < 0)             = +Infinity
       *   pow(finite x < 0, finite non-integer) = NaN
       *
       * For non-integer or very large exponents pow(x, y) is calculated using
       *
       *   x^y = exp(y*ln(x))
       *
       * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
       * probability of an incorrectly rounded result
       * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
       * i.e. 1 in 250,000,000,000,000
       *
       * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
       *
       * y {number|string|Decimal} The power to which to raise this Decimal.
       *
       */
      P.toPower = P.pow = function (y) {
        var e, k, pr, r, rm, s,
          x = this,
          Ctor = x.constructor,
          yn = +(y = new Ctor(y));

        // Either ±Infinity, NaN or ±0?
        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

        x = new Ctor(x);

        if (x.eq(1)) return x;

        pr = Ctor.precision;
        rm = Ctor.rounding;

        if (y.eq(1)) return finalise(x, pr, rm);

        // y exponent
        e = mathfloor(y.e / LOG_BASE);

        // If y is a small integer use the 'exponentiation by squaring' algorithm.
        if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
          r = intPow(Ctor, x, k, pr);
          return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
        }

        s = x.s;

        // if x is negative
        if (s < 0) {

          // if y is not an integer
          if (e < y.d.length - 1) return new Ctor(NaN);

          // Result is positive if x is negative and the last digit of integer y is even.
          if ((y.d[e] & 1) == 0) s = 1;

          // if x.eq(-1)
          if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
            x.s = s;
            return x;
          }
        }

        // Estimate result exponent.
        // x^y = 10^e,  where e = y * log10(x)
        // log10(x) = log10(x_significand) + x_exponent
        // log10(x_significand) = ln(x_significand) / ln(10)
        k = mathpow(+x, yn);
        e = k == 0 || !isFinite(k)
          ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
          : new Ctor(k + '').e;

        // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

        // Overflow/underflow?
        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

        external = false;
        Ctor.rounding = x.s = 1;

        // Estimate the extra guard digits needed to ensure five correct rounding digits from
        // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
        // new Decimal(2.32456).pow('2087987436534566.46411')
        // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
        k = Math.min(12, (e + '').length);

        // r = x^y = exp(y*ln(x))
        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

        // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
        if (r.d) {

          // Truncate to the required precision plus five rounding digits.
          r = finalise(r, pr + 5, 1);

          // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
          // the result.
          if (checkRoundingDigits(r.d, pr, rm)) {
            e = pr + 10;

            // Truncate to the increased precision plus five rounding digits.
            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
          }
        }

        r.s = s;
        external = true;
        Ctor.rounding = rm;

        return finalise(r, pr, rm);
      };


      /*
       * Return a string representing the value of this Decimal rounded to `sd` significant digits
       * using rounding mode `rounding`.
       *
       * Return exponential notation if `sd` is less than the number of digits necessary to represent
       * the integer part of the value in normal notation.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       */
      P.toPrecision = function (sd, rm) {
        var str,
          x = this,
          Ctor = x.constructor;

        if (sd === void 0) {
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        } else {
          checkInt32(sd, 1, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);

          x = finalise(new Ctor(x), sd, rm);
          str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
        }

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
       * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
       * omitted.
       *
       * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toSD() digits out of range: {sd}'
       * 'toSD() digits not an integer: {sd}'
       * 'toSD() rounding mode not an integer: {rm}'
       * 'toSD() rounding mode out of range: {rm}'
       *
       */
      P.toSignificantDigits = P.toSD = function (sd, rm) {
        var x = this,
          Ctor = x.constructor;

        if (sd === void 0) {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        } else {
          checkInt32(sd, 1, MAX_DIGITS);

          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        }

        return finalise(new Ctor(x), sd, rm);
      };


      /*
       * Return a string representing the value of this Decimal.
       *
       * Return exponential notation if this Decimal has a positive exponent equal to or greater than
       * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
       *
       */
      P.toString = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

        return x.isNeg() && !x.isZero() ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
       *
       */
      P.truncated = P.trunc = function () {
        return finalise(new this.constructor(this), this.e + 1, 1);
      };


      /*
       * Return a string representing the value of this Decimal.
       * Unlike `toString`, negative zero will include the minus sign.
       *
       */
      P.valueOf = P.toJSON = function () {
        var x = this,
          Ctor = x.constructor,
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

        return x.isNeg() ? '-' + str : str;
      };


      /*
      // Add aliases to match BigDecimal method names.
      // P.add = P.plus;
      P.subtract = P.minus;
      P.multiply = P.times;
      P.divide = P.div;
      P.remainder = P.mod;
      P.compareTo = P.cmp;
      P.negate = P.neg;
       */


      // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


      /*
       *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
       *                           finiteToString, naturalExponential, naturalLogarithm
       *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
       *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
       *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
       *  convertBase              toStringBinary, parseOther
       *  cos                      P.cos
       *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
       *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
       *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
       *                           taylorSeries, atan2, parseOther
       *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
       *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
       *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
       *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
       *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
       *                           P.truncated, divide, getLn10, getPi, naturalExponential,
       *                           naturalLogarithm, ceil, floor, round, trunc
       *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
       *                           toStringBinary
       *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
       *  getLn10                  P.logarithm, naturalLogarithm
       *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
       *  getPrecision             P.precision, P.toFraction
       *  getZeroString            digitsToString, finiteToString
       *  intPow                   P.toPower, parseOther
       *  isOdd                    toLessThanHalfPi
       *  maxOrMin                 max, min
       *  naturalExponential       P.naturalExponential, P.toPower
       *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
       *                           P.toPower, naturalExponential
       *  nonFiniteToString        finiteToString, toStringBinary
       *  parseDecimal             Decimal
       *  parseOther               Decimal
       *  sin                      P.sin
       *  taylorSeries             P.cosh, P.sinh, cos, sin
       *  toLessThanHalfPi         P.cos, P.sin
       *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
       *  truncate                 intPow
       *
       *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
       *                           naturalLogarithm, config, parseOther, random, Decimal
       */


      function digitsToString(d) {
        var i, k, ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];

        if (indexOfLastWord > 0) {
          str += w;
          for (i = 1; i < indexOfLastWord; i++) {
            ws = d[i] + '';
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
            str += ws;
          }

          w = d[i];
          ws = w + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
        } else if (w === 0) {
          return '0';
        }

        // Remove trailing zeros of last w.
        for (; w % 10 === 0;) w /= 10;

        return str + w;
      }


      function checkInt32(i, min, max) {
        if (i !== ~~i || i < min || i > max) {
          throw Error(invalidArgument + i);
        }
      }


      /*
       * Check 5 rounding digits if `repeating` is null, 4 otherwise.
       * `repeating == null` if caller is `log` or `pow`,
       * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
       */
      function checkRoundingDigits(d, i, rm, repeating) {
        var di, k, r, rd;

        // Get the length of the first word of the array d.
        for (k = d[0]; k >= 10; k /= 10) --i;

        // Is the rounding digit in the first word of d?
        if (--i < 0) {
          i += LOG_BASE;
          di = 0;
        } else {
          di = Math.ceil((i + 1) / LOG_BASE);
          i %= LOG_BASE;
        }

        // i is the index (0 - 6) of the rounding digit.
        // E.g. if within the word 3487563 the first rounding digit is 5,
        // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
        k = mathpow(10, LOG_BASE - i);
        rd = d[di] % k | 0;

        if (repeating == null) {
          if (i < 3) {
            if (i == 0) rd = rd / 100 | 0;
            else if (i == 1) rd = rd / 10 | 0;
            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
          } else {
            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
              (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
                (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
          }
        } else {
          if (i < 4) {
            if (i == 0) rd = rd / 1000 | 0;
            else if (i == 1) rd = rd / 100 | 0;
            else if (i == 2) rd = rd / 10 | 0;
            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
          } else {
            r = ((repeating || rm < 4) && rd + 1 == k ||
            (!repeating && rm > 3) && rd + 1 == k / 2) &&
              (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
          }
        }

        return r;
      }


      // Convert string of `baseIn` to an array of numbers of `baseOut`.
      // Eg. convertBase('255', 10, 16) returns [15, 15].
      // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
      function convertBase(str, baseIn, baseOut) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          strL = str.length;

        for (; i < strL;) {
          for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
          arr[0] += NUMERALS.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] === void 0) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }


      /*
       * cos(x) = 1 - x^2/2! + x^4/4! - ...
       * |x| < pi/2
       *
       */
      function cosine(Ctor, x) {
        var k, y,
          len = x.d.length;

        // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
        // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

        // Estimate the optimum number of times to use the argument reduction.
        if (len < 32) {
          k = Math.ceil(len / 3);
          y = (1 / tinyPow(4, k)).toString();
        } else {
          k = 16;
          y = '2.3283064365386962890625e-10';
        }

        Ctor.precision += k;

        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

        // Reverse argument reduction
        for (var i = k; i--;) {
          var cos2x = x.times(x);
          x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
        }

        Ctor.precision -= k;

        return x;
      }


      /*
       * Perform division in the specified base.
       */
      var divide = (function () {

        // Assumes non-zero x and k, and hence non-zero result.
        function multiplyInteger(x, k, base) {
          var temp,
            carry = 0,
            i = x.length;

          for (x = x.slice(); i--;) {
            temp = x[i] * k + carry;
            x[i] = temp % base | 0;
            carry = temp / base | 0;
          }

          if (carry) x.unshift(carry);

          return x;
        }

        function compare(a, b, aL, bL) {
          var i, r;

          if (aL != bL) {
            r = aL > bL ? 1 : -1;
          } else {
            for (i = r = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                r = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }

          return r;
        }

        function subtract(a, b, aL, base) {
          var i = 0;

          // Subtract b from a.
          for (; aL--;) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }

          // Remove leading zeros.
          for (; !a[0] && a.length > 1;) a.shift();
        }

        return function (x, y, pr, rm, dp, base) {
          var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
            yL, yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d;

          // Either NaN, Infinity or 0?
          if (!xd || !xd[0] || !yd || !yd[0]) {

            return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

              // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
              xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
          }

          if (base) {
            logBase = 1;
            e = x.e - y.e;
          } else {
            base = BASE;
            logBase = LOG_BASE;
            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
          }

          yL = yd.length;
          xL = xd.length;
          q = new Ctor(sign);
          qd = q.d = [];

          // Result exponent may be one less than e.
          // The digit array of a Decimal from toStringBinary may have trailing zeros.
          for (i = 0; yd[i] == (xd[i] || 0); i++);

          if (yd[i] > (xd[i] || 0)) e--;

          if (pr == null) {
            sd = pr = Ctor.precision;
            rm = Ctor.rounding;
          } else if (dp) {
            sd = pr + (x.e - y.e) + 1;
          } else {
            sd = pr;
          }

          if (sd < 0) {
            qd.push(1);
            more = true;
          } else {

            // Convert precision in number of base 10 digits to base 1e7 digits.
            sd = sd / logBase + 2 | 0;
            i = 0;

            // divisor < 1e7
            if (yL == 1) {
              k = 0;
              yd = yd[0];
              sd++;

              // k is the carry.
              for (; (i < xL || k) && sd--; i++) {
                t = k * base + (xd[i] || 0);
                qd[i] = t / yd | 0;
                k = t % yd | 0;
              }

              more = k || i < xL;

            // divisor >= 1e7
            } else {

              // Normalise xd and yd so highest order digit of yd is >= base/2
              k = base / (yd[0] + 1) | 0;

              if (k > 1) {
                yd = multiplyInteger(yd, k, base);
                xd = multiplyInteger(xd, k, base);
                yL = yd.length;
                xL = xd.length;
              }

              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL;) rem[remL++] = 0;

              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];

              if (yd[1] >= base / 2) ++yd0;

              do {
                k = 0;

                // Compare divisor and remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, k.
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // k will be how many times the divisor goes into the current remainder.
                  k = rem0 / yd0 | 0;

                  //  Algorithm:
                  //  1. product = divisor * trial digit (k)
                  //  2. if product > remainder: product -= divisor, k--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, k++

                  if (k > 1) {
                    if (k >= base) k = base - 1;

                    // product = divisor * trial digit.
                    prod = multiplyInteger(yd, k, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    cmp = compare(prod, rem, prodL, remL);

                    // product > remainder.
                    if (cmp == 1) {
                      k--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yd, prodL, base);
                    }
                  } else {

                    // cmp is -1.
                    // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                    // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                    if (k == 0) cmp = k = 1;
                    prod = yd.slice();
                  }

                  prodL = prod.length;
                  if (prodL < remL) prod.unshift(0);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);

                  // If product was < previous remainder.
                  if (cmp == -1) {
                    remL = rem.length;

                    // Compare divisor and new remainder.
                    cmp = compare(yd, rem, yL, remL);

                    // If divisor < new remainder, subtract divisor from remainder.
                    if (cmp < 1) {
                      k++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yd, remL, base);
                    }
                  }

                  remL = rem.length;
                } else if (cmp === 0) {
                  k++;
                  rem = [0];
                }    // if cmp === 1, k will be 0

                // Add the next digit, k, to the result array.
                qd[i++] = k;

                // Update the remainder.
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }

              } while ((xi++ < xL || rem[0] !== void 0) && sd--);

              more = rem[0] !== void 0;
            }

            // Leading zero?
            if (!qd[0]) qd.shift();
          }

          // logBase is 1 when divide is being used for base conversion.
          if (logBase == 1) {
            q.e = e;
            inexact = more;
          } else {

            // To calculate q.e, first get the number of digits of qd[0].
            for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
            q.e = i + e * logBase - 1;

            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
          }

          return q;
        };
      })();


      /*
       * Round `x` to `sd` significant digits using rounding mode `rm`.
       * Check for over/under-flow.
       */
       function finalise(x, sd, rm, isTruncated) {
        var digits, i, j, k, rd, roundUp, w, xd, xdi,
          Ctor = x.constructor;

        // Don't round if sd is null or undefined.
        out: if (sd != null) {
          xd = x.d;

          // Infinity/NaN.
          if (!xd) return x;

          // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
          // w: the word of xd containing rd, a base 1e7 number.
          // xdi: the index of w within xd.
          // digits: the number of digits of w.
          // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
          // they had leading zeros)
          // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

          // Get the length of the first word of the digits array xd.
          for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
          i = sd - digits;

          // Is the rounding digit in the first word of xd?
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];

            // Get the rounding digit at index j of w.
            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k = xd.length;
            if (xdi >= k) {
              if (isTruncated) {

                // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
                for (; k++ <= xdi;) xd.push(0);
                w = rd = 0;
                digits = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              w = k = xd[xdi];

              // Get the number of digits of w.
              for (digits = 1; k >= 10; k /= 10) digits++;

              // Get the index of rd within w.
              i %= LOG_BASE;

              // Get the index of rd within w, adjusted for leading zeros.
              // The number of leading zeros of w is given by LOG_BASE - digits.
              j = i - LOG_BASE + digits;

              // Get the rounding digit at index j of w.
              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
            }
          }

          // Are there any non-zero digits after the rounding digit?
          isTruncated = isTruncated || sd < 0 ||
            xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

          // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
          // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
          // will give 714.

          roundUp = rm < 4
            ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

              // Check whether the digit to the left of the rounding digit is odd.
              ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
                rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xd[0]) {
            xd.length = 0;
            if (roundUp) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x.e = -sd || 0;
            } else {

              // Zero.
              xd[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xd.length = xdi;
            k = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k = mathpow(10, LOG_BASE - i);

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of w.
            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
          }

          if (roundUp) {
            for (;;) {

              // Is the digit to be rounded up in the first word of xd?
              if (xdi == 0) {

                // i will be the length of xd[0] before k is added.
                for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
                j = xd[0] += k;
                for (k = 1; j >= 10; j /= 10) k++;

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xd[0] == BASE) xd[0] = 1;
                }

                break;
              } else {
                xd[xdi] += k;
                if (xd[xdi] != BASE) break;
                xd[xdi--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xd.length; xd[--i] === 0;) xd.pop();
        }

        if (external) {

          // Overflow?
          if (x.e > Ctor.maxE) {

            // Infinity.
            x.d = null;
            x.e = NaN;

          // Underflow?
          } else if (x.e < Ctor.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
            // Ctor.underflow = true;
          } // else Ctor.underflow = false;
        }

        return x;
      }


      function finiteToString(x, isExp, sd) {
        if (!x.isFinite()) return nonFiniteToString(x);
        var k,
          e = x.e,
          str = digitsToString(x.d),
          len = str.length;

        if (isExp) {
          if (sd && (k = sd - len) > 0) {
            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
          } else if (len > 1) {
            str = str.charAt(0) + '.' + str.slice(1);
          }

          str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
        } else if (e < 0) {
          str = '0.' + getZeroString(-e - 1) + str;
          if (sd && (k = sd - len) > 0) str += getZeroString(k);
        } else if (e >= len) {
          str += getZeroString(e + 1 - len);
          if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
        } else {
          if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
          if (sd && (k = sd - len) > 0) {
            if (e + 1 === len) str += '.';
            str += getZeroString(k);
          }
        }

        return str;
      }


      // Calculate the base 10 exponent from the base 1e7 exponent.
      function getBase10Exponent(digits, e) {
        var w = digits[0];

        // Add the number of digits of the first word of the digits array.
        for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
        return e;
      }


      function getLn10(Ctor, sd, pr) {
        if (sd > LN10_PRECISION) {

          // Reset global state in case the exception is caught.
          external = true;
          if (pr) Ctor.precision = pr;
          throw Error(precisionLimitExceeded);
        }
        return finalise(new Ctor(LN10), sd, 1, true);
      }


      function getPi(Ctor, sd, rm) {
        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
        return finalise(new Ctor(PI), sd, rm, true);
      }


      function getPrecision(digits) {
        var w = digits.length - 1,
          len = w * LOG_BASE + 1;

        w = digits[w];

        // If non-zero...
        if (w) {

          // Subtract the number of trailing zeros of the last word.
          for (; w % 10 == 0; w /= 10) len--;

          // Add the number of digits of the first word.
          for (w = digits[0]; w >= 10; w /= 10) len++;
        }

        return len;
      }


      function getZeroString(k) {
        var zs = '';
        for (; k--;) zs += '0';
        return zs;
      }


      /*
       * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
       * integer of type number.
       *
       * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
       *
       */
      function intPow(Ctor, x, n, pr) {
        var isTruncated,
          r = new Ctor(1),

          // Max n of 9007199254740991 takes 53 loop iterations.
          // Maximum digits array length; leaves [28, 34] guard digits.
          k = Math.ceil(pr / LOG_BASE + 4);

        external = false;

        for (;;) {
          if (n % 2) {
            r = r.times(x);
            if (truncate(r.d, k)) isTruncated = true;
          }

          n = mathfloor(n / 2);
          if (n === 0) {

            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
            n = r.d.length - 1;
            if (isTruncated && r.d[n] === 0) ++r.d[n];
            break;
          }

          x = x.times(x);
          truncate(x.d, k);
        }

        external = true;

        return r;
      }


      function isOdd(n) {
        return n.d[n.d.length - 1] & 1;
      }


      /*
       * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
       */
      function maxOrMin(Ctor, args, ltgt) {
        var y,
          x = new Ctor(args[0]),
          i = 0;

        for (; ++i < args.length;) {
          y = new Ctor(args[i]);
          if (!y.s) {
            x = y;
            break;
          } else if (x[ltgt](y)) {
            x = y;
          }
        }

        return x;
      }


      /*
       * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
       * digits.
       *
       * Taylor/Maclaurin series.
       *
       * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
       *
       * Argument reduction:
       *   Repeat x = x / 32, k += 5, until |x| < 0.1
       *   exp(x) = exp(x / 2^k)^(2^k)
       *
       * Previously, the argument was initially reduced by
       * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
       * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
       * found to be slower than just dividing repeatedly by 32 as above.
       *
       * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
       * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
       * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
       *
       *  exp(Infinity)  = Infinity
       *  exp(-Infinity) = 0
       *  exp(NaN)       = NaN
       *  exp(±0)        = 1
       *
       *  exp(x) is non-terminating for any finite, non-zero x.
       *
       *  The result will always be correctly rounded.
       *
       */
      function naturalExponential(x, sd) {
        var denominator, guard, j, pow, sum, t, wpr,
          rep = 0,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // 0/NaN/Infinity?
        if (!x.d || !x.d[0] || x.e > 17) {

          return new Ctor(x.d
            ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
            : x.s ? x.s < 0 ? 0 : x : 0 / 0);
        }

        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }

        t = new Ctor(0.03125);

        // while abs(x) >= 0.1
        while (x.e > -2) {

          // x = x / 2^5
          x = x.times(t);
          k += 5;
        }

        // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
        // necessary to ensure the first 4 rounding digits are correct.
        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
        wpr += guard;
        denominator = pow = sum = new Ctor(1);
        Ctor.precision = wpr;

        for (;;) {
          pow = finalise(pow.times(x), wpr, 1);
          denominator = denominator.times(++i);
          t = sum.plus(divide(pow, denominator, wpr, 1));

          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            j = k;
            while (j--) sum = finalise(sum.times(sum), wpr, 1);

            // Check to see if the first 4 rounding digits are [49]999.
            // If so, repeat the summation with a higher precision, otherwise
            // e.g. with precision: 18, rounding: 1
            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {

              if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += 10;
                denominator = pow = t = new Ctor(1);
                i = 0;
                rep++;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }

          sum = t;
        }
      }


      /*
       * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
       * digits.
       *
       *  ln(-n)        = NaN
       *  ln(0)         = -Infinity
       *  ln(-0)        = -Infinity
       *  ln(1)         = 0
       *  ln(Infinity)  = Infinity
       *  ln(-Infinity) = NaN
       *  ln(NaN)       = NaN
       *
       *  ln(n) (n != 1) is non-terminating.
       *
       */
      function naturalLogarithm(y, sd) {
        var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          rm = Ctor.rounding,
          pr = Ctor.precision;

        // Is x negative or Infinity, NaN, 0 or 1?
        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
          return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
        }

        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }

        Ctor.precision = wpr += guard;
        c = digitsToString(xd);
        c0 = c.charAt(0);

        if (Math.abs(e = x.e) < 1.5e15) {

          // Argument reduction.
          // The series converges faster the closer the argument is to 1, so using
          // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
          // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
          // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
          // later be divided by this number, then separate out the power of 10 using
          // ln(a*10^b) = ln(a) + b*ln(10).

          // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
          //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
          // max n is 6 (gives 0.7 - 1.3)
          while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
            x = x.times(y);
            c = digitsToString(x.d);
            c0 = c.charAt(0);
            n++;
          }

          e = x.e;

          if (c0 > 1) {
            x = new Ctor('0.' + c);
            e++;
          } else {
            x = new Ctor(c0 + '.' + c.slice(1));
          }
        } else {

          // The argument reduction method above may result in overflow if the argument y is a massive
          // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
          // function using ln(x*10^e) = ln(x) + e*ln(10).
          t = getLn10(Ctor, wpr + 2, pr).times(e + '');
          x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
          Ctor.precision = pr;

          return sd == null ? finalise(x, pr, rm, external = true) : x;
        }

        // x1 is x reduced to a value near 1.
        x1 = x;

        // Taylor series.
        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
        // where x = (y - 1)/(y + 1)    (|x| < 1)
        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
        x2 = finalise(x.times(x), wpr, 1);
        denominator = 3;

        for (;;) {
          numerator = finalise(numerator.times(x2), wpr, 1);
          t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            sum = sum.times(2);

            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
            sum = divide(sum, new Ctor(n), wpr, 1);

            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
            // been repeated previously) and the first 4 rounding digits 9999?
            // If so, restart the summation with a higher precision, otherwise
            // e.g. with precision: 12, rounding: 1
            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
            // `wpr - guard` is the index of first rounding digit.
            if (sd == null) {
              if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += guard;
                t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                x2 = finalise(x.times(x), wpr, 1);
                denominator = rep = 1;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }

          sum = t;
          denominator += 2;
        }
      }


      // ±Infinity, NaN.
      function nonFiniteToString(x) {
        // Unsigned.
        return String(x.s * x.s / 0);
      }


      /*
       * Parse the value of a new Decimal `x` from string `str`.
       */
      function parseDecimal(x, str) {
        var e, i, len;

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

        // Determine leading zeros.
        for (i = 0; str.charCodeAt(i) === 48; i++);

        // Determine trailing zeros.
        for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
        str = str.slice(i, len);

        if (str) {
          len -= i;
          x.e = e = e - i - 1;
          x.d = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first word of the digits array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;

          if (i < len) {
            if (i) x.d.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
            str = str.slice(i);
            i = LOG_BASE - str.length;
          } else {
            i -= len;
          }

          for (; i--;) str += '0';
          x.d.push(+str);

          if (external) {

            // Overflow?
            if (x.e > x.constructor.maxE) {

              // Infinity.
              x.d = null;
              x.e = NaN;

            // Underflow?
            } else if (x.e < x.constructor.minE) {

              // Zero.
              x.e = 0;
              x.d = [0];
              // x.constructor.underflow = true;
            } // else x.constructor.underflow = false;
          }
        } else {

          // Zero.
          x.e = 0;
          x.d = [0];
        }

        return x;
      }


      /*
       * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
       */
      function parseOther(x, str) {
        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

        if (str === 'Infinity' || str === 'NaN') {
          if (!+str) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return x;
        }

        if (isHex.test(str))  {
          base = 16;
          str = str.toLowerCase();
        } else if (isBinary.test(str))  {
          base = 2;
        } else if (isOctal.test(str))  {
          base = 8;
        } else {
          throw Error(invalidArgument + str);
        }

        // Is there a binary exponent part?
        i = str.search(/p/i);

        if (i > 0) {
          p = +str.slice(i + 1);
          str = str.substring(2, i);
        } else {
          str = str.slice(2);
        }

        // Convert `str` as an integer then divide the result by `base` raised to a power such that the
        // fraction part will be restored.
        i = str.indexOf('.');
        isFloat = i >= 0;
        Ctor = x.constructor;

        if (isFloat) {
          str = str.replace('.', '');
          len = str.length;
          i = len - i;

          // log[10](16) = 1.2041... , log[10](88) = 1.9444....
          divisor = intPow(Ctor, new Ctor(base), i, i * 2);
        }

        xd = convertBase(str, base, BASE);
        xe = xd.length - 1;

        // Remove trailing zeros.
        for (i = xe; xd[i] === 0; --i) xd.pop();
        if (i < 0) return new Ctor(x.s * 0);
        x.e = getBase10Exponent(xd, xe);
        x.d = xd;
        external = false;

        // At what precision to perform the division to ensure exact conversion?
        // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
        // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
        // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
        // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
        // Therefore using 4 * the number of digits of str will always be enough.
        if (isFloat) x = divide(x, divisor, len * 4);

        // Multiply by the binary exponent part if present.
        if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
        external = true;

        return x;
      }


      /*
       * sin(x) = x - x^3/3! + x^5/5! - ...
       * |x| < pi/2
       *
       */
      function sine(Ctor, x) {
        var k,
          len = x.d.length;

        if (len < 3) return taylorSeries(Ctor, 2, x, x);

        // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
        // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
        // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;

        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x);

        // Reverse argument reduction
        var sin2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
        for (; k--;) {
          sin2_x = x.times(x);
          x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
        }

        return x;
      }


      // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
      function taylorSeries(Ctor, n, x, y, isHyperbolic) {
        var j, t, u, x2,
          pr = Ctor.precision,
          k = Math.ceil(pr / LOG_BASE);

        external = false;
        x2 = x.times(x);
        u = new Ctor(y);

        for (;;) {
          t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
          u = isHyperbolic ? y.plus(t) : y.minus(t);
          y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
          t = u.plus(y);

          if (t.d[k] !== void 0) {
            for (j = k; t.d[j] === u.d[j] && j--;);
            if (j == -1) break;
          }

          j = u;
          u = y;
          y = t;
          t = j;
        }

        external = true;
        t.d.length = k + 1;

        return t;
      }


      // Exponent e must be positive and non-zero.
      function tinyPow(b, e) {
        var n = b;
        while (--e) n *= b;
        return n;
      }


      // Return the absolute value of `x` reduced to less than or equal to half pi.
      function toLessThanHalfPi(Ctor, x) {
        var t,
          isNeg = x.s < 0,
          pi = getPi(Ctor, Ctor.precision, 1),
          halfPi = pi.times(0.5);

        x = x.abs();

        if (x.lte(halfPi)) {
          quadrant = isNeg ? 4 : 1;
          return x;
        }

        t = x.divToInt(pi);

        if (t.isZero()) {
          quadrant = isNeg ? 3 : 2;
        } else {
          x = x.minus(t.times(pi));

          // 0 <= x < pi
          if (x.lte(halfPi)) {
            quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
            return x;
          }

          quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
        }

        return x.minus(pi).abs();
      }


      /*
       * Return the value of Decimal `x` as a string in base `baseOut`.
       *
       * If the optional `sd` argument is present include a binary exponent suffix.
       */
      function toStringBinary(x, baseOut, sd, rm) {
        var base, e, i, k, len, roundUp, str, xd, y,
          Ctor = x.constructor,
          isExp = sd !== void 0;

        if (isExp) {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        } else {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        }

        if (!x.isFinite()) {
          str = nonFiniteToString(x);
        } else {
          str = finiteToString(x);
          i = str.indexOf('.');

          // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
          // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
          // minBinaryExponent = floor(decimalExponent * log[2](10))
          // log[2](10) = 3.321928094887362347870319429489390175864

          if (isExp) {
            base = 2;
            if (baseOut == 16) {
              sd = sd * 4 - 3;
            } else if (baseOut == 8) {
              sd = sd * 3 - 2;
            }
          } else {
            base = baseOut;
          }

          // Convert the number as an integer then divide the result by its base raised to a power such
          // that the fraction part will be restored.

          // Non-integer.
          if (i >= 0) {
            str = str.replace('.', '');
            y = new Ctor(1);
            y.e = str.length - i;
            y.d = convertBase(finiteToString(y), 10, base);
            y.e = y.d.length;
          }

          xd = convertBase(str, 10, base);
          e = len = xd.length;

          // Remove trailing zeros.
          for (; xd[--len] == 0;) xd.pop();

          if (!xd[0]) {
            str = isExp ? '0p+0' : '0';
          } else {
            if (i < 0) {
              e--;
            } else {
              x = new Ctor(x);
              x.d = xd;
              x.e = e;
              x = divide(x, y, sd, rm, 0, base);
              xd = x.d;
              e = x.e;
              roundUp = inexact;
            }

            // The rounding digit, i.e. the digit after the digit that may be rounded up.
            i = xd[sd];
            k = base / 2;
            roundUp = roundUp || xd[sd + 1] !== void 0;

            roundUp = rm < 4
              ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
              : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
                rm === (x.s < 0 ? 8 : 7));

            xd.length = sd;

            if (roundUp) {

              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (; ++xd[--sd] > base - 1;) {
                xd[sd] = 0;
                if (!sd) {
                  ++e;
                  xd.unshift(1);
                }
              }
            }

            // Determine trailing zeros.
            for (len = xd.length; !xd[len - 1]; --len);

            // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

            // Add binary exponent suffix?
            if (isExp) {
              if (len > 1) {
                if (baseOut == 16 || baseOut == 8) {
                  i = baseOut == 16 ? 4 : 3;
                  for (--len; len % i; len++) str += '0';
                  xd = convertBase(str, base, baseOut);
                  for (len = xd.length; !xd[len - 1]; --len);

                  // xd[0] will always be be 1
                  for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
                } else {
                  str = str.charAt(0) + '.' + str.slice(1);
                }
              }

              str =  str + (e < 0 ? 'p' : 'p+') + e;
            } else if (e < 0) {
              for (; ++e;) str = '0' + str;
              str = '0.' + str;
            } else {
              if (++e > len) for (e -= len; e-- ;) str += '0';
              else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
            }
          }

          str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
        }

        return x.s < 0 ? '-' + str : str;
      }


      // Does not strip trailing zeros.
      function truncate(arr, len) {
        if (arr.length > len) {
          arr.length = len;
          return true;
        }
      }


      // Decimal methods


      /*
       *  abs
       *  acos
       *  acosh
       *  add
       *  asin
       *  asinh
       *  atan
       *  atanh
       *  atan2
       *  cbrt
       *  ceil
       *  clone
       *  config
       *  cos
       *  cosh
       *  div
       *  exp
       *  floor
       *  hypot
       *  ln
       *  log
       *  log2
       *  log10
       *  max
       *  min
       *  mod
       *  mul
       *  pow
       *  random
       *  round
       *  set
       *  sign
       *  sin
       *  sinh
       *  sqrt
       *  sub
       *  tan
       *  tanh
       *  trunc
       */


      /*
       * Return a new Decimal whose value is the absolute value of `x`.
       *
       * x {number|string|Decimal}
       *
       */
      function abs(x) {
        return new this(x).abs();
      }


      /*
       * Return a new Decimal whose value is the arccosine in radians of `x`.
       *
       * x {number|string|Decimal}
       *
       */
      function acos(x) {
        return new this(x).acos();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function acosh(x) {
        return new this(x).acosh();
      }


      /*
       * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function add(x, y) {
        return new this(x).plus(y);
      }


      /*
       * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function asin(x) {
        return new this(x).asin();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function asinh(x) {
        return new this(x).asinh();
      }


      /*
       * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function atan(x) {
        return new this(x).atan();
      }


      /*
       * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
       * `precision` significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function atanh(x) {
        return new this(x).atanh();
      }


      /*
       * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
       * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * Domain: [-Infinity, Infinity]
       * Range: [-pi, pi]
       *
       * y {number|string|Decimal} The y-coordinate.
       * x {number|string|Decimal} The x-coordinate.
       *
       * atan2(±0, -0)               = ±pi
       * atan2(±0, +0)               = ±0
       * atan2(±0, -x)               = ±pi for x > 0
       * atan2(±0, x)                = ±0 for x > 0
       * atan2(-y, ±0)               = -pi/2 for y > 0
       * atan2(y, ±0)                = pi/2 for y > 0
       * atan2(±y, -Infinity)        = ±pi for finite y > 0
       * atan2(±y, +Infinity)        = ±0 for finite y > 0
       * atan2(±Infinity, x)         = ±pi/2 for finite x
       * atan2(±Infinity, -Infinity) = ±3*pi/4
       * atan2(±Infinity, +Infinity) = ±pi/4
       * atan2(NaN, x) = NaN
       * atan2(y, NaN) = NaN
       *
       */
      function atan2(y, x) {
        y = new this(y);
        x = new this(x);
        var r,
          pr = this.precision,
          rm = this.rounding,
          wpr = pr + 4;

        // Either NaN
        if (!y.s || !x.s) {
          r = new this(NaN);

        // Both ±Infinity
        } else if (!y.d && !x.d) {
          r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
          r.s = y.s;

        // x is ±Infinity or y is ±0
        } else if (!x.d || y.isZero()) {
          r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
          r.s = y.s;

        // y is ±Infinity or x is ±0
        } else if (!y.d || x.isZero()) {
          r = getPi(this, wpr, 1).times(0.5);
          r.s = y.s;

        // Both non-zero and finite
        } else if (x.s < 0) {
          this.precision = wpr;
          this.rounding = 1;
          r = this.atan(divide(y, x, wpr, 1));
          x = getPi(this, wpr, 1);
          this.precision = pr;
          this.rounding = rm;
          r = y.s < 0 ? r.minus(x) : r.plus(x);
        } else {
          r = this.atan(divide(y, x, wpr, 1));
        }

        return r;
      }


      /*
       * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function cbrt(x) {
        return new this(x).cbrt();
      }


      /*
       * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
       *
       * x {number|string|Decimal}
       *
       */
      function ceil(x) {
        return finalise(x = new this(x), x.e + 1, 2);
      }


      /*
       * Configure global settings for a Decimal constructor.
       *
       * `obj` is an object with one or more of the following properties,
       *
       *   precision  {number}
       *   rounding   {number}
       *   toExpNeg   {number}
       *   toExpPos   {number}
       *   maxE       {number}
       *   minE       {number}
       *   modulo     {number}
       *   crypto     {boolean|number}
       *   defaults   {true}
       *
       * E.g. Decimal.config({ precision: 20, rounding: 4 })
       *
       */
      function config(obj) {
        if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
        var i, p, v,
          useDefaults = obj.defaults === true,
          ps = [
            'precision', 1, MAX_DIGITS,
            'rounding', 0, 8,
            'toExpNeg', -EXP_LIMIT, 0,
            'toExpPos', 0, EXP_LIMIT,
            'maxE', 0, EXP_LIMIT,
            'minE', -EXP_LIMIT, 0,
            'modulo', 0, 9
          ];

        for (i = 0; i < ps.length; i += 3) {
          if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
          if ((v = obj[p]) !== void 0) {
            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
            else throw Error(invalidArgument + p + ': ' + v);
          }
        }

        if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (v === true || v === false || v === 0 || v === 1) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
                (crypto.getRandomValues || crypto.randomBytes)) {
                this[p] = true;
              } else {
                throw Error(cryptoUnavailable);
              }
            } else {
              this[p] = false;
            }
          } else {
            throw Error(invalidArgument + p + ': ' + v);
          }
        }

        return this;
      }


      /*
       * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function cos(x) {
        return new this(x).cos();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function cosh(x) {
        return new this(x).cosh();
      }


      /*
       * Create and return a Decimal constructor with the same configuration properties as this Decimal
       * constructor.
       *
       */
      function clone(obj) {
        var i, p, ps;

        /*
         * The Decimal constructor and exported function.
         * Return a new Decimal instance.
         *
         * v {number|string|Decimal} A numeric value.
         *
         */
        function Decimal(v) {
          var e, i, t,
            x = this;

          // Decimal called without new.
          if (!(x instanceof Decimal)) return new Decimal(v);

          // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
          // which points to Object.
          x.constructor = Decimal;

          // Duplicate.
          if (v instanceof Decimal) {
            x.s = v.s;

            if (external) {
              if (!v.d || v.e > Decimal.maxE) {

                // Infinity.
                x.e = NaN;
                x.d = null;
              } else if (v.e < Decimal.minE) {

                // Zero.
                x.e = 0;
                x.d = [0];
              } else {
                x.e = v.e;
                x.d = v.d.slice();
              }
            } else {
              x.e = v.e;
              x.d = v.d ? v.d.slice() : v.d;
            }

            return;
          }

          t = typeof v;

          if (t === 'number') {
            if (v === 0) {
              x.s = 1 / v < 0 ? -1 : 1;
              x.e = 0;
              x.d = [0];
              return;
            }

            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }

            // Fast path for small integers.
            if (v === ~~v && v < 1e7) {
              for (e = 0, i = v; i >= 10; i /= 10) e++;

              if (external) {
                if (e > Decimal.maxE) {
                  x.e = NaN;
                  x.d = null;
                } else if (e < Decimal.minE) {
                  x.e = 0;
                  x.d = [0];
                } else {
                  x.e = e;
                  x.d = [v];
                }
              } else {
                x.e = e;
                x.d = [v];
              }

              return;

            // Infinity, NaN.
            } else if (v * 0 !== 0) {
              if (!v) x.s = NaN;
              x.e = NaN;
              x.d = null;
              return;
            }

            return parseDecimal(x, v.toString());

          } else if (t !== 'string') {
            throw Error(invalidArgument + v);
          }

          // Minus sign?
          if ((i = v.charCodeAt(0)) === 45) {
            v = v.slice(1);
            x.s = -1;
          } else {
            // Plus sign?
            if (i === 43) v = v.slice(1);
            x.s = 1;
          }

          return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
        }

        Decimal.prototype = P;

        Decimal.ROUND_UP = 0;
        Decimal.ROUND_DOWN = 1;
        Decimal.ROUND_CEIL = 2;
        Decimal.ROUND_FLOOR = 3;
        Decimal.ROUND_HALF_UP = 4;
        Decimal.ROUND_HALF_DOWN = 5;
        Decimal.ROUND_HALF_EVEN = 6;
        Decimal.ROUND_HALF_CEIL = 7;
        Decimal.ROUND_HALF_FLOOR = 8;
        Decimal.EUCLID = 9;

        Decimal.config = Decimal.set = config;
        Decimal.clone = clone;
        Decimal.isDecimal = isDecimalInstance;

        Decimal.abs = abs;
        Decimal.acos = acos;
        Decimal.acosh = acosh;        // ES6
        Decimal.add = add;
        Decimal.asin = asin;
        Decimal.asinh = asinh;        // ES6
        Decimal.atan = atan;
        Decimal.atanh = atanh;        // ES6
        Decimal.atan2 = atan2;
        Decimal.cbrt = cbrt;          // ES6
        Decimal.ceil = ceil;
        Decimal.cos = cos;
        Decimal.cosh = cosh;          // ES6
        Decimal.div = div;
        Decimal.exp = exp;
        Decimal.floor = floor;
        Decimal.hypot = hypot;        // ES6
        Decimal.ln = ln;
        Decimal.log = log;
        Decimal.log10 = log10;        // ES6
        Decimal.log2 = log2;          // ES6
        Decimal.max = max;
        Decimal.min = min;
        Decimal.mod = mod;
        Decimal.mul = mul;
        Decimal.pow = pow;
        Decimal.random = random;
        Decimal.round = round;
        Decimal.sign = sign;          // ES6
        Decimal.sin = sin;
        Decimal.sinh = sinh;          // ES6
        Decimal.sqrt = sqrt;
        Decimal.sub = sub;
        Decimal.tan = tan;
        Decimal.tanh = tanh;          // ES6
        Decimal.trunc = trunc;        // ES6

        if (obj === void 0) obj = {};
        if (obj) {
          if (obj.defaults !== true) {
            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
            for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
          }
        }

        Decimal.config(obj);

        return Decimal;
      }


      /*
       * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function div(x, y) {
        return new this(x).div(y);
      }


      /*
       * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} The power to which to raise the base of the natural log.
       *
       */
      function exp(x) {
        return new this(x).exp();
      }


      /*
       * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
       *
       * x {number|string|Decimal}
       *
       */
      function floor(x) {
        return finalise(x = new this(x), x.e + 1, 3);
      }


      /*
       * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
       * rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
       *
       * arguments {number|string|Decimal}
       *
       */
      function hypot() {
        var i, n,
          t = new this(0);

        external = false;

        for (i = 0; i < arguments.length;) {
          n = new this(arguments[i++]);
          if (!n.d) {
            if (n.s) {
              external = true;
              return new this(1 / 0);
            }
            t = n;
          } else if (t.d) {
            t = t.plus(n.times(n));
          }
        }

        external = true;

        return t.sqrt();
      }


      /*
       * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
       * otherwise return false.
       *
       */
      function isDecimalInstance(obj) {
        return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
      }


      /*
       * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function ln(x) {
        return new this(x).ln();
      }


      /*
       * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
       * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
       *
       * log[y](x)
       *
       * x {number|string|Decimal} The argument of the logarithm.
       * y {number|string|Decimal} The base of the logarithm.
       *
       */
      function log(x, y) {
        return new this(x).log(y);
      }


      /*
       * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function log2(x) {
        return new this(x).log(2);
      }


      /*
       * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function log10(x) {
        return new this(x).log(10);
      }


      /*
       * Return a new Decimal whose value is the maximum of the arguments.
       *
       * arguments {number|string|Decimal}
       *
       */
      function max() {
        return maxOrMin(this, arguments, 'lt');
      }


      /*
       * Return a new Decimal whose value is the minimum of the arguments.
       *
       * arguments {number|string|Decimal}
       *
       */
      function min() {
        return maxOrMin(this, arguments, 'gt');
      }


      /*
       * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function mod(x, y) {
        return new this(x).mod(y);
      }


      /*
       * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function mul(x, y) {
        return new this(x).mul(y);
      }


      /*
       * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} The base.
       * y {number|string|Decimal} The exponent.
       *
       */
      function pow(x, y) {
        return new this(x).pow(y);
      }


      /*
       * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
       * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
       * are produced).
       *
       * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
       *
       */
      function random(sd) {
        var d, e, k, n,
          i = 0,
          r = new this(1),
          rd = [];

        if (sd === void 0) sd = this.precision;
        else checkInt32(sd, 1, MAX_DIGITS);

        k = Math.ceil(sd / LOG_BASE);

        if (!this.crypto) {
          for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

        // Browsers supporting crypto.getRandomValues.
        } else if (crypto.getRandomValues) {
          d = crypto.getRandomValues(new Uint32Array(k));

          for (; i < k;) {
            n = d[i];

            // 0 <= n < 4294967296
            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
            if (n >= 4.29e9) {
              d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
            } else {

              // 0 <= n <= 4289999999
              // 0 <= (n % 1e7) <= 9999999
              rd[i++] = n % 1e7;
            }
          }

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          d = crypto.randomBytes(k *= 4);

          for (; i < k;) {

            // 0 <= n < 2147483648
            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
            if (n >= 2.14e9) {
              crypto.randomBytes(4).copy(d, i);
            } else {

              // 0 <= n <= 2139999999
              // 0 <= (n % 1e7) <= 9999999
              rd.push(n % 1e7);
              i += 4;
            }
          }

          i = k / 4;
        } else {
          throw Error(cryptoUnavailable);
        }

        k = rd[--i];
        sd %= LOG_BASE;

        // Convert trailing digits to zeros according to sd.
        if (k && sd) {
          n = mathpow(10, LOG_BASE - sd);
          rd[i] = (k / n | 0) * n;
        }

        // Remove trailing words which are zero.
        for (; rd[i] === 0; i--) rd.pop();

        // Zero?
        if (i < 0) {
          e = 0;
          rd = [0];
        } else {
          e = -1;

          // Remove leading words which are zero and adjust exponent accordingly.
          for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

          // Count the digits of the first word of rd to determine leading zeros.
          for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

          // Adjust the exponent for leading zeros of the first word of rd.
          if (k < LOG_BASE) e -= LOG_BASE - k;
        }

        r.e = e;
        r.d = rd;

        return r;
      }


      /*
       * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
       *
       * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
       *
       * x {number|string|Decimal}
       *
       */
      function round(x) {
        return finalise(x = new this(x), x.e + 1, this.rounding);
      }


      /*
       * Return
       *   1    if x > 0,
       *  -1    if x < 0,
       *   0    if x is 0,
       *  -0    if x is -0,
       *   NaN  otherwise
       *
       * x {number|string|Decimal}
       *
       */
      function sign(x) {
        x = new this(x);
        return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
      }


      /*
       * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function sin(x) {
        return new this(x).sin();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function sinh(x) {
        return new this(x).sinh();
      }


      /*
       * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       *
       */
      function sqrt(x) {
        return new this(x).sqrt();
      }


      /*
       * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
       * using rounding mode `rounding`.
       *
       * x {number|string|Decimal}
       * y {number|string|Decimal}
       *
       */
      function sub(x, y) {
        return new this(x).sub(y);
      }


      /*
       * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
       * digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function tan(x) {
        return new this(x).tan();
      }


      /*
       * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
       * significant digits using rounding mode `rounding`.
       *
       * x {number|string|Decimal} A value in radians.
       *
       */
      function tanh(x) {
        return new this(x).tanh();
      }


      /*
       * Return a new Decimal whose value is `x` truncated to an integer.
       *
       * x {number|string|Decimal}
       *
       */
      function trunc(x) {
        return finalise(x = new this(x), x.e + 1, 1);
      }


      // Create and configure initial Decimal constructor.
      Decimal = clone(DEFAULTS);

      Decimal['default'] = Decimal.Decimal = Decimal;

      // Create the internal constants from their string values.
      LN10 = new Decimal(LN10);
      PI = new Decimal(PI);


      // Export.


      // AMD.
      if ( module.exports) {
        if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
          P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
          P[Symbol.toStringTag] = 'Decimal';
        }

        module.exports = Decimal;

      // Browser.
      } else {
        if (!globalScope) {
          globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
        }

        noConflict = globalScope.Decimal;
        Decimal.noConflict = function () {
          globalScope.Decimal = noConflict;
          return Decimal;
        };

        globalScope.Decimal = Decimal;
      }
    })(commonjsGlobal);
    });

    var name$1 = 'BigNumber';
    var dependencies$2 = ['?on', 'config'];
    var createBigNumberClass =
    /* #__PURE__ */
    factory(name$1, dependencies$2, function (_ref) {
      var on = _ref.on,
          config = _ref.config;
      var BigNumber = decimal.clone({
        precision: config.precision
      });
      /**
       * Attach type information
       */

      BigNumber.prototype.type = 'BigNumber';
      BigNumber.prototype.isBigNumber = true;
      /**
       * Get a JSON representation of a BigNumber containing
       * type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "BigNumber", "value": "0.2"}`
       */

      BigNumber.prototype.toJSON = function () {
        return {
          mathjs: 'BigNumber',
          value: this.toString()
        };
      };
      /**
       * Instantiate a BigNumber from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "BigNumber", "value": "0.2"}`
       * @return {BigNumber}
       */


      BigNumber.fromJSON = function (json) {
        return new BigNumber(json.value);
      };

      if (on) {
        // listen for changed in the configuration, automatically apply changed precision
        on('config', function (curr, prev) {
          if (curr.precision !== prev.precision) {
            BigNumber.config({
              precision: curr.precision
            });
          }
        });
      }

      return BigNumber;
    }, {
      isClass: true
    });

    var complex = createCommonjsModule(function (module, exports) {
    /**
     * @license Complex.js v2.0.11 11/02/2016
     *
     * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/

    /**
     *
     * This class allows the manipulation of complex numbers.
     * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
     *
     * Object form
     * { re: <real>, im: <imaginary> }
     * { arg: <angle>, abs: <radius> }
     * { phi: <angle>, r: <radius> }
     *
     * Array / Vector form
     * [ real, imaginary ]
     *
     * Double form
     * 99.3 - Single double value
     *
     * String form
     * '23.1337' - Simple real number
     * '15+3i' - a simple complex number
     * '3-i' - a simple complex number
     *
     * Example:
     *
     * var c = new Complex('99.3+8i');
     * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
     *
     */

    (function(root) {

      var cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) * 0.5;
      };

      var sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) * 0.5;
      };

      /**
       * Calculates cos(x) - 1 using Taylor series if x is small.
       *
       * @param {number} x
       * @returns {number} cos(x) - 1
       */

      var cosm1 = function(x) {
        var limit = Math.PI/4;
        if (x < -limit || x > limit) {
          return (Math.cos(x) - 1.0);
        }

        var xx = x * x;
        return xx *
          (-0.5 + xx *
            (1/24 + xx *
              (-1/720 + xx *
                (1/40320 + xx *
                  (-1/3628800 + xx *
                    (1/4790014600 + xx *
                      (-1/87178291200 + xx *
                        (1/20922789888000)
                      )
                    )
                  )
                )
              )
            )
          )
      };

      var hypot = function(x, y) {

        var a = Math.abs(x);
        var b = Math.abs(y);

        if (a < 3000 && b < 3000) {
          return Math.sqrt(a * a + b * b);
        }

        if (a < b) {
          a = b;
          b = x / y;
        } else {
          b = y / x;
        }
        return a * Math.sqrt(1 + b * b);
      };

      var parser_exit = function() {
        throw SyntaxError('Invalid Param');
      };

      /**
       * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
       *
       * @param {number} a
       * @param {number} b
       * @returns {number}
       */
      function logHypot(a, b) {

        var _a = Math.abs(a);
        var _b = Math.abs(b);

        if (a === 0) {
          return Math.log(_b);
        }

        if (b === 0) {
          return Math.log(_a);
        }

        if (_a < 3000 && _b < 3000) {
          return Math.log(a * a + b * b) * 0.5;
        }

        /* I got 4 ideas to compute this property without overflow:
         *
         * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
         *
         * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

         Math.log(a * a + b * b) / 2

         *
         *
         * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

         var fn = function(a, b) {
         a = Math.abs(a);
         b = Math.abs(b);
         var t = Math.min(a, b);
         a = Math.max(a, b);
         t = t / a;

         return Math.log(a) + Math.log(1 + t * t) / 2;
         };

         * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

         Math.log(a / Math.cos(Math.atan2(b, a)))

         * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

         Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

         */

        return Math.log(a / Math.cos(Math.atan2(b, a)));
      }

      var parse = function(a, b) {

        var z = {'re': 0, 'im': 0};

        if (a === undefined || a === null) {
          z['re'] =
                  z['im'] = 0;
        } else if (b !== undefined) {
          z['re'] = a;
          z['im'] = b;
        } else
          switch (typeof a) {

            case 'object':

              if ('im' in a && 're' in a) {
                z['re'] = a['re'];
                z['im'] = a['im'];
              } else if ('abs' in a && 'arg' in a) {
                if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['abs'] * Math.cos(a['arg']);
                z['im'] = a['abs'] * Math.sin(a['arg']);
              } else if ('r' in a && 'phi' in a) {
                if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
                  return Complex['INFINITY'];
                }
                z['re'] = a['r'] * Math.cos(a['phi']);
                z['im'] = a['r'] * Math.sin(a['phi']);
              } else if (a.length === 2) { // Quick array check
                z['re'] = a[0];
                z['im'] = a[1];
              } else {
                parser_exit();
              }
              break;

            case 'string':

              z['im'] = /* void */
                      z['re'] = 0;

              var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
              var plus = 1;
              var minus = 0;

              if (tokens === null) {
                parser_exit();
              }

              for (var i = 0; i < tokens.length; i++) {

                var c = tokens[i];

                if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
                  plus++;
                } else if (c === '-') {
                  minus++;
                } else if (c === 'i' || c === 'I') {

                  if (plus + minus === 0) {
                    parser_exit();
                  }

                  if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                    i++;
                  } else {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
                  }
                  plus = minus = 0;

                } else {

                  if (plus + minus === 0 || isNaN(c)) {
                    parser_exit();
                  }

                  if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                    z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                    i++;
                  } else {
                    z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
                  }
                  plus = minus = 0;
                }
              }

              // Still something on the stack
              if (plus + minus > 0) {
                parser_exit();
              }
              break;

            case 'number':
              z['im'] = 0;
              z['re'] = a;
              break;

            default:
              parser_exit();
          }

        return z;
      };

      /**
       * @constructor
       * @returns {Complex}
       */
      function Complex(a, b) {

        if (!(this instanceof Complex)) {
          return new Complex(a, b);
        }

        var z = parse(a, b);

        this['re'] = z['re'];
        this['im'] = z['im'];
      }

      Complex.prototype = {

        're': 0,
        'im': 0,

        /**
         * Calculates the sign of a complex number, which is a normalized complex
         *
         * @returns {Complex}
         */
        'sign': function() {

          var abs = this['abs']();

          return new Complex(
                  this['re'] / abs,
                  this['im'] / abs);
        },

        /**
         * Adds two complex numbers
         *
         * @returns {Complex}
         */
        'add': function(a, b) {

          var z = new Complex(a, b);

          // Infinity + Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity + z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
                  this['re'] + z['re'],
                  this['im'] + z['im']);
        },

        /**
         * Subtracts two complex numbers
         *
         * @returns {Complex}
         */
        'sub': function(a, b) {

          var z = new Complex(a, b);

          // Infinity - Infinity = NaN
          if (this['isInfinite']() && z['isInfinite']()) {
            return Complex['NAN'];
          }

          // Infinity - z = Infinity { where z != Infinity }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          return new Complex(
                  this['re'] - z['re'],
                  this['im'] - z['im']);
        },

        /**
         * Multiplies two complex numbers
         *
         * @returns {Complex}
         */
        'mul': function(a, b) {

          var z = new Complex(a, b);

          // Infinity * 0 = NaN
          if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity * z = Infinity { where z != 0 }
          if (this['isInfinite']() || z['isInfinite']()) {
            return Complex['INFINITY'];
          }

          // Short circuit for real values
          if (z['im'] === 0 && this['im'] === 0) {
            return new Complex(this['re'] * z['re'], 0);
          }

          return new Complex(
                  this['re'] * z['re'] - this['im'] * z['im'],
                  this['re'] * z['im'] + this['im'] * z['re']);
        },

        /**
         * Divides two complex numbers
         *
         * @returns {Complex}
         */
        'div': function(a, b) {

          var z = new Complex(a, b);

          // 0 / 0 = NaN and Infinity / Infinity = NaN
          if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
            return Complex['NAN'];
          }

          // Infinity / 0 = Infinity
          if (this['isInfinite']() || z['isZero']()) {
            return Complex['INFINITY'];
          }

          // 0 / Infinity = 0
          if (this['isZero']() || z['isInfinite']()) {
            return Complex['ZERO'];
          }

          a = this['re'];
          b = this['im'];

          var c = z['re'];
          var d = z['im'];
          var t, x;

          if (0 === d) {
            // Divisor is real
            return new Complex(a / c, b / c);
          }

          if (Math.abs(c) < Math.abs(d)) {

            x = c / d;
            t = c * x + d;

            return new Complex(
                    (a * x + b) / t,
                    (b * x - a) / t);

          } else {

            x = d / c;
            t = d * x + c;

            return new Complex(
                    (a + b * x) / t,
                    (b - a * x) / t);
          }
        },

        /**
         * Calculate the power of two complex numbers
         *
         * @returns {Complex}
         */
        'pow': function(a, b) {

          var z = new Complex(a, b);

          a = this['re'];
          b = this['im'];

          if (z['isZero']()) {
            return Complex['ONE'];
          }

          // If the exponent is real
          if (z['im'] === 0) {

            if (b === 0 && a >= 0) {

              return new Complex(Math.pow(a, z['re']), 0);

            } else if (a === 0) { // If base is fully imaginary

              switch ((z['re'] % 4 + 4) % 4) {
                case 0:
                  return new Complex(Math.pow(b, z['re']), 0);
                case 1:
                  return new Complex(0, Math.pow(b, z['re']));
                case 2:
                  return new Complex(-Math.pow(b, z['re']), 0);
                case 3:
                  return new Complex(0, -Math.pow(b, z['re']));
              }
            }
          }

          /* I couldn't find a good formula, so here is a derivation and optimization
           *
           * z_1^z_2 = (a + bi)^(c + di)
           *         = exp((c + di) * log(a + bi)
           *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
           * =>...
           * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
           *
           * =>...
           * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
           *
           * =>
           * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
           * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
           *
           */

          if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
            return Complex['ZERO'];
          }

          var arg = Math.atan2(b, a);
          var loh = logHypot(a, b);

          a = Math.exp(z['re'] * loh - z['im'] * arg);
          b = z['im'] * loh + z['re'] * arg;
          return new Complex(
                  a * Math.cos(b),
                  a * Math.sin(b));
        },

        /**
         * Calculate the complex square root
         *
         * @returns {Complex}
         */
        'sqrt': function() {

          var a = this['re'];
          var b = this['im'];
          var r = this['abs']();

          var re, im;

          if (a >= 0) {

            if (b === 0) {
              return new Complex(Math.sqrt(a), 0);
            }

            re = 0.5 * Math.sqrt(2.0 * (r + a));
          } else {
            re = Math.abs(b) / Math.sqrt(2 * (r - a));
          }

          if (a <= 0) {
            im = 0.5 * Math.sqrt(2.0 * (r - a));
          } else {
            im = Math.abs(b) / Math.sqrt(2 * (r + a));
          }

          return new Complex(re, b < 0 ? -im : im);
        },

        /**
         * Calculate the complex exponent
         *
         * @returns {Complex}
         */
        'exp': function() {

          var tmp = Math.exp(this['re']);

          if (this['im'] === 0) ;
          return new Complex(
                  tmp * Math.cos(this['im']),
                  tmp * Math.sin(this['im']));
        },

        /**
         * Calculate the complex exponent and subtracts one.
         *
         * This may be more accurate than `Complex(x).exp().sub(1)` if
         * `x` is small.
         *
         * @returns {Complex}
         */
        'expm1': function() {

          /**
           * exp(a + i*b) - 1
           = exp(a) * (cos(b) + j*sin(b)) - 1
           = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
           */

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  Math.expm1(a) * Math.cos(b) + cosm1(b),
                  Math.exp(a) * Math.sin(b));
        },

        /**
         * Calculate the natural log
         *
         * @returns {Complex}
         */
        'log': function() {

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  logHypot(a, b),
                  Math.atan2(b, a));
        },

        /**
         * Calculate the magnitude of the complex number
         *
         * @returns {number}
         */
        'abs': function() {

          return hypot(this['re'], this['im']);
        },

        /**
         * Calculate the angle of the complex number
         *
         * @returns {number}
         */
        'arg': function() {

          return Math.atan2(this['im'], this['re']);
        },

        /**
         * Calculate the sine of the complex number
         *
         * @returns {Complex}
         */
        'sin': function() {

          // sin(c) = (e^b - e^(-b)) / (2i)

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  Math.sin(a) * cosh(b),
                  Math.cos(a) * sinh(b));
        },

        /**
         * Calculate the cosine
         *
         * @returns {Complex}
         */
        'cos': function() {

          // cos(z) = (e^b + e^(-b)) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  Math.cos(a) * cosh(b),
                  -Math.sin(a) * sinh(b));
        },

        /**
         * Calculate the tangent
         *
         * @returns {Complex}
         */
        'tan': function() {

          // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) + cosh(b);

          return new Complex(
                  Math.sin(a) / d,
                  sinh(b) / d);
        },

        /**
         * Calculate the cotangent
         *
         * @returns {Complex}
         */
        'cot': function() {

          // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = Math.cos(a) - cosh(b);

          return new Complex(
                  -Math.sin(a) / d,
                  sinh(b) / d);
        },

        /**
         * Calculate the secant
         *
         * @returns {Complex}
         */
        'sec': function() {

          // sec(c) = 2 / (e^(ci) + e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

          return new Complex(
                  Math.cos(a) * cosh(b) / d,
                  Math.sin(a) * sinh(b) / d);
        },

        /**
         * Calculate the cosecans
         *
         * @returns {Complex}
         */
        'csc': function() {

          // csc(c) = 2i / (e^(ci) - e^(-ci))

          var a = this['re'];
          var b = this['im'];
          var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

          return new Complex(
                  Math.sin(a) * cosh(b) / d,
                  -Math.cos(a) * sinh(b) / d);
        },

        /**
         * Calculate the complex arcus sinus
         *
         * @returns {Complex}
         */
        'asin': function() {

          // asin(c) = -i * log(ci + sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
                  b * b - a * a + 1,
                  -2 * a * b)['sqrt']();

          var t2 = new Complex(
                  t1['re'] - b,
                  t1['im'] + a)['log']();

          return new Complex(t2['im'], -t2['re']);
        },

        /**
         * Calculate the complex arcus cosinus
         *
         * @returns {Complex}
         */
        'acos': function() {

          // acos(c) = i * log(c - i * sqrt(1 - c^2))

          var a = this['re'];
          var b = this['im'];

          var t1 = new Complex(
                  b * b - a * a + 1,
                  -2 * a * b)['sqrt']();

          var t2 = new Complex(
                  t1['re'] - b,
                  t1['im'] + a)['log']();

          return new Complex(Math.PI / 2 - t2['im'], t2['re']);
        },

        /**
         * Calculate the complex arcus tangent
         *
         * @returns {Complex}
         */
        'atan': function() {

          // atan(c) = i / 2 log((i + x) / (i - x))

          var a = this['re'];
          var b = this['im'];

          if (a === 0) {

            if (b === 1) {
              return new Complex(0, Infinity);
            }

            if (b === -1) {
              return new Complex(0, -Infinity);
            }
          }

          var d = a * a + (1.0 - b) * (1.0 - b);

          var t1 = new Complex(
                  (1 - b * b - a * a) / d,
                  -2 * a / d).log();

          return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
        },

        /**
         * Calculate the complex arcus cotangent
         *
         * @returns {Complex}
         */
        'acot': function() {

          // acot(c) = i / 2 log((c - i) / (c + i))

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {
            return new Complex(Math.atan2(1, a), 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).atan()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).atan();
        },

        /**
         * Calculate the complex arcus secant
         *
         * @returns {Complex}
         */
        'asec': function() {

          // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).acos()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).acos();
        },

        /**
         * Calculate the complex arcus cosecans
         *
         * @returns {Complex}
         */
        'acsc': function() {

          // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(Math.PI / 2, Infinity);
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).asin()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).asin();
        },

        /**
         * Calculate the complex sinh
         *
         * @returns {Complex}
         */
        'sinh': function() {

          // sinh(c) = (e^c - e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  sinh(a) * Math.cos(b),
                  cosh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex cosh
         *
         * @returns {Complex}
         */
        'cosh': function() {

          // cosh(c) = (e^c + e^-c) / 2

          var a = this['re'];
          var b = this['im'];

          return new Complex(
                  cosh(a) * Math.cos(b),
                  sinh(a) * Math.sin(b));
        },

        /**
         * Calculate the complex tanh
         *
         * @returns {Complex}
         */
        'tanh': function() {

          // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) + Math.cos(b);

          return new Complex(
                  sinh(a) / d,
                  Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'coth': function() {

          // coth(c) = (e^c + e^-c) / (e^c - e^-c)

          var a = 2 * this['re'];
          var b = 2 * this['im'];
          var d = cosh(a) - Math.cos(b);

          return new Complex(
                  sinh(a) / d,
                  -Math.sin(b) / d);
        },

        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        'csch': function() {

          // csch(c) = 2 / (e^c - e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) - cosh(2 * a);

          return new Complex(
                  -2 * sinh(a) * Math.cos(b) / d,
                  2 * cosh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex sech
         *
         * @returns {Complex}
         */
        'sech': function() {

          // sech(c) = 2 / (e^c + e^-c)

          var a = this['re'];
          var b = this['im'];
          var d = Math.cos(2 * b) + cosh(2 * a);

          return new Complex(
                  2 * cosh(a) * Math.cos(b) / d,
                  -2 * sinh(a) * Math.sin(b) / d);
        },

        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        'asinh': function() {

          // asinh(c) = log(c + sqrt(c^2 + 1))

          var tmp = this['im'];
          this['im'] = -this['re'];
          this['re'] = tmp;
          var res = this['asin']();

          this['re'] = -this['im'];
          this['im'] = tmp;
          tmp = res['re'];

          res['re'] = -res['im'];
          res['im'] = tmp;
          return res;
        },

        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        'acosh': function() {

          // acosh(c) = log(c + sqrt(c^2 - 1))

          var res = this['acos']();
          if (res['im'] <= 0) {
            var tmp = res['re'];
            res['re'] = -res['im'];
            res['im'] = tmp;
          } else {
            var tmp = res['im'];
            res['im'] = -res['re'];
            res['re'] = tmp;
          }
          return res;
        },

        /**
         * Calculate the complex atanh
         *
         * @returns {Complex}
         */
        'atanh': function() {

          // atanh(c) = log((1+c) / (1-c)) / 2

          var a = this['re'];
          var b = this['im'];

          var noIM = a > 1 && b === 0;
          var oneMinus = 1 - a;
          var onePlus = 1 + a;
          var d = oneMinus * oneMinus + b * b;

          var x = (d !== 0)
                  ? new Complex(
                          (onePlus * oneMinus - b * b) / d,
                          (b * oneMinus + onePlus * b) / d)
                  : new Complex(
                          (a !== -1) ? (a / 0) : 0,
                          (b !== 0) ? (b / 0) : 0);

          var temp = x['re'];
          x['re'] = logHypot(x['re'], x['im']) / 2;
          x['im'] = Math.atan2(x['im'], temp) / 2;
          if (noIM) {
            x['im'] = -x['im'];
          }
          return x;
        },

        /**
         * Calculate the complex acoth
         *
         * @returns {Complex}
         */
        'acoth': function() {

          // acoth(c) = log((c+1) / (c-1)) / 2

          var a = this['re'];
          var b = this['im'];

          if (a === 0 && b === 0) {
            return new Complex(0, Math.PI / 2);
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).atanh()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).atanh();
        },

        /**
         * Calculate the complex acsch
         *
         * @returns {Complex}
         */
        'acsch': function() {

          // acsch(c) = log((1+sqrt(1+c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (b === 0) {

            return new Complex(
                    (a !== 0)
                    ? Math.log(a + Math.sqrt(a * a + 1))
                    : Infinity, 0);
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).asinh()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).asinh();
        },

        /**
         * Calculate the complex asech
         *
         * @returns {Complex}
         */
        'asech': function() {

          // asech(c) = log((1+sqrt(1-c^2))/c)

          var a = this['re'];
          var b = this['im'];

          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          var d = a * a + b * b;
          return (d !== 0)
                  ? new Complex(
                          a / d,
                          -b / d).acosh()
                  : new Complex(
                          (a !== 0) ? a / 0 : 0,
                          (b !== 0) ? -b / 0 : 0).acosh();
        },

        /**
         * Calculate the complex inverse 1/z
         *
         * @returns {Complex}
         */
        'inverse': function() {

          // 1 / 0 = Infinity and 1 / Infinity = 0
          if (this['isZero']()) {
            return Complex['INFINITY'];
          }

          if (this['isInfinite']()) {
            return Complex['ZERO'];
          }

          var a = this['re'];
          var b = this['im'];

          var d = a * a + b * b;

          return new Complex(a / d, -b / d);
        },

        /**
         * Returns the complex conjugate
         *
         * @returns {Complex}
         */
        'conjugate': function() {

          return new Complex(this['re'], -this['im']);
        },

        /**
         * Gets the negated complex number
         *
         * @returns {Complex}
         */
        'neg': function() {

          return new Complex(-this['re'], -this['im']);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'ceil': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
                  Math.ceil(this['re'] * places) / places,
                  Math.ceil(this['im'] * places) / places);
        },

        /**
         * Floors the actual complex number
         *
         * @returns {Complex}
         */
        'floor': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
                  Math.floor(this['re'] * places) / places,
                  Math.floor(this['im'] * places) / places);
        },

        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        'round': function(places) {

          places = Math.pow(10, places || 0);

          return new Complex(
                  Math.round(this['re'] * places) / places,
                  Math.round(this['im'] * places) / places);
        },

        /**
         * Compares two complex numbers
         *
         * **Note:** new Complex(Infinity).equals(Infinity) === false
         *
         * @returns {boolean}
         */
        'equals': function(a, b) {

          var z = new Complex(a, b);

          return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
                  Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
        },

        /**
         * Clones the actual object
         *
         * @returns {Complex}
         */
        'clone': function() {

          return new Complex(this['re'], this['im']);
        },

        /**
         * Gets a string of the actual complex number
         *
         * @returns {string}
         */
        'toString': function() {

          var a = this['re'];
          var b = this['im'];
          var ret = '';

          if (this['isNaN']()) {
            return 'NaN';
          }

          if (this['isZero']()) {
            return '0';
          }

          if (this['isInfinite']()) {
            return 'Infinity';
          }

          if (a !== 0) {
            ret += a;
          }

          if (b !== 0) {

            if (a !== 0) {
              ret += b < 0 ? ' - ' : ' + ';
            } else if (b < 0) {
              ret += '-';
            }

            b = Math.abs(b);

            if (1 !== b) {
              ret += b;
            }
            ret += 'i';
          }

          if (!ret)
            return '0';

          return ret;
        },

        /**
         * Returns the actual number as a vector
         *
         * @returns {Array}
         */
        'toVector': function() {

          return [this['re'], this['im']];
        },

        /**
         * Returns the actual real value of the current object
         *
         * @returns {number|null}
         */
        'valueOf': function() {

          if (this['im'] === 0) {
            return this['re'];
          }
          return null;
        },

        /**
         * Determines whether a complex number is not on the Riemann sphere.
         *
         * @returns {boolean}
         */
        'isNaN': function() {
          return isNaN(this['re']) || isNaN(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the zero pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isZero': function() {
          return (
                  (this['re'] === 0 || this['re'] === -0) &&
                  (this['im'] === 0 || this['im'] === -0)
                  );
        },

        /**
         * Determines whether a complex number is not at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isFinite': function() {
          return isFinite(this['re']) && isFinite(this['im']);
        },

        /**
         * Determines whether or not a complex number is at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        'isInfinite': function() {
          return !(this['isNaN']() || this['isFinite']());
        }
      };

      Complex['ZERO'] = new Complex(0, 0);
      Complex['ONE'] = new Complex(1, 0);
      Complex['I'] = new Complex(0, 1);
      Complex['PI'] = new Complex(Math.PI, 0);
      Complex['E'] = new Complex(Math.E, 0);
      Complex['INFINITY'] = new Complex(Infinity, Infinity);
      Complex['NAN'] = new Complex(NaN, NaN);
      Complex['EPSILON'] = 1e-16;

      {
        Object.defineProperty(exports, "__esModule", {'value': true});
        Complex['default'] = Complex;
        Complex['Complex'] = Complex;
        module['exports'] = Complex;
      }

    })();
    });

    var Complex = unwrapExports(complex);

    function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
    var name$2 = 'Complex';
    var dependencies$3 = [];
    var createComplexClass =
    /* #__PURE__ */
    factory(name$2, dependencies$3, function () {
      /**
       * Attach type information
       */
      Complex.prototype.type = 'Complex';
      Complex.prototype.isComplex = true;
      /**
       * Get a JSON representation of the complex number
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
       */

      Complex.prototype.toJSON = function () {
        return {
          mathjs: 'Complex',
          re: this.re,
          im: this.im
        };
      };
      /*
       * Return the value of the complex number in polar notation
       * The angle phi will be set in the interval of [-pi, pi].
       * @return {{r: number, phi: number}} Returns and object with properties r and phi.
       */


      Complex.prototype.toPolar = function () {
        return {
          r: this.abs(),
          phi: this.arg()
        };
      };
      /**
       * Get a string representation of the complex number,
       * with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @return {string} str
       */


      Complex.prototype.format = function (options) {
        var str = '';
        var im = this.im;
        var re = this.re;
        var strRe = format$3(this.re, options);
        var strIm = format$3(this.im, options); // round either re or im when smaller than the configured precision

        var precision = isNumber$f(options) ? options : options ? options.precision : null;

        if (precision !== null) {
          var epsilon = Math.pow(10, -precision);

          if (Math.abs(re / im) < epsilon) {
            re = 0;
          }

          if (Math.abs(im / re) < epsilon) {
            im = 0;
          }
        }

        if (im === 0) {
          // real value
          str = strRe;
        } else if (re === 0) {
          // purely complex value
          if (im === 1) {
            str = 'i';
          } else if (im === -1) {
            str = '-i';
          } else {
            str = strIm + 'i';
          }
        } else {
          // complex value
          if (im < 0) {
            if (im === -1) {
              str = strRe + ' - i';
            } else {
              str = strRe + ' - ' + strIm.substring(1) + 'i';
            }
          } else {
            if (im === 1) {
              str = strRe + ' + i';
            } else {
              str = strRe + ' + ' + strIm + 'i';
            }
          }
        }

        return str;
      };
      /**
       * Create a complex number from polar coordinates
       *
       * Usage:
       *
       *     Complex.fromPolar(r: number, phi: number) : Complex
       *     Complex.fromPolar({r: number, phi: number}) : Complex
       *
       * @param {*} args...
       * @return {Complex}
       */


      Complex.fromPolar = function (args) {
        switch (arguments.length) {
          case 1:
            {
              var arg = arguments[0];

              if (_typeof$3(arg) === 'object') {
                return Complex(arg);
              } else {
                throw new TypeError('Input has to be an object with r and phi keys.');
              }
            }

          case 2:
            {
              var r = arguments[0];
              var phi = arguments[1];

              if (isNumber$f(r)) {
                if (isUnit(phi) && phi.hasBase('ANGLE')) {
                  // convert unit to a number in radians
                  phi = phi.toNumber('rad');
                }

                if (isNumber$f(phi)) {
                  return new Complex({
                    r: r,
                    phi: phi
                  });
                }

                throw new TypeError('Phi is not a number nor an angle unit.');
              } else {
                throw new TypeError('Radius r is not a number.');
              }
            }

          default:
            throw new SyntaxError('Wrong number of arguments in function fromPolar');
        }
      };

      Complex.prototype.valueOf = Complex.prototype.toString;
      /**
       * Create a Complex number from a JSON object
       * @param {Object} json  A JSON Object structured as
       *                       {"mathjs": "Complex", "re": 2, "im": 3}
       *                       All properties are optional, default values
       *                       for `re` and `im` are 0.
       * @return {Complex} Returns a new Complex number
       */

      Complex.fromJSON = function (json) {
        return new Complex(json);
      };
      /**
       * Compare two complex numbers, `a` and `b`:
       *
       * - Returns 1 when the real part of `a` is larger than the real part of `b`
       * - Returns -1 when the real part of `a` is smaller than the real part of `b`
       * - Returns 1 when the real parts are equal
       *   and the imaginary part of `a` is larger than the imaginary part of `b`
       * - Returns -1 when the real parts are equal
       *   and the imaginary part of `a` is smaller than the imaginary part of `b`
       * - Returns 0 when both real and imaginary parts are equal.
       *
       * @params {Complex} a
       * @params {Complex} b
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      Complex.compare = function (a, b) {
        if (a.re > b.re) {
          return 1;
        }

        if (a.re < b.re) {
          return -1;
        }

        if (a.im > b.im) {
          return 1;
        }

        if (a.im < b.im) {
          return -1;
        }

        return 0;
      };

      return Complex;
    }, {
      isClass: true
    });

    var fraction = createCommonjsModule(function (module, exports) {
    /**
     * @license Fraction.js v4.0.12 09/09/2015
     * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
     *
     * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **/


    /**
     *
     * This class offers the possibility to calculate fractions.
     * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
     *
     * Array/Object form
     * [ 0 => <nominator>, 1 => <denominator> ]
     * [ n => <nominator>, d => <denominator> ]
     *
     * Integer form
     * - Single integer value
     *
     * Double form
     * - Single double value
     *
     * String form
     * 123.456 - a simple double
     * 123/456 - a string fraction
     * 123.'456' - a double with repeating decimal places
     * 123.(456) - synonym
     * 123.45'6' - a double with repeating last place
     * 123.45(6) - synonym
     *
     * Example:
     *
     * var f = new Fraction("9.4'31'");
     * f.mul([-4, 3]).div(4.9);
     *
     */

    (function(root) {

      // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
      // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
      // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
      var MAX_CYCLE_LEN = 2000;

      // Parsed data to avoid calling "new" all the time
      var P = {
        "s": 1,
        "n": 0,
        "d": 1
      };

      function createError(name) {

        function errorConstructor() {
          var temp = Error.apply(this, arguments);
          temp['name'] = this['name'] = name;
          this['stack'] = temp['stack'];
          this['message'] = temp['message'];
        }

        /**
         * Error constructor
         *
         * @constructor
         */
        function IntermediateInheritor() {}
        IntermediateInheritor.prototype = Error.prototype;
        errorConstructor.prototype = new IntermediateInheritor();

        return errorConstructor;
      }

      var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
      var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

      function assign(n, s) {

        if (isNaN(n = parseInt(n, 10))) {
          throwInvalidParam();
        }
        return n * s;
      }

      function throwInvalidParam() {
        throw new InvalidParameter();
      }

      var parse = function(p1, p2) {

        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;

        var A = 0, B = 1;
        var C = 1, D = 1;

        var N = 10000000;
        var M;

        if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
          n = p1;
          d = p2;
          s = n * d;
        } else
          switch (typeof p1) {

            case "object":
            {
              if ("d" in p1 && "n" in p1) {
                n = p1["n"];
                d = p1["d"];
                if ("s" in p1)
                  n *= p1["s"];
              } else if (0 in p1) {
                n = p1[0];
                if (1 in p1)
                  d = p1[1];
              } else {
                throwInvalidParam();
              }
              s = n * d;
              break;
            }
            case "number":
            {
              if (p1 < 0) {
                s = p1;
                p1 = -p1;
              }

              if (p1 % 1 === 0) {
                n = p1;
              } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

                if (p1 >= 1) {
                  z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                  p1 /= z;
                }

                // Using Farey Sequences
                // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

                while (B <= N && D <= N) {
                  M = (A + C) / (B + D);

                  if (p1 === M) {
                    if (B + D <= N) {
                      n = A + C;
                      d = B + D;
                    } else if (D > B) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                    break;

                  } else {

                    if (p1 > M) {
                      A += C;
                      B += D;
                    } else {
                      C += A;
                      D += B;
                    }

                    if (B > N) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                  }
                }
                n *= z;
              } else if (isNaN(p1) || isNaN(p2)) {
                d = n = NaN;
              }
              break;
            }
            case "string":
            {
              B = p1.match(/\d+|./g);

              if (B === null)
                throwInvalidParam();

              if (B[A] === '-') {// Check for minus sign at the beginning
                s = -1;
                A++;
              } else if (B[A] === '+') {// Check for plus sign at the beginning
                A++;
              }

              if (B.length === A + 1) { // Check if it's just a simple number "1234"
                w = assign(B[A++], s);
              } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

                if (B[A] !== '.') { // Handle 0.5 and .5
                  v = assign(B[A++], s);
                }
                A++;

                // Check for decimal places
                if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                  w = assign(B[A], s);
                  y = Math.pow(10, B[A].length);
                  A++;
                }

                // Check for repeating places
                if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                  x = assign(B[A + 1], s);
                  z = Math.pow(10, B[A + 1].length) - 1;
                  A += 3;
                }

              } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
                w = assign(B[A], s);
                y = assign(B[A + 2], 1);
                A += 3;
              } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
                v = assign(B[A], s);
                w = assign(B[A + 2], s);
                y = assign(B[A + 4], 1);
                A += 5;
              }

              if (B.length <= A) { // Check for more tokens on the stack
                d = y * z;
                s = /* void */
                        n = x + d * v + z * w;
                break;
              }

              /* Fall through on error */
            }
            default:
              throwInvalidParam();
          }

        if (d === 0) {
          throw new DivisionByZero();
        }

        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
      };

      function modpow(b, e, m) {

        var r = 1;
        for (; e > 0; b = (b * b) % m, e >>= 1) {

          if (e & 1) {
            r = (r * b) % m;
          }
        }
        return r;
      }


      function cycleLen(n, d) {

        for (; d % 2 === 0;
                d /= 2) {
        }

        for (; d % 5 === 0;
                d /= 5) {
        }

        if (d === 1) // Catch non-cyclic numbers
          return 0;

        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
        // 10^(d-1) % d == 1
        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
        // as we want to translate the numbers to strings.

        var rem = 10 % d;
        var t = 1;

        for (; rem !== 1; t++) {
          rem = rem * 10 % d;

          if (t > MAX_CYCLE_LEN)
            return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
        }
        return t;
      }


         function cycleStart(n, d, len) {

        var rem1 = 1;
        var rem2 = modpow(10, len, d);

        for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
          // Solve 10^s == 10^(s+t) (mod d)

          if (rem1 === rem2)
            return t;

          rem1 = rem1 * 10 % d;
          rem2 = rem2 * 10 % d;
        }
        return 0;
      }

      function gcd(a, b) {

        if (!a)
          return b;
        if (!b)
          return a;

        while (1) {
          a %= b;
          if (!a)
            return b;
          b %= a;
          if (!b)
            return a;
        }
      }
      /**
       * Module constructor
       *
       * @constructor
       * @param {number|Fraction=} a
       * @param {number=} b
       */
      function Fraction(a, b) {

        if (!(this instanceof Fraction)) {
          return new Fraction(a, b);
        }

        parse(a, b);

        if (Fraction['REDUCE']) {
          a = gcd(P["d"], P["n"]); // Abuse a
        } else {
          a = 1;
        }

        this["s"] = P["s"];
        this["n"] = P["n"] / a;
        this["d"] = P["d"] / a;
      }

      /**
       * Boolean global variable to be able to disable automatic reduction of the fraction
       *
       */
      Fraction['REDUCE'] = 1;

      Fraction.prototype = {

        "s": 1,
        "n": 0,
        "d": 1,

        /**
         * Calculates the absolute value
         *
         * Ex: new Fraction(-4).abs() => 4
         **/
        "abs": function() {

          return new Fraction(this["n"], this["d"]);
        },

        /**
         * Inverts the sign of the current fraction
         *
         * Ex: new Fraction(-4).neg() => 4
         **/
        "neg": function() {

          return new Fraction(-this["s"] * this["n"], this["d"]);
        },

        /**
         * Adds two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
         **/
        "add": function(a, b) {

          parse(a, b);
          return new Fraction(
                  this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
                  this["d"] * P["d"]
                  );
        },

        /**
         * Subtracts two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
         **/
        "sub": function(a, b) {

          parse(a, b);
          return new Fraction(
                  this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
                  this["d"] * P["d"]
                  );
        },

        /**
         * Multiplies two rational numbers
         *
         * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
         **/
        "mul": function(a, b) {

          parse(a, b);
          return new Fraction(
                  this["s"] * P["s"] * this["n"] * P["n"],
                  this["d"] * P["d"]
                  );
        },

        /**
         * Divides two rational numbers
         *
         * Ex: new Fraction("-17.(345)").inverse().div(3)
         **/
        "div": function(a, b) {

          parse(a, b);
          return new Fraction(
                  this["s"] * P["s"] * this["n"] * P["d"],
                  this["d"] * P["n"]
                  );
        },

        /**
         * Clones the actual object
         *
         * Ex: new Fraction("-17.(345)").clone()
         **/
        "clone": function() {
          return new Fraction(this);
        },

        /**
         * Calculates the modulo of two rational numbers - a more precise fmod
         *
         * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
         **/
        "mod": function(a, b) {

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return new Fraction(NaN);
          }

          if (a === undefined) {
            return new Fraction(this["s"] * this["n"] % this["d"], 1);
          }

          parse(a, b);
          if (0 === P["n"] && 0 === this["d"]) {
            Fraction(0, 0); // Throw DivisionByZero
          }

          /*
           * First silly attempt, kinda slow
           *
           return that["sub"]({
           "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
           "d": num["d"],
           "s": this["s"]
           });*/

          /*
           * New attempt: a1 / b1 = a2 / b2 * q + r
           * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
           * => (b2 * a1 % a2 * b1) / (b1 * b2)
           */
          return new Fraction(
                  this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
                  P["d"] * this["d"]
                  );
        },

        /**
         * Calculates the fractional gcd of two rational numbers
         *
         * Ex: new Fraction(5,8).gcd(3,7) => 1/56
         */
        "gcd": function(a, b) {

          parse(a, b);

          // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

          return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },

        /**
         * Calculates the fractional lcm of two rational numbers
         *
         * Ex: new Fraction(5,8).lcm(3,7) => 15
         */
        "lcm": function(a, b) {

          parse(a, b);

          // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

          if (P["n"] === 0 && this["n"] === 0) {
            return new Fraction;
          }
          return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },

        /**
         * Calculates the ceil of a rational number
         *
         * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
         **/
        "ceil": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Calculates the floor of a rational number
         *
         * Ex: new Fraction('4.(3)').floor() => (4 / 1)
         **/
        "floor": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Rounds a rational numbers
         *
         * Ex: new Fraction('4.(3)').round() => (4 / 1)
         **/
        "round": function(places) {

          places = Math.pow(10, places || 0);

          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },

        /**
         * Gets the inverse of the fraction, means numerator and denumerator are exchanged
         *
         * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
         **/
        "inverse": function() {

          return new Fraction(this["s"] * this["d"], this["n"]);
        },

        /**
         * Calculates the fraction to some integer exponent
         *
         * Ex: new Fraction(-1,2).pow(-3) => -8
         */
        "pow": function(m) {

          if (m < 0) {
            return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
          } else {
            return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
          }
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "equals": function(a, b) {

          parse(a, b);
          return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
        },

        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "compare": function(a, b) {

          parse(a, b);
          var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
          return (0 < t) - (t < 0);
        },

        "simplify": function(eps) {

          // First naive implementation, needs improvement

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return this;
          }

          var cont = this['abs']()['toContinued']();

          eps = eps || 0.001;

          function rec(a) {
            if (a.length === 1)
              return new Fraction(a[0]);
            return rec(a.slice(1))['inverse']()['add'](a[0]);
          }

          for (var i = 0; i < cont.length; i++) {
            var tmp = rec(cont.slice(0, i + 1));
            if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
              return tmp['mul'](this['s']);
            }
          }
          return this;
        },

        /**
         * Check if two rational numbers are divisible
         *
         * Ex: new Fraction(19.6).divisible(1.5);
         */
        "divisible": function(a, b) {

          parse(a, b);
          return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
        },

        /**
         * Returns a decimal representation of the fraction
         *
         * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
         **/
        'valueOf': function() {

          return this["s"] * this["n"] / this["d"];
        },

        /**
         * Returns a string-fraction representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
         **/
        'toFraction': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += '-';
          }

          if (d === 1) {
            str += n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              str += " ";
              n %= d;
            }

            str += n;
            str += '/';
            str += d;
          }
          return str;
        },

        /**
         * Returns a latex representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
         **/
        'toLatex': function(excludeWhole) {

          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += '-';
          }

          if (d === 1) {
            str += n;
          } else {

            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              n %= d;
            }

            str += "\\frac{";
            str += n;
            str += '}{';
            str += d;
            str += '}';
          }
          return str;
        },

        /**
         * Returns an array of continued fraction elements
         *
         * Ex: new Fraction("7/8").toContinued() => [0,1,7]
         */
        'toContinued': function() {

          var t;
          var a = this['n'];
          var b = this['d'];
          var res = [];

          if (isNaN(this['n']) || isNaN(this['d'])) {
            return res;
          }

          do {
            res.push(Math.floor(a / b));
            t = a % b;
            a = b;
            b = t;
          } while (a !== 1);

          return res;
        },

        /**
         * Creates a string representation of a fraction with all digits
         *
         * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
         **/
        'toString': function(dec) {

          var g;
          var N = this["n"];
          var D = this["d"];

          if (isNaN(N) || isNaN(D)) {
            return "NaN";
          }

          if (!Fraction['REDUCE']) {
            g = gcd(N, D);
            N /= g;
            D /= g;
          }

          dec = dec || 15; // 15 = decimal places when no repitation

          var cycLen = cycleLen(N, D); // Cycle length
          var cycOff = cycleStart(N, D, cycLen); // Cycle start

          var str = this['s'] === -1 ? "-" : "";

          str += N / D | 0;

          N %= D;
          N *= 10;

          if (N)
            str += ".";

          if (cycLen) {

            for (var i = cycOff; i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
            str += "(";
            for (var i = cycLen; i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
            str += ")";
          } else {
            for (var i = dec; N && i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
          }
          return str;
        }
      };

      {
        Object.defineProperty(exports, "__esModule", {'value': true});
        Fraction['default'] = Fraction;
        Fraction['Fraction'] = Fraction;
        module['exports'] = Fraction;
      }

    })();
    });

    var Fraction = unwrapExports(fraction);

    var name$3 = 'Fraction';
    var dependencies$4 = [];
    var createFractionClass =
    /* #__PURE__ */
    factory(name$3, dependencies$4, function () {
      /**
       * Attach type information
       */
      Fraction.prototype.type = 'Fraction';
      Fraction.prototype.isFraction = true;
      /**
       * Get a JSON representation of a Fraction containing type information
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
       */

      Fraction.prototype.toJSON = function () {
        return {
          mathjs: 'Fraction',
          n: this.s * this.n,
          d: this.d
        };
      };
      /**
       * Instantiate a Fraction from a JSON object
       * @param {Object} json  a JSON object structured as:
       *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
       * @return {BigNumber}
       */


      Fraction.fromJSON = function (json) {
        return new Fraction(json);
      };

      return Fraction;
    }, {
      isClass: true
    });

    var name$4 = 'Range';
    var dependencies$5 = [];
    var createRangeClass =
    /* #__PURE__ */
    factory(name$4, dependencies$5, function () {
      /**
       * Create a range. A range has a start, step, and end, and contains functions
       * to iterate over the range.
       *
       * A range can be constructed as:
       *
       *     const range = new Range(start, end)
       *     const range = new Range(start, end, step)
       *
       * To get the result of the range:
       *     range.forEach(function (x) {
       *         console.log(x)
       *     })
       *     range.map(function (x) {
       *         return math.sin(x)
       *     })
       *     range.toArray()
       *
       * Example usage:
       *
       *     const c = new Range(2, 6)       // 2:1:5
       *     c.toArray()                     // [2, 3, 4, 5]
       *     const d = new Range(2, -3, -1)  // 2:-1:-2
       *     d.toArray()                     // [2, 1, 0, -1, -2]
       *
       * @class Range
       * @constructor Range
       * @param {number} start  included lower bound
       * @param {number} end    excluded upper bound
       * @param {number} [step] step size, default value is 1
       */
      function Range(start, end, step) {
        if (!(this instanceof Range)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        var hasStart = start !== null && start !== undefined;
        var hasEnd = end !== null && end !== undefined;
        var hasStep = step !== null && step !== undefined;

        if (hasStart) {
          if (isBigNumber(start)) {
            start = start.toNumber();
          } else if (typeof start !== 'number') {
            throw new TypeError('Parameter start must be a number');
          }
        }

        if (hasEnd) {
          if (isBigNumber(end)) {
            end = end.toNumber();
          } else if (typeof end !== 'number') {
            throw new TypeError('Parameter end must be a number');
          }
        }

        if (hasStep) {
          if (isBigNumber(step)) {
            step = step.toNumber();
          } else if (typeof step !== 'number') {
            throw new TypeError('Parameter step must be a number');
          }
        }

        this.start = hasStart ? parseFloat(start) : 0;
        this.end = hasEnd ? parseFloat(end) : 0;
        this.step = hasStep ? parseFloat(step) : 1;
      }
      /**
       * Attach type information
       */


      Range.prototype.type = 'Range';
      Range.prototype.isRange = true;
      /**
       * Parse a string into a range,
       * The string contains the start, optional step, and end, separated by a colon.
       * If the string does not contain a valid range, null is returned.
       * For example str='0:2:11'.
       * @memberof Range
       * @param {string} str
       * @return {Range | null} range
       */

      Range.parse = function (str) {
        if (typeof str !== 'string') {
          return null;
        }

        var args = str.split(':');
        var nums = args.map(function (arg) {
          return parseFloat(arg);
        });
        var invalid = nums.some(function (num) {
          return isNaN(num);
        });

        if (invalid) {
          return null;
        }

        switch (nums.length) {
          case 2:
            return new Range(nums[0], nums[1]);

          case 3:
            return new Range(nums[0], nums[2], nums[1]);

          default:
            return null;
        }
      };
      /**
       * Create a clone of the range
       * @return {Range} clone
       */


      Range.prototype.clone = function () {
        return new Range(this.start, this.end, this.step);
      };
      /**
       * Retrieve the size of the range.
       * Returns an array containing one number, the number of elements in the range.
       * @memberof Range
       * @returns {number[]} size
       */


      Range.prototype.size = function () {
        var len = 0;
        var start = this.start;
        var step = this.step;
        var end = this.end;
        var diff = end - start;

        if (sign(step) === sign(diff)) {
          len = Math.ceil(diff / step);
        } else if (diff === 0) {
          len = 0;
        }

        if (isNaN(len)) {
          len = 0;
        }

        return [len];
      };
      /**
       * Calculate the minimum value in the range
       * @memberof Range
       * @return {number | undefined} min
       */


      Range.prototype.min = function () {
        var size = this.size()[0];

        if (size > 0) {
          if (this.step > 0) {
            // positive step
            return this.start;
          } else {
            // negative step
            return this.start + (size - 1) * this.step;
          }
        } else {
          return undefined;
        }
      };
      /**
       * Calculate the maximum value in the range
       * @memberof Range
       * @return {number | undefined} max
       */


      Range.prototype.max = function () {
        var size = this.size()[0];

        if (size > 0) {
          if (this.step > 0) {
            // positive step
            return this.start + (size - 1) * this.step;
          } else {
            // negative step
            return this.start;
          }
        } else {
          return undefined;
        }
      };
      /**
       * Execute a callback function for each value in the range.
       * @memberof Range
       * @param {function} callback   The callback method is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Range being traversed.
       */


      Range.prototype.forEach = function (callback) {
        var x = this.start;
        var step = this.step;
        var end = this.end;
        var i = 0;

        if (step > 0) {
          while (x < end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        } else if (step < 0) {
          while (x > end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        }
      };
      /**
       * Execute a callback function for each value in the Range, and return the
       * results as an array
       * @memberof Range
       * @param {function} callback   The callback method is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @returns {Array} array
       */


      Range.prototype.map = function (callback) {
        var array = [];
        this.forEach(function (value, index, obj) {
          array[index[0]] = callback(value, index, obj);
        });
        return array;
      };
      /**
       * Create an Array with a copy of the Ranges data
       * @memberof Range
       * @returns {Array} array
       */


      Range.prototype.toArray = function () {
        var array = [];
        this.forEach(function (value, index) {
          array[index[0]] = value;
        });
        return array;
      };
      /**
       * Get the primitive value of the Range, a one dimensional array
       * @memberof Range
       * @returns {Array} array
       */


      Range.prototype.valueOf = function () {
        // TODO: implement a caching mechanism for range.valueOf()
        return this.toArray();
      };
      /**
       * Get a string representation of the range, with optional formatting options.
       * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
       * @memberof Range
       * @param {Object | number | function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      Range.prototype.format = function (options) {
        var str = format$3(this.start, options);

        if (this.step !== 1) {
          str += ':' + format$3(this.step, options);
        }

        str += ':' + format$3(this.end, options);
        return str;
      };
      /**
       * Get a string representation of the range.
       * @memberof Range
       * @returns {string}
       */


      Range.prototype.toString = function () {
        return this.format();
      };
      /**
       * Get a JSON representation of the range
       * @memberof Range
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
       */


      Range.prototype.toJSON = function () {
        return {
          mathjs: 'Range',
          start: this.start,
          end: this.end,
          step: this.step
        };
      };
      /**
       * Instantiate a Range from a JSON object
       * @memberof Range
       * @param {Object} json A JSON object structured as:
       *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
       * @return {Range}
       */


      Range.fromJSON = function (json) {
        return new Range(json.start, json.end, json.step);
      };

      return Range;
    }, {
      isClass: true
    });

    var name$5 = 'Matrix';
    var dependencies$6 = [];
    var createMatrixClass =
    /* #__PURE__ */
    factory(name$5, dependencies$6, function () {
      /**
       * @constructor Matrix
       *
       * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
       * array. A matrix can be constructed as:
       *
       *     let matrix = math.matrix(data)
       *
       * Matrix contains the functions to resize, get and set values, get the size,
       * clone the matrix and to convert the matrix to a vector, array, or scalar.
       * Furthermore, one can iterate over the matrix using map and forEach.
       * The internal Array of the Matrix can be accessed using the function valueOf.
       *
       * Example usage:
       *
       *     let matrix = math.matrix([[1, 2], [3, 4]])
       *     matix.size()              // [2, 2]
       *     matrix.resize([3, 2], 5)
       *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
       *     matrix.subset([1,2])       // 3 (indexes are zero-based)
       *
       */
      function Matrix() {
        if (!(this instanceof Matrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
      }
      /**
       * Attach type information
       */


      Matrix.prototype.type = 'Matrix';
      Matrix.prototype.isMatrix = true;
      /**
       * Get the Matrix storage constructor for the given format.
       *
       * @param {string} format       The Matrix storage format.
       *
       * @return {Function}           The Matrix storage constructor.
       */

      Matrix.storage = function (format) {
        // TODO: deprecated since v6.0.0. Clean up some day
        throw new Error('Matrix.storage is deprecated since v6.0.0. ' + 'Use the factory function math.matrix instead.');
      };
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @return {string}           The storage format.
       */


      Matrix.prototype.storage = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke storage on a Matrix interface');
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @return {string}           The datatype.
       */


      Matrix.prototype.datatype = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke datatype on a Matrix interface');
      };
      /**
       * Create a new Matrix With the type of the current matrix instance
       * @param {Array | Object} data
       * @param {string} [datatype]
       */


      Matrix.prototype.create = function (data, datatype) {
        throw new Error('Cannot invoke create on a Matrix interface');
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      Matrix.prototype.subset = function (index, replacement, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke subset on a Matrix interface');
      };
      /**
       * Get a single element from the matrix.
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      Matrix.prototype.get = function (index) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke get on a Matrix interface');
      };
      /**
       * Replace a single element in the matrix.
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {Matrix} self
       */


      Matrix.prototype.set = function (index, value, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke set on a Matrix interface');
      };
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      Matrix.prototype.resize = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke resize on a Matrix interface');
      };
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      Matrix.prototype.reshape = function (size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke reshape on a Matrix interface');
      };
      /**
       * Create a clone of the matrix
       * @return {Matrix} clone
       */


      Matrix.prototype.clone = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke clone on a Matrix interface');
      };
      /**
       * Retrieve the size of the matrix.
       * @returns {number[]} size
       */


      Matrix.prototype.size = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke size on a Matrix interface');
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {Matrix} matrix
       */


      Matrix.prototype.map = function (callback, skipZeros) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke map on a Matrix interface');
      };
      /**
       * Execute a callback function on each entry of the matrix.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */


      Matrix.prototype.forEach = function (callback) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke forEach on a Matrix interface');
      };
      /**
       * Create an Array with a copy of the data of the Matrix
       * @returns {Array} array
       */


      Matrix.prototype.toArray = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toArray on a Matrix interface');
      };
      /**
       * Get the primitive value of the Matrix: a multidimensional array
       * @returns {Array} array
       */


      Matrix.prototype.valueOf = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke valueOf on a Matrix interface');
      };
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      Matrix.prototype.format = function (options) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke format on a Matrix interface');
      };
      /**
       * Get a string representation of the matrix
       * @returns {string} str
       */


      Matrix.prototype.toString = function () {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toString on a Matrix interface');
      };

      return Matrix;
    }, {
      isClass: true
    });

    var name$6 = 'DenseMatrix';
    var dependencies$7 = ['Matrix'];
    var createDenseMatrixClass =
    /* #__PURE__ */
    factory(name$6, dependencies$7, function (_ref) {
      var Matrix = _ref.Matrix;

      /**
       * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
       * @class DenseMatrix
       */
      function DenseMatrix(data, datatype) {
        if (!(this instanceof DenseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString$m(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data)) {
          // check data is a DenseMatrix
          if (data.type === 'DenseMatrix') {
            // clone data & size
            this._data = clone$3(data._data);
            this._size = clone$3(data._size);
            this._datatype = datatype || data._datatype;
          } else {
            // build data from existing matrix
            this._data = data.toArray();
            this._size = data.size();
            this._datatype = datatype || data._datatype;
          }
        } else if (data && isArray$i(data.data) && isArray$i(data.size)) {
          // initialize fields from JSON representation
          this._data = data.data;
          this._size = data.size; // verify the dimensions of the array

          validate(this._data, this._size);
          this._datatype = datatype || data.datatype;
        } else if (isArray$i(data)) {
          // replace nested Matrices with Arrays
          this._data = preprocess(data); // get the dimensions of the array

          this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array

          validate(this._data, this._size); // data type unknown

          this._datatype = datatype;
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
        } else {
          // nothing provided
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
        }
      }

      DenseMatrix.prototype = new Matrix();
      /**
       * Create a new DenseMatrix
       */

      DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };
      /**
       * Attach type information
       */


      DenseMatrix.prototype.type = 'DenseMatrix';
      DenseMatrix.prototype.isDenseMatrix = true;
      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf DenseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */

      DenseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._data, typeOf);
      };
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()  // retrieve storage format
       *
       * @memberof DenseMatrix
       * @return {string}           The storage format.
       */


      DenseMatrix.prototype.storage = function () {
        return 'dense';
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()   // retrieve matrix datatype
       *
       * @memberof DenseMatrix
       * @return {string}           The datatype.
       */


      DenseMatrix.prototype.datatype = function () {
        return this._datatype;
      };
      /**
       * Create a new DenseMatrix
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */


      DenseMatrix.prototype.create = function (data, datatype) {
        return new DenseMatrix(data, datatype);
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof DenseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        switch (arguments.length) {
          case 1:
            return _get(this, index);
          // intentional fall through

          case 2:
          case 3:
            return _set(this, index, replacement, defaultValue);

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };
      /**
       * Get a single element from the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      DenseMatrix.prototype.get = function (index) {
        if (!isArray$i(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check index


        for (var x = 0; x < index.length; x++) {
          validateIndex(index[x], this._size[x]);
        }

        var data = this._data;

        for (var i = 0, ii = index.length; i < ii; i++) {
          var indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        }

        return data;
      };
      /**
       * Replace a single element in the matrix.
       * @memberof DenseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {DenseMatrix} self
       */


      DenseMatrix.prototype.set = function (index, value, defaultValue) {
        if (!isArray$i(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length < this._size.length) {
          throw new DimensionError(index.length, this._size.length, '<');
        }

        var i, ii, indexI; // enlarge matrix when needed

        var size = index.map(function (i) {
          return i + 1;
        });

        _fit(this, size, defaultValue); // traverse over the dimensions


        var data = this._data;

        for (i = 0, ii = index.length - 1; i < ii; i++) {
          indexI = index[i];
          validateIndex(indexI, data.length);
          data = data[indexI];
        } // set new value


        indexI = index[index.length - 1];
        validateIndex(indexI, data.length);
        data[indexI] = value;
        return this;
      };
      /**
       * Get a submatrix of this matrix
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index   Zero-based index
       * @private
       */


      function _get(matrix, index) {
        if (!isIndex(index)) {
          throw new TypeError('Invalid index');
        }

        var isScalar = index.isScalar();

        if (isScalar) {
          // return a scalar
          return matrix.get(index.min());
        } else {
          // validate dimensions
          var size = index.size();

          if (size.length !== matrix._size.length) {
            throw new DimensionError(size.length, matrix._size.length);
          } // validate if any of the ranges in the index is out of range


          var min = index.min();
          var max = index.max();

          for (var i = 0, ii = matrix._size.length; i < ii; i++) {
            validateIndex(min[i], matrix._size[i]);
            validateIndex(max[i], matrix._size[i]);
          } // retrieve submatrix
          // TODO: more efficient when creating an empty matrix and setting _data and _size manually


          return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
        }
      }
      /**
       * Recursively get a submatrix of a multi dimensional matrix.
       * Index is not checked for correct number or length of dimensions.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {number} dims   Total number of dimensions
       * @param {number} dim    Current dimension
       * @return {Array} submatrix
       * @private
       */


      function _getSubmatrix(data, index, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);

        if (last) {
          return range.map(function (i) {
            validateIndex(i, data.length);
            return data[i];
          }).valueOf();
        } else {
          return range.map(function (i) {
            validateIndex(i, data.length);
            var child = data[i];
            return _getSubmatrix(child, index, dims, dim + 1);
          }).valueOf();
        }
      }
      /**
       * Replace a submatrix in this matrix
       * Indexes are zero-based.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix
       * @param {Index} index
       * @param {DenseMatrix | Array | *} submatrix
       * @param {*} defaultValue          Default value, filled in on new entries when
       *                                  the matrix is resized.
       * @return {DenseMatrix} matrix
       * @private
       */


      function _set(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        } // get index size and check whether the index contains a single value


        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

        var sSize;

        if (isMatrix(submatrix)) {
          sSize = submatrix.size();
          submatrix = submatrix.valueOf();
        } else {
          sSize = arraySize(submatrix);
        }

        if (isScalar) {
          // set a scalar
          // check whether submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          }

          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // set a submatrix
          // validate dimensions
          if (iSize.length < matrix._size.length) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          }

          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;

            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }

            while (iSize[i] === 1) {
              outer++;
              i++;
            } // unsqueeze both outer and inner dimensions


            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          } // check whether the size of the submatrix matches the index size


          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          } // enlarge matrix when needed


          var size = index.max().map(function (i) {
            return i + 1;
          });

          _fit(matrix, size, defaultValue); // insert the sub matrix


          var dims = iSize.length;
          var dim = 0;

          _setSubmatrix(matrix._data, index, submatrix, dims, dim);
        }

        return matrix;
      }
      /**
       * Replace a submatrix of a multi dimensional matrix.
       * @memberof DenseMatrix
       * @param {Array} data
       * @param {Index} index
       * @param {Array} submatrix
       * @param {number} dims   Total number of dimensions
       * @param {number} dim
       * @private
       */


      function _setSubmatrix(data, index, submatrix, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);

        if (last) {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);
            data[dataIndex] = submatrix[subIndex[0]];
          });
        } else {
          range.forEach(function (dataIndex, subIndex) {
            validateIndex(dataIndex);

            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
          });
        }
      }
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof DenseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isArray$i(size)) {
          throw new TypeError('Array expected');
        } // matrix to resize


        var m = copy ? this.clone() : this; // resize matrix

        return _resize(m, size, defaultValue);
      };

      function _resize(matrix, size, defaultValue) {
        // check size
        if (size.length === 0) {
          // first value in matrix
          var v = matrix._data; // go deep

          while (isArray$i(v)) {
            v = v[0];
          }

          return v;
        } // resize matrix


        matrix._size = size.slice(0); // copy the array

        matrix._data = resize(matrix._data, matrix._size, defaultValue); // return matrix

        return matrix;
      }
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof DenseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      DenseMatrix.prototype.reshape = function (size, copy) {
        var m = copy ? this.clone() : this;
        m._data = reshape(m._data, size);
        m._size = size.slice(0);
        return m;
      };
      /**
       * Enlarge the matrix when it is smaller than given size.
       * If the matrix is larger or equal sized, nothing is done.
       * @memberof DenseMatrix
       * @param {DenseMatrix} matrix           The matrix to be resized
       * @param {number[]} size
       * @param {*} defaultValue          Default value, filled in on new entries.
       * @private
       */


      function _fit(matrix, size, defaultValue) {
        var // copy the array
        newSize = matrix._size.slice(0);

        var changed = false; // add dimensions when needed

        while (newSize.length < size.length) {
          newSize.push(0);
          changed = true;
        } // enlarge size when needed


        for (var i = 0, ii = size.length; i < ii; i++) {
          if (size[i] > newSize[i]) {
            newSize[i] = size[i];
            changed = true;
          }
        }

        if (changed) {
          // resize only when size is changed
          _resize(matrix, newSize, defaultValue);
        }
      }
      /**
       * Create a clone of the matrix
       * @memberof DenseMatrix
       * @return {DenseMatrix} clone
       */


      DenseMatrix.prototype.clone = function () {
        var m = new DenseMatrix({
          data: clone$3(this._data),
          size: clone$3(this._size),
          datatype: this._datatype
        });
        return m;
      };
      /**
       * Retrieve the size of the matrix.
       * @memberof DenseMatrix
       * @returns {number[]} size
       */


      DenseMatrix.prototype.size = function () {
        return this._size.slice(0); // return a clone of _size
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       *
       * @return {DenseMatrix} matrix
       */


      DenseMatrix.prototype.map = function (callback) {
        // matrix instance
        var me = this;

        var recurse = function recurse(value, index) {
          if (isArray$i(value)) {
            return value.map(function (child, i) {
              return recurse(child, index.concat(i));
            });
          } else {
            return callback(value, index, me);
          }
        }; // determine the new datatype when the original matrix has datatype defined
        // TODO: should be done in matrix constructor instead


        var data = recurse(this._data, []);
        var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;
        return new DenseMatrix(data, datatype);
      };
      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof DenseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       */


      DenseMatrix.prototype.forEach = function (callback) {
        // matrix instance
        var me = this;

        var recurse = function recurse(value, index) {
          if (isArray$i(value)) {
            value.forEach(function (child, i) {
              recurse(child, index.concat(i));
            });
          } else {
            callback(value, index, me);
          }
        };

        recurse(this._data, []);
      };
      /**
       * Create an Array with a copy of the data of the DenseMatrix
       * @memberof DenseMatrix
       * @returns {Array} array
       */


      DenseMatrix.prototype.toArray = function () {
        return clone$3(this._data);
      };
      /**
       * Get the primitive value of the DenseMatrix: a multidimensional array
       * @memberof DenseMatrix
       * @returns {Array} array
       */


      DenseMatrix.prototype.valueOf = function () {
        return this._data;
      };
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof DenseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      DenseMatrix.prototype.format = function (options) {
        return format$5(this._data, options);
      };
      /**
       * Get a string representation of the matrix
       * @memberof DenseMatrix
       * @returns {string} str
       */


      DenseMatrix.prototype.toString = function () {
        return format$5(this._data);
      };
      /**
       * Get a JSON representation of the matrix
       * @memberof DenseMatrix
       * @returns {Object}
       */


      DenseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'DenseMatrix',
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof DenseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix with the diagonal values.
       */


      DenseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber$f(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values

        var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

        var data = []; // loop rows

        for (var i = 0; i < n; i++) {
          data[i] = this._data[i + kSub][i + kSuper];
        } // create DenseMatrix


        return new DenseMatrix({
          data: data,
          size: [n],
          datatype: this._datatype
        });
      };
      /**
       * Create a diagonal matrix.
       *
       * @memberof DenseMatrix
       * @param {Array} size                     The matrix size.
       * @param {number | Matrix | Array } value The values for the diagonal.
       * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]          The default value for non-diagonal
       * @param {string} [datatype]              The datatype for the diagonal
       *
       * @returns {DenseMatrix}
       */


      DenseMatrix.diagonal = function (size, value, k, defaultValue) {
        if (!isArray$i(size)) {
          throw new TypeError('Array expected, size parameter');
        }

        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // map size & validate


        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          } // validate arguments


          if (!isNumber$f(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }

          return s;
        }); // validate k if any

        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber$f(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns

        var rows = size[0];
        var columns = size[1]; // number of non-zero items

        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

        var _value; // check value


        if (isArray$i(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size(); // validate matrix

          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        } // discover default value if needed


        if (!defaultValue) {
          // check first value in array
          defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
          : 0;
        } // empty array


        var data = []; // check we need to resize array

        if (size.length > 0) {
          // resize array
          data = resize(data, size, defaultValue); // fill diagonal

          for (var d = 0; d < n; d++) {
            data[d + kSub][d + kSuper] = _value(d);
          }
        } // create DenseMatrix


        return new DenseMatrix({
          data: data,
          size: [rows, columns]
        });
      };
      /**
       * Generate a matrix from a JSON object
       * @memberof DenseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
       *                       where mathjs is optional
       * @returns {DenseMatrix}
       */


      DenseMatrix.fromJSON = function (json) {
        return new DenseMatrix(json);
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof DenseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      DenseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber$f(i) || !isInteger$1(i) || !isNumber$f(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        } // check dimensions


        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        } // validate index


        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]); // swap rows

        DenseMatrix._swapRows(i, j, this._data); // return current instance


        return this;
      };
      /**
       * Swap rows i and j in Dense Matrix data structure.
       *
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       * @param {Array} data     Matrix data
       */


      DenseMatrix._swapRows = function (i, j, data) {
        // swap values i <-> j
        var vi = data[i];
        data[i] = data[j];
        data[j] = vi;
      };
      /**
       * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
       * Matrices. Replaces all nested Matrices with Arrays
       * @memberof DenseMatrix
       * @param {Array} data
       * @return {Array} data
       */


      function preprocess(data) {
        for (var i = 0, ii = data.length; i < ii; i++) {
          var elem = data[i];

          if (isArray$i(elem)) {
            data[i] = preprocess(elem);
          } else if (elem && elem.isMatrix === true) {
            data[i] = preprocess(elem.valueOf());
          }
        }

        return data;
      }

      return DenseMatrix;
    }, {
      isClass: true
    });

    var name$7 = 'clone';
    var dependencies$8 = ['typed'];
    var createClone =
    /* #__PURE__ */
    factory(name$7, dependencies$8, function (_ref) {
      var typed = _ref.typed;

      /**
       * Clone an object.
       *
       * Syntax:
       *
       *     math.clone(x)
       *
       * Examples:
       *
       *    math.clone(3.5)                   // returns number 3.5
       *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
       *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
       *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
       *    math.clone("hello world")         // returns string "hello world"
       *
       * @param {*} x   Object to be cloned
       * @return {*} A clone of object x
       */
      return typed(name$7, {
        any: clone$3
      });
    });

    /**
     * Test whether an array contains collections
     * @param {Array} array
     * @returns {boolean} Returns true when the array contains one or multiple
     *                    collections (Arrays or Matrices). Returns false otherwise.
     */

    function containsCollections(array) {
      for (var i = 0; i < array.length; i++) {
        if (isCollection(array[i])) {
          return true;
        }
      }

      return false;
    }
    /**
     * Recursively loop over all elements in a given multi dimensional array
     * and invoke the callback on each of the elements.
     * @param {Array | Matrix} array
     * @param {Function} callback     The callback method is invoked with one
     *                                parameter: the current element in the array
     */

    function deepForEach(array, callback) {
      if (isMatrix(array)) {
        array = array.valueOf();
      }

      for (var i = 0, ii = array.length; i < ii; i++) {
        var value = array[i];

        if (Array.isArray(value)) {
          deepForEach(value, callback);
        } else {
          callback(value);
        }
      }
    }
    /**
     * Execute the callback function element wise for each element in array and any
     * nested array
     * Returns an array with the results
     * @param {Array | Matrix} array
     * @param {Function} callback   The callback is called with two parameters:
     *                              value1 and value2, which contain the current
     *                              element of both arrays.
     * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
     *
     * @return {Array | Matrix} res
     */

    function deepMap(array, callback, skipZeros) {
      if (array && typeof array.map === 'function') {
        // TODO: replace array.map with a for loop to improve performance
        return array.map(function (x) {
          return deepMap(x, callback);
        });
      } else {
        return callback(array);
      }
    }
    /**
     * Reduce a given matrix or array to a new matrix or
     * array with one less dimension, applying the given
     * callback in the selected dimension.
     * @param {Array | Matrix} mat
     * @param {number} dim
     * @param {Function} callback
     * @return {Array | Matrix} res
     */

    function reduce$2(mat, dim, callback) {
      var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        // TODO: would be more clear when throwing a DimensionError here
        throw new IndexError(dim, size.length);
      }

      if (isMatrix(mat)) {
        return mat.create(_reduce(mat.valueOf(), dim, callback));
      } else {
        return _reduce(mat, dim, callback);
      }
    }
    /**
     * Recursively reduce a matrix
     * @param {Array} mat
     * @param {number} dim
     * @param {Function} callback
     * @returns {Array} ret
     * @private
     */

    function _reduce(mat, dim, callback) {
      var i, ret, val, tran;

      if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
          val = mat[0];

          for (i = 1; i < mat.length; i++) {
            val = callback(val, mat[i]);
          }

          return val;
        } else {
          tran = _switch(mat);
          ret = [];

          for (i = 0; i < tran.length; i++) {
            ret[i] = _reduce(tran[i], dim - 1, callback);
          }

          return ret;
        }
      } else {
        ret = [];

        for (i = 0; i < mat.length; i++) {
          ret[i] = _reduce(mat[i], dim - 1, callback);
        }

        return ret;
      }
    }
    /**
     * Transpose a matrix
     * @param {Array} mat
     * @returns {Array} ret
     * @private
     */


    function _switch(mat) {
      var I = mat.length;
      var J = mat[0].length;
      var i, j;
      var ret = [];

      for (j = 0; j < J; j++) {
        var tmp = [];

        for (i = 0; i < I; i++) {
          tmp.push(mat[i][j]);
        }

        ret.push(tmp);
      }

      return ret;
    } // TODO: document function scatter


    function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr; // vars

      var k, k0, k1, i; // check we need to process values (pattern matrix)

      if (x) {
        // values in j
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = aindex[k]; // check value exists in current j

          if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C

            cindex.push(i); // x(i) = A, check we need to call function this time

            if (update) {
              // copy value to workspace calling callback function
              x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

              u[i] = mark;
            } else {
              // copy value to workspace
              x[i] = avalues[k];
            }
          } else {
            // i exists in C already
            x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

            u[i] = mark;
          }
        }
      } else {
        // values in j
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = aindex[k]; // check value exists in current j

          if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C

            cindex.push(i);
          } else {
            // indicate function was called on current row
            u[i] = mark;
          }
        }
      }
    }

    var name$8 = 'isInteger';
    var dependencies$9 = ['typed'];
    var createIsInteger =
    /* #__PURE__ */
    factory(name$8, dependencies$9, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is an integer number.
       * The function supports `number`, `BigNumber`, and `Fraction`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isInteger(x)
       *
       * Examples:
       *
       *    math.isInteger(2)                     // returns true
       *    math.isInteger(0)                     // returns true
       *    math.isInteger(0.5)                   // returns false
       *    math.isInteger(math.bignumber(500))   // returns true
       *    math.isInteger(math.fraction(4))      // returns true
       *    math.isInteger('3')                   // returns true
       *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
       *    math.isInteger(math.complex('2-4i')   // throws an error
       *
       * See also:
       *
       *    isNumeric, isPositive, isNegative, isZero
       *
       * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
       * @return {boolean}  Returns true when `x` contains a numeric, integer value.
       *                    Throws an error in case of an unknown data type.
       */
      var isInteger = typed(name$8, {
        number: isInteger$1,
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?
        BigNumber: function BigNumber(x) {
          return x.isInt();
        },
        Fraction: function Fraction(x) {
          return x.d === 1 && isFinite(x.n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isInteger);
        }
      });
      return isInteger;
    });

    var n1 = 'number';
    var n2 = 'number, number';
    function absNumber(a) {
      return Math.abs(a);
    }
    absNumber.signature = n1;
    function addNumber(a, b) {
      return a + b;
    }
    addNumber.signature = n2;
    function multiplyNumber(a, b) {
      return a * b;
    }
    multiplyNumber.signature = n2;
    function unaryMinusNumber(x) {
      return -x;
    }
    unaryMinusNumber.signature = n1;
    function unaryPlusNumber(x) {
      return x;
    }
    unaryPlusNumber.signature = n1;
    function cbrtNumber(x) {
      return cbrt(x);
    }
    cbrtNumber.signature = n1;
    function ceilNumber(x) {
      return Math.ceil(x);
    }
    ceilNumber.signature = n1;
    function cubeNumber(x) {
      return x * x * x;
    }
    cubeNumber.signature = n1;
    function expNumber(x) {
      return Math.exp(x);
    }
    expNumber.signature = n1;
    function expm1Number(x) {
      return expm1(x);
    }
    expm1Number.signature = n1;
    /**
     * Calculate gcd for numbers
     * @param {number} a
     * @param {number} b
     * @returns {number} Returns the greatest common denominator of a and b
     */

    function gcdNumber(a, b) {
      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function gcd must be integer numbers');
      } // https://en.wikipedia.org/wiki/Euclidean_algorithm


      var r;

      while (b !== 0) {
        r = a % b;
        a = b;
        b = r;
      }

      return a < 0 ? -a : a;
    }
    gcdNumber.signature = n2;
    /**
     * Calculate lcm for two numbers
     * @param {number} a
     * @param {number} b
     * @returns {number} Returns the least common multiple of a and b
     */

    function lcmNumber(a, b) {
      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function lcm must be integer numbers');
      }

      if (a === 0 || b === 0) {
        return 0;
      } // https://en.wikipedia.org/wiki/Euclidean_algorithm
      // evaluate lcm here inline to reduce overhead


      var t;
      var prod = a * b;

      while (b !== 0) {
        t = b;
        b = a % t;
        a = t;
      }

      return Math.abs(prod / a);
    }
    lcmNumber.signature = n2;
    /**
     * Calculate the logarithm of a value.
     * @param {number} x
     * @return {number}
     */

    function logNumber(x) {
      return Math.log(x);
    }
    logNumber.signature = n1;
    /**
     * Calculate the 10-base logarithm of a number
     * @param {number} x
     * @return {number}
     */

    function log10Number(x) {
      return log10(x);
    }
    log10Number.signature = n1;
    /**
     * Calculate the 2-base logarithm of a number
     * @param {number} x
     * @return {number}
     */

    function log2Number(x) {
      return log2(x);
    }
    log2Number.signature = n1;
    /**
     * Calculate the modulus of two numbers
     * @param {number} x
     * @param {number} y
     * @returns {number} res
     * @private
     */

    function modNumber(x, y) {
      if (y > 0) {
        // We don't use JavaScript's % operator here as this doesn't work
        // correctly for x < 0 and x === 0
        // see https://en.wikipedia.org/wiki/Modulo_operation
        return x - y * Math.floor(x / y);
      } else if (y === 0) {
        return x;
      } else {
        // y < 0
        // TODO: implement mod for a negative divisor
        throw new Error('Cannot calculate mod for a negative divisor');
      }
    }
    modNumber.signature = n2;
    /**
     * Calculate the nth root of a, solve x^root == a
     * http://rosettacode.org/wiki/Nth_root#JavaScript
     * @param {number} a
     * @param {number} root
     * @private
     */

    function nthRootNumber(a, root) {
      var inv = root < 0;

      if (inv) {
        root = -root;
      }

      if (root === 0) {
        throw new Error('Root must be non-zero');
      }

      if (a < 0 && Math.abs(root) % 2 !== 1) {
        throw new Error('Root must be odd when a is negative.');
      } // edge cases zero and infinity


      if (a === 0) {
        return inv ? Infinity : 0;
      }

      if (!isFinite(a)) {
        return inv ? 0 : a;
      }

      var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
      // so (-1) ^ (1/root) = -1

      x = a < 0 ? -x : x;
      return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
      // Newton's method has some well-known problems at times:
      // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

      /*
      let x = 1 // Initial guess
      let xPrev = 1
      let i = 0
      const iMax = 10000
      do {
        const delta = (a / Math.pow(x, root - 1) - x) / root
        xPrev = x
        x = x + delta
        i++
      }
      while (xPrev !== x && i < iMax)
       if (xPrev !== x) {
        throw new Error('Function nthRoot failed to converge')
      }
       return inv ? 1 / x : x
      */
    }
    nthRootNumber.signature = n2;
    function signNumber(x) {
      return sign(x);
    }
    signNumber.signature = n1;
    function squareNumber(x) {
      return x * x;
    }
    squareNumber.signature = n1;
    /**
     * Calculate xgcd for two numbers
     * @param {number} a
     * @param {number} b
     * @return {number} result
     * @private
     */

    function xgcdNumber(a, b) {
      // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
      var t; // used to swap two variables

      var q; // quotient

      var r; // remainder

      var x = 0;
      var lastx = 1;
      var y = 1;
      var lasty = 0;

      if (!isInteger$1(a) || !isInteger$1(b)) {
        throw new Error('Parameters in function xgcd must be integer numbers');
      }

      while (b) {
        q = Math.floor(a / b);
        r = a - q * b;
        t = x;
        x = lastx - q * x;
        lastx = t;
        t = y;
        y = lasty - q * y;
        lasty = t;
        a = b;
        b = r;
      }

      var res;

      if (a < 0) {
        res = [-a, -lastx, -lasty];
      } else {
        res = [a, a ? lastx : 0, lasty];
      }

      return res;
    }
    xgcdNumber.signature = n2;
    /**
     * Calculates the power of x to y, x^y, for two numbers.
     * @param {number} x
     * @param {number} y
     * @return {number} res
     */

    function powNumber(x, y) {
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return Math.pow(x, y);
    }
    powNumber.signature = n2;
    /**
     * round a number to the given number of decimals, or to zero if decimals is
     * not provided
     * @param {number} value
     * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
     * @return {number} roundedValue
     */

    function roundNumber(value) {
      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return parseFloat(toFixed(value, decimals));
    }
    roundNumber.signature = n2;

    var n1$1 = 'number';
    var n2$1 = 'number, number';
    function bitAndNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitAnd');
      }

      return x & y;
    }
    bitAndNumber.signature = n2$1;
    function bitNotNumber(x) {
      if (!isInteger$1(x)) {
        throw new Error('Integer expected in function bitNot');
      }

      return ~x;
    }
    bitNotNumber.signature = n1$1;
    function bitOrNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitOr');
      }

      return x | y;
    }
    bitOrNumber.signature = n2$1;
    function bitXorNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function bitXor');
      }

      return x ^ y;
    }
    bitXorNumber.signature = n2$1;
    function leftShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function leftShift');
      }

      return x << y;
    }
    leftShiftNumber.signature = n2$1;
    function rightArithShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function rightArithShift');
      }

      return x >> y;
    }
    rightArithShiftNumber.signature = n2$1;
    function rightLogShiftNumber(x, y) {
      if (!isInteger$1(x) || !isInteger$1(y)) {
        throw new Error('Integers expected in function rightLogShift');
      }

      return x >>> y;
    }
    rightLogShiftNumber.signature = n2$1;

    /** @param {number} i
     *  @param {number} n
     *  @returns {number} product of i to n
     */
    function product(i, n) {
      if (n < i) {
        return 1;
      }

      if (n === i) {
        return n;
      }

      var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

      return product(i, half) * product(half + 1, n);
    }

    function combinationsNumber(n, k) {
      if (!isInteger$1(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (!isInteger$1(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k > n) {
        throw new TypeError('k must be less than or equal to n');
      }

      var nMinusk = n - k;
      var prodrange;

      if (k < nMinusk) {
        prodrange = product(nMinusk + 1, n);
        return prodrange / product(1, k);
      }

      prodrange = product(k + 1, n);
      return prodrange / product(1, nMinusk);
    }
    combinationsNumber.signature = 'number, number';

    var pi = Math.PI;
    var tau = 2 * Math.PI;
    var e = Math.E;
    var phi = 1.61803398874989484820458683436563811772030917980576286213545;

    var n1$2 = 'number';
    var n2$2 = 'number, number';
    function notNumber(x) {
      return !x;
    }
    notNumber.signature = n1$2;
    function orNumber(x, y) {
      return !!(x || y);
    }
    orNumber.signature = n2$2;
    function xorNumber(x, y) {
      return !!x !== !!y;
    }
    xorNumber.signature = n2$2;
    function andNumber(x, y) {
      return !!(x && y);
    }
    andNumber.signature = n2$2;

    function gammaNumber(n) {
      var x;

      if (isInteger$1(n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity; // Will overflow
        }

        return product(1, n - 1);
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
      }

      if (n >= 171.35) {
        return Infinity; // will overflow
      }

      if (n > 85.0) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
      }

      --n;
      x = gammaP[0];

      for (var i = 1; i < gammaP.length; ++i) {
        x += gammaP[i] / (n + i);
      }

      var t = n + gammaG + 0.5;
      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    }
    gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

    var gammaG = 4.7421875;
    var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

    var n1$3 = 'number';
    function acoshNumber(x) {
      return acosh(x);
    }
    acoshNumber.signature = n1$3;
    function acotNumber(x) {
      return Math.atan(1 / x);
    }
    acotNumber.signature = n1$3;
    function acothNumber(x) {
      return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
    }
    acothNumber.signature = n1$3;
    function acscNumber(x) {
      return Math.asin(1 / x);
    }
    acscNumber.signature = n1$3;
    function acschNumber(x) {
      var xInv = 1 / x;
      return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
    }
    acschNumber.signature = n1$3;
    function asecNumber(x) {
      return Math.acos(1 / x);
    }
    asecNumber.signature = n1$3;
    function asechNumber(x) {
      var xInv = 1 / x;
      var ret = Math.sqrt(xInv * xInv - 1);
      return Math.log(ret + xInv);
    }
    asechNumber.signature = n1$3;
    function asinhNumber(x) {
      return asinh(x);
    }
    asinhNumber.signature = n1$3;
    function atanhNumber(x) {
      return atanh(x);
    }
    atanhNumber.signature = n1$3;
    function cotNumber(x) {
      return 1 / Math.tan(x);
    }
    cotNumber.signature = n1$3;
    function cothNumber(x) {
      var e = Math.exp(2 * x);
      return (e + 1) / (e - 1);
    }
    cothNumber.signature = n1$3;
    function cscNumber(x) {
      return 1 / Math.sin(x);
    }
    cscNumber.signature = n1$3;
    function cschNumber(x) {
      // consider values close to zero (+/-)
      if (x === 0) {
        return Number.POSITIVE_INFINITY;
      } else {
        return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
      }
    }
    cschNumber.signature = n1$3;
    function secNumber(x) {
      return 1 / Math.cos(x);
    }
    secNumber.signature = n1$3;
    function sechNumber(x) {
      return 2 / (Math.exp(x) + Math.exp(-x));
    }
    sechNumber.signature = n1$3;
    function sinhNumber(x) {
      return sinh(x);
    }
    sinhNumber.signature = n1$3;

    var n1$4 = 'number';
    function isNegativeNumber(x) {
      return x < 0;
    }
    isNegativeNumber.signature = n1$4;
    function isPositiveNumber(x) {
      return x > 0;
    }
    isPositiveNumber.signature = n1$4;
    function isZeroNumber(x) {
      return x === 0;
    }
    isZeroNumber.signature = n1$4;
    function isNaNNumber(x) {
      return Number.isNaN(x);
    }
    isNaNNumber.signature = n1$4;

    var name$9 = 'isNegative';
    var dependencies$a = ['typed'];
    var createIsNegative =
    /* #__PURE__ */
    factory(name$9, dependencies$a, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is negative: smaller than zero.
       * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNegative(x)
       *
       * Examples:
       *
       *    math.isNegative(3)                     // returns false
       *    math.isNegative(-2)                    // returns true
       *    math.isNegative(0)                     // returns false
       *    math.isNegative(-0)                    // returns false
       *    math.isNegative(math.bignumber(2))     // returns false
       *    math.isNegative(math.fraction(-2, 5))  // returns true
       *    math.isNegative('-2')                  // returns true
       *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
       *
       * See also:
       *
       *    isNumeric, isPositive, isZero, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      var isNegative = typed(name$9, {
        number: isNegativeNumber,
        BigNumber: function BigNumber(x) {
          return x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
          return x.s < 0; // It's enough to decide on the sign
        },
        Unit: function Unit(x) {
          return isNegative(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isNegative);
        }
      });
      return isNegative;
    });

    var name$a = 'isNumeric';
    var dependencies$b = ['typed'];
    var createIsNumeric =
    /* #__PURE__ */
    factory(name$a, dependencies$b, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is an numeric value.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNumeric(x)
       *
       * Examples:
       *
       *    math.isNumeric(2)                     // returns true
       *    math.isNumeric('2')                   // returns false
       *    math.hasNumericValue('2')             // returns true
       *    math.isNumeric(0)                     // returns true
       *    math.isNumeric(math.bignumber(500))   // returns true
       *    math.isNumeric(math.fraction(4))      // returns true
       *    math.isNumeric(math.complex('2-4i')   // returns false
       *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
       *
       * See also:
       *
       *    isZero, isPositive, isNegative, isInteger, hasNumericValue
       *
       * @param {*} x       Value to be tested
       * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
       *                    `Fraction`, or `boolean`. Returns false for other types.
       *                    Throws an error in case of unknown types.
       */
      var isNumeric = typed(name$a, {
        'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
          return true;
        },
        'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
          return false;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isNumeric);
        }
      });
      return isNumeric;
    });

    var name$b = 'hasNumericValue';
    var dependencies$c = ['typed', 'isNumeric'];
    var createHasNumericValue =
    /* #__PURE__ */
    factory(name$b, dependencies$c, function (_ref) {
      var typed = _ref.typed,
          isNumeric = _ref.isNumeric;

      /**
       * Test whether a value is an numeric value.
       *
       * In case of a string, true is returned if the string contains a numeric value.
       *
       * Syntax:
       *
       *     math.hasNumericValue(x)
       *
       * Examples:
       *
       *    math.hasNumericValue(2)                     // returns true
       *    math.hasNumericValue('2')                   // returns true
       *    math.isNumeric('2')                         // returns false
       *    math.hasNumericValue(0)                     // returns true
       *    math.hasNumericValue(math.bignumber(500))   // returns true
       *    math.hasNumericValue(math.fraction(4))      // returns true
       *    math.hasNumericValue(math.complex('2-4i')   // returns false
       *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
       *
       * See also:
       *
       *    isZero, isPositive, isNegative, isInteger, isNumeric
       *
       * @param {*} x       Value to be tested
       * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
       *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
       *                    Throws an error in case of unknown types.
       */
      return typed(name$b, {
        string: function string(x) {
          return x.trim().length > 0 && !isNaN(Number(x));
        },
        any: function any(x) {
          return isNumeric(x);
        }
      });
    });

    var name$c = 'isPositive';
    var dependencies$d = ['typed'];
    var createIsPositive =
    /* #__PURE__ */
    factory(name$c, dependencies$d, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is positive: larger than zero.
       * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isPositive(x)
       *
       * Examples:
       *
       *    math.isPositive(3)                     // returns true
       *    math.isPositive(-2)                    // returns false
       *    math.isPositive(0)                     // returns false
       *    math.isPositive(-0)                    // returns false
       *    math.isPositive(0.5)                   // returns true
       *    math.isPositive(math.bignumber(2))     // returns true
       *    math.isPositive(math.fraction(-2, 5))  // returns false
       *    math.isPositive(math.fraction(1,3))    // returns false
       *    math.isPositive('2')                   // returns true
       *    math.isPositive([2, 0, -3])            // returns [true, false, false]
       *
       * See also:
       *
       *    isNumeric, isZero, isNegative, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      var isPositive = typed(name$c, {
        number: isPositiveNumber,
        BigNumber: function BigNumber(x) {
          return !x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
          return x.s > 0 && x.n > 0;
        },
        Unit: function Unit(x) {
          return isPositive(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isPositive);
        }
      });
      return isPositive;
    });

    var name$d = 'isZero';
    var dependencies$e = ['typed'];
    var createIsZero =
    /* #__PURE__ */
    factory(name$d, dependencies$e, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is zero.
       * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
       * `Complex`, and `Unit`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isZero(x)
       *
       * Examples:
       *
       *    math.isZero(0)                     // returns true
       *    math.isZero(2)                     // returns false
       *    math.isZero(0.5)                   // returns false
       *    math.isZero(math.bignumber(0))     // returns true
       *    math.isZero(math.fraction(0))      // returns true
       *    math.isZero(math.fraction(1,3))    // returns false
       *    math.isZero(math.complex('2 - 4i') // returns false
       *    math.isZero(math.complex('0i')     // returns true
       *    math.isZero('0')                   // returns true
       *    math.isZero('2')                   // returns false
       *    math.isZero([2, 0, -3]')           // returns [false, true, false]
       *
       * See also:
       *
       *    isNumeric, isPositive, isNegative, isInteger
       *
       * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
       * @return {boolean}  Returns true when `x` is zero.
       *                    Throws an error in case of an unknown data type.
       */
      var isZero = typed(name$d, {
        number: isZeroNumber,
        BigNumber: function BigNumber(x) {
          return x.isZero();
        },
        Complex: function Complex(x) {
          return x.re === 0 && x.im === 0;
        },
        Fraction: function Fraction(x) {
          return x.d === 1 && x.n === 0;
        },
        Unit: function Unit(x) {
          return isZero(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isZero);
        }
      });
      return isZero;
    });

    var name$e = 'isNaN';
    var dependencies$f = ['typed'];
    var createIsNaN =
    /* #__PURE__ */
    factory(name$e, dependencies$f, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is NaN (not a number).
       * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isNaN(x)
       *
       * Examples:
       *
       *    math.isNaN(3)                     // returns false
       *    math.isNaN(NaN)                   // returns true
       *    math.isNaN(0)                     // returns false
       *    math.isNaN(math.bignumber(NaN))   // returns true
       *    math.isNaN(math.bignumber(0))     // returns false
       *    math.isNaN(math.fraction(-2, 5))  // returns false
       *    math.isNaN('-2')                  // returns false
       *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
       *
       * See also:
       *
       *    isNumeric, isNegative, isPositive, isZero, isInteger
       *
       * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is NaN.
       *                    Throws an error in case of an unknown data type.
       */
      return typed(name$e, {
        number: isNaNNumber,
        BigNumber: function BigNumber(x) {
          return x.isNaN();
        },
        Fraction: function Fraction(x) {
          return false;
        },
        Complex: function Complex(x) {
          return x.isNaN();
        },
        Unit: function Unit(x) {
          return Number.isNaN(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, Number.isNaN);
        }
      });
    });

    /**
     * Log a console.warn message only once
     */
    var warnOnce = function () {
      var messages = {};
      return function warnOnce() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var message = args.join(', ');

        if (!messages[message]) {
          var _console;

          messages[message] = true;

          (_console = console).warn.apply(_console, ['Warning:'].concat(args));
        }
      };
    }();

    var name$f = 'typeOf';
    var dependencies$g = ['typed'];
    var createTypeOf =
    /* #__PURE__ */
    factory(name$f, dependencies$g, function (_ref) {
      var typed = _ref.typed;

      /**
       * Determine the type of a variable.
       *
       * Function `typeOf` recognizes the following types of objects:
       *
       * Object                 | Returns       | Example
       * ---------------------- | ------------- | ------------------------------------------
       * null                   | `'null'`      | `math.typeOf(null)`
       * number                 | `'number'`    | `math.typeOf(3.5)`
       * boolean                | `'boolean'`   | `math.typeOf(true)`
       * string                 | `'string'`    | `math.typeOf('hello world')`
       * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
       * Date                   | `'Date'`      | `math.typeOf(new Date())`
       * Function               | `'Function'`  | `math.typeOf(function () {})`
       * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
       * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
       * undefined              | `'undefined'` | `math.typeOf(undefined)`
       * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
       * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
       * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
       * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
       * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
       * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
       * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
       * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
       * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
       * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
       * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
       * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
       * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
       * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
       * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
       * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
       * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
       * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
       * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
       * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
       * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
       * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
       * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
       * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
       *
       * Syntax:
       *
       *    math.typeOf(x)
       *
       * Examples:
       *
       *    math.typeOf(3.5)                     // returns 'number'
       *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
       *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
       *    math.typeOf('hello world')           // returns 'string'
       *
       * @param {*} x     The variable for which to test the type.
       * @return {string} Returns the name of the type. Primitive types are lower case,
       *                  non-primitive types are upper-camel-case.
       *                  For example 'number', 'string', 'Array', 'Date'.
       */
      return typed(name$f, {
        any: typeOf
      });
    }); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-06

    var createDeprecatedTypeof =
    /* #__PURE__ */
    factory('typeof', [], function () {
      return function () {
        warnOnce('Function "typeof" has been renamed to "typeOf" in v6.0.0, please use the new function instead.');

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return typeOf.apply(typeOf, args);
      };
    });

    /**
     * Compares two BigNumbers.
     * @param {BigNumber} x       First value to compare
     * @param {BigNumber} y       Second value to compare
     * @param {number} [epsilon]  The maximum relative difference between x and y
     *                            If epsilon is undefined or null, the function will
     *                            test whether x and y are exactly equal.
     * @return {boolean} whether the two numbers are nearly equal
     */
    function nearlyEqual$1(x, y, epsilon) {
      // if epsilon is null or undefined, test whether x and y are exactly equal
      if (epsilon === null || epsilon === undefined) {
        return x.eq(y);
      } // use "==" operator, handles infinities


      if (x.eq(y)) {
        return true;
      } // NaN


      if (x.isNaN() || y.isNaN()) {
        return false;
      } // at this point x and y should be finite


      if (x.isFinite() && y.isFinite()) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = x.minus(y).abs();

        if (diff.isZero()) {
          return true;
        } else {
          // use relative error
          var max = x.constructor.max(x.abs(), y.abs());
          return diff.lte(max.times(epsilon));
        }
      } // Infinite and Number or negative Infinite and positive Infinite cases


      return false;
    }

    /**
     * Test whether two complex values are equal provided a given epsilon.
     * Does not use or change the global Complex.EPSILON setting
     * @param {Complex} x
     * @param {Complex} y
     * @param {number} epsilon
     * @returns {boolean}
     */

    function complexEquals(x, y, epsilon) {
      return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);
    }

    var name$g = 'equalScalar';
    var dependencies$h = ['typed', 'config'];
    var createEqualScalar =
    /* #__PURE__ */
    factory(name$g, dependencies$h, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config;

      /**
       * Test whether two scalar values are nearly equal.
       *
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
       * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
       * @private
       */
      var equalScalar = typed(name$g, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x === y;
        },
        'number, number': function numberNumber(x, y) {
          return nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.eq(y) || nearlyEqual$1(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.equals(y);
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return complexEquals(x, y, config.epsilon);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return equalScalar(x.value, y.value);
        }
      });
      return equalScalar;
    });
    var createEqualScalarNumber = factory(name$g, ['typed', 'config'], function (_ref2) {
      var typed = _ref2.typed,
          config = _ref2.config;
      return typed(name$g, {
        'number, number': function numberNumber(x, y) {
          return nearlyEqual(x, y, config.epsilon);
        }
      });
    });

    var name$h = 'SparseMatrix';
    var dependencies$i = ['typed', 'equalScalar', 'Matrix'];
    var createSparseMatrixClass =
    /* #__PURE__ */
    factory(name$h, dependencies$i, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar,
          Matrix = _ref.Matrix;

      /**
       * Sparse Matrix implementation. This type implements a Compressed Column Storage format
       * for sparse matrices.
       * @class SparseMatrix
       */
      function SparseMatrix(data, datatype) {
        if (!(this instanceof SparseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString$m(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data)) {
          // create from matrix
          _createFromMatrix(this, data, datatype);
        } else if (data && isArray$i(data.index) && isArray$i(data.ptr) && isArray$i(data.size)) {
          // initialize fields
          this._values = data.values;
          this._index = data.index;
          this._ptr = data.ptr;
          this._size = data.size;
          this._datatype = datatype || data.datatype;
        } else if (isArray$i(data)) {
          // create from array
          _createFromArray(this, data, datatype);
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
        } else {
          // nothing provided
          this._values = [];
          this._index = [];
          this._ptr = [0];
          this._size = [0, 0];
          this._datatype = datatype;
        }
      }

      function _createFromMatrix(matrix, source, datatype) {
        // check matrix type
        if (source.type === 'SparseMatrix') {
          // clone arrays
          matrix._values = source._values ? clone$3(source._values) : undefined;
          matrix._index = clone$3(source._index);
          matrix._ptr = clone$3(source._ptr);
          matrix._size = clone$3(source._size);
          matrix._datatype = datatype || source._datatype;
        } else {
          // build from matrix data
          _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
        }
      }

      function _createFromArray(matrix, data, datatype) {
        // initialize fields
        matrix._values = [];
        matrix._index = [];
        matrix._ptr = [];
        matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

        var rows = data.length;
        var columns = 0; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString$m(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, datatype);
        } // check we have rows (empty array)


        if (rows > 0) {
          // column index
          var j = 0;

          do {
            // store pointer to values index
            matrix._ptr.push(matrix._index.length); // loop rows


            for (var i = 0; i < rows; i++) {
              // current row
              var row = data[i]; // check row is an array

              if (isArray$i(row)) {
                // update columns if needed (only on first column)
                if (j === 0 && columns < row.length) {
                  columns = row.length;
                } // check row has column


                if (j < row.length) {
                  // value
                  var v = row[j]; // check value != 0

                  if (!eq(v, zero)) {
                    // store value
                    matrix._values.push(v); // index


                    matrix._index.push(i);
                  }
                }
              } else {
                // update columns if needed (only on first column)
                if (j === 0 && columns < 1) {
                  columns = 1;
                } // check value != 0 (row is a scalar)


                if (!eq(row, zero)) {
                  // store value
                  matrix._values.push(row); // index


                  matrix._index.push(i);
                }
              }
            } // increment index


            j++;
          } while (j < columns);
        } // store number of values in ptr


        matrix._ptr.push(matrix._index.length); // size


        matrix._size = [rows, columns];
      }

      SparseMatrix.prototype = new Matrix();
      /**
       * Create a new SparseMatrix
       */

      SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };
      /**
       * Attach type information
       */


      SparseMatrix.prototype.type = 'SparseMatrix';
      SparseMatrix.prototype.isSparseMatrix = true;
      /**
       * Get the matrix type
       *
       * Usage:
       *    const matrixType = matrix.getDataType()  // retrieves the matrix type
       *
       * @memberOf SparseMatrix
       * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
       */

      SparseMatrix.prototype.getDataType = function () {
        return getArrayDataType(this._values, typeOf);
      };
      /**
       * Get the storage format used by the matrix.
       *
       * Usage:
       *     const format = matrix.storage()   // retrieve storage format
       *
       * @memberof SparseMatrix
       * @return {string}           The storage format.
       */


      SparseMatrix.prototype.storage = function () {
        return 'sparse';
      };
      /**
       * Get the datatype of the data stored in the matrix.
       *
       * Usage:
       *     const format = matrix.datatype()    // retrieve matrix datatype
       *
       * @memberof SparseMatrix
       * @return {string}           The datatype.
       */


      SparseMatrix.prototype.datatype = function () {
        return this._datatype;
      };
      /**
       * Create a new SparseMatrix
       * @memberof SparseMatrix
       * @param {Array} data
       * @param {string} [datatype]
       */


      SparseMatrix.prototype.create = function (data, datatype) {
        return new SparseMatrix(data, datatype);
      };
      /**
       * Get the matrix density.
       *
       * Usage:
       *     const density = matrix.density()                   // retrieve matrix density
       *
       * @memberof SparseMatrix
       * @return {number}           The matrix density.
       */


      SparseMatrix.prototype.density = function () {
        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // calculate density

        return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
      };
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @memberof SparseMatrix
       * @param {Index} index
       * @param {Array | Matrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */


      SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke subset on a Pattern only matrix');
        } // check arguments


        switch (arguments.length) {
          case 1:
            return _getsubset(this, index);
          // intentional fall through

          case 2:
          case 3:
            return _setsubset(this, index, replacement, defaultValue);

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };

      function _getsubset(matrix, idx) {
        // check idx
        if (!isIndex(idx)) {
          throw new TypeError('Invalid index');
        }

        var isScalar = idx.isScalar();

        if (isScalar) {
          // return a scalar
          return matrix.get(idx.min());
        } // validate dimensions


        var size = idx.size();

        if (size.length !== matrix._size.length) {
          throw new DimensionError(size.length, matrix._size.length);
        } // vars


        var i, ii, k, kk; // validate if any of the ranges in the index is out of range

        var min = idx.min();
        var max = idx.max();

        for (i = 0, ii = matrix._size.length; i < ii; i++) {
          validateIndex(min[i], matrix._size[i]);
          validateIndex(max[i], matrix._size[i]);
        } // matrix arrays


        var mvalues = matrix._values;
        var mindex = matrix._index;
        var mptr = matrix._ptr; // rows & columns dimensions for result matrix

        var rows = idx.dimension(0);
        var columns = idx.dimension(1); // workspace & permutation vector

        var w = [];
        var pv = []; // loop rows in resulting matrix

        rows.forEach(function (i, r) {
          // update permutation vector
          pv[i] = r[0]; // mark i in workspace

          w[i] = true;
        }); // result matrix arrays

        var values = mvalues ? [] : undefined;
        var index = [];
        var ptr = []; // loop columns in result matrix

        columns.forEach(function (j) {
          // update ptr
          ptr.push(index.length); // loop values in column j

          for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
            // row
            i = mindex[k]; // check row is in result matrix

            if (w[i] === true) {
              // push index
              index.push(pv[i]); // check we need to process values

              if (values) {
                values.push(mvalues[k]);
              }
            }
          }
        }); // update ptr

        ptr.push(index.length); // return matrix

        return new SparseMatrix({
          values: values,
          index: index,
          ptr: ptr,
          size: size,
          datatype: matrix._datatype
        });
      }

      function _setsubset(matrix, index, submatrix, defaultValue) {
        // check index
        if (!index || index.isIndex !== true) {
          throw new TypeError('Invalid index');
        } // get index size and check whether the index contains a single value


        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

        var sSize;

        if (isMatrix(submatrix)) {
          // submatrix size
          sSize = submatrix.size(); // use array representation

          submatrix = submatrix.toArray();
        } else {
          // get submatrix size (array, scalar)
          sSize = arraySize(submatrix);
        } // check index is a scalar


        if (isScalar) {
          // verify submatrix is a scalar
          if (sSize.length !== 0) {
            throw new TypeError('Scalar expected');
          } // set value


          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          // validate dimensions, index size must be one or two dimensions
          if (iSize.length !== 1 && iSize.length !== 2) {
            throw new DimensionError(iSize.length, matrix._size.length, '<');
          } // check submatrix and index have the same dimensions


          if (sSize.length < iSize.length) {
            // calculate number of missing outer dimensions
            var i = 0;
            var outer = 0;

            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }

            while (iSize[i] === 1) {
              outer++;
              i++;
            } // unsqueeze both outer and inner dimensions


            submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
          } // check whether the size of the submatrix matches the index size


          if (!deepStrictEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, '>');
          } // offsets


          var x0 = index.min()[0];
          var y0 = index.min()[1]; // submatrix rows and columns

          var m = sSize[0];
          var n = sSize[1]; // loop submatrix

          for (var x = 0; x < m; x++) {
            // loop columns
            for (var y = 0; y < n; y++) {
              // value at i, j
              var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

              matrix.set([x + x0, y + y0], v, defaultValue);
            }
          }
        }

        return matrix;
      }
      /**
       * Get a single element from the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @return {*} value
       */


      SparseMatrix.prototype.get = function (index) {
        if (!isArray$i(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check it is a pattern matrix


        if (!this._values) {
          throw new Error('Cannot invoke get on a Pattern only matrix');
        } // row and column


        var i = index[0];
        var j = index[1]; // check i, j are valid

        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[1]); // find value index

        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


        if (k < this._ptr[j + 1] && this._index[k] === i) {
          return this._values[k];
        }

        return 0;
      };
      /**
       * Replace a single element in the matrix.
       * @memberof SparseMatrix
       * @param {number[]} index   Zero-based index
       * @param {*} v
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be set to zero.
       * @return {SparseMatrix} self
       */


      SparseMatrix.prototype.set = function (index, v, defaultValue) {
        if (!isArray$i(index)) {
          throw new TypeError('Array expected');
        }

        if (index.length !== this._size.length) {
          throw new DimensionError(index.length, this._size.length);
        } // check it is a pattern matrix


        if (!this._values) {
          throw new Error('Cannot invoke set on a Pattern only matrix');
        } // row and column


        var i = index[0];
        var j = index[1]; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString$m(this._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, this._datatype);
        } // check we need to resize matrix


        if (i > rows - 1 || j > columns - 1) {
          // resize matrix
          _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


          rows = this._size[0];
          columns = this._size[1];
        } // check i, j are valid


        validateIndex(i, rows);
        validateIndex(j, columns); // find value index

        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


        if (k < this._ptr[j + 1] && this._index[k] === i) {
          // check value != 0
          if (!eq(v, zero)) {
            // update value
            this._values[k] = v;
          } else {
            // remove value from matrix
            _remove(k, j, this._values, this._index, this._ptr);
          }
        } else {
          // insert value @ (i, j)
          _insert(k, i, j, v, this._values, this._index, this._ptr);
        }

        return this;
      };

      function _getValueIndex(i, top, bottom, index) {
        // check row is on the bottom side
        if (bottom - top === 0) {
          return bottom;
        } // loop rows [top, bottom[


        for (var r = top; r < bottom; r++) {
          // check we found value index
          if (index[r] === i) {
            return r;
          }
        } // we did not find row


        return top;
      }

      function _remove(k, j, values, index, ptr) {
        // remove value @ k
        values.splice(k, 1);
        index.splice(k, 1); // update pointers

        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]--;
        }
      }

      function _insert(k, i, j, v, values, index, ptr) {
        // insert value
        values.splice(k, 0, v); // update row for k

        index.splice(k, 0, i); // update column pointers

        for (var x = j + 1; x < ptr.length; x++) {
          ptr[x]++;
        }
      }
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @memberof SparseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
        // validate arguments
        if (!isArray$i(size)) {
          throw new TypeError('Array expected');
        }

        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // check sizes


        size.forEach(function (value) {
          if (!isNumber$f(value) || !isInteger$1(value) || value < 0) {
            throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$5(size) + ')');
          }
        }); // matrix to resize

        var m = copy ? this.clone() : this; // resize matrix

        return _resize(m, size[0], size[1], defaultValue);
      };

      function _resize(matrix, rows, columns, defaultValue) {
        // value to insert at the time of growing matrix
        var value = defaultValue || 0; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString$m(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

          value = typed.convert(value, matrix._datatype);
        } // should we insert the value?


        var ins = !eq(value, zero); // old columns and rows

        var r = matrix._size[0];
        var c = matrix._size[1];
        var i, j, k; // check we need to increase columns

        if (columns > c) {
          // loop new columns
          for (j = c; j < columns; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

            if (ins) {
              // loop rows
              for (i = 0; i < r; i++) {
                // add new matrix._values
                matrix._values.push(value); // update matrix._index


                matrix._index.push(i);
              }
            }
          } // store number of matrix._values in matrix._ptr


          matrix._ptr[columns] = matrix._values.length;
        } else if (columns < c) {
          // truncate matrix._ptr
          matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


          matrix._values.splice(matrix._ptr[columns], matrix._values.length);

          matrix._index.splice(matrix._ptr[columns], matrix._index.length);
        } // update columns


        c = columns; // check we need to increase rows

        if (rows > r) {
          // check we have to insert values
          if (ins) {
            // inserts
            var n = 0; // loop columns

            for (j = 0; j < c; j++) {
              // update matrix._ptr for current column
              matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

              k = matrix._ptr[j + 1] + n; // pointer

              var p = 0; // loop new rows, initialize pointer

              for (i = r; i < rows; i++, p++) {
                // add value
                matrix._values.splice(k + p, 0, value); // update matrix._index


                matrix._index.splice(k + p, 0, i); // increment inserts


                n++;
              }
            } // store number of matrix._values in matrix._ptr


            matrix._ptr[c] = matrix._values.length;
          }
        } else if (rows < r) {
          // deletes
          var d = 0; // loop columns

          for (j = 0; j < c; j++) {
            // update matrix._ptr for current column
            matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

            var k0 = matrix._ptr[j];
            var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

            for (k = k0; k < k1; k++) {
              // row
              i = matrix._index[k]; // check we need to delete value and matrix._index

              if (i > rows - 1) {
                // remove value
                matrix._values.splice(k, 1); // remove item from matrix._index


                matrix._index.splice(k, 1); // increase deletes


                d++;
              }
            }
          } // update matrix._ptr for current column


          matrix._ptr[j] = matrix._values.length;
        } // update matrix._size


        matrix._size[0] = rows;
        matrix._size[1] = columns; // return matrix

        return matrix;
      }
      /**
       * Reshape the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (reshape in place).
       *
       * NOTE: This might be better suited to copy by default, instead of modifying
       *       in place. For now, it operates in place to remain consistent with
       *       resize().
       *
       * @memberof SparseMatrix
       * @param {number[]} size           The new size the matrix should have.
       * @param {boolean} [copy]          Return a reshaped copy of the matrix
       *
       * @return {Matrix}                 The reshaped matrix
       */


      SparseMatrix.prototype.reshape = function (size, copy) {
        // validate arguments
        if (!isArray$i(size)) {
          throw new TypeError('Array expected');
        }

        if (size.length !== 2) {
          throw new Error('Sparse matrices can only be reshaped in two dimensions');
        } // check sizes


        size.forEach(function (value) {
          if (!isNumber$f(value) || !isInteger$1(value) || value < 0) {
            throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$5(size) + ')');
          }
        }); // m * n must not change

        if (this._size[0] * this._size[1] !== size[0] * size[1]) {
          throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
        } // matrix to reshape


        var m = copy ? this.clone() : this; // return unchanged if the same shape

        if (this._size[0] === size[0] && this._size[1] === size[1]) {
          return m;
        } // Convert to COO format (generate a column index)


        var colIndex = [];

        for (var i = 0; i < m._ptr.length; i++) {
          for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
            colIndex.push(i);
          }
        } // Clone the values array


        var values = m._values.slice(); // Clone the row index array


        var rowIndex = m._index.slice(); // Transform the (row, column) indices


        for (var _i = 0; _i < m._index.length; _i++) {
          var r1 = rowIndex[_i];
          var c1 = colIndex[_i];
          var flat = r1 * m._size[1] + c1;
          colIndex[_i] = flat % size[1];
          rowIndex[_i] = Math.floor(flat / size[1]);
        } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
        // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
        // sorting several arrays based on some other array.
        // OR, we could easily just:
        // 1. Remove all values from the matrix


        m._values.length = 0;
        m._index.length = 0;
        m._ptr.length = size[1] + 1;
        m._size = size.slice();

        for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
          m._ptr[_i2] = 0;
        } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
        // This step is probably the most time-consuming


        for (var h = 0; h < values.length; h++) {
          var _i3 = rowIndex[h];
          var _j = colIndex[h];
          var v = values[h];

          var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

          _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
        } // The value indices are inserted out of order, but apparently that's... still OK?


        return m;
      };
      /**
       * Create a clone of the matrix
       * @memberof SparseMatrix
       * @return {SparseMatrix} clone
       */


      SparseMatrix.prototype.clone = function () {
        var m = new SparseMatrix({
          values: this._values ? clone$3(this._values) : undefined,
          index: clone$3(this._index),
          ptr: clone$3(this._ptr),
          size: clone$3(this._size),
          datatype: this._datatype
        });
        return m;
      };
      /**
       * Retrieve the size of the matrix.
       * @memberof SparseMatrix
       * @returns {number[]} size
       */


      SparseMatrix.prototype.size = function () {
        return this._size.slice(0); // copy the Array
      };
      /**
       * Create a new matrix with the results of the callback function executed on
       * each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       *
       * @return {SparseMatrix} matrix
       */


      SparseMatrix.prototype.map = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke map on a Pattern only matrix');
        } // matrix instance


        var me = this; // rows and columns

        var rows = this._size[0];
        var columns = this._size[1]; // invoke callback

        var invoke = function invoke(v, i, j) {
          // invoke callback
          return callback(v, [i, j], me);
        }; // invoke _map


        return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
      };
      /**
       * Create a new matrix with the results of the callback function executed on the interval
       * [minRow..maxRow, minColumn..maxColumn].
       */


      function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
        // result arrays
        var values = [];
        var index = [];
        var ptr = []; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString$m(matrix._datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, matrix._datatype);
        } // invoke callback


        var invoke = function invoke(v, x, y) {
          // invoke callback
          v = callback(v, x, y); // check value != 0

          if (!eq(v, zero)) {
            // store value
            values.push(v); // index

            index.push(x);
          }
        }; // loop columns


        for (var j = minColumn; j <= maxColumn; j++) {
          // store pointer to values index
          ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

          var k0 = matrix._ptr[j];
          var k1 = matrix._ptr[j + 1];

          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = matrix._index[k]; // check i is in range

              if (i >= minRow && i <= maxRow) {
                // value @ k
                invoke(matrix._values[k], i - minRow, j - minColumn);
              }
            }
          } else {
            // create a cache holding all defined values
            var _values = {};

            for (var _k = k0; _k < k1; _k++) {
              var _i4 = matrix._index[_k];
              _values[_i4] = matrix._values[_k];
            } // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero


            for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
              var value = _i5 in _values ? _values[_i5] : 0;
              invoke(value, _i5 - minRow, j - minColumn);
            }
          }
        } // store number of values in ptr


        ptr.push(values.length); // return sparse matrix

        return new SparseMatrix({
          values: values,
          index: index,
          ptr: ptr,
          size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
        });
      }
      /**
       * Execute a callback function on each entry of the matrix.
       * @memberof SparseMatrix
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix being traversed.
       * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
       */


      SparseMatrix.prototype.forEach = function (callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) {
          throw new Error('Cannot invoke forEach on a Pattern only matrix');
        } // matrix instance


        var me = this; // rows and columns

        var rows = this._size[0];
        var columns = this._size[1]; // loop columns

        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];

          if (skipZeros) {
            // loop k within [k0, k1[
            for (var k = k0; k < k1; k++) {
              // row index
              var i = this._index[k]; // value @ k

              callback(this._values[k], [i, j], me);
            }
          } else {
            // create a cache holding all defined values
            var values = {};

            for (var _k2 = k0; _k2 < k1; _k2++) {
              var _i6 = this._index[_k2];
              values[_i6] = this._values[_k2];
            } // loop over all rows (indexes can be unordered so we can't use that),
            // and either read the value or zero


            for (var _i7 = 0; _i7 < rows; _i7++) {
              var value = _i7 in values ? values[_i7] : 0;
              callback(value, [_i7, j], me);
            }
          }
        }
      };
      /**
       * Create an Array with a copy of the data of the SparseMatrix
       * @memberof SparseMatrix
       * @returns {Array} array
       */


      SparseMatrix.prototype.toArray = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, true);
      };
      /**
       * Get the primitive value of the SparseMatrix: a two dimensions array
       * @memberof SparseMatrix
       * @returns {Array} array
       */


      SparseMatrix.prototype.valueOf = function () {
        return _toArray(this._values, this._index, this._ptr, this._size, false);
      };

      function _toArray(values, index, ptr, size, copy) {
        // rows and columns
        var rows = size[0];
        var columns = size[1]; // result

        var a = []; // vars

        var i, j; // initialize array

        for (i = 0; i < rows; i++) {
          a[i] = [];

          for (j = 0; j < columns; j++) {
            a[i][j] = 0;
          }
        } // loop columns


        for (j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            i = index[k]; // set value (use one for pattern matrix)

            a[i][j] = values ? copy ? clone$3(values[k]) : values[k] : 1;
          }
        }

        return a;
      }
      /**
       * Get a string representation of the matrix, with optional formatting options.
       * @memberof SparseMatrix
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @returns {string} str
       */


      SparseMatrix.prototype.format = function (options) {
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1]; // density

        var density = this.density(); // rows & columns

        var str = 'Sparse Matrix [' + format$5(rows, options) + ' x ' + format$5(columns, options) + '] density: ' + format$5(density, options) + '\n'; // loop columns

        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = this._index[k]; // append value

            str += '\n    (' + format$5(i, options) + ', ' + format$5(j, options) + ') ==> ' + (this._values ? format$5(this._values[k], options) : 'X');
          }
        }

        return str;
      };
      /**
       * Get a string representation of the matrix
       * @memberof SparseMatrix
       * @returns {string} str
       */


      SparseMatrix.prototype.toString = function () {
        return format$5(this.toArray());
      };
      /**
       * Get a JSON representation of the matrix
       * @memberof SparseMatrix
       * @returns {Object}
       */


      SparseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'SparseMatrix',
          values: this._values,
          index: this._index,
          ptr: this._ptr,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Get the kth Matrix diagonal.
       *
       * @memberof SparseMatrix
       * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
       *
       * @returns {Matrix}                     The matrix vector with the diagonal values.
       */


      SparseMatrix.prototype.diagonal = function (k) {
        // validate k if any
        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber$f(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns

        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values

        var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

        var values = [];
        var index = [];
        var ptr = []; // initial ptr value

        ptr[0] = 0; // loop columns

        for (var j = kSuper; j < columns && values.length < n; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

          for (var x = k0; x < k1; x++) {
            // row index
            var i = this._index[x]; // check row

            if (i === j - kSuper + kSub) {
              // value on this column
              values.push(this._values[x]); // store row

              index[values.length - 1] = i - kSub; // exit loop

              break;
            }
          }
        } // close ptr


        ptr.push(values.length); // return matrix

        return new SparseMatrix({
          values: values,
          index: index,
          ptr: ptr,
          size: [n, 1]
        });
      };
      /**
       * Generate a matrix from a JSON object
       * @memberof SparseMatrix
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
       *                       where mathjs is optional
       * @returns {SparseMatrix}
       */


      SparseMatrix.fromJSON = function (json) {
        return new SparseMatrix(json);
      };
      /**
       * Create a diagonal matrix.
       *
       * @memberof SparseMatrix
       * @param {Array} size                       The matrix size.
       * @param {number | Array | Matrix } value   The values for the diagonal.
       * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
       * @param {number} [defaultValue]            The default value for non-diagonal
       * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
       *
       * @returns {SparseMatrix}
       */


      SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
        if (!isArray$i(size)) {
          throw new TypeError('Array expected, size parameter');
        }

        if (size.length !== 2) {
          throw new Error('Only two dimensions matrix are supported');
        } // map size & validate


        size = size.map(function (s) {
          // check it is a big number
          if (isBigNumber(s)) {
            // convert it
            s = s.toNumber();
          } // validate arguments


          if (!isNumber$f(s) || !isInteger$1(s) || s < 1) {
            throw new Error('Size values must be positive integers');
          }

          return s;
        }); // validate k if any

        if (k) {
          // convert BigNumber to a number
          if (isBigNumber(k)) {
            k = k.toNumber();
          } // is must be an integer


          if (!isNumber$f(k) || !isInteger$1(k)) {
            throw new TypeError('The parameter k must be an integer number');
          }
        } else {
          // default value
          k = 0;
        } // equal signature to use


        var eq = equalScalar; // zero value

        var zero = 0;

        if (isString$m(datatype)) {
          // find signature that matches (datatype, datatype)
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

          zero = typed.convert(0, datatype);
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns

        var rows = size[0];
        var columns = size[1]; // number of non-zero items

        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

        var _value; // check value


        if (isArray$i(value)) {
          // validate array
          if (value.length !== n) {
            // number of values in array must be n
            throw new Error('Invalid value array length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value[i];
          };
        } else if (isMatrix(value)) {
          // matrix size
          var ms = value.size(); // validate matrix

          if (ms.length !== 1 || ms[0] !== n) {
            // number of values in array must be n
            throw new Error('Invalid matrix length');
          } // define function


          _value = function _value(i) {
            // return value @ i
            return value.get([i]);
          };
        } else {
          // define function
          _value = function _value() {
            // return value
            return value;
          };
        } // create arrays


        var values = [];
        var index = [];
        var ptr = []; // loop items

        for (var j = 0; j < columns; j++) {
          // number of rows with value
          ptr.push(values.length); // diagonal index

          var i = j - kSuper; // check we need to set diagonal value

          if (i >= 0 && i < n) {
            // get value @ i
            var v = _value(i); // check for zero


            if (!eq(v, zero)) {
              // column
              index.push(i + kSub); // add value

              values.push(v);
            }
          }
        } // last value should be number of values


        ptr.push(values.length); // create SparseMatrix

        return new SparseMatrix({
          values: values,
          index: index,
          ptr: ptr,
          size: [rows, columns]
        });
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @memberof SparseMatrix
       * @param {number} i       Matrix row index 1
       * @param {number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      SparseMatrix.prototype.swapRows = function (i, j) {
        // check index
        if (!isNumber$f(i) || !isInteger$1(i) || !isNumber$f(j) || !isInteger$1(j)) {
          throw new Error('Row index must be positive integers');
        } // check dimensions


        if (this._size.length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        } // validate index


        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]); // swap rows

        SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


        return this;
      };
      /**
       * Loop rows with data in column j.
       *
       * @param {number} j            Column
       * @param {Array} values        Matrix values
       * @param {Array} index         Matrix row indeces
       * @param {Array} ptr           Matrix column pointers
       * @param {Function} callback   Callback function invoked for every row in column j
       */


      SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
        // indeces for column j
        var k0 = ptr[j];
        var k1 = ptr[j + 1]; // loop

        for (var k = k0; k < k1; k++) {
          // invoke callback
          callback(index[k], values[k]);
        }
      };
      /**
       * Swap rows x and y in Sparse Matrix data structures.
       *
       * @param {number} x         Matrix row index 1
       * @param {number} y         Matrix row index 2
       * @param {number} columns   Number of columns in matrix
       * @param {Array} values     Matrix values
       * @param {Array} index      Matrix row indeces
       * @param {Array} ptr        Matrix column pointers
       */


      SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // find value index @ x

          var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


          var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


          if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
            // swap values (check for pattern matrix)
            if (values) {
              var v = values[kx];
              values[kx] = values[ky];
              values[ky] = v;
            } // next column


            continue;
          } // check x row exist & no y row


          if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
            // value @ x (check for pattern matrix)
            var vx = values ? values[kx] : undefined; // insert value @ y

            index.splice(ky, 0, y);

            if (values) {
              values.splice(ky, 0, vx);
            } // remove value @ x (adjust array index if needed)


            index.splice(ky <= kx ? kx + 1 : kx, 1);

            if (values) {
              values.splice(ky <= kx ? kx + 1 : kx, 1);
            } // next column


            continue;
          } // check y row exist & no x row


          if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
            // value @ y (check for pattern matrix)
            var vy = values ? values[ky] : undefined; // insert value @ x

            index.splice(kx, 0, x);

            if (values) {
              values.splice(kx, 0, vy);
            } // remove value @ y (adjust array index if needed)


            index.splice(kx <= ky ? ky + 1 : ky, 1);

            if (values) {
              values.splice(kx <= ky ? ky + 1 : ky, 1);
            }
          }
        }
      };

      return SparseMatrix;
    }, {
      isClass: true
    });

    var name$i = 'number';
    var dependencies$j = ['typed'];
    var createNumber =
    /* #__PURE__ */
    factory(name$i, dependencies$j, function (_ref) {
      var typed = _ref.typed;

      /**
       * Create a number or convert a string, boolean, or unit to a number.
       * When value is a matrix, all elements will be converted to number.
       *
       * Syntax:
       *
       *    math.number(value)
       *    math.number(unit, valuelessUnit)
       *
       * Examples:
       *
       *    math.number(2)                         // returns number 2
       *    math.number('7.2')                     // returns number 7.2
       *    math.number(true)                      // returns number 1
       *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
       *    math.number(math.unit('52cm'), 'm')    // returns 0.52
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, string, unit
       *
       * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
       * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
       * @return {number | Array | Matrix} The created number
       */
      var number = typed('number', {
        '': function _() {
          return 0;
        },
        number: function number(x) {
          return x;
        },
        string: function string(x) {
          if (x === 'NaN') return NaN;
          var num = Number(x);

          if (isNaN(num)) {
            throw new SyntaxError('String "' + x + '" is no valid number');
          }

          return num;
        },
        BigNumber: function BigNumber(x) {
          return x.toNumber();
        },
        Fraction: function Fraction(x) {
          return x.valueOf();
        },
        Unit: function Unit(x) {
          throw new Error('Second argument with valueless unit expected');
        },
        "null": function _null(x) {
          return 0;
        },
        'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
          return unit.toNumber(valuelessUnit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, number);
        }
      });
      return number;
    });

    var name$j = 'string';
    var dependencies$k = ['typed'];
    var createString =
    /* #__PURE__ */
    factory(name$j, dependencies$k, function (_ref) {
      var typed = _ref.typed;

      /**
       * Create a string or convert any object into a string.
       * Elements of Arrays and Matrices are processed element wise.
       *
       * Syntax:
       *
       *    math.string(value)
       *
       * Examples:
       *
       *    math.string(4.2)               // returns string '4.2'
       *    math.string(math.complex(3, 2) // returns string '3 + 2i'
       *
       *    const u = math.unit(5, 'km')
       *    math.string(u.to('m'))         // returns string '5000 m'
       *
       *    math.string([true, false])     // returns ['true', 'false']
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, number, unit
       *
       * @param {* | Array | Matrix | null} [value]  A value to convert to a string
       * @return {string | Array | Matrix} The created string
       */
      var string = typed(name$j, {
        '': function _() {
          return '';
        },
        number: format$3,
        "null": function _null(x) {
          return 'null';
        },
        "boolean": function boolean(x) {
          return x + '';
        },
        string: function string(x) {
          return x;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, string);
        },
        any: function any(x) {
          return String(x);
        }
      });
      return string;
    });

    var name$k = 'boolean';
    var dependencies$l = ['typed'];
    var createBoolean =
    /* #__PURE__ */
    factory(name$k, dependencies$l, function (_ref) {
      var typed = _ref.typed;

      /**
       * Create a boolean or convert a string or number to a boolean.
       * In case of a number, `true` is returned for non-zero numbers, and `false` in
       * case of zero.
       * Strings can be `'true'` or `'false'`, or can contain a number.
       * When value is a matrix, all elements will be converted to boolean.
       *
       * Syntax:
       *
       *    math.boolean(x)
       *
       * Examples:
       *
       *    math.boolean(0)     // returns false
       *    math.boolean(1)     // returns true
       *    math.boolean(-3)     // returns true
       *    math.boolean('true')     // returns true
       *    math.boolean('false')     // returns false
       *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
       *
       * See also:
       *
       *    bignumber, complex, index, matrix, string, unit
       *
       * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
       * @return {boolean | Array | Matrix} The boolean value
       */
      var bool = typed(name$k, {
        '': function _() {
          return false;
        },
        "boolean": function boolean(x) {
          return x;
        },
        number: function number(x) {
          return !!x;
        },
        "null": function _null(x) {
          return false;
        },
        BigNumber: function BigNumber(x) {
          return !x.isZero();
        },
        string: function string(x) {
          // try case insensitive
          var lcase = x.toLowerCase();

          if (lcase === 'true') {
            return true;
          } else if (lcase === 'false') {
            return false;
          } // test whether value is a valid number


          var num = Number(x);

          if (x !== '' && !isNaN(num)) {
            return !!num;
          }

          throw new Error('Cannot convert "' + x + '" to a boolean');
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, bool);
        }
      });
      return bool;
    });

    var name$l = 'bignumber';
    var dependencies$m = ['typed', 'BigNumber'];
    var createBignumber =
    /* #__PURE__ */
    factory(name$l, dependencies$m, function (_ref) {
      var typed = _ref.typed,
          BigNumber = _ref.BigNumber;

      /**
       * Create a BigNumber, which can store numbers with arbitrary precision.
       * When a matrix is provided, all elements will be converted to BigNumber.
       *
       * Syntax:
       *
       *    math.bignumber(x)
       *
       * Examples:
       *
       *    0.1 + 0.2                                  // returns number 0.30000000000000004
       *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
       *
       *
       *    7.2e500                                    // returns number Infinity
       *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
       *
       * See also:
       *
       *    boolean, complex, index, matrix, string, unit
       *
       * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
       *                                                    0 by default.
       * @returns {BigNumber} The created bignumber
       */
      var bignumber = typed('bignumber', {
        '': function _() {
          return new BigNumber(0);
        },
        number: function number(x) {
          // convert to string to prevent errors in case of >15 digits
          return new BigNumber(x + '');
        },
        string: function string(x) {
          return new BigNumber(x);
        },
        BigNumber: function BigNumber(x) {
          // we assume a BigNumber is immutable
          return x;
        },
        Fraction: function Fraction(x) {
          return new BigNumber(x.n).div(x.d).times(x.s);
        },
        "null": function _null(x) {
          return new BigNumber(0);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, bignumber);
        }
      });
      return bignumber;
    });

    var name$m = 'complex';
    var dependencies$n = ['typed', 'Complex'];
    var createComplex =
    /* #__PURE__ */
    factory(name$m, dependencies$n, function (_ref) {
      var typed = _ref.typed,
          Complex = _ref.Complex;

      /**
       * Create a complex value or convert a value to a complex value.
       *
       * Syntax:
       *
       *     math.complex()                           // creates a complex value with zero
       *                                              // as real and imaginary part.
       *     math.complex(re : number, im : string)   // creates a complex value with provided
       *                                              // values for real and imaginary part.
       *     math.complex(re : number)                // creates a complex value with provided
       *                                              // real value and zero imaginary part.
       *     math.complex(complex : Complex)          // clones the provided complex value.
       *     math.complex(arg : string)               // parses a string into a complex value.
       *     math.complex(array : Array)              // converts the elements of the array
       *                                              // or matrix element wise into a
       *                                              // complex value.
       *     math.complex({re: number, im: number})   // creates a complex value with provided
       *                                              // values for real an imaginary part.
       *     math.complex({r: number, phi: number})   // creates a complex value with provided
       *                                              // polar coordinates
       *
       * Examples:
       *
       *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
       *    a.re = 5                          // a = Complex 5 - 4i
       *    const i = a.im                    // Number -4
       *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
       *    const c = math.complex()          // Complex 0 + 0i
       *    const d = math.add(a, b)          // Complex 5 + 2i
       *
       * See also:
       *
       *    bignumber, boolean, index, matrix, number, string, unit
       *
       * @param {* | Array | Matrix} [args]
       *            Arguments specifying the real and imaginary part of the complex number
       * @return {Complex | Array | Matrix} Returns a complex value
       */
      var complex = typed('complex', {
        '': function _() {
          return Complex.ZERO;
        },
        number: function number(x) {
          return new Complex(x, 0);
        },
        'number, number': function numberNumber(re, im) {
          return new Complex(re, im);
        },
        // TODO: this signature should be redundant
        'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
          return new Complex(re.toNumber(), im.toNumber());
        },
        Fraction: function Fraction(x) {
          return new Complex(x.valueOf(), 0);
        },
        Complex: function Complex(x) {
          return x.clone();
        },
        string: function string(x) {
          return Complex(x); // for example '2 + 3i'
        },
        "null": function _null(x) {
          return Complex(0);
        },
        Object: function Object(x) {
          if ('re' in x && 'im' in x) {
            return new Complex(x.re, x.im);
          }

          if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
            return new Complex(x);
          }

          throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, complex);
        }
      });
      return complex;
    });

    var name$n = 'fraction';
    var dependencies$o = ['typed', 'Fraction'];
    var createFraction =
    /* #__PURE__ */
    factory(name$n, dependencies$o, function (_ref) {
      var typed = _ref.typed,
          Fraction = _ref.Fraction;

      /**
       * Create a fraction convert a value to a fraction.
       *
       * Syntax:
       *     math.fraction(numerator, denominator)
       *     math.fraction({n: numerator, d: denominator})
       *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
       *                                                   into fractions
       *
       * Examples:
       *
       *     math.fraction(1, 3)
       *     math.fraction('2/3')
       *     math.fraction({n: 2, d: 3})
       *     math.fraction([0.2, 0.25, 1.25])
       *
       * See also:
       *
       *    bignumber, number, string, unit
       *
       * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
       *            Arguments specifying the numerator and denominator of
       *            the fraction
       * @return {Fraction | Array | Matrix} Returns a fraction
       */
      var fraction = typed('fraction', {
        number: function number(x) {
          if (!isFinite(x) || isNaN(x)) {
            throw new Error(x + ' cannot be represented as a fraction');
          }

          return new Fraction(x);
        },
        string: function string(x) {
          return new Fraction(x);
        },
        'number, number': function numberNumber(numerator, denominator) {
          return new Fraction(numerator, denominator);
        },
        "null": function _null(x) {
          return new Fraction(0);
        },
        BigNumber: function BigNumber(x) {
          return new Fraction(x.toString());
        },
        Fraction: function Fraction(x) {
          return x; // fractions are immutable
        },
        Object: function Object(x) {
          return new Fraction(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, fraction);
        }
      });
      return fraction;
    });

    var name$o = 'matrix';
    var dependencies$p = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
    var createMatrix =
    /* #__PURE__ */
    factory(name$o, dependencies$p, function (_ref) {
      var typed = _ref.typed,
          Matrix = _ref.Matrix,
          DenseMatrix = _ref.DenseMatrix,
          SparseMatrix = _ref.SparseMatrix;

      /**
       * Create a Matrix. The function creates a new `math.Matrix` object from
       * an `Array`. A Matrix has utility functions to manipulate the data in the
       * matrix, like getting the size and getting or setting values in the matrix.
       * Supported storage formats are 'dense' and 'sparse'.
       *
       * Syntax:
       *
       *    math.matrix()                         // creates an empty matrix using default storage format (dense).
       *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
       *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
       *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
       *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
       *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
       *
       * Examples:
       *
       *    let m = math.matrix([[1, 2], [3, 4]])
       *    m.size()                        // Array [2, 2]
       *    m.resize([3, 2], 5)
       *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
       *    m.get([1, 0])                    // number 3
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, number, string, unit, sparse
       *
       * @param {Array | Matrix} [data]    A multi dimensional array
       * @param {string} [format]          The Matrix storage format
       *
       * @return {Matrix} The created matrix
       */
      return typed(name$o, {
        '': function _() {
          return _create([]);
        },
        string: function string(format) {
          return _create([], format);
        },
        'string, string': function stringString(format, datatype) {
          return _create([], format, datatype);
        },
        Array: function Array(data) {
          return _create(data);
        },
        Matrix: function Matrix(data) {
          return _create(data, data.storage());
        },
        'Array | Matrix, string': _create,
        'Array | Matrix, string, string': _create
      });
      /**
       * Create a new Matrix with given storage format
       * @param {Array} data
       * @param {string} [format]
       * @param {string} [datatype]
       * @returns {Matrix} Returns a new Matrix
       * @private
       */

      function _create(data, format, datatype) {
        // get storage format constructor
        if (format === 'dense' || format === 'default' || format === undefined) {
          return new DenseMatrix(data, datatype);
        }

        if (format === 'sparse') {
          return new SparseMatrix(data, datatype);
        }

        throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
      }
    });

    var name$p = 'splitUnit';
    var dependencies$q = ['typed'];
    var createSplitUnit =
    /* #__PURE__ */
    factory(name$p, dependencies$q, function (_ref) {
      var typed = _ref.typed;

      /**
       * Split a unit in an array of units whose sum is equal to the original unit.
       *
       * Syntax:
       *
       *     splitUnit(unit: Unit, parts: Array.<Unit>)
       *
       * Example:
       *
       *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
       *     // [ 3 feet, 3.3700787401575 inch ]
       *
       * See also:
       *
       *     unit
       *
       * @param {Array} [parts] An array of strings or valueless units.
       * @return {Array} An array of units.
       */
      return typed(name$p, {
        'Unit, Array': function UnitArray(unit, parts) {
          return unit.splitUnit(parts);
        }
      });
    });

    var name$q = 'unaryMinus';
    var dependencies$r = ['typed'];
    var createUnaryMinus =
    /* #__PURE__ */
    factory(name$q, dependencies$r, function (_ref) {
      var typed = _ref.typed;

      /**
       * Inverse the sign of a value, apply a unary minus operation.
       *
       * For matrices, the function is evaluated element wise. Boolean values and
       * strings will be converted to a number. For complex numbers, both real and
       * complex value are inverted.
       *
       * Syntax:
       *
       *    math.unaryMinus(x)
       *
       * Examples:
       *
       *    math.unaryMinus(3.5)      // returns -3.5
       *    math.unaryMinus(-4.2)     // returns 4.2
       *
       * See also:
       *
       *    add, subtract, unaryPlus
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
       */
      var unaryMinus = typed(name$q, {
        number: unaryMinusNumber,
        Complex: function Complex(x) {
          return x.neg();
        },
        BigNumber: function BigNumber(x) {
          return x.neg();
        },
        Fraction: function Fraction(x) {
          return x.neg();
        },
        Unit: function Unit(x) {
          var res = x.clone();
          res.value = unaryMinus(x.value);
          return res;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since unaryMinus(0) = 0
          return deepMap(x, unaryMinus);
        } // TODO: add support for string

      });
      return unaryMinus;
    });

    var name$r = 'unaryPlus';
    var dependencies$s = ['typed', 'config', 'BigNumber'];
    var createUnaryPlus =
    /* #__PURE__ */
    factory(name$r, dependencies$s, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          BigNumber = _ref.BigNumber;

      /**
       * Unary plus operation.
       * Boolean values and strings will be converted to a number, numeric values will be returned as is.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.unaryPlus(x)
       *
       * Examples:
       *
       *    math.unaryPlus(3.5)      // returns 3.5
       *    math.unaryPlus(1)     // returns 1
       *
       * See also:
       *
       *    unaryMinus, add, subtract
       *
       * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
       *            Input value
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Returns the input value when numeric, converts to a number when input is non-numeric.
       */
      var unaryPlus = typed(name$r, {
        number: unaryPlusNumber,
        Complex: function Complex(x) {
          return x; // complex numbers are immutable
        },
        BigNumber: function BigNumber(x) {
          return x; // bignumbers are immutable
        },
        Fraction: function Fraction(x) {
          return x; // fractions are immutable
        },
        Unit: function Unit(x) {
          return x.clone();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since unaryPlus(0) = 0
          return deepMap(x, unaryPlus);
        },
        'boolean | string': function booleanString(x) {
          // convert to a number or bignumber
          return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
        }
      });
      return unaryPlus;
    });

    var name$s = 'abs';
    var dependencies$t = ['typed'];
    var createAbs =
    /* #__PURE__ */
    factory(name$s, dependencies$t, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the absolute value of a number. For matrices, the function is
       * evaluated element wise.
       *
       * Syntax:
       *
       *    math.abs(x)
       *
       * Examples:
       *
       *    math.abs(3.5)                // returns number 3.5
       *    math.abs(-4.2)               // returns number 4.2
       *
       *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
       *
       * See also:
       *
       *    sign
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            A number or matrix for which to get the absolute value
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
       *            Absolute value of `x`
       */
      var abs = typed(name$s, {
        number: absNumber,
        Complex: function Complex(x) {
          return x.abs();
        },
        BigNumber: function BigNumber(x) {
          return x.abs();
        },
        Fraction: function Fraction(x) {
          return x.abs();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since abs(0) = 0
          return deepMap(x, abs);
        },
        Unit: function Unit(x) {
          return x.abs();
        }
      });
      return abs;
    });

    var name$t = 'apply';
    var dependencies$u = ['typed', 'isInteger'];
    var createApply =
    /* #__PURE__ */
    factory(name$t, dependencies$u, function (_ref) {
      var typed = _ref.typed,
          isInteger = _ref.isInteger;

      /**
       * Apply a function that maps an array to a scalar
       * along a given axis of a matrix or array.
       * Returns a new matrix or array with one less dimension than the input.
       *
       * Syntax:
       *
       *     math.apply(A, dim, callback)
       *
       * Where:
       *
       * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
       *
       * Examples:
       *
       *    const A = [[1, 2], [3, 4]]
       *    const sum = math.sum
       *
       *    math.apply(A, 0, sum)             // returns [4, 6]
       *    math.apply(A, 1, sum)             // returns [3, 7]
       *
       * See also:
       *
       *    map, filter, forEach
       *
       * @param {Array | Matrix} array   The input Matrix
       * @param {number} dim             The dimension along which the callback is applied
       * @param {Function} callback      The callback function that is applied. This Function
       *                                 should take an array or 1-d matrix as an input and
       *                                 return a number.
       * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
       */
      var apply = typed(name$t, {
        'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

          if (dim < 0 || dim >= size.length) {
            throw new IndexError(dim, size.length);
          }

          if (isMatrix(mat)) {
            return mat.create(_apply(mat.valueOf(), dim, callback));
          } else {
            return _apply(mat, dim, callback);
          }
        }
      });
      return apply;
    });
    /**
     * Recursively reduce a matrix
     * @param {Array} mat
     * @param {number} dim
     * @param {Function} callback
     * @returns {Array} ret
     * @private
     */

    function _apply(mat, dim, callback) {
      var i, ret, tran;

      if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
          return callback(mat);
        } else {
          tran = _switch$1(mat);
          ret = [];

          for (i = 0; i < tran.length; i++) {
            ret[i] = _apply(tran[i], dim - 1, callback);
          }

          return ret;
        }
      } else {
        ret = [];

        for (i = 0; i < mat.length; i++) {
          ret[i] = _apply(mat[i], dim - 1, callback);
        }

        return ret;
      }
    }
    /**
     * Transpose a matrix
     * @param {Array} mat
     * @returns {Array} ret
     * @private
     */


    function _switch$1(mat) {
      var I = mat.length;
      var J = mat[0].length;
      var i, j;
      var ret = [];

      for (j = 0; j < J; j++) {
        var tmp = [];

        for (i = 0; i < I; i++) {
          tmp.push(mat[i][j]);
        }

        ret.push(tmp);
      }

      return ret;
    }

    var name$u = 'addScalar';
    var dependencies$v = ['typed'];
    var createAddScalar =
    /* #__PURE__ */
    factory(name$u, dependencies$v, function (_ref) {
      var typed = _ref.typed;

      /**
       * Add two scalar values, `x + y`.
       * This function is meant for internal use: it is used by the public function
       * `add`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
       * @private
       */
      var addScalar = typed(name$u, {
        'number, number': addNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.add(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.plus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.add(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
          if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
          if (!x.equalBase(y)) throw new Error('Units do not match');
          var res = x.clone();
          res.value = addScalar(res.value, y.value);
          res.fixPrefix = false;
          return res;
        }
      });
      return addScalar;
    });

    var name$v = 'cbrt';
    var dependencies$w = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
    var createCbrt =
    /* #__PURE__ */
    factory(name$v, dependencies$w, function (_ref) {
      var config = _ref.config,
          typed = _ref.typed,
          isNegative = _ref.isNegative,
          unaryMinus = _ref.unaryMinus,
          matrix = _ref.matrix,
          Complex = _ref.Complex,
          BigNumber = _ref.BigNumber,
          Fraction = _ref.Fraction;

      /**
       * Calculate the cubic root of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cbrt(x)
       *    math.cbrt(x, allRoots)
       *
       * Examples:
       *
       *    math.cbrt(27)                  // returns 3
       *    math.cube(3)                   // returns 27
       *    math.cbrt(-64)                 // returns -4
       *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
       *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
       *
       *    const x = math.complex('8i')
       *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
       *    math.cbrt(x, true)             // returns Matrix [
       *                                    //    1.7320508075689 + i
       *                                    //   -1.7320508075689 + i
       *                                    //   -2i
       *                                    // ]
       *
       * See also:
       *
       *    square, sqrt, cube
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
       *            Value for which to calculate the cubic root.
       * @param {boolean} [allRoots]  Optional, false by default. Only applicable
       *            when `x` is a number or complex number. If true, all complex
       *            roots are returned, if false (default) the principal root is
       *            returned.
       * @return {number | BigNumber | Complex | Unit | Array | Matrix}
       *            Returns the cubic root of `x`
       */
      var cbrt = typed(name$v, {
        number: cbrtNumber,
        // note: signature 'number, boolean' is also supported,
        //       created by typed as it knows how to convert number to Complex
        Complex: _cbrtComplex,
        'Complex, boolean': _cbrtComplex,
        BigNumber: function BigNumber(x) {
          return x.cbrt();
        },
        Unit: _cbrtUnit,
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since cbrt(0) = 0
          return deepMap(x, cbrt);
        }
      });
      /**
       * Calculate the cubic root for a complex number
       * @param {Complex} x
       * @param {boolean} [allRoots]   If true, the function will return an array
       *                               with all three roots. If false or undefined,
       *                               the principal root is returned.
       * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
       * @private
       */

      function _cbrtComplex(x, allRoots) {
        // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
        var arg3 = x.arg() / 3;
        var abs = x.abs(); // principal root:

        var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());

        if (allRoots) {
          var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
          return config.matrix === 'Array' ? all : matrix(all);
        } else {
          return principal;
        }
      }
      /**
       * Calculate the cubic root for a Unit
       * @param {Unit} x
       * @return {Unit} Returns the cubic root of x
       * @private
       */


      function _cbrtUnit(x) {
        if (x.value && isComplex(x.value)) {
          var result = x.clone();
          result.value = 1.0;
          result = result.pow(1.0 / 3); // Compute the units

          result.value = _cbrtComplex(x.value); // Compute the value

          return result;
        } else {
          var negate = isNegative(x.value);

          if (negate) {
            x.value = unaryMinus(x.value);
          } // TODO: create a helper function for this


          var third;

          if (isBigNumber(x.value)) {
            third = new BigNumber(1).div(3);
          } else if (isFraction(x.value)) {
            third = new Fraction(1, 3);
          } else {
            third = 1 / 3;
          }

          var _result = x.pow(third);

          if (negate) {
            _result.value = unaryMinus(_result.value);
          }

          return _result;
        }
      }

      return cbrt;
    });

    var name$w = 'ceil';
    var dependencies$x = ['typed', 'config', 'round'];
    var createCeil =
    /* #__PURE__ */
    factory(name$w, dependencies$x, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          round = _ref.round;

      /**
       * Round a value towards plus infinity
       * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.ceil(x)
       *
       * Examples:
       *
       *    math.ceil(3.2)               // returns number 4
       *    math.ceil(3.8)               // returns number 4
       *    math.ceil(-4.2)              // returns number -4
       *    math.ceil(-4.7)              // returns number -4
       *
       *    const c = math.complex(3.2, -2.7)
       *    math.ceil(c)                 // returns Complex 4 - 2i
       *
       *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
       *
       * See also:
       *
       *    floor, fix, round
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */
      var ceil = typed('ceil', {
        number: function number(x) {
          if (nearlyEqual(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return ceilNumber(x);
          }
        },
        Complex: function Complex(x) {
          return x.ceil();
        },
        BigNumber: function BigNumber(x) {
          if (nearlyEqual$1(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return x.ceil();
          }
        },
        Fraction: function Fraction(x) {
          return x.ceil();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since ceil(0) = 0
          return deepMap(x, ceil);
        }
      });
      return ceil;
    });

    var name$x = 'cube';
    var dependencies$y = ['typed'];
    var createCube =
    /* #__PURE__ */
    factory(name$x, dependencies$y, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the cube of a value, `x * x * x`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cube(x)
       *
       * Examples:
       *
       *    math.cube(2)            // returns number 8
       *    math.pow(2, 3)          // returns number 8
       *    math.cube(4)            // returns number 64
       *    4 * 4 * 4               // returns number 64
       *
       *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
       *
       * See also:
       *
       *    multiply, square, pow, cbrt
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
       */
      var cube = typed(name$x, {
        number: cubeNumber,
        Complex: function Complex(x) {
          return x.mul(x).mul(x); // Is faster than pow(x, 3)
        },
        BigNumber: function BigNumber(x) {
          return x.times(x).times(x);
        },
        Fraction: function Fraction(x) {
          return x.pow(3); // Is faster than mul()mul()mul()
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since cube(0) = 0
          return deepMap(x, cube);
        },
        Unit: function Unit(x) {
          return x.pow(3);
        }
      });
      return cube;
    });

    var name$y = 'exp';
    var dependencies$z = ['typed'];
    var createExp =
    /* #__PURE__ */
    factory(name$y, dependencies$z, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the exponent of a value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.exp(x)
       *
       * Examples:
       *
       *    math.exp(2)                  // returns number 7.3890560989306495
       *    math.pow(math.e, 2)          // returns number 7.3890560989306495
       *    math.log(math.exp(2))        // returns number 2
       *
       *    math.exp([1, 2, 3])
       *    // returns Array [
       *    //   2.718281828459045,
       *    //   7.3890560989306495,
       *    //   20.085536923187668
       *    // ]
       *
       * See also:
       *
       *    expm1, log, pow
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
       * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
       */
      var exp = typed(name$y, {
        number: expNumber,
        Complex: function Complex(x) {
          return x.exp();
        },
        BigNumber: function BigNumber(x) {
          return x.exp();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // TODO: exp(sparse) should return a dense matrix since exp(0)==1
          return deepMap(x, exp);
        }
      });
      return exp;
    });

    var name$z = 'expm1';
    var dependencies$A = ['typed', 'Complex'];
    var createExpm1 =
    /* #__PURE__ */
    factory(name$z, dependencies$A, function (_ref) {
      var typed = _ref.typed,
          _Complex = _ref.Complex;

      /**
       * Calculate the value of subtracting 1 from the exponential value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.expm1(x)
       *
       * Examples:
       *
       *    math.expm1(2)                      // returns number 6.38905609893065
       *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
       *    math.log(math.expm1(2) + 1)        // returns number 2
       *
       *    math.expm1([1, 2, 3])
       *    // returns Array [
       *    //   1.718281828459045,
       *    //   6.3890560989306495,
       *    //   19.085536923187668
       *    // ]
       *
       * See also:
       *
       *    exp, log, pow
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
       * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
       */
      var expm1 = typed(name$z, {
        number: expm1Number,
        Complex: function Complex(x) {
          var r = Math.exp(x.re);
          return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
        },
        BigNumber: function BigNumber(x) {
          return x.exp().minus(1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, expm1);
        }
      });
      return expm1;
    });

    var name$A = 'fix';
    var dependencies$B = ['typed', 'Complex', 'ceil', 'floor'];
    var createFix =
    /* #__PURE__ */
    factory(name$A, dependencies$B, function (_ref) {
      var typed = _ref.typed,
          _Complex = _ref.Complex,
          ceil = _ref.ceil,
          floor = _ref.floor;

      /**
       * Round a value towards zero.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.fix(x)
       *
       * Examples:
       *
       *    math.fix(3.2)                // returns number 3
       *    math.fix(3.8)                // returns number 3
       *    math.fix(-4.2)               // returns number -4
       *    math.fix(-4.7)               // returns number -4
       *
       *    const c = math.complex(3.2, -2.7)
       *    math.fix(c)                  // returns Complex 3 - 2i
       *
       *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]
       *
       * See also:
       *
       *    ceil, floor, round
       *
       * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
       */
      var fix = typed('fix', {
        number: function number(x) {
          return x > 0 ? floor(x) : ceil(x);
        },
        Complex: function Complex(x) {
          return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
        },
        BigNumber: function BigNumber(x) {
          return x.isNegative() ? ceil(x) : floor(x);
        },
        Fraction: function Fraction(x) {
          return x.s < 0 ? x.ceil() : x.floor();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since fix(0) = 0
          return deepMap(x, fix);
        }
      });
      return fix;
    });

    var name$B = 'floor';
    var dependencies$C = ['typed', 'config', 'round'];
    var createFloor =
    /* #__PURE__ */
    factory(name$B, dependencies$C, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          round = _ref.round;

      /**
       * Round a value towards minus infinity.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.floor(x)
       *
       * Examples:
       *
       *    math.floor(3.2)              // returns number 3
       *    math.floor(3.8)              // returns number 3
       *    math.floor(-4.2)             // returns number -5
       *    math.floor(-4.7)             // returns number -5
       *
       *    const c = math.complex(3.2, -2.7)
       *    math.floor(c)                // returns Complex 3 - 3i
       *
       *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]
       *
       * See also:
       *
       *    ceil, fix, round
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */
      var floor = typed('floor', {
        number: function number(x) {
          if (nearlyEqual(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return Math.floor(x);
          }
        },
        Complex: function Complex(x) {
          return x.floor();
        },
        BigNumber: function BigNumber(x) {
          if (nearlyEqual$1(x, round(x), config.epsilon)) {
            return round(x);
          } else {
            return x.floor();
          }
        },
        Fraction: function Fraction(x) {
          return x.floor();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since floor(0) = 0
          return deepMap(x, floor);
        }
      });
      return floor;
    });

    var name$C = 'algorithm01';
    var dependencies$D = ['typed'];
    var createAlgorithm01 =
    /* #__PURE__ */
    factory(name$C, dependencies$D, function (_ref) {
      var typed = _ref.typed;

      /**
       * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
       * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  Dij          ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // process data types

        var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

        var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

        var i, j; // result (DenseMatrix)

        var cdata = []; // initialize c

        for (i = 0; i < rows; i++) {
          cdata[i] = [];
        } // workspace


        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns in b

        for (j = 0; j < columns; j++) {
          // column mark
          var mark = j + 1; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // update workspace

            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

            w[i] = mark;
          } // loop rows


          for (i = 0; i < rows; i++) {
            // check row is in workspace
            if (w[i] === mark) {
              // c[i][j] was already calculated
              cdata[i][j] = x[i];
            } else {
              // item does not exist in S
              cdata[i][j] = adata[i][j];
            }
          }
        } // return dense matrix


        return denseMatrix.createDenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$D = 'algorithm04';
    var dependencies$E = ['typed', 'equalScalar'];
    var createAlgorithm04 =
    /* #__PURE__ */
    factory(name$D, dependencies$E, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
       *          └  B(i,j)       ; B(i,j) !== 0
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm04(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspace

        var xa = avalues && bvalues ? [] : undefined;
        var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // vars

        var i, j, k, k0, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop A(:,j)

          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // update c

            cindex.push(i); // update workspace

            wa[i] = mark; // check we need to process values

            if (xa) {
              xa[i] = avalues[k];
            }
          } // loop B(:,j)


          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // check row exists in A

            if (wa[i] === mark) {
              // update record in xa @ i
              if (xa) {
                // invoke callback
                var v = cf(xa[i], bvalues[k]); // check for zero

                if (!eq(v, zero)) {
                  // update workspace
                  xa[i] = v;
                } else {
                  // remove mark (index will be removed later)
                  wa[i] = null;
                }
              }
            } else {
              // update c
              cindex.push(i); // update workspace

              wb[i] = mark; // check we need to process values

              if (xb) {
                xb[i] = bvalues[k];
              }
            }
          } // check we need to process values (non pattern matrix)


          if (xa && xb) {
            // initialize first index in j
            k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              i = cindex[k]; // check workspace has value @ i

              if (wa[i] === mark) {
                // push value (Aij != 0 || (Aij != 0 && Bij != 0))
                cvalues[k] = xa[i]; // increment pointer

                k++;
              } else if (wb[i] === mark) {
                // push value (bij != 0)
                cvalues[k] = xb[i]; // increment pointer

                k++;
              } else {
                // remove index @ k
                cindex.splice(k, 1);
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$E = 'algorithm10';
    var dependencies$F = ['typed', 'DenseMatrix'];
    var createAlgorithm10 =
    /* #__PURE__ */
    factory(name$E, dependencies$F, function (_ref) {
      var typed = _ref.typed,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  b          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm10(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cdata = []; // workspaces

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var r = aindex[k]; // update workspace

            x[r] = avalues[k];
            w[r] = mark;
          } // loop rows


          for (var i = 0; i < rows; i++) {
            // initialize C on first column
            if (j === 0) {
              // create row array
              cdata[i] = [];
            } // check sparse matrix has a value @ i,j


            if (w[i] === mark) {
              // invoke callback, update C
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              // dense matrix value @ i, j
              cdata[i][j] = b;
            }
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$F = 'algorithm13';
    var dependencies$G = ['typed'];
    var createAlgorithm13 =
    /* #__PURE__ */
    factory(name$F, dependencies$G, function (_ref) {
      var typed = _ref.typed;

      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, Bij..z)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Matrix}   b                 The DenseMatrix instance (B)
       * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
       */
      return function algorithm13(a, b, callback) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b arrays

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // c arrays

        var csize = []; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // validate each one of the dimension sizes


        for (var s = 0; s < asize.length; s++) {
          // must match
          if (asize[s] !== bsize[s]) {
            throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
          } // update dimension in c


          csize[s] = asize[s];
        } // datatype


        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // callback

          cf = typed.find(callback, [dt, dt]);
        } // populate cdata, iterate through dimensions


        var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

        return a.createDenseMatrix({
          data: cdata,
          size: csize,
          datatype: dt
        });
      }; // recursive function

      function _iterate(f, level, s, n, av, bv) {
        // initialize array for this level
        var cv = []; // check we reach the last level

        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = f(av[i], bv[i]);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
          }
        }

        return cv;
      }
    });

    var name$G = 'algorithm14';
    var dependencies$H = ['typed'];
    var createAlgorithm14 =
    /* #__PURE__ */
    factory(name$G, dependencies$H, function (_ref) {
      var typed = _ref.typed;

      /**
       * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
       * Callback function invoked MxN times.
       *
       * C(i,j,...z) = f(Aij..z, b)
       *
       * @param {Matrix}   a                 The DenseMatrix instance (A)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij..z,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
       */
      return function algorithm14(a, b, callback, inverse) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // populate cdata, iterate through dimensions


        var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

        return a.createDenseMatrix({
          data: cdata,
          size: clone$3(asize),
          datatype: dt
        });
      }; // recursive function

      function _iterate(f, level, s, n, av, bv, inverse) {
        // initialize array for this level
        var cv = []; // check we reach the last level

        if (level === s.length - 1) {
          // loop arrays in last level
          for (var i = 0; i < n; i++) {
            // invoke callback and store value
            cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
          }
        } else {
          // iterate current level
          for (var j = 0; j < n; j++) {
            // iterate next level
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
          }
        }

        return cv;
      }
    });

    var name$H = 'gcd';
    var dependencies$I = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
    var createGcd =
    /* #__PURE__ */
    factory(name$H, dependencies$I, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          BigNumber = _ref.BigNumber,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm04 = createAlgorithm04({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculate the greatest common divisor for two or more values or arrays.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.gcd(a, b)
       *    math.gcd(a, b, c, ...)
       *
       * Examples:
       *
       *    math.gcd(8, 12)              // returns 4
       *    math.gcd(-4, 6)              // returns 2
       *    math.gcd(25, 15, -10)        // returns 5
       *
       *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
       *
       * See also:
       *
       *    lcm, xgcd
       *
       * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
       * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
       */

      var gcd = typed(name$H, {
        'number, number': gcdNumber,
        'BigNumber, BigNumber': _gcdBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.gcd(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, gcd);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, gcd, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, gcd, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, gcd);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return gcd(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return gcd(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return gcd(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm10(x, y, gcd, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, gcd, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          return algorithm10(y, x, gcd, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, gcd, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, gcd, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, gcd, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
          var res = gcd(a, b);

          for (var i = 0; i < args.length; i++) {
            res = gcd(res, args[i]);
          }

          return res;
        }
      });
      return gcd;
      /**
       * Calculate gcd for BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @returns {BigNumber} Returns greatest common denominator of a and b
       * @private
       */

      function _gcdBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function gcd must be integer numbers');
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm


        var zero = new BigNumber(0);

        while (!b.isZero()) {
          var r = a.mod(b);
          a = b;
          b = r;
        }

        return a.lt(zero) ? a.neg() : a;
      }
    });

    var name$I = 'algorithm02';
    var dependencies$J = ['typed', 'equalScalar'];
    var createAlgorithm02 =
    /* #__PURE__ */
    factory(name$I, dependencies$J, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
       * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result (SparseMatrix)


        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns in b

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = bindex[k]; // update C(i,j)

            var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

            if (!eq(cij, zero)) {
              // push i & v
              cindex.push(i);
              cvalues.push(cij);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return sparseMatrix.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$J = 'algorithm06';
    var dependencies$K = ['typed', 'equalScalar'];
    var createAlgorithm06 =
    /* #__PURE__ */
    factory(name$J, dependencies$K, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm06(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var w = []; // marks indicating value in a given row has been updated

        var u = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // scatter the values of A(:,j) into workspace

          scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace

          scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)

          if (x) {
            // initialize first index in j
            var k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

              if (u[i] === mark) {
                // value @ i
                var v = x[i]; // check for zero value

                if (!eq(v, zero)) {
                  // push value
                  cvalues.push(v); // increment pointer

                  k++;
                } else {
                  // remove value @ i, do not increment pointer
                  cindex.splice(k, 1);
                }
              } else {
                // remove value @ i, do not increment pointer
                cindex.splice(k, 1);
              }
            }
          } else {
            // initialize first index in j
            var p = cptr[j]; // loop index in j

            while (p < cindex.length) {
              // row
              var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

              if (u[r] !== mark) {
                // remove value @ i, do not increment pointer
                cindex.splice(p, 1);
              } else {
                // increment pointer
                p++;
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$K = 'algorithm11';
    var dependencies$L = ['typed', 'equalScalar'];
    var createAlgorithm11 =
    /* #__PURE__ */
    factory(name$K, dependencies$L, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked NZ times (number of nonzero items in S).
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  0          ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm11(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // initialize ptr
          cptr[j] = cindex.length; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = aindex[k]; // invoke callback

            var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

            if (!eq(v, zero)) {
              // push index & value
              cindex.push(i);
              cvalues.push(v);
            }
          }
        } // update ptr


        cptr[columns] = cindex.length; // return sparse matrix

        return s.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$L = 'lcm';
    var dependencies$M = ['typed', 'matrix', 'equalScalar'];
    var createLcm =
    /* #__PURE__ */
    factory(name$L, dependencies$M, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculate the least common multiple for two or more values or arrays.
       *
       * lcm is defined as:
       *
       *     lcm(a, b) = abs(a * b) / gcd(a, b)
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.lcm(a, b)
       *    math.lcm(a, b, c, ...)
       *
       * Examples:
       *
       *    math.lcm(4, 6)               // returns 12
       *    math.lcm(6, 21)              // returns 42
       *    math.lcm(6, 21, 5)           // returns 210
       *
       *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
       *
       * See also:
       *
       *    gcd, xgcd
       *
       * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
       * @return {number | BigNumber | Array | Matrix}                           The least common multiple
       */

      var lcm = typed(name$L, {
        'number, number': lcmNumber,
        'BigNumber, BigNumber': _lcmBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.lcm(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, lcm);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, lcm, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, lcm, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, lcm);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return lcm(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return lcm(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return lcm(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, lcm, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, lcm, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          return algorithm11(y, x, lcm, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, lcm, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, lcm, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, lcm, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
          var res = lcm(a, b);

          for (var i = 0; i < args.length; i++) {
            res = lcm(res, args[i]);
          }

          return res;
        }
      });
      return lcm;
      /**
       * Calculate lcm for two BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @returns {BigNumber} Returns the least common multiple of a and b
       * @private
       */

      function _lcmBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function lcm must be integer numbers');
        }

        if (a.isZero()) {
          return a;
        }

        if (b.isZero()) {
          return b;
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm
        // evaluate lcm here inline to reduce overhead


        var prod = a.times(b);

        while (!b.isZero()) {
          var t = b;
          b = a.mod(t);
          a = t;
        }

        return prod.div(a).abs();
      }
    });

    var name$M = 'log10';
    var dependencies$N = ['typed', 'config', 'Complex'];
    var createLog10 =
    /* #__PURE__ */
    factory(name$M, dependencies$N, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          _Complex = _ref.Complex;

      /**
       * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log10(x)
       *
       * Examples:
       *
       *    math.log10(0.00001)            // returns -5
       *    math.log10(10000)              // returns 4
       *    math.log(10000) / math.log(10) // returns 4
       *    math.pow(10, 4)                // returns 10000
       *
       * See also:
       *
       *    exp, log, log1p, log2
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the 10-base logarithm of `x`
       */
      var log10 = typed(name$M, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return log10Number(x);
          } else {
            // negative value -> complex value computation
            return new _Complex(x, 0).log().div(Math.LN10);
          }
        },
        Complex: function Complex(x) {
          return new _Complex(x).log().div(Math.LN10);
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.log();
          } else {
            // downgrade to number, return Complex valued result
            return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, log10);
        }
      });
      return log10;
    });

    var name$N = 'log2';
    var dependencies$O = ['typed', 'config', 'Complex'];
    var createLog2 =
    /* #__PURE__ */
    factory(name$N, dependencies$O, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex;

      /**
       * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log2(x)
       *
       * Examples:
       *
       *    math.log2(0.03125)           // returns -5
       *    math.log2(16)                // returns 4
       *    math.log2(16) / math.log2(2) // returns 4
       *    math.pow(2, 4)               // returns 16
       *
       * See also:
       *
       *    exp, log, log1p, log10
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the 2-base logarithm of `x`
       */
      var log2 = typed(name$N, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return log2Number(x);
          } else {
            // negative value -> complex value computation
            return _log2Complex(new Complex(x, 0));
          }
        },
        Complex: _log2Complex,
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.log(2);
          } else {
            // downgrade to number, return Complex valued result
            return _log2Complex(new Complex(x.toNumber(), 0));
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, log2);
        }
      });
      /**
       * Calculate log2 for a complex value
       * @param {Complex} x
       * @returns {Complex}
       * @private
       */

      function _log2Complex(x) {
        var newX = Math.sqrt(x.re * x.re + x.im * x.im);
        return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
      }

      return log2;
    });

    var name$O = 'algorithm03';
    var dependencies$P = ['typed'];
    var createAlgorithm03 =
    /* #__PURE__ */
    factory(name$O, dependencies$P, function (_ref) {
      var typed = _ref.typed;

      /**
       * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
       * Callback function invoked M*N times.
       *
       *
       *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  f(Dij, 0)    ; otherwise
       *
       *
       * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
       * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
       * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
       */
      return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays

        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!bvalues) {
          throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result (DenseMatrix)


        var cdata = []; // initialize dense matrix

        for (var z = 0; z < rows; z++) {
          // initialize row
          cdata[z] = [];
        } // workspace


        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns in b

        for (var j = 0; j < columns; j++) {
          // column mark
          var mark = j + 1; // values in column j

          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            var i = bindex[k]; // update workspace

            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            w[i] = mark;
          } // process workspace


          for (var y = 0; y < rows; y++) {
            // check we have a calculated value for current row
            if (w[y] === mark) {
              // use calculated value
              cdata[y][j] = x[y];
            } else {
              // calculate value
              cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
            }
          }
        } // return dense matrix


        return denseMatrix.createDenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$P = 'algorithm05';
    var dependencies$Q = ['typed', 'equalScalar'];
    var createAlgorithm05 =
    /* #__PURE__ */
    factory(name$P, dependencies$Q, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm05(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var xa = cvalues ? [] : undefined;
        var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // vars

        var i, j, k, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop values A(:,j)

          for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
            // row
            i = aindex[k]; // push index

            cindex.push(i); // update workspace

            wa[i] = mark; // check we need to process values

            if (xa) {
              xa[i] = avalues[k];
            }
          } // loop values B(:,j)


          for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
            // row
            i = bindex[k]; // check row existed in A

            if (wa[i] !== mark) {
              // push index
              cindex.push(i);
            } // update workspace


            wb[i] = mark; // check we need to process values

            if (xb) {
              xb[i] = bvalues[k];
            }
          } // check we need to process values (non pattern matrix)


          if (cvalues) {
            // initialize first index in j
            k = cptr[j]; // loop index in j

            while (k < cindex.length) {
              // row
              i = cindex[k]; // marks

              var wai = wa[i];
              var wbi = wb[i]; // check Aij or Bij are nonzero

              if (wai === mark || wbi === mark) {
                // matrix values @ i,j
                var va = wai === mark ? xa[i] : zero;
                var vb = wbi === mark ? xb[i] : zero; // Cij

                var vc = cf(va, vb); // check for zero

                if (!eq(vc, zero)) {
                  // push value
                  cvalues.push(vc); // increment pointer

                  k++;
                } else {
                  // remove value @ i, do not increment pointer
                  cindex.splice(k, 1);
                }
              }
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$Q = 'algorithm12';
    var dependencies$R = ['typed', 'DenseMatrix'];
    var createAlgorithm12 =
    /* #__PURE__ */
    factory(name$Q, dependencies$R, function (_ref) {
      var typed = _ref.typed,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
       * Callback function invoked MxN times.
       *
       *
       *          ┌  f(Sij, b)  ; S(i,j) !== 0
       * C(i,j) = ┤
       *          └  f(0, b)    ; otherwise
       *
       *
       * @param {Matrix}   s                 The SparseMatrix instance (S)
       * @param {Scalar}   b                 The Scalar value
       * @param {Function} callback          The f(Aij,b) operation to invoke
       * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
       */
      return function algorithm12(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

        if (!avalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string') {
          // datatype
          dt = adt; // convert b to the same datatype

          b = typed.convert(b, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cdata = []; // workspaces

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // loop columns

        for (var j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // values in j

          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            var r = aindex[k]; // update workspace

            x[r] = avalues[k];
            w[r] = mark;
          } // loop rows


          for (var i = 0; i < rows; i++) {
            // initialize C on first column
            if (j === 0) {
              // create row array
              cdata[i] = [];
            } // check sparse matrix has a value @ i,j


            if (w[i] === mark) {
              // invoke callback, update C
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              // dense matrix value @ i, j
              cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
            }
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$R = 'mod';
    var dependencies$S = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createMod =
    /* #__PURE__ */
    factory(name$R, dependencies$S, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm05 = createAlgorithm05({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculates the modulus, the remainder of an integer division.
       *
       * For matrices, the function is evaluated element wise.
       *
       * The modulus is defined as:
       *
       *     x - y * floor(x / y)
       *
       * See https://en.wikipedia.org/wiki/Modulo_operation.
       *
       * Syntax:
       *
       *    math.mod(x, y)
       *
       * Examples:
       *
       *    math.mod(8, 3)                // returns 2
       *    math.mod(11, 2)               // returns 1
       *
       *    function isOdd(x) {
       *      return math.mod(x, 2) != 0
       *    }
       *
       *    isOdd(2)                      // returns false
       *    isOdd(3)                      // returns true
       *
       * See also:
       *
       *    divide
       *
       * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
       * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
       * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
       */

      var mod = typed(name$R, {
        'number, number': modNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return y.isZero() ? x : x.mod(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.mod(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, mod, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, mod, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, mod, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, mod);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return mod(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return mod(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return mod(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, mod, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, mod, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, mod, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, mod, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, mod, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, mod, true).valueOf();
        }
      });
      return mod;
    });

    var name$S = 'multiplyScalar';
    var dependencies$T = ['typed'];
    var createMultiplyScalar =
    /* #__PURE__ */
    factory(name$S, dependencies$T, function (_ref) {
      var typed = _ref.typed;

      /**
       * Multiply two scalar values, `x * y`.
       * This function is meant for internal use: it is used by the public function
       * `multiply`
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
       * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
       * @private
       */
      var multiplyScalar = typed('multiplyScalar', {
        'number, number': multiplyNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.mul(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.times(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.mul(y);
        },
        'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
          var res = y.clone();
          res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
          return res;
        },
        'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
          var res = x.clone();
          res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
          return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return x.multiply(y);
        }
      });
      return multiplyScalar;
    });

    var name$T = 'multiply';
    var dependencies$U = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar'];
    var createMultiply =
    /* #__PURE__ */
    factory(name$T, dependencies$U, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          addScalar = _ref.addScalar,
          multiplyScalar = _ref.multiplyScalar,
          equalScalar = _ref.equalScalar;
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Multiply two or more values, `x * y`.
       * For matrices, the matrix product is calculated.
       *
       * Syntax:
       *
       *    math.multiply(x, y)
       *    math.multiply(x, y, z, ...)
       *
       * Examples:
       *
       *    math.multiply(4, 5.2)        // returns number 20.8
       *    math.multiply(2, 3, 4)       // returns number 24
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(4, 1)
       *    math.multiply(a, b)          // returns Complex 5 + 14i
       *
       *    const c = [[1, 2], [4, 3]]
       *    const d = [[1, 2, 3], [3, -4, 7]]
       *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
       *
       *    const e = math.unit('2.1 km')
       *    math.multiply(3, e)          // returns Unit 6.3 km
       *
       * See also:
       *
       *    divide, prod, cross, dot
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
       */

      var multiply = typed(name$T, extend$1({
        // we extend the signatures of multiplyScalar with signatures dealing with matrices
        'Array, Array': function ArrayArray(x, y) {
          // check dimensions
          _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation


          var m = multiply(matrix(x), matrix(y)); // return array or scalar

          return isMatrix(m) ? m.valueOf() : m;
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          // dimensions
          var xsize = x.size();
          var ysize = y.size(); // check dimensions

          _validateMatrixDimensions(xsize, ysize); // process dimensions


          if (xsize.length === 1) {
            // process y dimensions
            if (ysize.length === 1) {
              // Vector * Vector
              return _multiplyVectorVector(x, y, xsize[0]);
            } // Vector * Matrix


            return _multiplyVectorMatrix(x, y);
          } // process y dimensions


          if (ysize.length === 1) {
            // Matrix * Vector
            return _multiplyMatrixVector(x, y);
          } // Matrix * Matrix


          return _multiplyMatrixMatrix(x, y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use Matrix * Matrix implementation
          return multiply(x, matrix(y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use Matrix * Matrix implementation
          return multiply(matrix(x, y.storage()), y);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        },
        'any, any': multiplyScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
          var result = multiply(x, y);

          for (var i = 0; i < rest.length; i++) {
            result = multiply(result, rest[i]);
          }

          return result;
        }
      }, multiplyScalar.signatures));

      function _validateMatrixDimensions(size1, size2) {
        // check left operand dimensions
        switch (size1.length) {
          case 1:
            // check size2
            switch (size2.length) {
              case 1:
                // Vector x Vector
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
                }

                break;

              case 2:
                // Vector x Matrix
                if (size1[0] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
                }

                break;

              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }

            break;

          case 2:
            // check size2
            switch (size2.length) {
              case 1:
                // Matrix x Vector
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
                }

                break;

              case 2:
                // Matrix x Matrix
                if (size1[1] !== size2[0]) {
                  // throw error
                  throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
                }

                break;

              default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
        }
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (N)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {number}             Scalar value
       */


      function _multiplyVectorVector(a, b, n) {
        // check empty vector
        if (n === 0) {
          throw new Error('Cannot multiply two empty vectors');
        } // a dense


        var adata = a._data;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bdt = b._datatype; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result (do not initialize it with zero)


        var c = mf(adata[0], bdata[0]); // loop data

        for (var i = 1; i < n; i++) {
          // multiply and accumulate
          c = af(c, mf(adata[i], bdata[i]));
        }

        return c;
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Matrix         (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */


      function _multiplyVectorMatrix(a, b) {
        // process storage
        if (b.storage() !== 'dense') {
          throw new Error('Support for SparseMatrix not implemented');
        }

        return _multiplyVectorDenseMatrix(a, b);
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Dense Vector   (M)
       * @param {Matrix} b            Dense Matrix   (MxN)
       *
       * @return {Matrix}             Dense Vector   (N)
       */


      function _multiplyVectorDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns

        var alength = asize[0];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix columns

        for (var j = 0; j < bcolumns; j++) {
          // sum (do not initialize it with zero)
          var sum = mf(adata[0], bdata[0][j]); // loop vector

          for (var i = 1; i < alength; i++) {
            // multiply & accumulate
            sum = af(sum, mf(adata[i], bdata[i][j]));
          }

          c[j] = sum;
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [bcolumns],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Dense Vector   (N)
       *
       * @return {Matrix}             Dense Vector   (M)
       */


      var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
        'DenseMatrix, any': _multiplyDenseMatrixVector,
        'SparseMatrix, any': _multiplySparseMatrixVector
      });
      /**
       * C = A * B
       *
       * @param {Matrix} a            Matrix         (MxN)
       * @param {Matrix} b            Matrix         (NxC)
       *
       * @return {Matrix}             Matrix         (MxC)
       */


      var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
        'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
        'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
        'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
        'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
      });
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix  (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             Dense Vector (M)
       */


      function _multiplyDenseMatrixVector(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = asize[0];
        var acolumns = asize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix a rows

        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i]; // sum (do not initialize it with zero)

          var sum = mf(row[0], bdata[0]); // loop matrix a columns

          for (var j = 1; j < acolumns; j++) {
            // multiply & accumulate
            sum = af(sum, mf(row[j], bdata[j]));
          }

          c[i] = sum;
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [arows],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            DenseMatrix    (NxC)
       *
       * @return {Matrix}             DenseMatrix    (MxC)
       */


      function _multiplyDenseMatrixDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense

        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns

        var arows = asize[0];
        var acolumns = asize[1];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var c = []; // loop matrix a rows

        for (var i = 0; i < arows; i++) {
          // current row
          var row = adata[i]; // initialize row array

          c[i] = []; // loop matrix b columns

          for (var j = 0; j < bcolumns; j++) {
            // sum (avoid initializing sum to zero)
            var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

            for (var x = 1; x < acolumns; x++) {
              // multiply & accumulate
              sum = af(sum, mf(row[x], bdata[x][j]));
            }

            c[i][j] = sum;
          }
        } // return matrix


        return a.createDenseMatrix({
          data: c,
          size: [arows, bcolumns],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            DenseMatrix    (MxN)
       * @param {Matrix} b            SparseMatrix   (NxC)
       *
       * @return {Matrix}             SparseMatrix   (MxC)
       */


      function _multiplyDenseMatrixSparseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b sparse

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate b matrix

        if (!bvalues) {
          throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
        } // rows & columns


        var arows = asize[0];
        var bcolumns = bsize[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // result


        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix

        var c = b.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // indeces in column jb

          var kb0 = bptr[jb];
          var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

          if (kb1 > kb0) {
            // last row mark processed
            var last = 0; // loop a rows

            for (var i = 0; i < arows; i++) {
              // column mark
              var mark = i + 1; // C[i, jb]

              var cij = void 0; // values in b column j

              for (var kb = kb0; kb < kb1; kb++) {
                // row
                var ib = bindex[kb]; // check value has been initialized

                if (last !== mark) {
                  // first value in column jb
                  cij = mf(adata[i][ib], bvalues[kb]); // update mark

                  last = mark;
                } else {
                  // accumulate value
                  cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                }
              } // check column has been processed and value != 0


              if (last === mark && !eq(cij, zero)) {
                // push row & value
                cindex.push(i);
                cvalues.push(cij);
              }
            }
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix    (MxN)
       * @param {Matrix} b            Dense Vector (N)
       *
       * @return {Matrix}             SparseMatrix    (M, 1)
       */


      function _multiplySparseMatrixVector(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix

        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        } // b dense


        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var brows = b._size[0]; // result

        var cvalues = [];
        var cindex = [];
        var cptr = []; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // workspace


        var x = []; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // update ptr

        cptr[0] = 0; // rows in b

        for (var ib = 0; ib < brows; ib++) {
          // b[ib]
          var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

          if (!eq(vbi, zero)) {
            // A values & index in ib column
            for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              // a row
              var ia = aindex[ka]; // check value exists in current j

              if (!w[ia]) {
                // ia is new entry in j
                w[ia] = true; // add i to pattern of C

                cindex.push(ia); // x(ia) = A

                x[ia] = mf(vbi, avalues[ka]);
              } else {
                // i exists in C already
                x[ia] = af(x[ia], mf(vbi, avalues[ka]));
              }
            }
          }
        } // copy values from x to column jb of c


        for (var p1 = cindex.length, p = 0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        } // update ptr


        cptr[1] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, 1],
          datatype: dt
        });
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            DenseMatrix       (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */


      function _multiplySparseMatrixDenseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix

        if (!avalues) {
          throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
        } // b dense


        var bdata = b._data;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var brows = b._size[0];
        var bcolumns = b._size[1]; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // equalScalar signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt);
        } // result


        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix

        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // workspace

        var x = []; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // mark in workspace for current column

          var mark = jb + 1; // rows in jb

          for (var ib = 0; ib < brows; ib++) {
            // b[ib, jb]
            var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

            if (!eq(vbij, zero)) {
              // A values & index in ib column
              for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // a row
                var ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia); // x(ia) = A

                  x[ia] = mf(vbij, avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                }
              }
            }
          } // copy values from x to column jb of c


          for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
            // row
            var ic = cindex[p]; // copy value

            cvalues[p] = x[ic];
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }
      /**
       * C = A * B
       *
       * @param {Matrix} a            SparseMatrix      (MxN)
       * @param {Matrix} b            SparseMatrix      (NxC)
       *
       * @return {Matrix}             SparseMatrix      (MxC)
       */


      function _multiplySparseMatrixSparseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // b sparse

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bdt = b._datatype; // rows & columns

        var arows = a._size[0];
        var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

        var values = avalues && bvalues; // datatype

        var dt; // addScalar signature to use

        var af = addScalar; // multiplyScalar signature to use

        var mf = multiplyScalar; // process data types

        if (adt && bdt && adt === bdt && typeof adt === 'string') {
          // datatype
          dt = adt; // find signatures that matches (dt, dt)

          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        } // result


        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // c matrix

        var c = a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        }); // workspace

        var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

        var w = []; // variables

        var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

        for (var jb = 0; jb < bcolumns; jb++) {
          // update ptr
          cptr[jb] = cindex.length; // mark in workspace for current column

          var mark = jb + 1; // B values & index in j

          for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
            // b row
            ib = bindex[kb]; // check we need to process values

            if (values) {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia); // x(ia) = A

                  x[ia] = mf(bvalues[kb], avalues[ka]);
                } else {
                  // i exists in C already
                  x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                }
              }
            } else {
              // loop values in a[:,ib]
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                // row
                ia = aindex[ka]; // check value exists in current j

                if (w[ia] !== mark) {
                  // ia is new entry in j
                  w[ia] = mark; // add i to pattern of C

                  cindex.push(ia);
                }
              }
            }
          } // check we need to process matrix values (pattern matrix)


          if (values) {
            // copy values from x to column jb of c
            for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
              // row
              var ic = cindex[p]; // copy value

              cvalues[p] = x[ic];
            }
          }
        } // update ptr


        cptr[bcolumns] = cindex.length; // return sparse matrix

        return c;
      }

      return multiply;
    });

    var name$U = 'nthRoot';
    var dependencies$V = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
    var createNthRoot =
    /* #__PURE__ */
    factory(name$U, dependencies$V, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          _BigNumber = _ref.BigNumber;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculate the nth root of a value.
       * The principal nth root of a positive real number A, is the positive real
       * solution of the equation
       *
       *     x^root = A
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *     math.nthRoot(a)
       *     math.nthRoot(a, root)
       *
       * Examples:
       *
       *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
       *     math.sqrt(9)          // returns 3, as 3^2 == 9
       *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
       *
       * See also:
       *
       *     sqrt, pow
       *
       * @param {number | BigNumber | Array | Matrix | Complex} a
       *              Value for which to calculate the nth root
       * @param {number | BigNumber} [root=2]    The root.
       * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
       */

      var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
      var nthRoot = typed(name$U, {
        number: function number(x) {
          return nthRootNumber(x, 2);
        },
        'number, number': nthRootNumber,
        BigNumber: function BigNumber(x) {
          return _bigNthRoot(x, new _BigNumber(2));
        },
        Complex: function Complex(x) {
          throw new Error(complexErr);
        },
        'Complex, number': function ComplexNumber(x, y) {
          throw new Error(complexErr);
        },
        'BigNumber, BigNumber': _bigNthRoot,
        'Array | Matrix': function ArrayMatrix(x) {
          return nthRoot(x, 2);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse + sparse
            return algorithm06(x, y, nthRoot);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, nthRoot, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // dense + sparse
            return algorithm01(x, y, nthRoot, false);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, nthRoot);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return nthRoot(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return nthRoot(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return nthRoot(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, nthRoot, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, nthRoot, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse - scalar
            return algorithm11(y, x, nthRoot, true);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          return algorithm14(y, x, nthRoot, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return nthRoot(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return nthRoot(x, matrix(y)).valueOf();
        }
      });
      return nthRoot;
      /**
       * Calculate the nth root of a for BigNumbers, solve x^root == a
       * https://rosettacode.org/wiki/Nth_root#JavaScript
       * @param {BigNumber} a
       * @param {BigNumber} root
       * @private
       */

      function _bigNthRoot(a, root) {
        var precision = _BigNumber.precision;

        var Big = _BigNumber.clone({
          precision: precision + 2
        });

        var zero = new _BigNumber(0);
        var one = new Big(1);
        var inv = root.isNegative();

        if (inv) {
          root = root.neg();
        }

        if (root.isZero()) {
          throw new Error('Root must be non-zero');
        }

        if (a.isNegative() && !root.abs().mod(2).equals(1)) {
          throw new Error('Root must be odd when a is negative.');
        } // edge cases zero and infinity


        if (a.isZero()) {
          return inv ? new Big(Infinity) : 0;
        }

        if (!a.isFinite()) {
          return inv ? zero : a;
        }

        var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
        // so (-1) ^ (1/root) = -1

        x = a.isNeg() ? x.neg() : x;
        return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
      }
    });

    var name$V = 'sign';
    var dependencies$W = ['typed', 'BigNumber', 'Fraction', 'complex'];
    var createSign =
    /* #__PURE__ */
    factory(name$V, dependencies$W, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber,
          complex = _ref.complex,
          _Fraction = _ref.Fraction;

      /**
       * Compute the sign of a value. The sign of a value x is:
       *
       * -  1 when x > 0
       * - -1 when x < 0
       * -  0 when x == 0
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sign(x)
       *
       * Examples:
       *
       *    math.sign(3.5)               // returns 1
       *    math.sign(-4.2)              // returns -1
       *    math.sign(0)                 // returns 0
       *
       *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
       *
       * See also:
       *
       *    abs
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            The number for which to determine the sign
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
       *            The sign of `x`
       */
      var sign = typed(name$V, {
        number: signNumber,
        Complex: function Complex(x) {
          return x.im === 0 ? complex(signNumber(x.re)) : x.sign();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(x.cmp(0));
        },
        Fraction: function Fraction(x) {
          return new _Fraction(x.s, 1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sign(0) = 0
          return deepMap(x, sign);
        },
        Unit: function Unit(x) {
          return sign(x.value);
        }
      });
      return sign;
    });

    var name$W = 'sqrt';
    var dependencies$X = ['config', 'typed', 'Complex'];
    var createSqrt =
    /* #__PURE__ */
    factory(name$W, dependencies$X, function (_ref) {
      var config = _ref.config,
          typed = _ref.typed,
          Complex = _ref.Complex;

      /**
       * Calculate the square root of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sqrt(x)
       *
       * Examples:
       *
       *    math.sqrt(25)                // returns 5
       *    math.square(5)               // returns 25
       *    math.sqrt(-4)                // returns Complex 2i
       *
       * See also:
       *
       *    square, multiply, cube, cbrt, sqrtm
       *
       * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
       *            Value for which to calculate the square root.
       * @return {number | BigNumber | Complex | Array | Matrix | Unit}
       *            Returns the square root of `x`
       */
      var sqrt = typed('sqrt', {
        number: _sqrtNumber,
        Complex: function Complex(x) {
          return x.sqrt();
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.sqrt();
          } else {
            // negative value -> downgrade to number to do complex value computation
            return _sqrtNumber(x.toNumber());
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sqrt(0) = 0
          return deepMap(x, sqrt);
        },
        Unit: function Unit(x) {
          // Someday will work for complex units when they are implemented
          return x.pow(0.5);
        }
      });
      /**
       * Calculate sqrt for a number
       * @param {number} x
       * @returns {number | Complex} Returns the square root of x
       * @private
       */

      function _sqrtNumber(x) {
        if (isNaN(x)) {
          return NaN;
        } else if (x >= 0 || config.predictable) {
          return Math.sqrt(x);
        } else {
          return new Complex(x, 0).sqrt();
        }
      }

      return sqrt;
    });

    var name$X = 'square';
    var dependencies$Y = ['typed'];
    var createSquare =
    /* #__PURE__ */
    factory(name$X, dependencies$Y, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the square of a value, `x * x`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.square(x)
       *
       * Examples:
       *
       *    math.square(2)           // returns number 4
       *    math.square(3)           // returns number 9
       *    math.pow(3, 2)           // returns number 9
       *    math.multiply(3, 3)      // returns number 9
       *
       *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
       *
       * See also:
       *
       *    multiply, cube, sqrt, pow
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
       *            Number for which to calculate the square
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
       *            Squared value
       */
      var square = typed(name$X, {
        number: squareNumber,
        Complex: function Complex(x) {
          return x.mul(x);
        },
        BigNumber: function BigNumber(x) {
          return x.times(x);
        },
        Fraction: function Fraction(x) {
          return x.mul(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since square(0) = 0
          return deepMap(x, square);
        },
        Unit: function Unit(x) {
          return x.pow(2);
        }
      });
      return square;
    });

    var name$Y = 'subtract';
    var dependencies$Z = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
    var createSubtract =
    /* #__PURE__ */
    factory(name$Y, dependencies$Z, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          addScalar = _ref.addScalar,
          unaryMinus = _ref.unaryMinus,
          DenseMatrix = _ref.DenseMatrix;
      // TODO: split function subtract in two: subtract and subtractScalar
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm05 = createAlgorithm05({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Subtract two values, `x - y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.subtract(x, y)
       *
       * Examples:
       *
       *    math.subtract(5.3, 2)        // returns number 3.3
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(4, 1)
       *    math.subtract(a, b)          // returns Complex -2 + 2i
       *
       *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
       *
       *    const c = math.unit('2.1 km')
       *    const d = math.unit('500m')
       *    math.subtract(c, d)          // returns Unit 1.6 km
       *
       * See also:
       *
       *    add
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
       *            Initial value
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
       *            Value to subtract from `x`
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Subtraction of `x` and `y`
       */

      var subtract = typed(name$Y, {
        'number, number': function numberNumber(x, y) {
          return x - y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.sub(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.minus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.sub(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (x.value === null) {
            throw new Error('Parameter x contains a unit with undefined value');
          }

          if (y.value === null) {
            throw new Error('Parameter y contains a unit with undefined value');
          }

          if (!x.equalBase(y)) {
            throw new Error('Units do not match');
          }

          var res = x.clone();
          res.value = subtract(res.value, y.value);
          res.fixPrefix = false;
          return res;
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm05(x, y, subtract);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm03(y, x, subtract, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm01(x, y, subtract, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          checkEqualDimensions(x, y);
          return algorithm13(x, y, subtract);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return subtract(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return subtract(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return subtract(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, unaryMinus(y), addScalar);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, subtract);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, subtract, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, subtract, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, subtract, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, subtract, true).valueOf();
        }
      });
      return subtract;
    });
    /**
     * Check whether matrix x and y have the same number of dimensions.
     * Throws a DimensionError when dimensions are not equal
     * @param {Matrix} x
     * @param {Matrix} y
     */

    function checkEqualDimensions(x, y) {
      var xsize = x.size();
      var ysize = y.size();

      if (xsize.length !== ysize.length) {
        throw new DimensionError(xsize.length, ysize.length);
      }
    }

    var name$Z = 'xgcd';
    var dependencies$_ = ['typed', 'config', 'matrix', 'BigNumber'];
    var createXgcd =
    /* #__PURE__ */
    factory(name$Z, dependencies$_, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          BigNumber = _ref.BigNumber;

      /**
       * Calculate the extended greatest common divisor for two values.
       * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
       *
       * Syntax:
       *
       *    math.xgcd(a, b)
       *
       * Examples:
       *
       *    math.xgcd(8, 12)             // returns [4, -1, 1]
       *    math.gcd(8, 12)              // returns 4
       *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
       *
       * See also:
       *
       *    gcd, lcm
       *
       * @param {number | BigNumber} a  An integer number
       * @param {number | BigNumber} b  An integer number
       * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
       *                              where `div = gcd(a, b)` and `a*m + b*n = div`
       */
      return typed(name$Z, {
        'number, number': function numberNumber(a, b) {
          var res = xgcdNumber(a, b);
          return config.matrix === 'Array' ? res : matrix(res);
        },
        'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

      });
      /**
       * Calculate xgcd for two BigNumbers
       * @param {BigNumber} a
       * @param {BigNumber} b
       * @return {BigNumber[]} result
       * @private
       */

      function _xgcdBigNumber(a, b) {
        // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
        var // used to swap two variables
        t;
        var // quotient
        q;
        var // remainder
        r;
        var zero = new BigNumber(0);
        var one = new BigNumber(1);
        var x = zero;
        var lastx = one;
        var y = one;
        var lasty = zero;

        if (!a.isInt() || !b.isInt()) {
          throw new Error('Parameters in function xgcd must be integer numbers');
        }

        while (!b.isZero()) {
          q = a.div(b).floor();
          r = a.mod(b);
          t = x;
          x = lastx.minus(q.times(x));
          lastx = t;
          t = y;
          y = lasty.minus(q.times(y));
          lasty = t;
          a = b;
          b = r;
        }

        var res;

        if (a.lt(zero)) {
          res = [a.neg(), lastx.neg(), lasty.neg()];
        } else {
          res = [a, !a.isZero() ? lastx : 0, lasty];
        }

        return config.matrix === 'Array' ? res : matrix(res);
      }
    });

    var name$_ = 'algorithm09';
    var dependencies$$ = ['typed', 'equalScalar'];
    var createAlgorithm09 =
    /* #__PURE__ */
    factory(name$_, dependencies$$, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
       * Callback function invoked NZA times, number of nonzero elements in A.
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
       * C(i,j) = ┤
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm09(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces

        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

        var w = []; // vars

        var i, j, k, k0, k1; // loop columns

        for (j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // column mark

          var mark = j + 1; // check we need to process values

          if (x) {
            // loop B(:,j)
            for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
              // row
              i = bindex[k]; // update workspace

              w[i] = mark;
              x[i] = bvalues[k];
            }
          } // loop A(:,j)


          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // check we need to process values

            if (x) {
              // b value @ i,j
              var vb = w[i] === mark ? x[i] : zero; // invoke f

              var vc = cf(avalues[k], vb); // check zero value

              if (!eq(vc, zero)) {
                // push index
                cindex.push(i); // push value

                cvalues.push(vc);
              }
            } else {
              // push index
              cindex.push(i);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$$ = 'dotMultiply';
    var dependencies$10 = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
    var createDotMultiply =
    /* #__PURE__ */
    factory(name$$, dependencies$10, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          multiplyScalar = _ref.multiplyScalar;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm09 = createAlgorithm09({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Multiply two matrices element wise. The function accepts both matrices and
       * scalar values.
       *
       * Syntax:
       *
       *    math.dotMultiply(x, y)
       *
       * Examples:
       *
       *    math.dotMultiply(2, 4) // returns 8
       *
       *    a = [[9, 5], [6, 1]]
       *    b = [[3, 2], [5, 2]]
       *
       *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
       *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
       *
       * See also:
       *
       *    multiply, divide, dotDivide
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
       */

      var dotMultiply = typed(name$$, {
        'any, any': multiplyScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm09(x, y, multiplyScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, multiplyScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, multiplyScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, multiplyScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return dotMultiply(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return dotMultiply(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return dotMultiply(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        }
      });
      return dotMultiply;
    });

    /**
     * Bitwise and for Bignumbers
     *
     * Special Cases:
     *   N &  n =  N
     *   n &  0 =  0
     *   n & -1 =  n
     *   n &  n =  n
     *   I &  I =  I
     *  -I & -I = -I
     *   I & -I =  0
     *   I &  n =  n
     *   I & -n =  I
     *  -I &  n =  0
     *  -I & -n = -I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` & `y`, is fully precise
     * @private
     */
    function bitAndBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitAnd');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.eq(-1) || x.eq(y)) {
        return x;
      }

      if (y.isZero() || x.eq(-1)) {
        return y;
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          if (x.isNegative() === y.isNegative()) {
            return x;
          }

          return new BigNumber(0);
        }

        if (!x.isFinite()) {
          if (y.isNegative()) {
            return x;
          }

          if (x.isNegative()) {
            return new BigNumber(0);
          }

          return y;
        }

        if (!y.isFinite()) {
          if (x.isNegative()) {
            return y;
          }

          if (y.isNegative()) {
            return new BigNumber(0);
          }

          return x;
        }
      }

      return bitwise(x, y, function (a, b) {
        return a & b;
      });
    }
    /**
     * Bitwise not
     * @param {BigNumber} x
     * @return {BigNumber} Result of ~`x`, fully precise
     *
     */

    function bitNotBigNumber(x) {
      if (x.isFinite() && !x.isInteger()) {
        throw new Error('Integer expected in function bitNot');
      }

      var BigNumber = x.constructor;
      var prevPrec = BigNumber.precision;
      BigNumber.config({
        precision: 1E9
      });
      var result = x.plus(new BigNumber(1));
      result.s = -result.s || null;
      BigNumber.config({
        precision: prevPrec
      });
      return result;
    }
    /**
     * Bitwise OR for BigNumbers
     *
     * Special Cases:
     *   N |  n =  N
     *   n |  0 =  n
     *   n | -1 = -1
     *   n |  n =  n
     *   I |  I =  I
     *  -I | -I = -I
     *   I | -n = -1
     *   I | -I = -1
     *   I |  n =  I
     *  -I |  n = -I
     *  -I | -n = -n
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` | `y`, fully precise
     */

    function bitOrBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitOr');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      var negOne = new BigNumber(-1);

      if (x.isZero() || y.eq(negOne) || x.eq(y)) {
        return y;
      }

      if (y.isZero() || x.eq(negOne)) {
        return x;
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
          return negOne;
        }

        if (x.isNegative() && y.isNegative()) {
          return x.isFinite() ? x : y;
        }

        return x.isFinite() ? y : x;
      }

      return bitwise(x, y, function (a, b) {
        return a | b;
      });
    }
    /**
     * Applies bitwise function to numbers
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @param {function (a, b)} func
     * @return {BigNumber}
     */

    function bitwise(x, y, func) {
      var BigNumber = x.constructor;
      var xBits, yBits;
      var xSign = +(x.s < 0);
      var ySign = +(y.s < 0);

      if (xSign) {
        xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

        for (var i = 0; i < xBits.length; ++i) {
          xBits[i] ^= 1;
        }
      } else {
        xBits = decCoefficientToBinaryString(x);
      }

      if (ySign) {
        yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

        for (var _i = 0; _i < yBits.length; ++_i) {
          yBits[_i] ^= 1;
        }
      } else {
        yBits = decCoefficientToBinaryString(y);
      }

      var minBits, maxBits, minSign;

      if (xBits.length <= yBits.length) {
        minBits = xBits;
        maxBits = yBits;
        minSign = xSign;
      } else {
        minBits = yBits;
        maxBits = xBits;
        minSign = ySign;
      }

      var shortLen = minBits.length;
      var longLen = maxBits.length;
      var expFuncVal = func(xSign, ySign) ^ 1;
      var outVal = new BigNumber(expFuncVal ^ 1);
      var twoPower = new BigNumber(1);
      var two = new BigNumber(2);
      var prevPrec = BigNumber.precision;
      BigNumber.config({
        precision: 1E9
      });

      while (shortLen > 0) {
        if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
          outVal = outVal.plus(twoPower);
        }

        twoPower = twoPower.times(two);
      }

      while (longLen > 0) {
        if (func(minSign, maxBits[--longLen]) === expFuncVal) {
          outVal = outVal.plus(twoPower);
        }

        twoPower = twoPower.times(two);
      }

      BigNumber.config({
        precision: prevPrec
      });

      if (expFuncVal === 0) {
        outVal.s = -outVal.s;
      }

      return outVal;
    }
    /* Extracted from decimal.js, and edited to specialize. */

    function decCoefficientToBinaryString(x) {
      // Convert to string
      var a = x.d; // array with digits

      var r = a[0] + '';

      for (var i = 1; i < a.length; ++i) {
        var s = a[i] + '';

        for (var z = 7 - s.length; z--;) {
          s = '0' + s;
        }

        r += s;
      }

      var j = r.length;

      while (r.charAt(j) === '0') {
        j--;
      }

      var xe = x.e;
      var str = r.slice(0, j + 1 || 1);
      var strL = str.length;

      if (xe > 0) {
        if (++xe > strL) {
          // Append zeros.
          xe -= strL;

          while (xe--) {
            str += '0';
          }
        } else if (xe < strL) {
          str = str.slice(0, xe) + '.' + str.slice(xe);
        }
      } // Convert from base 10 (decimal) to base 2


      var arr = [0];

      for (var _i2 = 0; _i2 < str.length;) {
        var arrL = arr.length;

        while (arrL--) {
          arr[arrL] *= 10;
        }

        arr[0] += parseInt(str.charAt(_i2++)); // convert to int

        for (var _j = 0; _j < arr.length; ++_j) {
          if (arr[_j] > 1) {
            if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
              arr[_j + 1] = 0;
            }

            arr[_j + 1] += arr[_j] >> 1;
            arr[_j] &= 1;
          }
        }
      }

      return arr.reverse();
    }
    /**
     * Bitwise XOR for BigNumbers
     *
     * Special Cases:
     *   N ^  n =  N
     *   n ^  0 =  n
     *   n ^  n =  0
     *   n ^ -1 = ~n
     *   I ^  n =  I
     *   I ^ -n = -I
     *   I ^ -I = -1
     *  -I ^  n = -I
     *  -I ^ -n =  I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` ^ `y`, fully precise
     *
     */


    function bitXor(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function bitXor');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }

      if (x.isZero()) {
        return y;
      }

      if (y.isZero()) {
        return x;
      }

      if (x.eq(y)) {
        return new BigNumber(0);
      }

      var negOne = new BigNumber(-1);

      if (x.eq(negOne)) {
        return bitNotBigNumber(y);
      }

      if (y.eq(negOne)) {
        return bitNotBigNumber(x);
      }

      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          return negOne;
        }

        return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
      }

      return bitwise(x, y, function (a, b) {
        return a ^ b;
      });
    }
    /**
     * Bitwise left shift
     *
     * Special Cases:
     *  n << -n = N
     *  n <<  N = N
     *  N <<  n = N
     *  n <<  0 = n
     *  0 <<  n = 0
     *  I <<  I = N
     *  I <<  n = I
     *  n <<  I = I
     *
     * @param {BigNumber} x
     * @param {BigNumber} y
     * @return {BigNumber} Result of `x` << `y`
     *
     */

    function leftShiftBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function leftShift');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.isZero()) {
        return x;
      }

      if (!x.isFinite() && !y.isFinite()) {
        return new BigNumber(NaN);
      } // Math.pow(2, y) is fully precise for y < 55, and fast


      if (y.lt(55)) {
        return x.times(Math.pow(2, y.toNumber()) + '');
      }

      return x.times(new BigNumber(2).pow(y));
    }
    /*
     * Special Cases:
     *   n >> -n =  N
     *   n >>  N =  N
     *   N >>  n =  N
     *   I >>  I =  N
     *   n >>  0 =  n
     *   I >>  n =  I
     *  -I >>  n = -I
     *  -I >>  I = -I
     *   n >>  I =  I
     *  -n >>  I = -1
     *   0 >>  n =  0
     *
     * @param {BigNumber} value
     * @param {BigNumber} value
     * @return {BigNumber} Result of `x` >> `y`
     *
     */

    function rightArithShiftBigNumber(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error('Integers expected in function rightArithShift');
      }

      var BigNumber = x.constructor;

      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }

      if (x.isZero() || y.isZero()) {
        return x;
      }

      if (!y.isFinite()) {
        if (x.isNegative()) {
          return new BigNumber(-1);
        }

        if (!x.isFinite()) {
          return new BigNumber(NaN);
        }

        return new BigNumber(0);
      } // Math.pow(2, y) is fully precise for y < 55, and fast


      if (y.lt(55)) {
        return x.div(Math.pow(2, y.toNumber()) + '').floor();
      }

      return x.div(new BigNumber(2).pow(y)).floor();
    }

    var name$10 = 'bitAnd';
    var dependencies$11 = ['typed', 'matrix', 'equalScalar'];
    var createBitAnd =
    /* #__PURE__ */
    factory(name$10, dependencies$11, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise AND two values, `x & y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.bitAnd(x, y)
       *
       * Examples:
       *
       *    math.bitAnd(53, 131)               // returns number 1
       *
       *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
       *
       * See also:
       *
       *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to and
       * @param  {number | BigNumber | Array | Matrix} y Second value to and
       * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
       */

      var bitAnd = typed(name$10, {
        'number, number': bitAndNumber,
        'BigNumber, BigNumber': bitAndBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, bitAnd, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, bitAnd, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, bitAnd, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, bitAnd);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return bitAnd(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return bitAnd(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return bitAnd(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, bitAnd, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, bitAnd, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm11(y, x, bitAnd, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, bitAnd, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, bitAnd, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, bitAnd, true).valueOf();
        }
      });
      return bitAnd;
    });

    var name$11 = 'bitNot';
    var dependencies$12 = ['typed'];
    var createBitNot =
    /* #__PURE__ */
    factory(name$11, dependencies$12, function (_ref) {
      var typed = _ref.typed;

      /**
       * Bitwise NOT value, `~x`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.bitNot(x)
       *
       * Examples:
       *
       *    math.bitNot(1)               // returns number -2
       *
       *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
       *
       * See also:
       *
       *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to not
       * @return {number | BigNumber | Array | Matrix} NOT of `x`
       */
      var bitNot = typed(name$11, {
        number: bitNotNumber,
        BigNumber: bitNotBigNumber,
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, bitNot);
        }
      });
      return bitNot;
    });

    var name$12 = 'bitOr';
    var dependencies$13 = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createBitOr =
    /* #__PURE__ */
    factory(name$12, dependencies$13, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm04 = createAlgorithm04({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise OR two values, `x | y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the lowest print base.
       *
       * Syntax:
       *
       *    math.bitOr(x, y)
       *
       * Examples:
       *
       *    math.bitOr(1, 2)               // returns number 3
       *
       *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to or
       * @param  {number | BigNumber | Array | Matrix} y Second value to or
       * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
       */

      var bitOr = typed(name$12, {
        'number, number': bitOrNumber,
        'BigNumber, BigNumber': bitOrBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, bitOr);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, bitOr, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, bitOr, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, bitOr);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return bitOr(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return bitOr(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return bitOr(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, y, bitOr, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, bitOr, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, bitOr, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, bitOr, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, bitOr, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, bitOr, true).valueOf();
        }
      });
      return bitOr;
    });

    var name$13 = 'algorithm07';
    var dependencies$14 = ['typed', 'DenseMatrix'];
    var createAlgorithm07 =
    /* #__PURE__ */
    factory(name$13, dependencies$14, function (_ref) {
      var typed = _ref.typed,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
       * Callback function invoked MxN times.
       *
       * C(i,j) = f(Aij, Bij)
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    DenseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm07(a, b, callback) {
        // sparse matrix arrays
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // vars


        var i, j; // result arrays

        var cdata = []; // initialize c

        for (i = 0; i < rows; i++) {
          cdata[i] = [];
        } // workspaces


        var xa = [];
        var xb = []; // marks indicating we have a value in x for a given column

        var wa = [];
        var wb = []; // loop columns

        for (j = 0; j < columns; j++) {
          // columns mark
          var mark = j + 1; // scatter the values of A(:,j) into workspace

          _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


          _scatter(b, j, wb, xb, mark); // loop rows


          for (i = 0; i < rows; i++) {
            // matrix values @ i,j
            var va = wa[i] === mark ? xa[i] : zero;
            var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

            cdata[i][j] = cf(va, vb);
          }
        } // return dense matrix


        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };

      function _scatter(m, j, w, x, mark) {
        // a arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop values in column j

        for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
          // row
          var i = index[k]; // update workspace

          w[i] = mark;
          x[i] = values[k];
        }
      }
    });

    var name$14 = 'bitXor';
    var dependencies$15 = ['typed', 'matrix', 'DenseMatrix'];
    var createBitXor =
    /* #__PURE__ */
    factory(name$14, dependencies$15, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise XOR two values, `x ^ y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.bitXor(x, y)
       *
       * Examples:
       *
       *    math.bitXor(1, 2)               // returns number 3
       *
       *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x First value to xor
       * @param  {number | BigNumber | Array | Matrix} y Second value to xor
       * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
       */

      var bitXor$1 = typed(name$14, {
        'number, number': bitXorNumber,
        'BigNumber, BigNumber': bitXor,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, bitXor$1);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, bitXor$1, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, bitXor$1, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, bitXor$1);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return bitXor$1(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return bitXor$1(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return bitXor$1(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, bitXor$1, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, bitXor$1, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, bitXor$1, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, bitXor$1, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, bitXor$1, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, bitXor$1, true).valueOf();
        }
      });
      return bitXor$1;
    });

    var name$15 = 'arg';
    var dependencies$16 = ['typed'];
    var createArg =
    /* #__PURE__ */
    factory(name$15, dependencies$16, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the argument of a complex value.
       * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.arg(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 2)
       *    math.arg(a) / math.pi          // returns number 0.25
       *
       *    const b = math.complex('2 + 3i')
       *    math.arg(b)                    // returns number 0.982793723247329
       *    math.atan2(3, 2)               // returns number 0.982793723247329
       *
       * See also:
       *
       *    re, im, conj, abs
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The argument of x
       */
      var arg = typed(name$15, {
        number: function number(x) {
          return Math.atan2(0, x);
        },
        BigNumber: function BigNumber(x) {
          return x.constructor.atan2(0, x);
        },
        Complex: function Complex(x) {
          return x.arg();
        },
        // TODO: implement BigNumber support for function arg
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, arg);
        }
      });
      return arg;
    });

    var name$16 = 'conj';
    var dependencies$17 = ['typed'];
    var createConj =
    /* #__PURE__ */
    factory(name$16, dependencies$17, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the complex conjugate of a complex value.
       * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.conj(x)
       *
       * Examples:
       *
       *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
       *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
       *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
       *
       * See also:
       *
       *    re, im, arg, abs
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            The complex conjugate of x
       */
      var conj = typed(name$16, {
        number: function number(x) {
          return x;
        },
        BigNumber: function BigNumber(x) {
          return x;
        },
        Complex: function Complex(x) {
          return x.conjugate();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, conj);
        }
      });
      return conj;
    });

    var name$17 = 'im';
    var dependencies$18 = ['typed'];
    var createIm =
    /* #__PURE__ */
    factory(name$17, dependencies$18, function (_ref) {
      var typed = _ref.typed;

      /**
       * Get the imaginary part of a complex number.
       * For a complex number `a + bi`, the function returns `b`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.im(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 3)
       *    math.re(a)                     // returns number 2
       *    math.im(a)                     // returns number 3
       *
       *    math.re(math.complex('-5.2i')) // returns number -5.2
       *    math.re(math.complex(2.4))     // returns number 0
       *
       * See also:
       *
       *    re, conj, abs, arg
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The imaginary part of x
       */
      var im = typed(name$17, {
        number: function number(x) {
          return 0;
        },
        BigNumber: function BigNumber(x) {
          return x.mul(0);
        },
        Complex: function Complex(x) {
          return x.im;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, im);
        }
      });
      return im;
    });

    var name$18 = 're';
    var dependencies$19 = ['typed'];
    var createRe =
    /* #__PURE__ */
    factory(name$18, dependencies$19, function (_ref) {
      var typed = _ref.typed;

      /**
       * Get the real part of a complex number.
       * For a complex number `a + bi`, the function returns `a`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.re(x)
       *
       * Examples:
       *
       *    const a = math.complex(2, 3)
       *    math.re(a)                     // returns number 2
       *    math.im(a)                     // returns number 3
       *
       *    math.re(math.complex('-5.2i')) // returns number 0
       *    math.re(math.complex(2.4))     // returns number 2.4
       *
       * See also:
       *
       *    im, conj, abs, arg
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            A complex number or array with complex numbers
       * @return {number | BigNumber | Array | Matrix} The real part of x
       */
      var re = typed(name$18, {
        number: function number(x) {
          return x;
        },
        BigNumber: function BigNumber(x) {
          return x;
        },
        Complex: function Complex(x) {
          return x.re;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, re);
        }
      });
      return re;
    });

    var name$19 = 'not';
    var dependencies$1a = ['typed'];
    var createNot =
    /* #__PURE__ */
    factory(name$19, dependencies$1a, function (_ref) {
      var typed = _ref.typed;

      /**
       * Logical `not`. Flips boolean value of a given parameter.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.not(x)
       *
       * Examples:
       *
       *    math.not(2)      // returns false
       *    math.not(0)      // returns true
       *    math.not(true)   // returns false
       *
       *    a = [2, -7, 0]
       *    math.not(a)      // returns [false, false, true]
       *
       * See also:
       *
       *    and, or, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when input is a zero or empty value.
       */
      var not = typed(name$19, {
        number: notNumber,
        Complex: function Complex(x) {
          return x.re === 0 && x.im === 0;
        },
        BigNumber: function BigNumber(x) {
          return x.isZero() || x.isNaN();
        },
        Unit: function Unit(x) {
          return x.value !== null ? not(x.value) : true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, not);
        }
      });
      return not;
    });

    var name$1a = 'or';
    var dependencies$1b = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createOr =
    /* #__PURE__ */
    factory(name$1a, dependencies$1b, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm05 = createAlgorithm05({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.or(x, y)
       *
       * Examples:
       *
       *    math.or(2, 4)   // returns true
       *
       *    a = [2, 5, 0]
       *    b = [0, 22, 0]
       *    c = 0
       *
       *    math.or(a, b)   // returns [true, true, false]
       *    math.or(b, c)   // returns [false, true, false]
       *
       * See also:
       *
       *    and, not, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
       */

      var or = typed(name$1a, {
        'number, number': orNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return or(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, or);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, or, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, or, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, or);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return or(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return or(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return or(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, or, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, or, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, or, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, or, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, or, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, or, true).valueOf();
        }
      });
      return or;
    });

    var name$1b = 'xor';
    var dependencies$1c = ['typed', 'matrix', 'DenseMatrix'];
    var createXor =
    /* #__PURE__ */
    factory(name$1b, dependencies$1c, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.xor(x, y)
       *
       * Examples:
       *
       *    math.xor(2, 4)   // returns false
       *
       *    a = [2, 0, 0]
       *    b = [2, 7, 0]
       *    c = 0
       *
       *    math.xor(a, b)   // returns [false, true, false]
       *    math.xor(a, c)   // returns [true, false, false]
       *
       * See also:
       *
       *    and, not, or
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when one and only one input is defined with a nonzero/nonempty value.
       */

      var xor = typed(name$1b, {
        'number, number': xorNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return xor(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, xor);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, xor, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, xor, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, xor);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return xor(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return xor(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return xor(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, xor, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, xor, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, xor, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, xor, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, xor, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, xor, true).valueOf();
        }
      });
      return xor;
    });

    var name$1c = 'concat';
    var dependencies$1d = ['typed', 'matrix', 'isInteger'];
    var createConcat =
    /* #__PURE__ */
    factory(name$1c, dependencies$1d, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          isInteger = _ref.isInteger;

      /**
       * Concatenate two or more matrices.
       *
       * Syntax:
       *
       *     math.concat(A, B, C, ...)
       *     math.concat(A, B, C, ..., dim)
       *
       * Where:
       *
       * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
       *   By default the last dimension of the matrices.
       *
       * Examples:
       *
       *    const A = [[1, 2], [5, 6]]
       *    const B = [[3, 4], [7, 8]]
       *
       *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
       *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
       *    math.concat('hello', ' ', 'world') // returns 'hello world'
       *
       * See also:
       *
       *    size, squeeze, subset, transpose
       *
       * @param {... Array | Matrix} args     Two or more matrices
       * @return {Array | Matrix} Concatenated matrix
       */
      return typed(name$1c, {
        // TODO: change signature to '...Array | Matrix, dim?' when supported
        '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
          var i;
          var len = args.length;
          var dim = -1; // zero-based dimension

          var prevDim;
          var asMatrix = false;
          var matrices = []; // contains multi dimensional arrays

          for (i = 0; i < len; i++) {
            var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

            if (isMatrix(arg)) {
              asMatrix = true;
            }

            if (isNumber$f(arg) || isBigNumber(arg)) {
              if (i !== len - 1) {
                throw new Error('Dimension must be specified as last argument');
              } // last argument contains the dimension on which to concatenate


              prevDim = dim;
              dim = arg.valueOf(); // change BigNumber to number

              if (!isInteger(dim)) {
                throw new TypeError('Integer number expected for dimension');
              }

              if (dim < 0 || i > 0 && dim > prevDim) {
                // TODO: would be more clear when throwing a DimensionError here
                throw new IndexError(dim, prevDim + 1);
              }
            } else {
              // this is a matrix or array
              var m = clone$3(arg).valueOf();
              var size = arraySize(m);
              matrices[i] = m;
              prevDim = dim;
              dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

              if (i > 0 && dim !== prevDim) {
                throw new DimensionError(prevDim + 1, dim + 1);
              }
            }
          }

          if (matrices.length === 0) {
            throw new SyntaxError('At least one matrix expected');
          }

          var res = matrices.shift();

          while (matrices.length) {
            res = _concat(res, matrices.shift(), dim, 0);
          }

          return asMatrix ? matrix(res) : res;
        },
        '...string': function string(args) {
          return args.join('');
        }
      });
    });
    /**
     * Recursively concatenate two matrices.
     * The contents of the matrices is not cloned.
     * @param {Array} a             Multi dimensional array
     * @param {Array} b             Multi dimensional array
     * @param {number} concatDim    The dimension on which to concatenate (zero-based)
     * @param {number} dim          The current dim (zero-based)
     * @return {Array} c            The concatenated matrix
     * @private
     */

    function _concat(a, b, concatDim, dim) {
      if (dim < concatDim) {
        // recurse into next dimension
        if (a.length !== b.length) {
          throw new DimensionError(a.length, b.length);
        }

        var c = [];

        for (var i = 0; i < a.length; i++) {
          c[i] = _concat(a[i], b[i], concatDim, dim + 1);
        }

        return c;
      } else {
        // concatenate this dimension
        return a.concat(b);
      }
    }

    var name$1d = 'column';
    var dependencies$1e = ['typed', 'Index', 'matrix', 'range'];
    var createColumn =
    /* #__PURE__ */
    factory(name$1d, dependencies$1e, function (_ref) {
      var typed = _ref.typed,
          Index = _ref.Index,
          matrix = _ref.matrix,
          range = _ref.range;

      /**
       * Return a column from a Matrix.
       *
       * Syntax:
       *
       *     math.column(value, index)
       *
       * Example:
       *
       *     // get a column
       *     const d = [[1, 2], [3, 4]]
       *     math.column(d, 1) // returns [2, 4]
       *
       * See also:
       *
       *     row
       *
       * @param {Array | Matrix } value   An array or matrix
       * @param {number} column           The index of the column
       * @return {Array | Matrix}         The retrieved column
       */
      var column = typed(name$1d, {
        'Matrix, number': _column,
        'Array, number': function ArrayNumber(value, column) {
          return _column(matrix(clone$3(value)), column).valueOf();
        }
      });
      return column;
      /**
       * Retrieve a column of a matrix
       * @param {Matrix } value  A matrix
       * @param {number} column  The index of the column
       * @return {Matrix}        The retrieved column
       */

      function _column(value, column) {
        // check dimensions
        if (value.size().length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }

        validateIndex(column, value.size()[1]);
        var rowRange = range(0, value.size()[0]);
        var index = new Index(rowRange, column);
        return value.subset(index);
      }
    });

    var name$1e = 'cross';
    var dependencies$1f = ['typed', 'matrix', 'subtract', 'multiply'];
    var createCross =
    /* #__PURE__ */
    factory(name$1e, dependencies$1f, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          subtract = _ref.subtract,
          multiply = _ref.multiply;

      /**
       * Calculate the cross product for two vectors in three dimensional space.
       * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
       * as:
       *
       *    cross(A, B) = [
       *      a2 * b3 - a3 * b2,
       *      a3 * b1 - a1 * b3,
       *      a1 * b2 - a2 * b1
       *    ]
       *
       * If one of the input vectors has a dimension greater than 1, the output
       * vector will be a 1x3 (2-dimensional) matrix.
       *
       * Syntax:
       *
       *    math.cross(x, y)
       *
       * Examples:
       *
       *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
       *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
       *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
       *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
       *
       * See also:
       *
       *    dot, multiply
       *
       * @param  {Array | Matrix} x   First vector
       * @param  {Array | Matrix} y   Second vector
       * @return {Array | Matrix}     Returns the cross product of `x` and `y`
       */
      return typed(name$1e, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          return matrix(_cross(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return matrix(_cross(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return matrix(_cross(x, y.toArray()));
        },
        'Array, Array': _cross
      });
      /**
       * Calculate the cross product for two arrays
       * @param {Array} x  First vector
       * @param {Array} y  Second vector
       * @returns {Array} Returns the cross product of x and y
       * @private
       */

      function _cross(x, y) {
        var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);
        x = squeeze(x);
        y = squeeze(y);
        var xSize = arraySize(x);
        var ySize = arraySize(y);

        if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
          throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
        }

        var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

        if (highestDimension > 1) {
          return [product];
        } else {
          return product;
        }
      }
    });

    var name$1f = 'diag';
    var dependencies$1g = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
    var createDiag =
    /* #__PURE__ */
    factory(name$1f, dependencies$1g, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix,
          SparseMatrix = _ref.SparseMatrix;

      /**
       * Create a diagonal matrix or retrieve the diagonal of a matrix
       *
       * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
       * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
       * When k is positive, the values are placed on the super diagonal.
       * When k is negative, the values are placed on the sub diagonal.
       *
       * Syntax:
       *
       *     math.diag(X)
       *     math.diag(X, format)
       *     math.diag(X, k)
       *     math.diag(X, k, format)
       *
       * Examples:
       *
       *     // create a diagonal matrix
       *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
       *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
       *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
       *
       *    // retrieve the diagonal from a matrix
       *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
       *    math.diag(a)   // returns [1, 5, 9]
       *
       * See also:
       *
       *     ones, zeros, identity
       *
       * @param {Matrix | Array} x          A two dimensional matrix or a vector
       * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
       *                                    in or retrieved.
       * @param {string} [format='dense']   The matrix storage format.
       *
       * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
       */
      return typed(name$1f, {
        // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
        Array: function Array(x) {
          return _diag(x, 0, arraySize(x), null);
        },
        'Array, number': function ArrayNumber(x, k) {
          return _diag(x, k, arraySize(x), null);
        },
        'Array, BigNumber': function ArrayBigNumber(x, k) {
          return _diag(x, k.toNumber(), arraySize(x), null);
        },
        'Array, string': function ArrayString(x, format) {
          return _diag(x, 0, arraySize(x), format);
        },
        'Array, number, string': function ArrayNumberString(x, k, format) {
          return _diag(x, k, arraySize(x), format);
        },
        'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
          return _diag(x, k.toNumber(), arraySize(x), format);
        },
        Matrix: function Matrix(x) {
          return _diag(x, 0, x.size(), x.storage());
        },
        'Matrix, number': function MatrixNumber(x, k) {
          return _diag(x, k, x.size(), x.storage());
        },
        'Matrix, BigNumber': function MatrixBigNumber(x, k) {
          return _diag(x, k.toNumber(), x.size(), x.storage());
        },
        'Matrix, string': function MatrixString(x, format) {
          return _diag(x, 0, x.size(), format);
        },
        'Matrix, number, string': function MatrixNumberString(x, k, format) {
          return _diag(x, k, x.size(), format);
        },
        'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
          return _diag(x, k.toNumber(), x.size(), format);
        }
      });
      /**
       * Creeate diagonal matrix from a vector or vice versa
       * @param {Array | Matrix} x
       * @param {number} k
       * @param {string} format Storage format for matrix. If null,
       *                          an Array is returned
       * @returns {Array | Matrix}
       * @private
       */

      function _diag(x, k, size, format) {
        if (!isInteger$1(k)) {
          throw new TypeError('Second parameter in function diag must be an integer');
        }

        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // check dimensions

        switch (size.length) {
          case 1:
            return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

          case 2:
            return _getDiagonal(x, k, format, size, kSub, kSuper);
        }

        throw new RangeError('Matrix for function diag must be 2 dimensional');
      }

      function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
        // matrix size
        var ms = [l + kSub, l + kSuper];

        if (format && format !== 'sparse' && format !== 'dense') {
          throw new TypeError("Unknown matrix type ".concat(format, "\""));
        } // create diagonal matrix


        var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

        return format !== null ? m : m.valueOf();
      }

      function _getDiagonal(x, k, format, s, kSub, kSuper) {
        // check x is a Matrix
        if (isMatrix(x)) {
          // get diagonal matrix
          var dm = x.diagonal(k); // check we need to return a matrix

          if (format !== null) {
            // check we need to change matrix format
            if (format !== dm.storage()) {
              return matrix(dm, format);
            }

            return dm;
          }

          return dm.valueOf();
        } // vector size


        var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

        var vector = []; // loop diagonal

        for (var i = 0; i < n; i++) {
          vector[i] = x[i + kSub][i + kSuper];
        } // check we need to return a matrix


        return format !== null ? matrix(vector) : vector;
      }
    });

    // TODO: function eye is removed since v5.0.0 (June 2018). Remove it some day.
    var createEye =
    /* #__PURE__ */
    factory('eye', [], function () {
      return function eye() {
        throw new Error('Function "eye" is renamed to "identity" since mathjs version 5.0.0. ' + 'To keep eye working, create an alias for it using "math.import({eye: math.identity}, {override: true})"');
      };
    });

    function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

    // function utils

    /**
     * Memoize a given function by caching the computed result.
     * The cache of a memoized function can be cleared by deleting the `cache`
     * property of the function.
     *
     * @param {function} fn                     The function to be memoized.
     *                                          Must be a pure function.
     * @param {function(args: Array)} [hasher]  A custom hash builder.
     *                                          Is JSON.stringify by default.
     * @return {function}                       Returns the memoized function
     */
    function memoize$2(fn, hasher) {
      return function memoize() {
        if (_typeof$4(memoize.cache) !== 'object') {
          memoize.cache = {};
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }

        var hash = hasher ? hasher(args) : JSON.stringify(args);

        if (!(hash in memoize.cache)) {
          memoize.cache[hash] = fn.apply(fn, args);
        }

        return memoize.cache[hash];
      };
    }
    /**
     * Find the maximum number of arguments expected by a typed function.
     * @param {function} fn   A typed function
     * @return {number} Returns the maximum number of expected arguments.
     *                  Returns -1 when no signatures where found on the function.
     */

    function maxArgumentCount(fn) {
      return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
    }

    var name$1g = 'filter';
    var dependencies$1h = ['typed'];
    var createFilter =
    /* #__PURE__ */
    factory(name$1g, dependencies$1h, function (_ref) {
      var typed = _ref.typed;

      /**
       * Filter the items in an array or one dimensional matrix.
       *
       * Syntax:
       *
       *    math.filter(x, test)
       *
       * Examples:
       *
       *    function isPositive (x) {
       *      return x > 0
       *    }
       *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
       *
       *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
       *
       * See also:
       *
       *    forEach, map, sort
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to filter
       * @param {Function | RegExp} test
       *        A function or regular expression to test items.
       *        All entries for which `test` returns true are returned.
       *        When `test` is a function, it is invoked with three parameters:
       *        the value of the element, the index of the element, and the
       *        matrix/array being traversed. The function must return a boolean.
       * @return {Matrix | Array} Returns the filtered matrix.
       */
      return typed('filter', {
        'Array, function': _filterCallback,
        'Matrix, function': function MatrixFunction(x, test) {
          return x.create(_filterCallback(x.toArray(), test));
        },
        'Array, RegExp': filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
          return x.create(filterRegExp(x.toArray(), test));
        }
      });
    });
    /**
     * Filter values in a callback given a callback function
     * @param {Array} x
     * @param {Function} callback
     * @return {Array} Returns the filtered array
     * @private
     */

    function _filterCallback(x, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);
      return filter$3(x, function (value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) {
          return callback(value);
        } else if (args === 2) {
          return callback(value, [index]);
        } else {
          // 3 or -1
          return callback(value, [index], array);
        }
      });
    }

    var name$1h = 'flatten';
    var dependencies$1i = ['typed', 'matrix'];
    var createFlatten =
    /* #__PURE__ */
    factory(name$1h, dependencies$1i, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;

      /**
       * Flatten a multi dimensional matrix into a single dimensional matrix.
       *
       * Syntax:
       *
       *    math.flatten(x)
       *
       * Examples:
       *
       *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
       *
       * See also:
       *
       *    concat, resize, size, squeeze
       *
       * @param {Matrix | Array} x   Matrix to be flattened
       * @return {Matrix | Array} Returns the flattened matrix
       */
      return typed(name$1h, {
        Array: function Array(x) {
          return flatten$2(clone$3(x));
        },
        Matrix: function Matrix(x) {
          var flat = flatten$2(clone$3(x.toArray())); // TODO: return the same matrix type as x

          return matrix(flat);
        }
      });
    });

    var name$1i = 'forEach';
    var dependencies$1j = ['typed'];
    var createForEach =
    /* #__PURE__ */
    factory(name$1i, dependencies$1j, function (_ref) {
      var typed = _ref.typed;

      /**
       * Iterate over all elements of a matrix/array, and executes the given callback function.
       *
       * Syntax:
       *
       *    math.forEach(x, callback)
       *
       * Examples:
       *
       *    math.forEach([1, 2, 3], function(value) {
       *      console.log(value)
       *    })
       *    // outputs 1, 2, 3
       *
       * See also:
       *
       *    filter, map, sort
       *
       * @param {Matrix | Array} x    The matrix to iterate on.
       * @param {Function} callback   The callback function is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the Matrix/array being traversed.
       */
      return typed(name$1i, {
        'Array, function': _forEach,
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.forEach(callback);
        }
      });
    });
    /**
     * forEach for a multi dimensional array
     * @param {Array} array
     * @param {Function} callback
     * @private
     */

    function _forEach(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          forEach$3(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i));
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array, []);
    }

    var name$1j = 'getMatrixDataType';
    var dependencies$1k = ['typed'];
    var createGetMatrixDataType =
    /* #__PURE__ */
    factory(name$1j, dependencies$1k, function (_ref) {
      var typed = _ref.typed;

      /**
       * Find the data type of all elements in a matrix or array,
       * for example 'number' if all items are a number and 'Complex' if all values
       * are complex numbers.
       * If a matrix contains more than one data type, it will return 'mixed'.
       *
       * Syntax:
       *
       *    math.getMatrixDataType(x)
       *
       * Examples:
       *
       *    const x = [ [1, 2, 3], [4, 5, 6] ]
       *    const mixedX = [ [1, true], [2, 3] ]
       *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
       *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
       *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
       *    const sparse = math.sparse(x)
       *    const dense = math.matrix(x)
       *    math.getMatrixDataType(x)   // returns 'number'
       *    math.getMatrixDataType(sparse)   // returns 'number'
       *    math.getMatrixDataType(dense)   // returns 'number'
       *    math.getMatrixDataType(mixedX) // returns 'mixed'
       *    math.getMatrixDataType(fractionX) // returns 'Fraction'
       *    math.getMatrixDataType(unitX) // returns 'Unit'
       *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
       *
       * See also:
       *  SparseMatrix, DenseMatrix
       *
       * @param {...Matrix | Array} x   The Matrix with values.
       *
       * @return {string} A string representation of the matrix type
       */
      return typed(name$1j, {
        Array: function Array(x) {
          return getArrayDataType(x, typeOf);
        },
        Matrix: function Matrix(x) {
          return x.getDataType();
        }
      });
    });

    var name$1k = 'identity';
    var dependencies$1l = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
    var createIdentity =
    /* #__PURE__ */
    factory(name$1k, dependencies$1l, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          BigNumber = _ref.BigNumber,
          DenseMatrix = _ref.DenseMatrix,
          SparseMatrix = _ref.SparseMatrix;

      /**
       * Create a 2-dimensional identity matrix with size m x n or n x n.
       * The matrix has ones on the diagonal and zeros elsewhere.
       *
       * Syntax:
       *
       *    math.identity(n)
       *    math.identity(n, format)
       *    math.identity(m, n)
       *    math.identity(m, n, format)
       *    math.identity([m, n])
       *    math.identity([m, n], format)
       *
       * Examples:
       *
       *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
       *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
       *
       * See also:
       *
       *    diag, ones, zeros, size, range
       *
       * @param {...number | Matrix | Array} size   The size for the matrix
       * @param {string} [format]                   The Matrix storage format
       *
       * @return {Matrix | Array | number} A matrix with ones on the diagonal.
       */
      return typed(name$1k, {
        '': function _() {
          return config.matrix === 'Matrix' ? matrix([]) : [];
        },
        string: function string(format) {
          return matrix(format);
        },
        'number | BigNumber': function numberBigNumber(rows) {
          return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, string': function numberBigNumberString(rows, format) {
          return _identity(rows, rows, format);
        },
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
          return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
          return _identity(rows, cols, format);
        },
        Array: function Array(size) {
          return _identityVector(size);
        },
        'Array, string': function ArrayString(size, format) {
          return _identityVector(size, format);
        },
        Matrix: function Matrix(size) {
          return _identityVector(size.valueOf(), size.storage());
        },
        'Matrix, string': function MatrixString(size, format) {
          return _identityVector(size.valueOf(), format);
        }
      });

      function _identityVector(size, format) {
        switch (size.length) {
          case 0:
            return format ? matrix(format) : [];

          case 1:
            return _identity(size[0], size[0], format);

          case 2:
            return _identity(size[0], size[1], format);

          default:
            throw new Error('Vector containing two values expected');
        }
      }
      /**
       * Create an identity matrix
       * @param {number | BigNumber} rows
       * @param {number | BigNumber} cols
       * @param {string} [format]
       * @returns {Matrix}
       * @private
       */


      function _identity(rows, cols, format) {
        // BigNumber constructor with the right precision
        var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;
        if (isBigNumber(rows)) rows = rows.toNumber();
        if (isBigNumber(cols)) cols = cols.toNumber();

        if (!isInteger$1(rows) || rows < 1) {
          throw new Error('Parameters in function identity must be positive integers');
        }

        if (!isInteger$1(cols) || cols < 1) {
          throw new Error('Parameters in function identity must be positive integers');
        }

        var one = Big ? new BigNumber(1) : 1;
        var defaultValue = Big ? new Big(0) : 0;
        var size = [rows, cols]; // check we need to return a matrix

        if (format) {
          // create diagonal matrix (use optimized implementation for storage format)
          if (format === 'sparse') {
            return SparseMatrix.diagonal(size, one, 0, defaultValue);
          }

          if (format === 'dense') {
            return DenseMatrix.diagonal(size, one, 0, defaultValue);
          }

          throw new TypeError("Unknown matrix type \"".concat(format, "\""));
        } // create and resize array


        var res = resize([], size, defaultValue); // fill in ones on the diagonal

        var minimum = rows < cols ? rows : cols; // fill diagonal

        for (var d = 0; d < minimum; d++) {
          res[d][d] = one;
        }

        return res;
      }
    });

    var name$1l = 'kron';
    var dependencies$1m = ['typed', 'matrix', 'multiplyScalar'];
    var createKron =
    /* #__PURE__ */
    factory(name$1l, dependencies$1m, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          multiplyScalar = _ref.multiplyScalar;

      /**
         * Calculates the kronecker product of 2 matrices or vectors.
         *
         * NOTE: If a one dimensional vector / matrix is given, it will be
         * wrapped so its two dimensions.
         * See the examples.
         *
         * Syntax:
         *
         *    math.kron(x, y)
         *
         * Examples:
         *
         *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
         *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
         *
         *    math.kron([1,1], [2,3,4])
         *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
         *
         * See also:
         *
         *    multiply, dot, cross
         *
         * @param  {Array | Matrix} x     First vector
         * @param  {Array | Matrix} y     Second vector
         * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
         */
      return typed(name$1l, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          return matrix(_kron(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return matrix(_kron(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return matrix(_kron(x, y.toArray()));
        },
        'Array, Array': _kron
      });
      /**
         * Calculate the kronecker product of two matrices / vectors
         * @param {Array} a  First vector
         * @param {Array} b  Second vector
         * @returns {Array} Returns the kronecker product of x and y
         * @private
         */

      function _kron(a, b) {
        // Deal with the dimensions of the matricies.
        if (arraySize(a).length === 1) {
          // Wrap it in a 2D Matrix
          a = [a];
        }

        if (arraySize(b).length === 1) {
          // Wrap it in a 2D Matrix
          b = [b];
        }

        if (arraySize(a).length > 2 || arraySize(b).length > 2) {
          throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
        }

        var t = [];
        var r = [];
        return a.map(function (a) {
          return b.map(function (b) {
            r = [];
            t.push(r);
            return a.map(function (y) {
              return b.map(function (x) {
                return r.push(multiplyScalar(y, x));
              });
            });
          });
        }) && t;
      }
    });

    var name$1m = 'map';
    var dependencies$1n = ['typed'];
    var createMap =
    /* #__PURE__ */
    factory(name$1m, dependencies$1n, function (_ref) {
      var typed = _ref.typed;

      /**
       * Create a new matrix or array with the results of the callback function executed on
       * each entry of the matrix/array.
       *
       * Syntax:
       *
       *    math.map(x, callback)
       *
       * Examples:
       *
       *    math.map([1, 2, 3], function(value) {
       *      return value * value
       *    })  // returns [1, 4, 9]
       *
       * See also:
       *
       *    filter, forEach, sort
       *
       * @param {Matrix | Array} x    The matrix to iterate on.
       * @param {Function} callback   The callback method is invoked with three
       *                              parameters: the value of the element, the index
       *                              of the element, and the matrix being traversed.
       * @return {Matrix | array}     Transformed map of x
       */
      return typed(name$1m, {
        'Array, function': _map,
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.map(callback);
        }
      });
    });
    /**
     * Map for a multi dimensional array
     * @param {Array} array
     * @param {Function} callback
     * @return {Array}
     * @private
     */

    function _map(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          return value.map(function (child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i));
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            return callback(value);
          } else if (args === 2) {
            return callback(value, index);
          } else {
            // 3 or -1
            return callback(value, index, array);
          }
        }
      };

      return recurse(array, []);
    }

    var name$1n = 'ones';
    var dependencies$1o = ['typed', 'config', 'matrix', 'BigNumber'];
    var createOnes =
    /* #__PURE__ */
    factory(name$1n, dependencies$1o, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          BigNumber = _ref.BigNumber;

      /**
       * Create a matrix filled with ones. The created matrix can have one or
       * multiple dimensions.
       *
       * Syntax:
       *
       *    math.ones(m)
       *    math.ones(m, format)
       *    math.ones(m, n)
       *    math.ones(m, n, format)
       *    math.ones([m, n])
       *    math.ones([m, n], format)
       *    math.ones([m, n, p, ...])
       *    math.ones([m, n, p, ...], format)
       *
       * Examples:
       *
       *    math.ones(3)                   // returns [1, 1, 1]
       *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
       *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
       *
       * See also:
       *
       *    zeros, identity, size, range
       *
       * @param {...number | Array} size    The size of each dimension of the matrix
       * @param {string} [format]           The Matrix storage format
       *
       * @return {Array | Matrix | number}  A matrix filled with ones
       */
      return typed('ones', {
        '': function _() {
          return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
        },
        // math.ones(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
          var last = size[size.length - 1];

          if (typeof last === 'string') {
            var format = size.pop();
            return _ones(size, format);
          } else if (config.matrix === 'Array') {
            return _ones(size);
          } else {
            return _ones(size, 'default');
          }
        },
        Array: _ones,
        Matrix: function Matrix(size) {
          var format = size.storage();
          return _ones(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
          return _ones(size.valueOf(), format);
        }
      });
      /**
       * Create an Array or Matrix with ones
       * @param {Array} size
       * @param {string} [format='default']
       * @return {Array | Matrix}
       * @private
       */

      function _ones(size, format) {
        var hasBigNumbers = _normalize(size);

        var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

        _validate(size);

        if (format) {
          // return a matrix
          var m = matrix(format);

          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }

          return m;
        } else {
          // return an Array
          var arr = [];

          if (size.length > 0) {
            return resize(arr, size, defaultValue);
          }

          return arr;
        }
      } // replace BigNumbers with numbers, returns true if size contained BigNumbers


      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function (value, index, arr) {
          if (isBigNumber(value)) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      } // validate arguments


      function _validate(size) {
        size.forEach(function (value) {
          if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
            throw new Error('Parameters in function ones must be positive integers');
          }
        });
      }
    });

    function noBignumber() {
      throw new Error('No "bignumber" implementation available');
    }
    function noFraction() {
      throw new Error('No "fraction" implementation available');
    }
    function noMatrix() {
      throw new Error('No "matrix" implementation available');
    }

    var name$1o = 'range';
    var dependencies$1p = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
    var createRange =
    /* #__PURE__ */
    factory(name$1o, dependencies$1p, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          bignumber = _ref.bignumber,
          smaller = _ref.smaller,
          smallerEq = _ref.smallerEq,
          larger = _ref.larger,
          largerEq = _ref.largerEq;

      /**
       * Create an array from a range.
       * By default, the range end is excluded. This can be customized by providing
       * an extra parameter `includeEnd`.
       *
       * Syntax:
       *
       *     math.range(str [, includeEnd])               // Create a range from a string,
       *                                                  // where the string contains the
       *                                                  // start, optional step, and end,
       *                                                  // separated by a colon.
       *     math.range(start, end [, includeEnd])        // Create a range with start and
       *                                                  // end and a step size of 1.
       *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
       *                                                  // and end.
       *
       * Where:
       *
       * - `str: string`
       *   A string 'start:end' or 'start:step:end'
       * - `start: {number | BigNumber}`
       *   Start of the range
       * - `end: number | BigNumber`
       *   End of the range, excluded by default, included when parameter includeEnd=true
       * - `step: number | BigNumber`
       *   Step size. Default value is 1.
       * - `includeEnd: boolean`
       *   Option to specify whether to include the end or not. False by default.
       *
       * Examples:
       *
       *     math.range(2, 6)        // [2, 3, 4, 5]
       *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
       *     math.range('2:1:6')     // [2, 3, 4, 5]
       *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
       *
       * See also:
       *
       *     ones, zeros, size, subset
       *
       * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
       * @return {Array | Matrix} range
       */
      return typed(name$1o, {
        // TODO: simplify signatures when typed-function supports default values and optional arguments
        // TODO: a number or boolean should not be converted to string here
        string: _strRange,
        'string, boolean': _strRange,
        'number, number': function numberNumber(start, end) {
          return _out(_rangeEx(start, end, 1));
        },
        'number, number, number': function numberNumberNumber(start, end, step) {
          return _out(_rangeEx(start, end, step));
        },
        'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
        },
        'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
          var BigNumber = start.constructor;
          return _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
          return _out(_bigRangeEx(start, end, step));
        },
        'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
          var BigNumber = start.constructor;
          return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
          return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
        }
      });

      function _out(arr) {
        if (config.matrix === 'Matrix') {
          return matrix ? matrix(arr) : noMatrix();
        }

        return arr;
      }

      function _strRange(str, includeEnd) {
        var r = _parse(str);

        if (!r) {
          throw new SyntaxError('String "' + str + '" is no valid range');
        }

        var fn;

        if (config.number === 'BigNumber') {
          if (bignumber === undefined) {
            noBignumber();
          }

          fn = includeEnd ? _bigRangeInc : _bigRangeEx;
          return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
        } else {
          fn = includeEnd ? _rangeInc : _rangeEx;
          return _out(fn(r.start, r.end, r.step));
        }
      }
      /**
       * Create a range with numbers. End is excluded
       * @param {number} start
       * @param {number} end
       * @param {number} step
       * @returns {Array} range
       * @private
       */


      function _rangeEx(start, end, step) {
        var array = [];
        var x = start;

        if (step > 0) {
          while (smaller(x, end)) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (larger(x, end)) {
            array.push(x);
            x += step;
          }
        }

        return array;
      }
      /**
       * Create a range with numbers. End is included
       * @param {number} start
       * @param {number} end
       * @param {number} step
       * @returns {Array} range
       * @private
       */


      function _rangeInc(start, end, step) {
        var array = [];
        var x = start;

        if (step > 0) {
          while (smallerEq(x, end)) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (largerEq(x, end)) {
            array.push(x);
            x += step;
          }
        }

        return array;
      }
      /**
       * Create a range with big numbers. End is excluded
       * @param {BigNumber} start
       * @param {BigNumber} end
       * @param {BigNumber} step
       * @returns {Array} range
       * @private
       */


      function _bigRangeEx(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;

        if (step.gt(zero)) {
          while (smaller(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(zero)) {
          while (larger(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        }

        return array;
      }
      /**
       * Create a range with big numbers. End is included
       * @param {BigNumber} start
       * @param {BigNumber} end
       * @param {BigNumber} step
       * @returns {Array} range
       * @private
       */


      function _bigRangeInc(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;

        if (step.gt(zero)) {
          while (smallerEq(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(zero)) {
          while (largerEq(x, end)) {
            array.push(x);
            x = x.plus(step);
          }
        }

        return array;
      }
      /**
       * Parse a string into a range,
       * The string contains the start, optional step, and end, separated by a colon.
       * If the string does not contain a valid range, null is returned.
       * For example str='0:2:11'.
       * @param {string} str
       * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
       * @private
       */


      function _parse(str) {
        var args = str.split(':'); // number

        var nums = args.map(function (arg) {
          // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
          return Number(arg);
        });
        var invalid = nums.some(function (num) {
          return isNaN(num);
        });

        if (invalid) {
          return null;
        }

        switch (nums.length) {
          case 2:
            return {
              start: nums[0],
              end: nums[1],
              step: 1
            };

          case 3:
            return {
              start: nums[0],
              end: nums[2],
              step: nums[1]
            };

          default:
            return null;
        }
      }
    });

    var name$1p = 'reshape';
    var dependencies$1q = ['typed', 'isInteger', 'matrix'];
    var createReshape =
    /* #__PURE__ */
    factory(name$1p, dependencies$1q, function (_ref) {
      var typed = _ref.typed,
          isInteger = _ref.isInteger,
          matrix = _ref.matrix;

      /**
       * Reshape a multi dimensional array to fit the specified dimensions
       *
       * Syntax:
       *
       *     math.reshape(x, sizes)
       *
       * Examples:
       *
       *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
       *     // returns Array  [[1, 2, 3], [4, 5, 6]]
       *
       *     math.reshape([[1, 2], [3, 4]], [1, 4])
       *     // returns Array  [[1, 2, 3, 4]]
       *
       *     math.reshape([[1, 2], [3, 4]], [4])
       *     // returns Array [1, 2, 3, 4]
       *
       *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
       *     math.reshape(x, [2, 2, 2])
       *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
       *
       * See also:
       *
       *     size, squeeze, resize
       *
       * @param {Array | Matrix | *} x  Matrix to be reshaped
       * @param {number[]} sizes        One dimensional array with integral sizes for
       *                                each dimension
       *
       * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
       *
       * @throws {TypeError}            If `sizes` does not contain solely integers
       * @throws {DimensionError}       If the product of the new dimension sizes does
       *                                not equal that of the old ones
       */
      return typed(name$1p, {
        'Matrix, Array': function MatrixArray(x, sizes) {
          if (x.reshape) {
            return x.reshape(sizes);
          } else {
            return matrix(reshape(x.valueOf(), sizes));
          }
        },
        'Array, Array': function ArrayArray(x, sizes) {
          sizes.forEach(function (size) {
            if (!isInteger(size)) {
              throw new TypeError('Invalid size for dimension: ' + size);
            }
          });
          return reshape(x, sizes);
        }
      });
    });

    /**
     * Create a syntax error with the message:
     *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
     * @param {string} fn     Function name
     * @param {number} count  Actual argument count
     * @param {number} min    Minimum required argument count
     * @param {number} [max]  Maximum required argument count
     * @extends Error
     */
    function ArgumentsError(fn, count, min, max) {
      if (!(this instanceof ArgumentsError)) {
        throw new SyntaxError('Constructor must be called with the new operator');
      }

      this.fn = fn;
      this.count = count;
      this.min = min;
      this.max = max;
      this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
      this.stack = new Error().stack;
    }
    ArgumentsError.prototype = new Error();
    ArgumentsError.prototype.constructor = Error;
    ArgumentsError.prototype.name = 'ArgumentsError';
    ArgumentsError.prototype.isArgumentsError = true;

    var name$1q = 'resize';
    var dependencies$1r = ['config', 'matrix'];
    var createResize =
    /* #__PURE__ */
    factory(name$1q, dependencies$1r, function (_ref) {
      var config = _ref.config,
          matrix = _ref.matrix;

      /**
       * Resize a matrix
       *
       * Syntax:
       *
       *     math.resize(x, size)
       *     math.resize(x, size, defaultValue)
       *
       * Examples:
       *
       *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
       *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
       *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
       *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
       *
       * See also:
       *
       *     size, squeeze, subset, reshape
       *
       * @param {Array | Matrix | *} x             Matrix to be resized
       * @param {Array | Matrix} size              One dimensional array with numbers
       * @param {number | string} [defaultValue=0] Zero by default, except in
       *                                           case of a string, in that case
       *                                           defaultValue = ' '
       * @return {* | Array | Matrix} A resized clone of matrix `x`
       */
      // TODO: rework resize to a typed-function
      return function resize$1(x, size, defaultValue) {
        if (arguments.length !== 2 && arguments.length !== 3) {
          throw new ArgumentsError('resize', arguments.length, 2, 3);
        }

        if (isMatrix(size)) {
          size = size.valueOf(); // get Array
        }

        if (isBigNumber(size[0])) {
          // convert bignumbers to numbers
          size = size.map(function (value) {
            return !isBigNumber(value) ? value : value.toNumber();
          });
        } // check x is a Matrix


        if (isMatrix(x)) {
          // use optimized matrix implementation, return copy
          return x.resize(size, defaultValue, true);
        }

        if (typeof x === 'string') {
          // resize string
          return _resizeString(x, size, defaultValue);
        } // check result should be a matrix


        var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

        if (size.length === 0) {
          // output a scalar
          while (Array.isArray(x)) {
            x = x[0];
          }

          return clone$3(x);
        } else {
          // output an array/matrix
          if (!Array.isArray(x)) {
            x = [x];
          }

          x = clone$3(x);
          var res = resize(x, size, defaultValue);
          return asMatrix ? matrix(res) : res;
        }
      };
      /**
       * Resize a string
       * @param {string} str
       * @param {number[]} size
       * @param {string} [defaultChar=' ']
       * @private
       */

      function _resizeString(str, size, defaultChar) {
        if (defaultChar !== undefined) {
          if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
            throw new TypeError('Single character expected as defaultValue');
          }
        } else {
          defaultChar = ' ';
        }

        if (size.length !== 1) {
          throw new DimensionError(size.length, 1);
        }

        var len = size[0];

        if (typeof len !== 'number' || !isInteger$1(len)) {
          throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$5(size) + ')');
        }

        if (str.length > len) {
          return str.substring(0, len);
        } else if (str.length < len) {
          var res = str;

          for (var i = 0, ii = len - str.length; i < ii; i++) {
            res += defaultChar;
          }

          return res;
        } else {
          return str;
        }
      }
    });

    var name$1r = 'row';
    var dependencies$1s = ['typed', 'Index', 'matrix', 'range'];
    var createRow =
    /* #__PURE__ */
    factory(name$1r, dependencies$1s, function (_ref) {
      var typed = _ref.typed,
          Index = _ref.Index,
          matrix = _ref.matrix,
          range = _ref.range;

      /**
       * Return a row from a Matrix.
       *
       * Syntax:
       *
       *     math.row(value, index)
       *
       * Example:
       *
       *     // get a row
       *     const d = [[1, 2], [3, 4]]
       *     math.row(d, 1) // returns [3, 4]
       *
       * See also:
       *
       *     column
       *
       * @param {Array | Matrix } value   An array or matrix
       * @param {number} row              The index of the row
       * @return {Array | Matrix}         The retrieved row
       */
      var row = typed(name$1r, {
        'Matrix, number': _row,
        'Array, number': function ArrayNumber(value, row) {
          return _row(matrix(clone$3(value)), row).valueOf();
        }
      });
      return row;
      /**
       * Retrieve a row of a matrix
       * @param {Matrix } value  A matrix
       * @param {number} row     The index of the row
       * @return {Matrix}        The retrieved row
       */

      function _row(value, row) {
        // check dimensions
        if (value.size().length !== 2) {
          throw new Error('Only two dimensional matrix is supported');
        }

        validateIndex(row, value.size()[0]);
        var columnRange = range(0, value.size()[1]);
        var index = new Index(row, columnRange);
        return value.subset(index);
      }
    });

    var name$1s = 'size';
    var dependencies$1t = ['typed', 'config', '?matrix'];
    var createSize =
    /* #__PURE__ */
    factory(name$1s, dependencies$1t, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix;

      /**
       * Calculate the size of a matrix or scalar.
       *
       * Syntax:
       *
       *     math.size(x)
       *
       * Examples:
       *
       *     math.size(2.3)                  // returns []
       *     math.size('hello world')        // returns [11]
       *
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.size(A)                    // returns [2, 3]
       *     math.size(math.range(1,6))      // returns [5]
       *
       * See also:
       *
       *     resize, squeeze, subset
       *
       * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
       * @return {Array | Matrix} A vector with size of `x`.
       */
      return typed(name$1s, {
        Matrix: function Matrix(x) {
          return x.create(x.size());
        },
        Array: arraySize,
        string: function string(x) {
          return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
        },
        'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
          // scalar
          return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
        }
      });
    });

    var name$1t = 'squeeze';
    var dependencies$1u = ['typed', 'matrix'];
    var createSqueeze =
    /* #__PURE__ */
    factory(name$1t, dependencies$1u, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;

      /**
       * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
       *
       * Syntax:
       *
       *     math.squeeze(x)
       *
       * Examples:
       *
       *     math.squeeze([3])           // returns 3
       *     math.squeeze([[3]])         // returns 3
       *
       *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
       *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
       *
       *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
       *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
       *
       *     // only inner and outer dimensions are removed
       *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
       *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
       *
       * See also:
       *
       *     subset
       *
       * @param {Matrix | Array} x      Matrix to be squeezed
       * @return {Matrix | Array} Squeezed matrix
       */
      return typed(name$1t, {
        Array: function Array(x) {
          return squeeze(clone$3(x));
        },
        Matrix: function Matrix(x) {
          var res = squeeze(x.toArray()); // FIXME: return the same type of matrix as the input

          return Array.isArray(res) ? matrix(res) : res;
        },
        any: function any(x) {
          // scalar
          return clone$3(x);
        }
      });
    });

    function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }
    /**
     * Get a property of a plain object
     * Throws an error in case the object is not a plain object or the
     * property is not defined on the object itself
     * @param {Object} object
     * @param {string} prop
     * @return {*} Returns the property value when safe
     */

    function getSafeProperty(object, prop) {
      // only allow getting safe properties of a plain object
      if (isPlainObject$1(object) && isSafeProperty(object, prop)) {
        return object[prop];
      }

      if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
        throw new Error('Cannot access method "' + prop + '" as a property');
      }

      throw new Error('No access to property "' + prop + '"');
    }
    /**
     * Set a property on a plain object.
     * Throws an error in case the object is not a plain object or the
     * property would override an inherited property like .constructor or .toString
     * @param {Object} object
     * @param {string} prop
     * @param {*} value
     * @return {*} Returns the value
     */
    // TODO: merge this function into access.js?


    function setSafeProperty(object, prop, value) {
      // only allow setting safe properties of a plain object
      if (isPlainObject$1(object) && isSafeProperty(object, prop)) {
        object[prop] = value;
        return value;
      }

      throw new Error('No access to property "' + prop + '"');
    }
    /**
     * Test whether a property is safe to use for an object.
     * For example .toString and .constructor are not safe
     * @param {string} prop
     * @return {boolean} Returns true when safe
     */


    function isSafeProperty(object, prop) {
      if (!object || _typeof$5(object) !== 'object') {
        return false;
      } // SAFE: whitelisted
      // e.g length


      if (hasOwnProperty$1(safeNativeProperties, prop)) {
        return true;
      } // UNSAFE: inherited from Object prototype
      // e.g constructor


      if (prop in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      } // UNSAFE: inherited from Function prototype
      // e.g call, apply


      if (prop in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }

      return true;
    }
    /**
     * Validate whether a method is safe.
     * Throws an error when that's not the case.
     * @param {Object} object
     * @param {string} method
     */
    // TODO: merge this function into assign.js?


    function validateSafeMethod(object, method) {
      if (!isSafeMethod(object, method)) {
        throw new Error('No access to method "' + method + '"');
      }
    }
    /**
     * Check whether a method is safe.
     * Throws an error when that's not the case (for example for `constructor`).
     * @param {Object} object
     * @param {string} method
     * @return {boolean} Returns true when safe, false otherwise
     */


    function isSafeMethod(object, method) {
      if (object === null || object === undefined || typeof object[method] !== 'function') {
        return false;
      } // UNSAFE: ghosted
      // e.g overridden toString
      // Note that IE10 doesn't support __proto__ and we can't do this check there.


      if (hasOwnProperty$1(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
        return false;
      } // SAFE: whitelisted
      // e.g toString


      if (hasOwnProperty$1(safeNativeMethods, method)) {
        return true;
      } // UNSAFE: inherited from Object prototype
      // e.g constructor


      if (method in Object.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Object.prototype is a root object
        return false;
      } // UNSAFE: inherited from Function prototype
      // e.g call, apply


      if (method in Function.prototype) {
        // 'in' is used instead of hasOwnProperty for nodejs v0.10
        // which is inconsistent on root prototypes. It is safe
        // here because Function.prototype is a root object
        return false;
      }

      return true;
    }

    function isPlainObject$1(object) {
      return _typeof$5(object) === 'object' && object && object.constructor === Object;
    }

    var safeNativeProperties = {
      length: true,
      name: true
    };
    var safeNativeMethods = {
      toString: true,
      valueOf: true,
      toLocaleString: true
    };

    var name$1u = 'subset';
    var dependencies$1v = ['typed', 'matrix'];
    var createSubset =
    /* #__PURE__ */
    factory(name$1u, dependencies$1v, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;

      /**
       * Get or set a subset of a matrix or string.
       *
       * Syntax:
       *     math.subset(value, index)                                // retrieve a subset
       *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
       *
       * Examples:
       *
       *     // get a subset
       *     const d = [[1, 2], [3, 4]]
       *     math.subset(d, math.index(1, 0))        // returns 3
       *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
       *
       *     // replace a subset
       *     const e = []
       *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
       *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
       *
       * See also:
       *
       *     size, resize, squeeze, index
       *
       * @param {Array | Matrix | string} matrix  An array, matrix, or string
       * @param {Index} index                     An index containing ranges for each
       *                                          dimension
       * @param {*} [replacement]                 An array, matrix, or scalar.
       *                                          If provided, the subset is replaced with replacement.
       *                                          If not provided, the subset is returned
       * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
       *                                          the matrix is resized. If not provided,
       *                                          math.matrix elements will be left undefined.
       * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
       */
      return typed(name$1u, {
        // get subset
        'Array, Index': function ArrayIndex(value, index) {
          var m = matrix(value);
          var subset = m.subset(index); // returns a Matrix

          return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
        },
        'Matrix, Index': function MatrixIndex(value, index) {
          return value.subset(index);
        },
        'Object, Index': _getObjectProperty,
        'string, Index': _getSubstring,
        // set subset
        'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
          return matrix(clone$3(value)).subset(index, replacement, undefined).valueOf();
        },
        'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
          return matrix(clone$3(value)).subset(index, replacement, defaultValue).valueOf();
        },
        'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
          return value.clone().subset(index, replacement);
        },
        'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
          return value.clone().subset(index, replacement, defaultValue);
        },
        'string, Index, string': _setSubstring,
        'string, Index, string, string': _setSubstring,
        'Object, Index, any': _setObjectProperty
      });
    });
    /**
     * Retrieve a subset of a string
     * @param {string} str            string from which to get a substring
     * @param {Index} index           An index containing ranges for each dimension
     * @returns {string} substring
     * @private
     */

    function _getSubstring(str, index) {
      if (!isIndex(index)) {
        // TODO: better error message
        throw new TypeError('Index expected');
      }

      if (index.size().length !== 1) {
        throw new DimensionError(index.size().length, 1);
      } // validate whether the range is out of range


      var strLen = str.length;
      validateIndex(index.min()[0], strLen);
      validateIndex(index.max()[0], strLen);
      var range = index.dimension(0);
      var substr = '';
      range.forEach(function (v) {
        substr += str.charAt(v);
      });
      return substr;
    }
    /**
     * Replace a substring in a string
     * @param {string} str            string to be replaced
     * @param {Index} index           An index containing ranges for each dimension
     * @param {string} replacement    Replacement string
     * @param {string} [defaultValue] Default value to be uses when resizing
     *                                the string. is ' ' by default
     * @returns {string} result
     * @private
     */


    function _setSubstring(str, index, replacement, defaultValue) {
      if (!index || index.isIndex !== true) {
        // TODO: better error message
        throw new TypeError('Index expected');
      }

      if (index.size().length !== 1) {
        throw new DimensionError(index.size().length, 1);
      }

      if (defaultValue !== undefined) {
        if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
          throw new TypeError('Single character expected as defaultValue');
        }
      } else {
        defaultValue = ' ';
      }

      var range = index.dimension(0);
      var len = range.size()[0];

      if (len !== replacement.length) {
        throw new DimensionError(range.size()[0], replacement.length);
      } // validate whether the range is out of range


      var strLen = str.length;
      validateIndex(index.min()[0]);
      validateIndex(index.max()[0]); // copy the string into an array with characters

      var chars = [];

      for (var i = 0; i < strLen; i++) {
        chars[i] = str.charAt(i);
      }

      range.forEach(function (v, i) {
        chars[v] = replacement.charAt(i[0]);
      }); // initialize undefined characters with a space

      if (chars.length > strLen) {
        for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
          if (!chars[_i]) {
            chars[_i] = defaultValue;
          }
        }
      }

      return chars.join('');
    }
    /**
     * Retrieve a property from an object
     * @param {Object} object
     * @param {Index} index
     * @return {*} Returns the value of the property
     * @private
     */


    function _getObjectProperty(object, index) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }

      var key = index.dimension(0);

      if (typeof key !== 'string') {
        throw new TypeError('String expected as index to retrieve an object property');
      }

      return getSafeProperty(object, key);
    }
    /**
     * Set a property on an object
     * @param {Object} object
     * @param {Index} index
     * @param {*} replacement
     * @return {*} Returns the updated object
     * @private
     */


    function _setObjectProperty(object, index, replacement) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }

      var key = index.dimension(0);

      if (typeof key !== 'string') {
        throw new TypeError('String expected as index to retrieve an object property');
      } // clone the object, and apply the property to the clone


      var updated = clone$3(object);
      setSafeProperty(updated, key, replacement);
      return updated;
    }

    var name$1v = 'transpose';
    var dependencies$1w = ['typed', 'matrix'];
    var createTranspose =
    /* #__PURE__ */
    factory(name$1v, dependencies$1w, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;

      /**
       * Transpose a matrix. All values of the matrix are reflected over its
       * main diagonal. Only applicable to two dimensional matrices containing
       * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
       * vectors and scalars return the input unchanged.
       *
       * Syntax:
       *
       *     math.transpose(x)
       *
       * Examples:
       *
       *     const A = [[1, 2, 3], [4, 5, 6]]
       *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
       *
       * See also:
       *
       *     diag, inv, subset, squeeze
       *
       * @param {Array | Matrix} x  Matrix to be transposed
       * @return {Array | Matrix}   The transposed matrix
       */
      var transpose = typed('transpose', {
        Array: function Array(x) {
          // use dense matrix implementation
          return transpose(matrix(x)).valueOf();
        },
        Matrix: function Matrix(x) {
          // matrix size
          var size = x.size(); // result

          var c; // process dimensions

          switch (size.length) {
            case 1:
              // vector
              c = x.clone();
              break;

            case 2:
              {
                // rows and columns
                var rows = size[0];
                var columns = size[1]; // check columns

                if (columns === 0) {
                  // throw exception
                  throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format$5(size) + ')');
                } // process storage format


                switch (x.storage()) {
                  case 'dense':
                    c = _denseTranspose(x, rows, columns);
                    break;

                  case 'sparse':
                    c = _sparseTranspose(x, rows, columns);
                    break;
                }
              }
              break;

            default:
              // multi dimensional
              throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format$5(this._size) + ')');
          }

          return c;
        },
        // scalars
        any: function any(x) {
          return clone$3(x);
        }
      });

      function _denseTranspose(m, rows, columns) {
        // matrix array
        var data = m._data; // transposed matrix data

        var transposed = [];
        var transposedRow; // loop columns

        for (var j = 0; j < columns; j++) {
          // initialize row
          transposedRow = transposed[j] = []; // loop rows

          for (var i = 0; i < rows; i++) {
            // set data
            transposedRow[i] = clone$3(data[i][j]);
          }
        } // return matrix


        return m.createDenseMatrix({
          data: transposed,
          size: [columns, rows],
          datatype: m._datatype
        });
      }

      function _sparseTranspose(m, rows, columns) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result matrices

        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // row counts

        var w = [];

        for (var x = 0; x < rows; x++) {
          w[x] = 0;
        } // vars


        var p, l, j; // loop values in matrix

        for (p = 0, l = index.length; p < l; p++) {
          // number of values in row
          w[index[p]]++;
        } // cumulative sum


        var sum = 0; // initialize cptr with the cummulative sum of row counts

        for (var i = 0; i < rows; i++) {
          // update cptr
          cptr.push(sum); // update sum

          sum += w[i]; // update w

          w[i] = cptr[i];
        } // update cptr


        cptr.push(sum); // loop columns

        for (j = 0; j < columns; j++) {
          // values & index in column
          for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
            // C values & index
            var q = w[index[k]]++; // C[j, i] = A[i, j]

            cindex[q] = j; // check we need to process values (pattern matrix)

            if (values) {
              cvalues[q] = clone$3(values[k]);
            }
          }
        } // return matrix


        return m.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [columns, rows],
          datatype: m._datatype
        });
      }

      return transpose;
    });

    var name$1w = 'ctranspose';
    var dependencies$1x = ['typed', 'transpose', 'conj'];
    var createCtranspose =
    /* #__PURE__ */
    factory(name$1w, dependencies$1x, function (_ref) {
      var typed = _ref.typed,
          transpose = _ref.transpose,
          conj = _ref.conj;

      /**
       * Transpose and complex conjugate a matrix. All values of the matrix are
       * reflected over its main diagonal and then the complex conjugate is
       * taken. This is equivalent to complex conjugation for scalars and
       * vectors.
       *
       * Syntax:
       *
       *     math.ctranspose(x)
       *
       * Examples:
       *
       *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
       *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
       *
       * See also:
       *
       *     transpose, diag, inv, subset, squeeze
       *
       * @param {Array | Matrix} x  Matrix to be ctransposed
       * @return {Array | Matrix}   The ctransposed matrix
       */
      return typed(name$1w, {
        any: function any(x) {
          return conj(transpose(x));
        }
      });
    });

    var name$1x = 'zeros';
    var dependencies$1y = ['typed', 'config', 'matrix', 'BigNumber'];
    var createZeros =
    /* #__PURE__ */
    factory(name$1x, dependencies$1y, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          BigNumber = _ref.BigNumber;

      /**
       * Create a matrix filled with zeros. The created matrix can have one or
       * multiple dimensions.
       *
       * Syntax:
       *
       *    math.zeros(m)
       *    math.zeros(m, format)
       *    math.zeros(m, n)
       *    math.zeros(m, n, format)
       *    math.zeros([m, n])
       *    math.zeros([m, n], format)
       *
       * Examples:
       *
       *    math.zeros(3)                  // returns [0, 0, 0]
       *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
       *    math.zeros(3, 'dense')         // returns [0, 0, 0]
       *
       *    const A = [[1, 2, 3], [4, 5, 6]]
       *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
       *
       * See also:
       *
       *    ones, identity, size, range
       *
       * @param {...number | Array} size    The size of each dimension of the matrix
       * @param {string} [format]           The Matrix storage format
       *
       * @return {Array | Matrix}           A matrix filled with zeros
       */
      return typed(name$1x, {
        '': function _() {
          return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
        },
        // math.zeros(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
          var last = size[size.length - 1];

          if (typeof last === 'string') {
            var format = size.pop();
            return _zeros(size, format);
          } else if (config.matrix === 'Array') {
            return _zeros(size);
          } else {
            return _zeros(size, 'default');
          }
        },
        Array: _zeros,
        Matrix: function Matrix(size) {
          var format = size.storage();
          return _zeros(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
          return _zeros(size.valueOf(), format);
        }
      });
      /**
       * Create an Array or Matrix with zeros
       * @param {Array} size
       * @param {string} [format='default']
       * @return {Array | Matrix}
       * @private
       */

      function _zeros(size, format) {
        var hasBigNumbers = _normalize(size);

        var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

        _validate(size);

        if (format) {
          // return a matrix
          var m = matrix(format);

          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }

          return m;
        } else {
          // return an Array
          var arr = [];

          if (size.length > 0) {
            return resize(arr, size, defaultValue);
          }

          return arr;
        }
      } // replace BigNumbers with numbers, returns true if size contained BigNumbers


      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function (value, index, arr) {
          if (isBigNumber(value)) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      } // validate arguments


      function _validate(size) {
        size.forEach(function (value) {
          if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
            throw new Error('Parameters in function zeros must be positive integers');
          }
        });
      }
    }); // TODO: zeros contains almost the same code as ones. Reuse this?

    var name$1y = 'erf';
    var dependencies$1z = ['typed'];
    var createErf =
    /* #__PURE__ */
    factory(name$1y, dependencies$1z, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the erf function of a value using a rational Chebyshev
       * approximations for different intervals of x.
       *
       * This is a translation of W. J. Cody's Fortran implementation from 1987
       * ( https://www.netlib.org/specfun/erf ). See the AMS publication
       * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
       * for an explanation of this process.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.erf(x)
       *
       * Examples:
       *
       *    math.erf(0.2)    // returns 0.22270258921047847
       *    math.erf(-0.5)   // returns -0.5204998778130465
       *    math.erf(4)      // returns 0.9999999845827421
       *
       * @param {number | Array | Matrix} x   A real number
       * @return {number | Array | Matrix}    The erf of `x`
       */
      var erf = typed('name', {
        number: function number(x) {
          var y = Math.abs(x);

          if (y >= MAX_NUM) {
            return sign(x);
          }

          if (y <= THRESH) {
            return sign(x) * erf1(y);
          }

          if (y <= 4.0) {
            return sign(x) * (1 - erfc2(y));
          }

          return sign(x) * (1 - erfc3(y));
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, erf);
        } // TODO: For complex numbers, use the approximation for the Faddeeva function
        //  from "More Efficient Computation of the Complex Error Function" (AMS)

      });
      /**
       * Approximates the error function erf() for x <= 0.46875 using this function:
       *               n
       * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
       *              j=0
       */

      function erf1(y) {
        var ysq = y * y;
        var xnum = P[0][4] * ysq;
        var xden = ysq;
        var i;

        for (i = 0; i < 3; i += 1) {
          xnum = (xnum + P[0][i]) * ysq;
          xden = (xden + Q[0][i]) * ysq;
        }

        return y * (xnum + P[0][3]) / (xden + Q[0][3]);
      }
      /**
       * Approximates the complement of the error function erfc() for
       * 0.46875 <= x <= 4.0 using this function:
       *                       n
       * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
       *                      j=0
       */


      function erfc2(y) {
        var xnum = P[1][8] * y;
        var xden = y;
        var i;

        for (i = 0; i < 7; i += 1) {
          xnum = (xnum + P[1][i]) * y;
          xden = (xden + Q[1][i]) * y;
        }

        var result = (xnum + P[1][7]) / (xden + Q[1][7]);
        var ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }
      /**
       * Approximates the complement of the error function erfc() for x > 4.0 using
       * this function:
       *
       * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
       *               n
       *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
       *              j=0
       */


      function erfc3(y) {
        var ysq = 1 / (y * y);
        var xnum = P[2][5] * ysq;
        var xden = ysq;
        var i;

        for (i = 0; i < 4; i += 1) {
          xnum = (xnum + P[2][i]) * ysq;
          xden = (xden + Q[2][i]) * ysq;
        }

        var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
        result = (SQRPI - result) / y;
        ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }

      return erf;
    });
    /**
     * Upper bound for the first approximation interval, 0 <= x <= THRESH
     * @constant
     */

    var THRESH = 0.46875;
    /**
     * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
     * @constant
     */

    var SQRPI = 5.6418958354775628695e-1;
    /**
     * Coefficients for each term of the numerator sum (p_j) for each approximation
     * interval (see W. J. Cody's paper for more details)
     * @constant
     */

    var P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
    /**
     * Coefficients for each term of the denominator sum (q_j) for each approximation
     * interval (see W. J. Cody's paper for more details)
     * @constant
     */

    var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
    /**
     * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
     * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
     * return 1
     */

    var MAX_NUM = Math.pow(2, 53);

    var name$1z = 'mode';
    var dependencies$1A = ['typed', 'isNaN', 'isNumeric'];
    var createMode =
    /* #__PURE__ */
    factory(name$1z, dependencies$1A, function (_ref) {
      var typed = _ref.typed,
          isNaN = _ref.isNaN,
          isNumeric = _ref.isNumeric;

      /**
      * Computes the mode of a set of numbers or a list with values(numbers or characters).
      * If there are more than one modes, it returns a list of those values.
      *
      * Syntax:
      *
      *     math.mode(a, b, c, ...)
      *     math.mode(A)
      *
      * Examples:
      *
      *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
      *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
      *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
      *     math.mode('a','a','b','c')                           // returns ["a"]
      *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
      *
      * See also:
      *
      *     median,
      *     mean
      *
      * @param {... *} args  A single matrix
      * @return {*} The mode of all values
      */
      return typed(name$1z, {
        'Array | Matrix': _mode,
        '...': function _(args) {
          return _mode(args);
        }
      });
      /**
       * Calculates the mode in an 1-dimensional array
       * @param {Array} values
       * @return {Array} mode
       * @private
       */

      function _mode(values) {
        values = flatten$2(values.valueOf());
        var num = values.length;

        if (num === 0) {
          throw new Error('Cannot calculate mode of an empty array');
        }

        var count = {};
        var mode = [];
        var max = 0;

        for (var i = 0; i < values.length; i++) {
          var value = values[i];

          if (isNumeric(value) && isNaN(value)) {
            throw new Error('Cannot calculate mode of an array containing NaN values');
          }

          if (!(value in count)) {
            count[value] = 0;
          }

          count[value]++;

          if (count[value] === max) {
            mode.push(value);
          } else if (count[value] > max) {
            max = count[value];
            mode = [value];
          }
        }

        return mode;
      }
    });

    /**
     * Improve error messages for statistics functions. Errors are typically
     * thrown in an internally used function like larger, causing the error
     * not to mention the function (like max) which is actually used by the user.
     *
     * @param {Error} err
     * @param {String} fnName
     * @param {*} [value]
     * @return {Error}
     */

    function improveErrorMessage(err, fnName, value) {
      // TODO: add information with the index (also needs transform in expression parser)
      var details;

      if (String(err).indexOf('Unexpected type') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
        return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
      }

      if (String(err).indexOf('complex numbers') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';
        return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
      }

      return err;
    }

    var name$1A = 'prod';
    var dependencies$1B = ['typed', 'multiply'];
    var createProd =
    /* #__PURE__ */
    factory(name$1A, dependencies$1B, function (_ref) {
      var typed = _ref.typed,
          multiply = _ref.multiply;

      /**
       * Compute the product of a matrix or a list with values.
       * In case of a (multi dimensional) array or matrix, the sum of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.prod(a, b, c, ...)
       *     math.prod(A)
       *
       * Examples:
       *
       *     math.multiply(2, 3)           // returns 6
       *     math.prod(2, 3)               // returns 6
       *     math.prod(2, 3, 4)            // returns 24
       *     math.prod([2, 3, 4])          // returns 24
       *     math.prod([[2, 5], [4, 3]])   // returns 120
       *
       * See also:
       *
       *    mean, median, min, max, sum, std, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The product of all values
       */
      return typed(name$1A, {
        // prod([a, b, c, d, ...])
        'Array | Matrix': _prod,
        // prod([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          // TODO: implement prod(A, dim)
          throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
        },
        // prod(a, b, c, d, ...)
        '...': function _(args) {
          return _prod(args);
        }
      });
      /**
       * Recursively calculate the product of an n-dimensional array
       * @param {Array} array
       * @return {number} prod
       * @private
       */

      function _prod(array) {
        var prod;
        deepForEach(array, function (value) {
          try {
            prod = prod === undefined ? value : multiply(prod, value);
          } catch (err) {
            throw improveErrorMessage(err, 'prod', value);
          }
        });

        if (prod === undefined) {
          throw new Error('Cannot calculate prod of an empty array');
        }

        return prod;
      }
    });

    var name$1B = 'format';
    var dependencies$1C = ['typed'];
    var createFormat =
    /* #__PURE__ */
    factory(name$1B, dependencies$1C, function (_ref) {
      var typed = _ref.typed;

      /**
       * Format a value of any type into a string.
       *
       * Syntax:
       *
       *    math.format(value)
       *    math.format(value, options)
       *    math.format(value, precision)
       *    math.format(value, callback)
       *
       * Where:
       *
       *  - `value: *`
       *    The value to be formatted
       *  - `options: Object`
       *    An object with formatting options. Available options:
       *    - `notation: string`
       *      Number notation. Choose from:
       *      - 'fixed'
       *        Always use regular number notation.
       *        For example '123.40' and '14000000'
       *      - 'exponential'
       *        Always use exponential notation.
       *        For example '1.234e+2' and '1.4e+7'
       *      - 'engineering'
       *        Always use engineering notation.
       *        For example '123.4e+0' and '14.0e+6'
       *      - 'auto' (default)
       *        Regular number notation for numbers having an absolute value between
       *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
       *        Lower bound is included, upper bound is excluded.
       *        For example '123.4' and '1.4e7'.
       *    - `precision: number`
       *      A number between 0 and 16 to round the digits of the number. In case
       *      of notations 'exponential', 'engineering', and 'auto', `precision`
       *      defines the total number of significant digits returned.
       *      In case of notation 'fixed', `precision` defines the number of
       *      significant digits after the decimal point.
       *      `precision` is undefined by default.
       *    - `lowerExp: number`
       *      Exponent determining the lower boundary for formatting a value with
       *      an exponent when `notation='auto`. Default value is `-3`.
       *    - `upperExp: number`
       *      Exponent determining the upper boundary for formatting a value with
       *      an exponent when `notation='auto`. Default value is `5`.
       *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
       *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
       *      configured, and will output `0.(3)` when 'decimal' is configured.
       * - `callback: function`
       *   A custom formatting function, invoked for all numeric elements in `value`,
       *   for example all elements of a matrix, or the real and imaginary
       *   parts of a complex number. This callback can be used to override the
       *   built-in numeric notation with any type of formatting. Function `callback`
       *   is called with `value` as parameter and must return a string.
       *
       * When `value` is an Object:
       *
       * - When the object contains a property `format` being a function, this function
       *   is invoked as `value.format(options)` and the result is returned.
       * - When the object has its own `toString` method, this method is invoked
       *   and the result is returned.
       * - In other cases the function will loop over all object properties and
       *   return JSON object notation like '{"a": 2, "b": 3}'.
       *
       * When value is a function:
       *
       * - When the function has a property `syntax`, it returns this
       *   syntax description.
       * - In other cases, a string `'function'` is returned.
       *
       * Examples:
       *
       *    math.format(6.4)                                        // returns '6.4'
       *    math.format(1240000)                                    // returns '1.24e6'
       *    math.format(1/3)                                        // returns '0.3333333333333333'
       *    math.format(1/3, 3)                                     // returns '0.333'
       *    math.format(21385, 2)                                   // returns '21000'
       *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
       *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
       *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
       *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
       *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
       *
       *    function formatCurrency(value) {
       *      // return currency notation with two digits:
       *      return '$' + value.toFixed(2)
       *
       *      // you could also use math.format inside the callback:
       *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
       *    }
       *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
       *
       * See also:
       *
       *    print
       *
       * @param {*} value                               Value to be stringified
       * @param {Object | Function | number} [options]  Formatting options
       * @return {string} The formatted value
       */
      return typed(name$1B, {
        any: format$5,
        'any, Object | function | number': format$5
      });
    });

    var name$1C = 'print';
    var dependencies$1D = ['typed'];
    var createPrint =
    /* #__PURE__ */
    factory(name$1C, dependencies$1D, function (_ref) {
      var typed = _ref.typed;

      /**
       * Interpolate values into a string template.
       *
       * Syntax:
       *
       *     math.print(template, values)
       *     math.print(template, values, precision)
       *     math.print(template, values, options)
       *
       * Example usage:
       *
       *     // the following outputs: 'Lucy is 5 years old'
       *     math.print('Lucy is $age years old', {age: 5})
       *
       *     // the following outputs: 'The value of pi is 3.141592654'
       *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
       *
       *     // the following outputs: 'hello Mary! The date is 2013-03-23'
       *     math.print('Hello $user.name! The date is $date', {
       *       user: {
       *         name: 'Mary',
       *       },
       *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
       *     })
       *
       *     // the following outputs: 'My favorite fruits are apples and bananas !'
       *     math.print('My favorite fruits are $0 and $1 !', [
       *       'apples',
       *       'bananas'
       *     ])
       *
       * See also:
       *
       *     format
       *
       * @param {string} template           A string containing variable placeholders.
       * @param {Object | Array | Matrix}   values An object or array containing variables
       *                                    which will be filled in in the template.
       * @param {number | Object} [options] Formatting options,
       *                                    or the number of digits to format numbers.
       *                                    See function math.format for a description
       *                                    of all options.
       * @return {string} Interpolated string
       */
      return typed(name$1C, {
        // note: Matrix will be converted automatically to an Array
        'string, Object | Array': _print,
        'string, Object | Array, number | Object': _print
      });
    });
    /**
     * Interpolate values into a string template.
     * @param {string} template
     * @param {Object} values
     * @param {number | Object} [options]
     * @returns {string} Interpolated string
     * @private
     */

    function _print(template, values, options) {
      return template.replace(/\$([\w.]+)/g, function (original, key) {
        var keys = key.split('.');
        var value = values[keys.shift()];

        while (keys.length && value !== undefined) {
          var k = keys.shift();
          value = k ? value[k] : value + '.';
        }

        if (value !== undefined) {
          if (!isString$m(value)) {
            return format$5(value, options);
          } else {
            return value;
          }
        }

        return original;
      });
    }

    var name$1D = 'to';
    var dependencies$1E = ['typed', 'matrix'];
    var createTo =
    /* #__PURE__ */
    factory(name$1D, dependencies$1E, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Change the unit of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.to(x, unit)
       *
       * Examples:
       *
       *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
       *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
       *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
       *
       * See also:
       *
       *    unit
       *
       * @param {Unit | Array | Matrix} x     The unit to be converted.
       * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
       *                                      or a unit without value.
       * @return {Unit | Array | Matrix} value with changed, fixed unit.
       */

      var to = typed(name$1D, {
        'Unit, Unit | string': function UnitUnitString(x, unit) {
          return x.to(unit);
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          // SparseMatrix does not support Units
          return algorithm13(x, y, to);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return to(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return to(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return to(x, matrix(y));
        },
        'Matrix, any': function MatrixAny(x, y) {
          // SparseMatrix does not support Units
          return algorithm14(x, y, to, false);
        },
        'any, Matrix': function anyMatrix(x, y) {
          // SparseMatrix does not support Units
          return algorithm14(y, x, to, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, to, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, to, true).valueOf();
        }
      });
      return to;
    });

    var name$1E = 'isPrime';
    var dependencies$1F = ['typed'];
    var createIsPrime =
    /* #__PURE__ */
    factory(name$1E, dependencies$1F, function (_ref) {
      var typed = _ref.typed;

      /**
       * Test whether a value is prime: has no divisors other than itself and one.
       * The function supports type `number`, `bignumber`.
       *
       * The function is evaluated element-wise in case of Array or Matrix input.
       *
       * Syntax:
       *
       *     math.isPrime(x)
       *
       * Examples:
       *
       *    math.isPrime(3)                     // returns true
       *    math.isPrime(-2)                    // returns false
       *    math.isPrime(0)                     // returns false
       *    math.isPrime(-0)                    // returns false
       *    math.isPrime(0.5)                   // returns false
       *    math.isPrime('2')                   // returns true
       *    math.isPrime([2, 17, 100])           // returns [true, true, false]
       *
       * See also:
       *
       *    isNumeric, isZero, isNegative, isInteger
       *
       * @param {number | BigNumber | Array | Matrix} x  Value to be tested
       * @return {boolean}  Returns true when `x` is larger than zero.
       *                    Throws an error in case of an unknown data type.
       */
      var isPrime = typed(name$1E, {
        number: function number(x) {
          if (x * 0 !== 0) {
            return false;
          }

          if (x <= 3) {
            return x > 1;
          }

          if (x % 2 === 0 || x % 3 === 0) {
            return false;
          }

          for (var i = 5; i * i <= x; i += 6) {
            if (x % i === 0 || x % (i + 2) === 0) {
              return false;
            }
          }

          return true;
        },
        BigNumber: function BigNumber(n) {
          if (n.toNumber() * 0 !== 0) {
            return false;
          }

          if (n.lte(3)) return n.gt(1);
          if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;

          for (var i = 5; n.gte(i * i); i += 6) {
            if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {
              return false;
            }
          }

          return true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, isPrime);
        }
      });
      return isPrime;
    });

    var name$1F = 'numeric';
    var dependencies$1G = ['number', '?bignumber', '?fraction'];
    var createNumeric =
    /* #__PURE__ */
    factory(name$1F, dependencies$1G, function (_ref) {
      var _number = _ref.number,
          bignumber = _ref.bignumber,
          fraction = _ref.fraction;
      var validInputTypes = {
        string: true,
        number: true,
        BigNumber: true,
        Fraction: true
      }; // Load the conversion functions for each output type

      var validOutputTypes = {
        number: function number(x) {
          return _number(x);
        },
        BigNumber: bignumber ? function (x) {
          return bignumber(x);
        } : noBignumber,
        Fraction: fraction ? function (x) {
          return fraction(x);
        } : noFraction
      };
      /**
       * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
       *
       * Syntax:
       *
       *    math.numeric(x)
       *
       * Examples:
       *
       *    math.numeric('4')                           // returns number 4
       *    math.numeric('4', 'number')                 // returns number 4
       *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
       *    math.numeric('4', 'Fraction')               // returns Fraction 4
       *    math.numeric(4, 'Fraction')                 // returns Fraction 4
       *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
       *
       * See also:
       *
       *    number, fraction, bignumber, string, format
       *
       * @param {string | number | BigNumber | Fraction } value
       *              A numeric value or a string containing a numeric value
       * @param {string} outputType
       *              Desired numeric output type.
       *              Available values: 'number', 'BigNumber', or 'Fraction'
       * @return {number | BigNumber | Fraction}
       *              Returns an instance of the numeric in the requested type
       */

      return function numeric(value, outputType) {
        var inputType = typeOf(value);

        if (!(inputType in validInputTypes)) {
          throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
        }

        if (!(outputType in validOutputTypes)) {
          throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
        }

        if (outputType === inputType) {
          return value;
        } else {
          return validOutputTypes[outputType](value);
        }
      };
    });

    var name$1G = 'divideScalar';
    var dependencies$1H = ['typed', 'numeric'];
    var createDivideScalar =
    /* #__PURE__ */
    factory(name$1G, dependencies$1H, function (_ref) {
      var typed = _ref.typed,
          numeric = _ref.numeric;

      /**
       * Divide two scalar values, `x / y`.
       * This function is meant for internal use: it is used by the public functions
       * `divide` and `inv`.
       *
       * This function does not support collections (Array or Matrix).
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
       * @param  {number | BigNumber | Fraction | Complex} y          Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
       * @private
       */
      var divideScalar = typed(name$1G, {
        'number, number': function numberNumber(x, y) {
          return x / y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.div(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.div(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.div(y);
        },
        'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
          var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

          var one = numeric(1, typeOf(y));
          res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);
          return res;
        },
        'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
          var res = y.clone();
          res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

          var one = numeric(1, typeOf(x));
          res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);
          return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return x.divide(y);
        }
      });
      return divideScalar;
    });

    var name$1H = 'pow';
    var dependencies$1I = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
    var createPow =
    /* #__PURE__ */
    factory(name$1H, dependencies$1I, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          identity = _ref.identity,
          multiply = _ref.multiply,
          matrix = _ref.matrix,
          number = _ref.number,
          fraction = _ref.fraction,
          Complex = _ref.Complex;

      /**
       * Calculates the power of x to y, `x ^ y`.
       * Matrix exponentiation is supported for square matrices `x`, and positive
       * integer exponents `y`.
       *
       * For cubic roots of negative numbers, the function returns the principal
       * root by default. In order to let the function return the real root,
       * math.js can be configured with `math.config({predictable: true})`.
       * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
       *
       * Syntax:
       *
       *    math.pow(x, y)
       *
       * Examples:
       *
       *    math.pow(2, 3)               // returns number 8
       *
       *    const a = math.complex(2, 3)
       *    math.pow(a, 2)                // returns Complex -5 + 12i
       *
       *    const b = [[1, 2], [4, 3]]
       *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
       *
       * See also:
       *
       *    multiply, sqrt, cbrt, nthRoot
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
       * @param  {number | BigNumber | Complex} y                          The exponent
       * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
       */
      return typed(name$1H, {
        'number, number': _pow,
        'Complex, Complex': function ComplexComplex(x, y) {
          return x.pow(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          if (y.isInteger() || x >= 0 || config.predictable) {
            return x.pow(y);
          } else {
            return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
          }
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          if (y.d !== 1) {
            if (config.predictable) {
              throw new Error('Function pow does not support non-integer exponents for fractions.');
            } else {
              return _pow(x.valueOf(), y.valueOf());
            }
          } else {
            return x.pow(y);
          }
        },
        'Array, number': _powArray,
        'Array, BigNumber': function ArrayBigNumber(x, y) {
          return _powArray(x, y.toNumber());
        },
        'Matrix, number': _powMatrix,
        'Matrix, BigNumber': function MatrixBigNumber(x, y) {
          return _powMatrix(x, y.toNumber());
        },
        'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
          return x.pow(y);
        }
      });
      /**
       * Calculates the power of x to y, x^y, for two numbers.
       * @param {number} x
       * @param {number} y
       * @return {number | Complex} res
       * @private
       */

      function _pow(x, y) {
        // Alternatively could define a 'realmode' config option or something, but
        // 'predictable' will work for now
        if (config.predictable && !isInteger$1(y) && x < 0) {
          // Check to see if y can be represented as a fraction
          try {
            var yFrac = fraction(y);
            var yNum = number(yFrac);

            if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
              if (yFrac.d % 2 === 1) {
                return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
              }
            }
          } catch (ex) {} // fraction() throws an error if y is Infinity, etc.
          // Unable to express y as a fraction, so continue on

        } // **for predictable mode** x^Infinity === NaN if x < -1
        // N.B. this behavour is different from `Math.pow` which gives
        // (-2)^Infinity === Infinity


        if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
          return NaN;
        }

        if (isInteger$1(y) || x >= 0 || config.predictable) {
          return powNumber(x, y);
        } else {
          // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
          // x^Infinity === 0 if -1 < x < 1
          // A real number 0 is returned instead of complex(0)
          if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
            return 0;
          }

          return new Complex(x, 0).pow(y, 0);
        }
      }
      /**
       * Calculate the power of a 2d array
       * @param {Array} x     must be a 2 dimensional, square matrix
       * @param {number} y    a positive, integer value
       * @returns {Array}
       * @private
       */


      function _powArray(x, y) {
        if (!isInteger$1(y) || y < 0) {
          throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
        } // verify that A is a 2 dimensional square matrix


        var s = arraySize(x);

        if (s.length !== 2) {
          throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
        }

        if (s[0] !== s[1]) {
          throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
        }

        var res = identity(s[0]).valueOf();
        var px = x;

        while (y >= 1) {
          if ((y & 1) === 1) {
            res = multiply(px, res);
          }

          y >>= 1;
          px = multiply(px, px);
        }

        return res;
      }
      /**
       * Calculate the power of a 2d matrix
       * @param {Matrix} x     must be a 2 dimensional, square matrix
       * @param {number} y    a positive, integer value
       * @returns {Matrix}
       * @private
       */


      function _powMatrix(x, y) {
        return matrix(_powArray(x.valueOf(), y));
      }
    });

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    var NO_INT = 'Number of decimals in function round must be an integer';
    var name$1I = 'round';
    var dependencies$1J = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
    var createRound =
    /* #__PURE__ */
    factory(name$1I, dependencies$1J, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          zeros = _ref.zeros,
          BigNumber = _ref.BigNumber,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Round a value towards the nearest integer.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.round(x)
       *    math.round(x, n)
       *
       * Examples:
       *
       *    math.round(3.2)              // returns number 3
       *    math.round(3.8)              // returns number 4
       *    math.round(-4.2)             // returns number -4
       *    math.round(-4.7)             // returns number -5
       *    math.round(math.pi, 3)       // returns number 3.142
       *    math.round(123.45678, 2)     // returns number 123.46
       *
       *    const c = math.complex(3.2, -2.7)
       *    math.round(c)                // returns Complex 3 - 3i
       *
       *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
       *
       * See also:
       *
       *    ceil, fix, floor
       *
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
       * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
       */

      var round = typed(name$1I, _objectSpread({}, roundNumberSignatures, {
        Complex: function Complex(x) {
          return x.round();
        },
        'Complex, number': function ComplexNumber(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }

          return x.round(n);
        },
        'Complex, BigNumber': function ComplexBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          var _n = n.toNumber();

          return x.round(_n);
        },
        'number, BigNumber': function numberBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          return new BigNumber(x).toDecimalPlaces(n.toNumber());
        },
        BigNumber: function BigNumber(x) {
          return x.toDecimalPlaces(0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }

          return x.toDecimalPlaces(n.toNumber());
        },
        Fraction: function Fraction(x) {
          return x.round();
        },
        'Fraction, number': function FractionNumber(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }

          return x.round(n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since round(0) = 0
          return deepMap(x, round);
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, round, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, round, false);
        },
        'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
          // check scalar is zero
          if (equalScalar(x, 0)) {
            // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
          }

          return algorithm12(y, x, round, true);
        },
        'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
          // check scalar is zero
          if (equalScalar(x, 0)) {
            // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, round, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, round, false).valueOf();
        },
        'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, round, true).valueOf();
        }
      }));
      return round;
    });
    var roundNumberSignatures = {
      number: roundNumber,
      'number, number': function numberNumber(x, n) {
        if (!isInteger$1(n)) {
          throw new TypeError(NO_INT);
        }

        if (n < 0 || n > 15) {
          throw new Error('Number of decimals in function round must be in te range of 0-15');
        }

        return roundNumber(x, n);
      }
    };

    var name$1J = 'log';
    var dependencies$1K = ['config', 'typed', 'divideScalar', 'Complex'];
    var createLog =
    /* #__PURE__ */
    factory(name$1J, dependencies$1K, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          divideScalar = _ref.divideScalar,
          Complex = _ref.Complex;

      /**
       * Calculate the logarithm of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log(x)
       *    math.log(x, base)
       *
       * Examples:
       *
       *    math.log(3.5)                  // returns 1.252762968495368
       *    math.exp(math.log(2.4))        // returns 2.4
       *
       *    math.pow(10, 4)                // returns 10000
       *    math.log(10000, 10)            // returns 4
       *    math.log(10000) / math.log(10) // returns 4
       *
       *    math.log(1024, 2)              // returns 10
       *    math.pow(2, 10)                // returns 1024
       *
       * See also:
       *
       *    exp, log2, log10, log1p
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm.
       * @param {number | BigNumber | Complex} [base=e]
       *            Optional base for the logarithm. If not provided, the natural
       *            logarithm of `x` is calculated.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the logarithm of `x`
       */
      var log = typed(name$1J, {
        number: function number(x) {
          if (x >= 0 || config.predictable) {
            return logNumber(x);
          } else {
            // negative value -> complex value computation
            return new Complex(x, 0).log();
          }
        },
        Complex: function Complex(x) {
          return x.log();
        },
        BigNumber: function BigNumber(x) {
          if (!x.isNegative() || config.predictable) {
            return x.ln();
          } else {
            // downgrade to number, return Complex valued result
            return new Complex(x.toNumber(), 0).log();
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, log);
        },
        'any, any': function anyAny(x, base) {
          // calculate logarithm for a specified base, log(x, base)
          return divideScalar(log(x), log(base));
        }
      });
      return log;
    });

    var name$1K = 'log1p';
    var dependencies$1L = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
    var createLog1p =
    /* #__PURE__ */
    factory(name$1K, dependencies$1L, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          divideScalar = _ref.divideScalar,
          log = _ref.log,
          Complex = _ref.Complex;

      /**
       * Calculate the logarithm of a `value+1`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.log1p(x)
       *    math.log1p(x, base)
       *
       * Examples:
       *
       *    math.log1p(2.5)                 // returns 1.252762968495368
       *    math.exp(math.log1p(1.4))       // returns 2.4
       *
       *    math.pow(10, 4)                 // returns 10000
       *    math.log1p(9999, 10)            // returns 4
       *    math.log1p(9999) / math.log(10) // returns 4
       *
       * See also:
       *
       *    exp, log, log2, log10
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the logarithm of `x+1`.
       * @param {number | BigNumber | Complex} [base=e]
       *            Optional base for the logarithm. If not provided, the natural
       *            logarithm of `x+1` is calculated.
       * @return {number | BigNumber | Complex | Array | Matrix}
       *            Returns the logarithm of `x+1`
       */
      var log1p$1 = typed(name$1K, {
        number: function number(x) {
          if (x >= -1 || config.predictable) {
            return log1p(x);
          } else {
            // negative value -> complex value computation
            return _log1pComplex(new Complex(x, 0));
          }
        },
        Complex: _log1pComplex,
        BigNumber: function BigNumber(x) {
          var y = x.plus(1);

          if (!y.isNegative() || config.predictable) {
            return y.ln();
          } else {
            // downgrade to number, return Complex valued result
            return _log1pComplex(new Complex(x.toNumber(), 0));
          }
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, log1p$1);
        },
        'any, any': function anyAny(x, base) {
          // calculate logarithm for a specified base, log1p(x, base)
          return divideScalar(log1p$1(x), log(base));
        }
      });
      /**
       * Calculate the natural logarithm of a complex number + 1
       * @param {Complex} x
       * @returns {Complex}
       * @private
       */

      function _log1pComplex(x) {
        var xRe1p = x.re + 1;
        return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
      }

      return log1p$1;
    });

    var name$1L = 'nthRoots';
    var dependencies$1M = ['config', 'typed', 'divideScalar', 'Complex'];
    var createNthRoots =
    /* #__PURE__ */
    factory(name$1L, dependencies$1M, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          divideScalar = _ref.divideScalar,
          Complex = _ref.Complex;

      /**
       * Calculate the nth roots of a value.
       * An nth root of a positive real number A,
       * is a positive real solution of the equation "x^root = A".
       * This function returns an array of complex values.
       *
       * Syntax:
       *
       *    math.nthRoots(x)
       *    math.nthRoots(x, root)
       *
       * Examples:
       *
       *    math.nthRoots(1)
       *    // returns [
       *    //   {re: 1, im: 0},
       *    //   {re: -1, im: 0}
       *    // ]
       *    nthRoots(1, 3)
       *    // returns [
       *    //   { re: 1, im: 0 },
       *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
       *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
       *    ]
       *
       * See also:
       *
       *    nthRoot, pow, sqrt
       *
       * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
       * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
       */
      var nthRoots = typed(name$1L, {
        Complex: function Complex(x) {
          return _nthComplexRoots(x, 2);
        },
        'Complex, number': _nthComplexRoots
      });
      /**
       * Each function here returns a real multiple of i as a Complex value.
       * @param  {number} val
       * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
       */
      // This is used to fix float artifacts for zero-valued components.

      var _calculateExactResult = [function realPos(val) {
        return new Complex(val, 0);
      }, function imagPos(val) {
        return new Complex(0, val);
      }, function realNeg(val) {
        return new Complex(-val, 0);
      }, function imagNeg(val) {
        return new Complex(0, -val);
      }];
      /**
       * Calculate the nth root of a Complex Number a using De Movire's Theorem.
       * @param  {Complex} a
       * @param  {number} root
       * @return {Array} array of n Complex Roots
       */

      function _nthComplexRoots(a, root) {
        if (root < 0) throw new Error('Root must be greater than zero');
        if (root === 0) throw new Error('Root must be non-zero');
        if (root % 1 !== 0) throw new Error('Root must be an integer');
        if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
        var aIsNumeric = typeof a === 'number';
        var offset; // determine the offset (argument of a)/(pi/2)

        if (aIsNumeric || a.re === 0 || a.im === 0) {
          if (aIsNumeric) {
            offset = 2 * +(a < 0); // numeric value on the real axis
          } else if (a.im === 0) {
            offset = 2 * +(a.re < 0); // complex value on the real axis
          } else {
            offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
          }
        }

        var arg = a.arg();
        var abs = a.abs();
        var roots = [];
        var r = Math.pow(abs, 1 / root);

        for (var k = 0; k < root; k++) {
          var halfPiFactor = (offset + 4 * k) / root;
          /**
           * If (offset + 4*k)/root is an integral multiple of pi/2
           * then we can produce a more exact result.
           */

          if (halfPiFactor === Math.round(halfPiFactor)) {
            roots.push(_calculateExactResult[halfPiFactor % 4](r));
            continue;
          }

          roots.push(new Complex({
            r: r,
            phi: (arg + 2 * Math.PI * k) / root
          }));
        }

        return roots;
      }

      return nthRoots;
    });

    var name$1M = 'dotPow';
    var dependencies$1N = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
    var createDotPow =
    /* #__PURE__ */
    factory(name$1M, dependencies$1N, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar,
          matrix = _ref.matrix,
          pow = _ref.pow,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculates the power of x to y element wise.
       *
       * Syntax:
       *
       *    math.dotPow(x, y)
       *
       * Examples:
       *
       *    math.dotPow(2, 3)            // returns number 8
       *
       *    const a = [[1, 2], [4, 3]]
       *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
       *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
       *
       * See also:
       *
       *    pow, sqrt, multiply
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
       * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
       */

      var dotPow = typed(name$1M, {
        'any, any': pow,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, pow, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, pow, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, pow, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, pow);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return dotPow(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return dotPow(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return dotPow(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, dotPow, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, dotPow, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, dotPow, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, dotPow, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, dotPow, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, dotPow, true).valueOf();
        }
      });
      return dotPow;
    });

    var name$1N = 'dotDivide';
    var dependencies$1O = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
    var createDotDivide =
    /* #__PURE__ */
    factory(name$1N, dependencies$1O, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          divideScalar = _ref.divideScalar,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Divide two matrices element wise. The function accepts both matrices and
       * scalar values.
       *
       * Syntax:
       *
       *    math.dotDivide(x, y)
       *
       * Examples:
       *
       *    math.dotDivide(2, 4)   // returns 0.5
       *
       *    a = [[9, 5], [6, 1]]
       *    b = [[3, 2], [5, 2]]
       *
       *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
       *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
       *
       * See also:
       *
       *    divide, multiply, dotMultiply
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
       */

      var dotDivide = typed(name$1N, {
        'any, any': divideScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, divideScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, divideScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, divideScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, divideScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return dotDivide(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return dotDivide(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return dotDivide(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, divideScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, divideScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, divideScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, divideScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, divideScalar, true).valueOf();
        }
      });
      return dotDivide;
    });

    function createSolveValidation(_ref) {
      var DenseMatrix = _ref.DenseMatrix;

      /**
       * Validates matrix and column vector b for backward/forward substitution algorithms.
       *
       * @param {Matrix} m            An N x N matrix
       * @param {Array | Matrix} b    A column vector
       * @param {Boolean} copy        Return a copy of vector b
       *
       * @return {DenseMatrix}        Dense column vector b
       */
      return function solveValidation(m, b, copy) {
        // matrix size
        var size = m.size(); // validate matrix dimensions

        if (size.length !== 2) {
          throw new RangeError('Matrix must be two dimensional (size: ' + format$5(size) + ')');
        } // rows & columns


        var rows = size[0];
        var columns = size[1]; // validate rows & columns

        if (rows !== columns) {
          throw new RangeError('Matrix must be square (size: ' + format$5(size) + ')');
        } // vars


        var data, i, bdata; // check b is matrix

        if (isMatrix(b)) {
          // matrix size
          var msize = b.size(); // vector

          if (msize.length === 1) {
            // check vector length
            if (msize[0] !== rows) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            } // create data array


            data = []; // matrix data (DenseMatrix)

            bdata = b._data; // loop b data

            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [bdata[i]];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          } // two dimensions


          if (msize.length === 2) {
            // array must be a column vector
            if (msize[0] !== rows || msize[1] !== 1) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            } // check matrix type


            if (isDenseMatrix(b)) {
              // check a copy is needed
              if (copy) {
                // create data array
                data = []; // matrix data (DenseMatrix)

                bdata = b._data; // loop b data

                for (i = 0; i < rows; i++) {
                  // row array
                  data[i] = [bdata[i][0]];
                } // return Dense Matrix


                return new DenseMatrix({
                  data: data,
                  size: [rows, 1],
                  datatype: b._datatype
                });
              } // b is already a column vector


              return b;
            } // create data array


            data = [];

            for (i = 0; i < rows; i++) {
              data[i] = [0];
            } // sparse matrix arrays


            var values = b._values;
            var index = b._index;
            var ptr = b._ptr; // loop values in column 0

            for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
              // row
              i = index[k]; // add to data

              data[i][0] = values[k];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          } // throw error


          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // check b is array


        if (isArray$i(b)) {
          // size
          var asize = arraySize(b); // check matrix dimensions, vector

          if (asize.length === 1) {
            // check vector length
            if (asize[0] !== rows) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            } // create data array


            data = []; // loop b

            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [b[i]];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1]
            });
          }

          if (asize.length === 2) {
            // array must be a column vector
            if (asize[0] !== rows || asize[1] !== 1) {
              throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
            } // create data array


            data = []; // loop b data

            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [b[i][0]];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1]
            });
          } // throw error


          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }
      };
    }

    var name$1O = 'lsolve';
    var dependencies$1P = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createLsolve =
    /* #__PURE__ */
    factory(name$1O, dependencies$1P, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          subtract = _ref.subtract,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var solveValidation = createSolveValidation({
        DenseMatrix: DenseMatrix
      });
      /**
       * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
       *
       * `L * x = b`
       *
       * Syntax:
       *
       *    math.lsolve(L, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = lsolve(a, b)  // [[-5.5], [20]]
       *
       * See also:
       *
       *    lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} L       A N x N matrix or array (L)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
       */

      return typed(name$1O, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          // process matrix
          return _sparseForwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          // process matrix
          return _denseForwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          // create dense matrix from array
          var m = matrix(a); // use matrix implementation

          var r = _denseForwardSubstitution(m, b); // result


          return r.valueOf();
        }
      });

      function _denseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true); // column vector data

        var bdata = b._data; // rows & columns

        var rows = m._size[0];
        var columns = m._size[1]; // result

        var x = []; // data

        var data = m._data; // forward solve m * x = b, loop columns

        for (var j = 0; j < columns; j++) {
          // b[j]
          var bj = bdata[j][0] || 0; // x[j]

          var xj = void 0; // forward substitution (outer product) avoids inner looping when bj === 0

          if (!equalScalar(bj, 0)) {
            // value @ [j, j]
            var vjj = data[j][j]; // check vjj

            if (equalScalar(vjj, 0)) {
              // system cannot be solved
              throw new Error('Linear system cannot be solved since matrix is singular');
            } // calculate xj


            xj = divideScalar(bj, vjj); // loop rows

            for (var i = j + 1; i < rows; i++) {
              // update copy of b
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
            }
          } else {
            // zero @ j
            xj = 0;
          } // update x


          x[j] = [xj];
        } // return vector


        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }

      function _sparseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true); // column vector data

        var bdata = b._data; // rows & columns

        var rows = m._size[0];
        var columns = m._size[1]; // matrix arrays

        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // vars

        var i, k; // result

        var x = []; // forward solve m * x = b, loop columns

        for (var j = 0; j < columns; j++) {
          // b[j]
          var bj = bdata[j][0] || 0; // forward substitution (outer product) avoids inner looping when bj === 0

          if (!equalScalar(bj, 0)) {
            // value @ [j, j]
            var vjj = 0; // lower triangular matrix values & index (column j)

            var jvalues = [];
            var jindex = []; // last index in column

            var l = ptr[j + 1]; // values in column, find value @ [j, j]

            for (k = ptr[j]; k < l; k++) {
              // row
              i = index[k]; // check row (rows are not sorted!)

              if (i === j) {
                // update vjj
                vjj = values[k];
              } else if (i > j) {
                // store lower triangular
                jvalues.push(values[k]);
                jindex.push(i);
              }
            } // at this point we must have a value @ [j, j]


            if (equalScalar(vjj, 0)) {
              // system cannot be solved, there is no value @ [j, j]
              throw new Error('Linear system cannot be solved since matrix is singular');
            } // calculate xj


            var xj = divideScalar(bj, vjj); // loop lower triangular

            for (k = 0, l = jindex.length; k < l; k++) {
              // row
              i = jindex[k]; // update copy of b

              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
            } // update x


            x[j] = [xj];
          } else {
            // update x
            x[j] = [0];
          }
        } // return vector


        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }
    });

    var name$1P = 'usolve';
    var dependencies$1Q = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
    var createUsolve =
    /* #__PURE__ */
    factory(name$1P, dependencies$1Q, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          subtract = _ref.subtract,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var solveValidation = createSolveValidation({
        DenseMatrix: DenseMatrix
      });
      /**
       * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
       *
       * `U * x = b`
       *
       * Syntax:
       *
       *    math.usolve(U, b)
       *
       * Examples:
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = usolve(a, b)  // [[8], [9]]
       *
       * See also:
       *
       *    lup, slu, usolve, lusolve
       *
       * @param {Matrix, Array} U       A N x N matrix or array (U)
       * @param {Matrix, Array} b       A column vector with the b values
       *
       * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
       */

      return typed(name$1P, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
          // process matrix
          return _sparseBackwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
          // process matrix
          return _denseBackwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          // create dense matrix from array
          var m = matrix(a); // use matrix implementation

          var r = _denseBackwardSubstitution(m, b); // result


          return r.valueOf();
        }
      });

      function _denseBackwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true); // column vector data

        var bdata = b._data; // rows & columns

        var rows = m._size[0];
        var columns = m._size[1]; // result

        var x = []; // arrays

        var data = m._data; // backward solve m * x = b, loop columns (backwards)

        for (var j = columns - 1; j >= 0; j--) {
          // b[j]
          var bj = bdata[j][0] || 0; // x[j]

          var xj = void 0; // backward substitution (outer product) avoids inner looping when bj === 0

          if (!equalScalar(bj, 0)) {
            // value @ [j, j]
            var vjj = data[j][j]; // check vjj

            if (equalScalar(vjj, 0)) {
              // system cannot be solved
              throw new Error('Linear system cannot be solved since matrix is singular');
            } // calculate xj


            xj = divideScalar(bj, vjj); // loop rows

            for (var i = j - 1; i >= 0; i--) {
              // update copy of b
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
            }
          } else {
            // zero value @ j
            xj = 0;
          } // update x


          x[j] = [xj];
        } // return column vector


        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }

      function _sparseBackwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true); // column vector data

        var bdata = b._data; // rows & columns

        var rows = m._size[0];
        var columns = m._size[1]; // matrix arrays

        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // vars

        var i, k; // result

        var x = []; // backward solve m * x = b, loop columns (backwards)

        for (var j = columns - 1; j >= 0; j--) {
          // b[j]
          var bj = bdata[j][0] || 0; // backward substitution (outer product) avoids inner looping when bj === 0

          if (!equalScalar(bj, 0)) {
            // value @ [j, j]
            var vjj = 0; // upper triangular matrix values & index (column j)

            var jvalues = [];
            var jindex = []; // first & last indeces in column

            var f = ptr[j];
            var l = ptr[j + 1]; // values in column, find value @ [j, j], loop backwards

            for (k = l - 1; k >= f; k--) {
              // row
              i = index[k]; // check row

              if (i === j) {
                // update vjj
                vjj = values[k];
              } else if (i < j) {
                // store upper triangular
                jvalues.push(values[k]);
                jindex.push(i);
              }
            } // at this point we must have a value @ [j, j]


            if (equalScalar(vjj, 0)) {
              // system cannot be solved, there is no value @ [j, j]
              throw new Error('Linear system cannot be solved since matrix is singular');
            } // calculate xj


            var xj = divideScalar(bj, vjj); // loop upper triangular

            for (k = 0, l = jindex.length; k < l; k++) {
              // row
              i = jindex[k]; // update copy of b

              bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
            } // update x


            x[j] = [xj];
          } else {
            // update x
            x[j] = [0];
          }
        } // return vector


        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      }
    });

    var name$1Q = 'algorithm08';
    var dependencies$1R = ['typed', 'equalScalar'];
    var createAlgorithm08 =
    /* #__PURE__ */
    factory(name$1Q, dependencies$1R, function (_ref) {
      var typed = _ref.typed,
          equalScalar = _ref.equalScalar;

      /**
       * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
       * Callback function invoked MAX(NNZA, NNZB) times
       *
       *
       *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
       * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
       *          └  0            ; otherwise
       *
       *
       * @param {Matrix}   a                 The SparseMatrix instance (A)
       * @param {Matrix}   b                 The SparseMatrix instance (B)
       * @param {Function} callback          The f(Aij,Bij) operation to invoke
       *
       * @return {Matrix}                    SparseMatrix (C)
       *
       * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
       */
      return function algorithm08(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions

        if (asize.length !== bsize.length) {
          throw new DimensionError(asize.length, bsize.length);
        } // check rows & columns


        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
          throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
        } // sparse matrix cannot be a Pattern matrix


        if (!avalues || !bvalues) {
          throw new Error('Cannot perform operation on Pattern Sparse Matrices');
        } // rows & columns


        var rows = asize[0];
        var columns = asize[1]; // datatype

        var dt; // equal signature to use

        var eq = equalScalar; // zero value

        var zero = 0; // callback signature to use

        var cf = callback; // process data types

        if (typeof adt === 'string' && adt === bdt) {
          // datatype
          dt = adt; // find signature that matches (dt, dt)

          eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

          zero = typed.convert(0, dt); // callback

          cf = typed.find(callback, [dt, dt]);
        } // result arrays


        var cvalues = [];
        var cindex = [];
        var cptr = []; // workspace

        var x = []; // marks indicating we have a value in x for a given column

        var w = []; // vars

        var k, k0, k1, i; // loop columns

        for (var j = 0; j < columns; j++) {
          // update cptr
          cptr[j] = cindex.length; // columns mark

          var mark = j + 1; // loop values in a

          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = aindex[k]; // mark workspace

            w[i] = mark; // set value

            x[i] = avalues[k]; // add index

            cindex.push(i);
          } // loop values in b


          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            // row
            i = bindex[k]; // check value exists in workspace

            if (w[i] === mark) {
              // evaluate callback
              x[i] = cf(x[i], bvalues[k]);
            }
          } // initialize first index in j


          k = cptr[j]; // loop index in j

          while (k < cindex.length) {
            // row
            i = cindex[k]; // value @ i

            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        } // update cptr


        cptr[columns] = cindex.length; // return sparse matrix

        return a.createSparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
    });

    var name$1R = 'leftShift';
    var dependencies$1S = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createLeftShift =
    /* #__PURE__ */
    factory(name$1R, dependencies$1S, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          zeros = _ref.zeros,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise left logical shift of a value x by y number of bits, `x << y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.leftShift(x, y)
       *
       * Examples:
       *
       *    math.leftShift(1, 2)               // returns number 4
       *
       *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
       *
       * See also:
       *
       *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
       * @param  {number | BigNumber} y Amount of shifts
       * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
       */

      var leftShift = typed(name$1R, {
        'number, number': leftShiftNumber,
        'BigNumber, BigNumber': leftShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, leftShift, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, leftShift, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, leftShift, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, leftShift);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return leftShift(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return leftShift(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return leftShift(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, leftShift, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, leftShift, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, leftShift, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, leftShift, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return leftShift(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return leftShift(x, matrix(y)).valueOf();
        }
      });
      return leftShift;
    });

    var name$1S = 'rightArithShift';
    var dependencies$1T = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createRightArithShift =
    /* #__PURE__ */
    factory(name$1S, dependencies$1T, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          zeros = _ref.zeros,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.rightArithShift(x, y)
       *
       * Examples:
       *
       *    math.rightArithShift(4, 2)               // returns number 1
       *
       *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
       *
       * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
       * @param  {number | BigNumber} y Amount of shifts
       * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
       */

      var rightArithShift = typed(name$1S, {
        'number, number': rightArithShiftNumber,
        'BigNumber, BigNumber': rightArithShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, rightArithShift, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, rightArithShift, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, rightArithShift, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, rightArithShift);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return rightArithShift(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return rightArithShift(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return rightArithShift(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, rightArithShift, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, rightArithShift, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, rightArithShift, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, rightArithShift, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return rightArithShift(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return rightArithShift(x, matrix(y)).valueOf();
        }
      });
      return rightArithShift;
    });

    var name$1T = 'rightLogShift';
    var dependencies$1U = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
    var createRightLogShift =
    /* #__PURE__ */
    factory(name$1T, dependencies$1U, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          zeros = _ref.zeros,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm08 = createAlgorithm08({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
       * For matrices, the function is evaluated element wise.
       * For units, the function is evaluated on the best prefix base.
       *
       * Syntax:
       *
       *    math.rightLogShift(x, y)
       *
       * Examples:
       *
       *    math.rightLogShift(4, 2)               // returns number 1
       *
       *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
       *
       * See also:
       *
       *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
       *
       * @param  {number | Array | Matrix} x Value to be shifted
       * @param  {number} y Amount of shifts
       * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
       */

      var rightLogShift = typed(name$1T, {
        'number, number': rightLogShiftNumber,
        // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm08(x, y, rightLogShift, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, rightLogShift, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, rightLogShift, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, rightLogShift);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return rightLogShift(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return rightLogShift(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return rightLogShift(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm11(x, y, rightLogShift, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          // check scalar
          if (equalScalar(y, 0)) {
            return x.clone();
          }

          return algorithm14(x, y, rightLogShift, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm10(y, x, rightLogShift, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // check scalar
          if (equalScalar(x, 0)) {
            return zeros(y.size(), y.storage());
          }

          return algorithm14(y, x, rightLogShift, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          // use matrix implementation
          return rightLogShift(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          // use matrix implementation
          return rightLogShift(x, matrix(y)).valueOf();
        }
      });
      return rightLogShift;
    });

    var name$1U = 'and';
    var dependencies$1V = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
    var createAnd =
    /* #__PURE__ */
    factory(name$1U, dependencies$1V, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          zeros = _ref.zeros,
          not = _ref.not;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm06 = createAlgorithm06({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.and(x, y)
       *
       * Examples:
       *
       *    math.and(2, 4)   // returns true
       *
       *    a = [2, 0, 0]
       *    b = [3, 7, 0]
       *    c = 0
       *
       *    math.and(a, b)   // returns [true, false, false]
       *    math.and(a, c)   // returns [false, false, false]
       *
       * See also:
       *
       *    not, or, xor
       *
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
       * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
       * @return {boolean | Array | Matrix}
       *            Returns true when both inputs are defined with a nonzero/nonempty value.
       */

      var and = typed(name$1U, {
        'number, number': andNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
          return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
          return and(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm06(x, y, and, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm02(y, x, and, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm02(x, y, and, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, and);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return and(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return and(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return and(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          // check scalar
          if (not(y)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm11(x, y, and, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          // check scalar
          if (not(y)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm14(x, y, and, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          // check scalar
          if (not(x)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm11(y, x, and, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          // check scalar
          if (not(x)) {
            // return zero matrix
            return zeros(x.size(), x.storage());
          }

          return algorithm14(y, x, and, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return and(matrix(x), y).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return and(x, matrix(y)).valueOf();
        }
      });
      return and;
    });

    var name$1V = 'compare';
    var dependencies$1W = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
    var createCompare =
    /* #__PURE__ */
    factory(name$1V, dependencies$1W, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          equalScalar = _ref.equalScalar,
          matrix = _ref.matrix,
          BigNumber = _ref.BigNumber,
          Fraction = _ref.Fraction,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm05 = createAlgorithm05({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
       *
       * x and y are considered equal when the relative difference between x and y
       * is smaller than the configured epsilon. The function cannot be used to
       * compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.compare(x, y)
       *
       * Examples:
       *
       *    math.compare(6, 1)           // returns 1
       *    math.compare(2, 3)           // returns -1
       *    math.compare(7, 7)           // returns 0
       *    math.compare('10', '2')      // returns 1
       *    math.compare('1000', '1e3')  // returns 0
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('40 mm')
       *    math.compare(a, b)           // returns 1
       *
       *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
       *
       * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
       * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
       *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
       */

      var compare = typed(name$1V, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x === y ? 0 : x > y ? 1 : -1;
        },
        'number, number': function numberNumber(x, y) {
          return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return nearlyEqual$1(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return new Fraction(x.compare(y));
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return compare(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm05(x, y, compare);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, compare, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, compare, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, compare);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return compare(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return compare(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return compare(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, compare, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, compare, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, compare, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, compare, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, compare, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, compare, true).valueOf();
        }
      });
      return compare;
    });

    /*
     * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
     * Author: Jim Palmer (based on chunking idea from Dave Koelle)
     */
    /*jshint unused:false */
    var naturalSort = function naturalSort (a, b) {
    	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
    		sre = /(^[ ]*|[ ]*$)/g,
    		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
    		hre = /^0x[0-9a-f]+$/i,
    		ore = /^0/,
    		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
    		// convert all to strings strip whitespace
    		x = i(a).replace(sre, '') || '',
    		y = i(b).replace(sre, '') || '',
    		// chunk/tokenize
    		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
    		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
    		// numeric, hex or date detection
    		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
    		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
    		oFxNcL, oFyNcL;
    	// first try and sort Hex codes or Dates
    	if (yD) {
    		if ( xD < yD ) { return -1; }
    		else if ( xD > yD ) { return 1; }
    	}
    	// natural sorting through split numeric strings and default strings
    	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
    		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
    		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
    		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
    		// handle numeric vs string comparison - number < string - (Kyle Adams)
    		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
    		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
    		else if (typeof oFxNcL !== typeof oFyNcL) {
    			oFxNcL += '';
    			oFyNcL += '';
    		}
    		if (oFxNcL < oFyNcL) { return -1; }
    		if (oFxNcL > oFyNcL) { return 1; }
    	}
    	return 0;
    };

    var name$1W = 'compareNatural';
    var dependencies$1X = ['typed', 'compare'];
    var createCompareNatural =
    /* #__PURE__ */
    factory(name$1W, dependencies$1X, function (_ref) {
      var typed = _ref.typed,
          compare = _ref.compare;
      var compareBooleans = compare.signatures['boolean,boolean'];
      /**
       * Compare two values of any type in a deterministic, natural way.
       *
       * For numeric values, the function works the same as `math.compare`.
       * For types of values that can't be compared mathematically,
       * the function compares in a natural way.
       *
       * For numeric values, x and y are considered equal when the relative
       * difference between x and y is smaller than the configured epsilon.
       * The function cannot be used to compare values smaller than
       * approximately 2.22e-16.
       *
       * For Complex numbers, first the real parts are compared. If equal,
       * the imaginary parts are compared.
       *
       * Strings are compared with a natural sorting algorithm, which
       * orders strings in a "logic" way following some heuristics.
       * This differs from the function `compare`, which converts the string
       * into a numeric value and compares that. The function `compareText`
       * on the other hand compares text lexically.
       *
       * Arrays and Matrices are compared value by value until there is an
       * unequal pair of values encountered. Objects are compared by sorted
       * keys until the keys or their values are unequal.
       *
       * Syntax:
       *
       *    math.compareNatural(x, y)
       *
       * Examples:
       *
       *    math.compareNatural(6, 1)              // returns 1
       *    math.compareNatural(2, 3)              // returns -1
       *    math.compareNatural(7, 7)              // returns 0
       *
       *    math.compareNatural('10', '2')         // returns 1
       *    math.compareText('10', '2')            // returns -1
       *    math.compare('10', '2')                // returns 1
       *
       *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
       *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
       *    math.compare('Answer: 10', 'Answer: 2')
       *        // Error: Cannot convert "Answer: 10" to a number
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('40 mm')
       *    math.compareNatural(a, b)              // returns 1
       *
       *    const c = math.complex('2 + 3i')
       *    const d = math.complex('2 + 4i')
       *    math.compareNatural(c, d)              // returns -1
       *
       *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
       *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
       *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
       *    math.compareNatural([1, 2], [1, 2])       // returns 0
       *
       *    math.compareNatural({a: 2}, {a: 4})       // returns -1
       *
       * See also:
       *
       *    compare, compareText
       *
       * @param  {*} x First value to compare
       * @param  {*} y Second value to compare
       * @return {number} Returns the result of the comparison:
       *                  1 when x > y, -1 when x < y, and 0 when x == y.
       */

      var compareNatural = typed(name$1W, {
        'any, any': function anyAny(x, y) {
          var typeX = typeOf(x);
          var typeY = typeOf(y);
          var c; // numeric types

          if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
            c = compare(x, y);

            if (c.toString() !== '0') {
              // c can be number, BigNumber, or Fraction
              return c > 0 ? 1 : -1; // return a number
            } else {
              return naturalSort(typeX, typeY);
            }
          } // matrix types


          if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
            c = compareMatricesAndArrays(x, y);

            if (c !== 0) {
              return c;
            } else {
              return naturalSort(typeX, typeY);
            }
          } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


          if (typeX !== typeY) {
            return naturalSort(typeX, typeY);
          }

          if (typeX === 'Complex') {
            return compareComplexNumbers(x, y);
          }

          if (typeX === 'Unit') {
            if (x.equalBase(y)) {
              return compareNatural(x.value, y.value);
            } // compare by units


            return compareArrays(x.formatUnits(), y.formatUnits());
          }

          if (typeX === 'boolean') {
            return compareBooleans(x, y);
          }

          if (typeX === 'string') {
            return naturalSort(x, y);
          }

          if (typeX === 'Object') {
            return compareObjects(x, y);
          }

          if (typeX === 'null') {
            return 0;
          }

          if (typeX === 'undefined') {
            return 0;
          } // this should not occur...


          throw new TypeError('Unsupported type of value "' + typeX + '"');
        }
      });
      /**
       * Compare mixed matrix/array types, by converting to same-shaped array.
       * This comparator is non-deterministic regarding input types.
       * @param {Array | SparseMatrix | DenseMatrix | *} x
       * @param {Array | SparseMatrix | DenseMatrix | *} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */

      function compareMatricesAndArrays(x, y) {
        if (isSparseMatrix(x) && isSparseMatrix(y)) {
          return compareArrays(x.toJSON().values, y.toJSON().values);
        }

        if (isSparseMatrix(x)) {
          // note: convert to array is expensive
          return compareMatricesAndArrays(x.toArray(), y);
        }

        if (isSparseMatrix(y)) {
          // note: convert to array is expensive
          return compareMatricesAndArrays(x, y.toArray());
        } // convert DenseArray into Array


        if (isDenseMatrix(x)) {
          return compareMatricesAndArrays(x.toJSON().data, y);
        }

        if (isDenseMatrix(y)) {
          return compareMatricesAndArrays(x, y.toJSON().data);
        } // convert scalars to array


        if (!Array.isArray(x)) {
          return compareMatricesAndArrays([x], y);
        }

        if (!Array.isArray(y)) {
          return compareMatricesAndArrays(x, [y]);
        }

        return compareArrays(x, y);
      }
      /**
       * Compare two Arrays
       *
       * - First, compares value by value
       * - Next, if all corresponding values are equal,
       *   look at the length: longest array will be considered largest
       *
       * @param {Array} x
       * @param {Array} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      function compareArrays(x, y) {
        // compare each value
        for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
          var v = compareNatural(x[i], y[i]);

          if (v !== 0) {
            return v;
          }
        } // compare the size of the arrays


        if (x.length > y.length) {
          return 1;
        }

        if (x.length < y.length) {
          return -1;
        } // both Arrays have equal size and content


        return 0;
      }
      /**
       * Compare two objects
       *
       * - First, compare sorted property names
       * - Next, compare the property values
       *
       * @param {Object} x
       * @param {Object} y
       * @returns {number} Returns the comparison result: -1, 0, or 1
       */


      function compareObjects(x, y) {
        var keysX = Object.keys(x);
        var keysY = Object.keys(y); // compare keys

        keysX.sort(naturalSort);
        keysY.sort(naturalSort);
        var c = compareArrays(keysX, keysY);

        if (c !== 0) {
          return c;
        } // compare values


        for (var i = 0; i < keysX.length; i++) {
          var v = compareNatural(x[keysX[i]], y[keysY[i]]);

          if (v !== 0) {
            return v;
          }
        }

        return 0;
      }

      return compareNatural;
    });
    /**
     * Compare two complex numbers, `x` and `y`:
     *
     * - First, compare the real values of `x` and `y`
     * - If equal, compare the imaginary values of `x` and `y`
     *
     * @params {Complex} x
     * @params {Complex} y
     * @returns {number} Returns the comparison result: -1, 0, or 1
     */

    function compareComplexNumbers(x, y) {
      if (x.re > y.re) {
        return 1;
      }

      if (x.re < y.re) {
        return -1;
      }

      if (x.im > y.im) {
        return 1;
      }

      if (x.im < y.im) {
        return -1;
      }

      return 0;
    }

    var name$1X = 'compareText';
    var dependencies$1Y = ['typed', 'matrix'];
    var createCompareText =
    /* #__PURE__ */
    factory(name$1X, dependencies$1Y, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Compare two strings lexically. Comparison is case sensitive.
       * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.compareText(x, y)
       *
       * Examples:
       *
       *    math.compareText('B', 'A')     // returns 1
       *    math.compareText('2', '10')    // returns 1
       *    math.compare('2', '10')        // returns -1
       *    math.compareNatural('2', '10') // returns -1
       *
       *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
       *
       * See also:
       *
       *    equal, equalText, compare, compareNatural
       *
       * @param  {string | Array | DenseMatrix} x First string to compare
       * @param  {string | Array | DenseMatrix} y Second string to compare
       * @return {number | Array | DenseMatrix} Returns the result of the comparison:
       *                                        1 when x > y, -1 when x < y, and 0 when x == y.
       */

      var compareText$1 = typed(name$1X, {
        'any, any': compareText,
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, compareText);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return compareText$1(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return compareText$1(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return compareText$1(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, compareText, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, compareText, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, compareText, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, compareText, true).valueOf();
        }
      });
      return compareText$1;
    });

    var name$1Y = 'equal';
    var dependencies$1Z = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
    var createEqual =
    /* #__PURE__ */
    factory(name$1Y, dependencies$1Z, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether two values are equal.
       *
       * The function tests whether the relative difference between x and y is
       * smaller than the configured epsilon. The function cannot be used to
       * compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
       *
       * Values `null` and `undefined` are compared strictly, thus `null` is only
       * equal to `null` and nothing else, and `undefined` is only equal to
       * `undefined` and nothing else. Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.equal(x, y)
       *
       * Examples:
       *
       *    math.equal(2 + 2, 3)         // returns false
       *    math.equal(2 + 2, 4)         // returns true
       *
       *    const a = math.unit('50 cm')
       *    const b = math.unit('5 m')
       *    math.equal(a, b)             // returns true
       *
       *    const c = [2, 5, 1]
       *    const d = [2, 7, 1]
       *
       *    math.equal(c, d)             // returns [true, false, true]
       *    math.deepEqual(c, d)         // returns false
       *
       *    math.equal("1000", "1e3")    // returns true
       *    math.equal(0, null)          // returns false
       *
       * See also:
       *
       *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
       *
       * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
       */

      var equal = typed(name$1Y, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y === null;
          }

          if (y === null) {
            return x === null;
          }

          if (x === undefined) {
            return y === undefined;
          }

          if (y === undefined) {
            return x === undefined;
          }

          return equalScalar(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, equalScalar);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, equalScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, equalScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, equalScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return equal(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return equal(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return equal(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, equalScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, equalScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, equalScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, equalScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, equalScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, equalScalar, true).valueOf();
        }
      });
      return equal;
    });
    var createEqualNumber = factory(name$1Y, ['typed', 'equalScalar'], function (_ref2) {
      var typed = _ref2.typed,
          equalScalar = _ref2.equalScalar;
      return typed(name$1Y, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y === null;
          }

          if (y === null) {
            return x === null;
          }

          if (x === undefined) {
            return y === undefined;
          }

          if (y === undefined) {
            return x === undefined;
          }

          return equalScalar(x, y);
        }
      });
    });

    var name$1Z = 'equalText';
    var dependencies$1_ = ['typed', 'compareText', 'isZero'];
    var createEqualText =
    /* #__PURE__ */
    factory(name$1Z, dependencies$1_, function (_ref) {
      var typed = _ref.typed,
          compareText = _ref.compareText,
          isZero = _ref.isZero;

      /**
       * Check equality of two strings. Comparison is case sensitive.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.equalText(x, y)
       *
       * Examples:
       *
       *    math.equalText('Hello', 'Hello')     // returns true
       *    math.equalText('a', 'A')             // returns false
       *    math.equal('2e3', '2000')            // returns true
       *    math.equalText('2e3', '2000')        // returns false
       *
       *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
       *
       * See also:
       *
       *    equal, compareText, compare, compareNatural
       *
       * @param  {string | Array | DenseMatrix} x First string to compare
       * @param  {string | Array | DenseMatrix} y Second string to compare
       * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
       */
      return typed(name$1Z, {
        'any, any': function anyAny(x, y) {
          return isZero(compareText(x, y));
        }
      });
    });

    var name$1_ = 'smaller';
    var dependencies$1$ = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createSmaller =
    /* #__PURE__ */
    factory(name$1_, dependencies$1$, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether value x is smaller than y.
       *
       * The function returns true when x is smaller than y and the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.smaller(x, y)
       *
       * Examples:
       *
       *    math.smaller(2, 3)            // returns true
       *    math.smaller(5, 2 * 2)        // returns false
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('2 inch')
       *    math.smaller(a, b)            // returns true
       *
       * See also:
       *
       *    equal, unequal, smallerEq, smaller, smallerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
       */

      var smaller = typed(name$1_, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x < y;
        },
        'number, number': function numberNumber(x, y) {
          return x < y && !nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.lt(y) && !nearlyEqual$1(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) === -1;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return smaller(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, smaller);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, smaller, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, smaller, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, smaller);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return smaller(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return smaller(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return smaller(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, smaller, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, smaller, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, smaller, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, smaller, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, smaller, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, smaller, true).valueOf();
        }
      });
      return smaller;
    });

    var name$1$ = 'smallerEq';
    var dependencies$20 = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createSmallerEq =
    /* #__PURE__ */
    factory(name$1$, dependencies$20, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether value x is smaller or equal to y.
       *
       * The function returns true when x is smaller than y or the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.smallerEq(x, y)
       *
       * Examples:
       *
       *    math.smaller(1 + 2, 3)        // returns false
       *    math.smallerEq(1 + 2, 3)      // returns true
       *
       * See also:
       *
       *    equal, unequal, smaller, larger, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
       */

      var smallerEq = typed(name$1$, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x <= y;
        },
        'number, number': function numberNumber(x, y) {
          return x <= y || nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.lte(y) || nearlyEqual$1(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) !== 1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return smallerEq(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, smallerEq);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, smallerEq, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, smallerEq, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, smallerEq);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return smallerEq(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return smallerEq(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return smallerEq(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, smallerEq, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, smallerEq, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, smallerEq, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, smallerEq, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, smallerEq, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, smallerEq, true).valueOf();
        }
      });
      return smallerEq;
    });

    var name$20 = 'larger';
    var dependencies$21 = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createLarger =
    /* #__PURE__ */
    factory(name$20, dependencies$21, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether value x is larger than y.
       *
       * The function returns true when x is larger than y and the relative
       * difference between x and y is larger than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.larger(x, y)
       *
       * Examples:
       *
       *    math.larger(2, 3)             // returns false
       *    math.larger(5, 2 + 2)         // returns true
       *
       *    const a = math.unit('5 cm')
       *    const b = math.unit('2 inch')
       *    math.larger(a, b)             // returns false
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
       */

      var larger = typed(name$20, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x > y;
        },
        'number, number': function numberNumber(x, y) {
          return x > y && !nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.gt(y) && !nearlyEqual$1(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) === 1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return larger(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, larger);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, larger, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, larger, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, larger);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return larger(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return larger(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return larger(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, larger, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, larger, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, larger, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, larger, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, larger, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, larger, true).valueOf();
        }
      });
      return larger;
    });

    var name$21 = 'largerEq';
    var dependencies$22 = ['typed', 'config', 'matrix', 'DenseMatrix'];
    var createLargerEq =
    /* #__PURE__ */
    factory(name$21, dependencies$22, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether value x is larger or equal to y.
       *
       * The function returns true when x is larger than y or the relative
       * difference between x and y is smaller than the configured epsilon. The
       * function cannot be used to compare values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.largerEq(x, y)
       *
       * Examples:
       *
       *    math.larger(2, 1 + 1)         // returns false
       *    math.largerEq(2, 1 + 1)       // returns true
       *
       * See also:
       *
       *    equal, unequal, smaller, smallerEq, larger, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
       */

      var largerEq = typed(name$21, {
        'boolean, boolean': function booleanBoolean(x, y) {
          return x >= y;
        },
        'number, number': function numberNumber(x, y) {
          return x >= y || nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
          return x.gte(y) || nearlyEqual$1(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
          return x.compare(y) !== -1;
        },
        'Complex, Complex': function ComplexComplex() {
          throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
          if (!x.equalBase(y)) {
            throw new Error('Cannot compare units with different base');
          }

          return largerEq(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, largerEq);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, largerEq, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, largerEq, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, largerEq);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return largerEq(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return largerEq(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return largerEq(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, largerEq, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, largerEq, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, largerEq, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, largerEq, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, largerEq, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, largerEq, true).valueOf();
        }
      });
      return largerEq;
    });

    var name$22 = 'deepEqual';
    var dependencies$23 = ['typed', 'equal'];
    var createDeepEqual =
    /* #__PURE__ */
    factory(name$22, dependencies$23, function (_ref) {
      var typed = _ref.typed,
          equal = _ref.equal;

      /**
       * Test element wise whether two matrices are equal.
       * The function accepts both matrices and scalar values.
       *
       * Strings are compared by their numerical value.
       *
       * Syntax:
       *
       *    math.deepEqual(x, y)
       *
       * Examples:
       *
       *    math.deepEqual(2, 4)   // returns false
       *
       *    a = [2, 5, 1]
       *    b = [2, 7, 1]
       *
       *    math.deepEqual(a, b)   // returns false
       *    math.equal(a, b)       // returns [true, false, true]
       *
       * See also:
       *
       *    equal, unequal
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
       *            Returns true when the input matrices have the same size and each of their elements is equal.
       */
      return typed(name$22, {
        'any, any': function anyAny(x, y) {
          return _deepEqual(x.valueOf(), y.valueOf());
        }
      });
      /**
       * Test whether two arrays have the same size and all elements are equal
       * @param {Array | *} x
       * @param {Array | *} y
       * @return {boolean} Returns true if both arrays are deep equal
       */

      function _deepEqual(x, y) {
        if (Array.isArray(x)) {
          if (Array.isArray(y)) {
            var len = x.length;

            if (len !== y.length) {
              return false;
            }

            for (var i = 0; i < len; i++) {
              if (!_deepEqual(x[i], y[i])) {
                return false;
              }
            }

            return true;
          } else {
            return false;
          }
        } else {
          if (Array.isArray(y)) {
            return false;
          } else {
            return equal(x, y);
          }
        }
      }
    });

    var name$23 = 'unequal';
    var dependencies$24 = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
    var createUnequal =
    /* #__PURE__ */
    factory(name$23, dependencies$24, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          equalScalar = _ref.equalScalar,
          matrix = _ref.matrix,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm07 = createAlgorithm07({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Test whether two values are unequal.
       *
       * The function tests whether the relative difference between x and y is
       * larger than the configured epsilon. The function cannot be used to compare
       * values smaller than approximately 2.22e-16.
       *
       * For matrices, the function is evaluated element wise.
       * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
       * Strings are compared by their numerical value.
       *
       * Values `null` and `undefined` are compared strictly, thus `null` is unequal
       * with everything except `null`, and `undefined` is unequal with everything
       * except `undefined`.
       *
       * Syntax:
       *
       *    math.unequal(x, y)
       *
       * Examples:
       *
       *    math.unequal(2 + 2, 3)       // returns true
       *    math.unequal(2 + 2, 4)       // returns false
       *
       *    const a = math.unit('50 cm')
       *    const b = math.unit('5 m')
       *    math.unequal(a, b)           // returns false
       *
       *    const c = [2, 5, 1]
       *    const d = [2, 7, 1]
       *
       *    math.unequal(c, d)           // returns [false, true, false]
       *    math.deepEqual(c, d)         // returns false
       *
       *    math.unequal(0, null)        // returns true
       * See also:
       *
       *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
       *
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
       * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
       * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
       */

      var unequal = typed('unequal', {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y !== null;
          }

          if (y === null) {
            return x !== null;
          }

          if (x === undefined) {
            return y !== undefined;
          }

          if (y === undefined) {
            return x !== undefined;
          }

          return _unequal(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm07(x, y, _unequal);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm03(y, x, _unequal, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, _unequal, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, _unequal);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return unequal(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return unequal(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return unequal(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm12(x, y, _unequal, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, _unequal, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm12(y, x, _unequal, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, _unequal, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, _unequal, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, _unequal, true).valueOf();
        }
      });

      function _unequal(x, y) {
        return !equalScalar(x, y);
      }

      return unequal;
    });
    var createUnequalNumber = factory(name$23, ['typed', 'equalScalar'], function (_ref2) {
      var typed = _ref2.typed,
          equalScalar = _ref2.equalScalar;
      return typed(name$23, {
        'any, any': function anyAny(x, y) {
          // strict equality for null and undefined?
          if (x === null) {
            return y !== null;
          }

          if (y === null) {
            return x !== null;
          }

          if (x === undefined) {
            return y !== undefined;
          }

          if (y === undefined) {
            return x !== undefined;
          }

          return !equalScalar(x, y);
        }
      });
    });

    var name$24 = 'partitionSelect';
    var dependencies$25 = ['typed', 'isNumeric', 'isNaN', 'compare'];
    var createPartitionSelect =
    /* #__PURE__ */
    factory(name$24, dependencies$25, function (_ref) {
      var typed = _ref.typed,
          isNumeric = _ref.isNumeric,
          isNaN = _ref.isNaN,
          compare = _ref.compare;
      var asc = compare;

      var desc = function desc(a, b) {
        return -compare(a, b);
      };
      /**
       * Partition-based selection of an array or 1D matrix.
       * Will find the kth smallest value, and mutates the input array.
       * Uses Quickselect.
       *
       * Syntax:
       *
       *    math.partitionSelect(x, k)
       *    math.partitionSelect(x, k, compare)
       *
       * Examples:
       *
       *    math.partitionSelect([5, 10, 1], 2)           // returns 10
       *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
       *
       *    function sortByLength (a, b) {
       *      return a.length - b.length
       *    }
       *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
       *
       * See also:
       *
       *    sort
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to sort
       * @param {Number} k            The kth smallest value to be retrieved zero-based index
       * @param {Function | 'asc' | 'desc'} [compare='asc']
       *        An optional comparator function. The function is called as
       *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
       *        and 0 when a == b.
       * @return {*} Returns the kth lowest value.
       */


      return typed(name$24, {
        'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
          return _partitionSelect(x, k, asc);
        },
        'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
          if (compare === 'asc') {
            return _partitionSelect(x, k, asc);
          } else if (compare === 'desc') {
            return _partitionSelect(x, k, desc);
          } else {
            throw new Error('Compare string must be "asc" or "desc"');
          }
        },
        'Array | Matrix, number, function': _partitionSelect
      });

      function _partitionSelect(x, k, compare) {
        if (!isInteger$1(k) || k < 0) {
          throw new Error('k must be a non-negative integer');
        }

        if (isMatrix(x)) {
          var size = x.size();

          if (size.length > 1) {
            throw new Error('Only one dimensional matrices supported');
          }

          return quickSelect(x.valueOf(), k, compare);
        }

        if (Array.isArray(x)) {
          return quickSelect(x, k, compare);
        }
      }
      /**
       * Quickselect algorithm.
       * Code adapted from:
       * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
       *
       * @param {Array} arr
       * @param {Number} k
       * @param {Function} compare
       * @private
       */


      function quickSelect(arr, k, compare) {
        if (k >= arr.length) {
          throw new Error('k out of bounds');
        } // check for NaN values since these can cause an infinite while loop


        for (var i = 0; i < arr.length; i++) {
          if (isNumeric(arr[i]) && isNaN(arr[i])) {
            return arr[i]; // return NaN
          }
        }

        var from = 0;
        var to = arr.length - 1; // if from == to we reached the kth element

        while (from < to) {
          var r = from;
          var w = to;
          var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

          while (r < w) {
            // arr[r] >= pivot
            if (compare(arr[r], pivot) >= 0) {
              // put the large values at the end
              var tmp = arr[w];
              arr[w] = arr[r];
              arr[r] = tmp;
              --w;
            } else {
              // the value is smaller than the pivot, skip
              ++r;
            }
          } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


          if (compare(arr[r], pivot) > 0) {
            --r;
          } // the r pointer is on the end of the first k elements


          if (k <= r) {
            to = r;
          } else {
            from = r + 1;
          }
        }

        return arr[k];
      }
    });

    var name$25 = 'sort';
    var dependencies$26 = ['typed', 'matrix', 'compare', 'compareNatural'];
    var createSort =
    /* #__PURE__ */
    factory(name$25, dependencies$26, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          compare = _ref.compare,
          compareNatural = _ref.compareNatural;
      var compareAsc = compare;

      var compareDesc = function compareDesc(a, b) {
        return -compare(a, b);
      };
      /**
       * Sort the items in a matrix.
       *
       * Syntax:
       *
       *    math.sort(x)
       *    math.sort(x, compare)
       *
       * Examples:
       *
       *    math.sort([5, 10, 1]) // returns [1, 5, 10]
       *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
       *    // returns ['A', 'B', 'C', 'D']
       *
       *    function sortByLength (a, b) {
       *      return a.length - b.length
       *    }
       *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
       *    // returns ['Tom', 'Sara', 'Langdon']
       *
       * See also:
       *
       *    filter, forEach, map, compare, compareNatural
       *
       * @param {Matrix | Array} x    A one dimensional matrix or array to sort
       * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
       *        An optional _comparator function or name. The function is called as
       *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
       *        and 0 when a == b.
       * @return {Matrix | Array} Returns the sorted matrix.
       */


      return typed(name$25, {
        Array: function Array(x) {
          _arrayIsVector(x);

          return x.sort(compareAsc);
        },
        Matrix: function Matrix(x) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(compareAsc), x.storage());
        },
        'Array, function': function ArrayFunction(x, _comparator) {
          _arrayIsVector(x);

          return x.sort(_comparator);
        },
        'Matrix, function': function MatrixFunction(x, _comparator) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(_comparator), x.storage());
        },
        'Array, string': function ArrayString(x, order) {
          _arrayIsVector(x);

          return x.sort(_comparator(order));
        },
        'Matrix, string': function MatrixString(x, order) {
          _matrixIsVector(x);

          return matrix(x.toArray().sort(_comparator(order)), x.storage());
        }
      });
      /**
       * Get the comparator for given order ('asc', 'desc', 'natural')
       * @param {'asc' | 'desc' | 'natural'} order
       * @return {Function} Returns a _comparator function
       */

      function _comparator(order) {
        if (order === 'asc') {
          return compareAsc;
        } else if (order === 'desc') {
          return compareDesc;
        } else if (order === 'natural') {
          return compareNatural;
        } else {
          throw new Error('String "asc", "desc", or "natural" expected');
        }
      }
      /**
       * Validate whether an array is one dimensional
       * Throws an error when this is not the case
       * @param {Array} array
       * @private
       */


      function _arrayIsVector(array) {
        if (arraySize(array).length !== 1) {
          throw new Error('One dimensional array expected');
        }
      }
      /**
       * Validate whether a matrix is one dimensional
       * Throws an error when this is not the case
       * @param {Matrix} matrix
       * @private
       */


      function _matrixIsVector(matrix) {
        if (matrix.size().length !== 1) {
          throw new Error('One dimensional matrix expected');
        }
      }
    });

    var name$26 = 'max';
    var dependencies$27 = ['typed', 'larger'];
    var createMax =
    /* #__PURE__ */
    factory(name$26, dependencies$27, function (_ref) {
      var typed = _ref.typed,
          larger = _ref.larger;

      /**
       * Compute the maximum value of a matrix or a  list with values.
       * In case of a multi dimensional array, the maximum of the flattened array
       * will be calculated. When `dim` is provided, the maximum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.max(a, b, c, ...)
       *     math.max(A)
       *     math.max(A, dim)
       *
       * Examples:
       *
       *     math.max(2, 1, 4, 3)                  // returns 4
       *     math.max([2, 1, 4, 3])                // returns 4
       *
       *     // maximum over a specified dimension (zero-based)
       *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
       *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
       *
       *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
       *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
       *
       * See also:
       *
       *    mean, median, min, prod, std, sum, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The maximum value
       */
      return typed(name$26, {
        // max([a, b, c, d, ...])
        'Array | Matrix': _max,
        // max([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return reduce$2(array, dim.valueOf(), _largest);
        },
        // max(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function max');
          }

          return _max(args);
        }
      });
      /**
       * Return the largest of two values
       * @param {*} x
       * @param {*} y
       * @returns {*} Returns x when x is largest, or y when y is largest
       * @private
       */

      function _largest(x, y) {
        try {
          return larger(x, y) ? x : y;
        } catch (err) {
          throw improveErrorMessage(err, 'max', y);
        }
      }
      /**
       * Recursively calculate the maximum value in an n-dimensional array
       * @param {Array} array
       * @return {number} max
       * @private
       */


      function _max(array) {
        var res;
        deepForEach(array, function (value) {
          try {
            if (isNaN(value) && typeof value === 'number') {
              res = NaN;
            } else if (res === undefined || larger(value, res)) {
              res = value;
            }
          } catch (err) {
            throw improveErrorMessage(err, 'max', value);
          }
        });

        if (res === undefined) {
          throw new Error('Cannot calculate max of an empty array');
        }

        return res;
      }
    });

    var name$27 = 'min';
    var dependencies$28 = ['typed', 'smaller'];
    var createMin =
    /* #__PURE__ */
    factory(name$27, dependencies$28, function (_ref) {
      var typed = _ref.typed,
          smaller = _ref.smaller;

      /**
       * Compute the minimum value of a matrix or a  list of values.
       * In case of a multi dimensional array, the minimum of the flattened array
       * will be calculated. When `dim` is provided, the minimum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.min(a, b, c, ...)
       *     math.min(A)
       *     math.min(A, dim)
       *
       * Examples:
       *
       *     math.min(2, 1, 4, 3)                  // returns 1
       *     math.min([2, 1, 4, 3])                // returns 1
       *
       *     // minimum over a specified dimension (zero-based)
       *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
       *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
       *
       *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
       *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
       *
       * See also:
       *
       *    mean, median, max, prod, std, sum, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The minimum value
       */
      return typed(name$27, {
        // min([a, b, c, d, ...])
        'Array | Matrix': _min,
        // min([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return reduce$2(array, dim.valueOf(), _smallest);
        },
        // min(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function min');
          }

          return _min(args);
        }
      });
      /**
       * Return the smallest of two values
       * @param {*} x
       * @param {*} y
       * @returns {*} Returns x when x is smallest, or y when y is smallest
       * @private
       */

      function _smallest(x, y) {
        try {
          return smaller(x, y) ? x : y;
        } catch (err) {
          throw improveErrorMessage(err, 'min', y);
        }
      }
      /**
       * Recursively calculate the minimum value in an n-dimensional array
       * @param {Array} array
       * @return {number} min
       * @private
       */


      function _min(array) {
        var min;
        deepForEach(array, function (value) {
          try {
            if (isNaN(value) && typeof value === 'number') {
              min = NaN;
            } else if (min === undefined || smaller(value, min)) {
              min = value;
            }
          } catch (err) {
            throw improveErrorMessage(err, 'min', value);
          }
        });

        if (min === undefined) {
          throw new Error('Cannot calculate min of an empty array');
        }

        return min;
      }
    });

    var name$28 = 'ImmutableDenseMatrix';
    var dependencies$29 = ['smaller', 'DenseMatrix'];
    var createImmutableDenseMatrixClass =
    /* #__PURE__ */
    factory(name$28, dependencies$29, function (_ref) {
      var smaller = _ref.smaller,
          DenseMatrix = _ref.DenseMatrix;

      function ImmutableDenseMatrix(data, datatype) {
        if (!(this instanceof ImmutableDenseMatrix)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (datatype && !isString$m(datatype)) {
          throw new Error('Invalid datatype: ' + datatype);
        }

        if (isMatrix(data) || isArray$i(data)) {
          // use DenseMatrix implementation
          var matrix = new DenseMatrix(data, datatype); // internal structures

          this._data = matrix._data;
          this._size = matrix._size;
          this._datatype = matrix._datatype;
          this._min = null;
          this._max = null;
        } else if (data && isArray$i(data.data) && isArray$i(data.size)) {
          // initialize fields from JSON representation
          this._data = data.data;
          this._size = data.size;
          this._datatype = data.datatype;
          this._min = typeof data.min !== 'undefined' ? data.min : null;
          this._max = typeof data.max !== 'undefined' ? data.max : null;
        } else if (data) {
          // unsupported type
          throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
        } else {
          // nothing provided
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
          this._min = null;
          this._max = null;
        }
      }

      ImmutableDenseMatrix.prototype = new DenseMatrix();
      /**
       * Attach type information
       */

      ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
      ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
      /**
       * Get a subset of the matrix, or replace a subset of the matrix.
       *
       * Usage:
       *     const subset = matrix.subset(index)               // retrieve subset
       *     const value = matrix.subset(index, replacement)   // replace subset
       *
       * @param {Index} index
       * @param {Array | ImmutableDenseMatrix | *} [replacement]
       * @param {*} [defaultValue=0]      Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be filled with zeros.
       */

      ImmutableDenseMatrix.prototype.subset = function (index) {
        switch (arguments.length) {
          case 1:
            {
              // use base implementation
              var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

              if (isMatrix(m)) {
                // return immutable matrix
                return new ImmutableDenseMatrix({
                  data: m._data,
                  size: m._size,
                  datatype: m._datatype
                });
              }

              return m;
            }
          // intentional fall through

          case 2:
          case 3:
            throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

          default:
            throw new SyntaxError('Wrong number of arguments');
        }
      };
      /**
       * Replace a single element in the matrix.
       * @param {Number[]} index   Zero-based index
       * @param {*} value
       * @param {*} [defaultValue]        Default value, filled in on new entries when
       *                                  the matrix is resized. If not provided,
       *                                  new matrix elements will be left undefined.
       * @return {ImmutableDenseMatrix} self
       */


      ImmutableDenseMatrix.prototype.set = function () {
        throw new Error('Cannot invoke set on an Immutable Matrix instance');
      };
      /**
       * Resize the matrix to the given size. Returns a copy of the matrix when
       * `copy=true`, otherwise return the matrix itself (resize in place).
       *
       * @param {Number[]} size           The new size the matrix should have.
       * @param {*} [defaultValue=0]      Default value, filled in on new entries.
       *                                  If not provided, the matrix elements will
       *                                  be filled with zeros.
       * @param {boolean} [copy]          Return a resized copy of the matrix
       *
       * @return {Matrix}                 The resized matrix
       */


      ImmutableDenseMatrix.prototype.resize = function () {
        throw new Error('Cannot invoke resize on an Immutable Matrix instance');
      };
      /**
       * Disallows reshaping in favor of immutability.
       *
       * @throws {Error} Operation not allowed
       */


      ImmutableDenseMatrix.prototype.reshape = function () {
        throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
      };
      /**
       * Create a clone of the matrix
       * @return {ImmutableDenseMatrix} clone
       */


      ImmutableDenseMatrix.prototype.clone = function () {
        return new ImmutableDenseMatrix({
          data: clone$3(this._data),
          size: clone$3(this._size),
          datatype: this._datatype
        });
      };
      /**
       * Get a JSON representation of the matrix
       * @returns {Object}
       */


      ImmutableDenseMatrix.prototype.toJSON = function () {
        return {
          mathjs: 'ImmutableDenseMatrix',
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      /**
       * Generate a matrix from a JSON object
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
       *                       where mathjs is optional
       * @returns {ImmutableDenseMatrix}
       */


      ImmutableDenseMatrix.fromJSON = function (json) {
        return new ImmutableDenseMatrix(json);
      };
      /**
       * Swap rows i and j in Matrix.
       *
       * @param {Number} i       Matrix row index 1
       * @param {Number} j       Matrix row index 2
       *
       * @return {Matrix}        The matrix reference
       */


      ImmutableDenseMatrix.prototype.swapRows = function () {
        throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
      };
      /**
       * Calculate the minimum value in the set
       * @return {Number | undefined} min
       */


      ImmutableDenseMatrix.prototype.min = function () {
        // check min has been calculated before
        if (this._min === null) {
          // minimum
          var m = null; // compute min

          this.forEach(function (v) {
            if (m === null || smaller(v, m)) {
              m = v;
            }
          });
          this._min = m !== null ? m : undefined;
        }

        return this._min;
      };
      /**
       * Calculate the maximum value in the set
       * @return {Number | undefined} max
       */


      ImmutableDenseMatrix.prototype.max = function () {
        // check max has been calculated before
        if (this._max === null) {
          // maximum
          var m = null; // compute max

          this.forEach(function (v) {
            if (m === null || smaller(m, v)) {
              m = v;
            }
          });
          this._max = m !== null ? m : undefined;
        }

        return this._max;
      };

      return ImmutableDenseMatrix;
    }, {
      isClass: true
    });

    var name$29 = 'Index';
    var dependencies$2a = ['ImmutableDenseMatrix'];
    var createIndexClass =
    /* #__PURE__ */
    factory(name$29, dependencies$2a, function (_ref) {
      var ImmutableDenseMatrix = _ref.ImmutableDenseMatrix;

      /**
       * Create an index. An Index can store ranges and sets for multiple dimensions.
       * Matrix.get, Matrix.set, and math.subset accept an Index as input.
       *
       * Usage:
       *     const index = new Index(range1, range2, matrix1, array1, ...)
       *
       * Where each parameter can be any of:
       *     A number
       *     A string (containing a name of an object property)
       *     An instance of Range
       *     An Array with the Set values
       *     A Matrix with the Set values
       *
       * The parameters start, end, and step must be integer numbers.
       *
       * @class Index
       * @Constructor Index
       * @param {...*} ranges
       */
      function Index(ranges) {
        if (!(this instanceof Index)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this._dimensions = [];
        this._isScalar = true;

        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i];

          if (isRange(arg)) {
            this._dimensions.push(arg);

            this._isScalar = false;
          } else if (Array.isArray(arg) || isMatrix(arg)) {
            // create matrix
            var m = _createImmutableMatrix(arg.valueOf());

            this._dimensions.push(m); // size


            var size = m.size(); // scalar

            if (size.length !== 1 || size[0] !== 1) {
              this._isScalar = false;
            }
          } else if (typeof arg === 'number') {
            this._dimensions.push(_createImmutableMatrix([arg]));
          } else if (typeof arg === 'string') {
            // object property (arguments.count should be 1)
            this._dimensions.push(arg);
          } else {
            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
          } // TODO: implement support for wildcard '*'

        }
      }
      /**
       * Attach type information
       */


      Index.prototype.type = 'Index';
      Index.prototype.isIndex = true;

      function _createImmutableMatrix(arg) {
        // loop array elements
        for (var i = 0, l = arg.length; i < l; i++) {
          if (typeof arg[i] !== 'number' || !isInteger$1(arg[i])) {
            throw new TypeError('Index parameters must be positive integer numbers');
          }
        } // create matrix


        return new ImmutableDenseMatrix(arg);
      }
      /**
       * Create a clone of the index
       * @memberof Index
       * @return {Index} clone
       */


      Index.prototype.clone = function () {
        var index = new Index();
        index._dimensions = clone$3(this._dimensions);
        index._isScalar = this._isScalar;
        return index;
      };
      /**
       * Create an index from an array with ranges/numbers
       * @memberof Index
       * @param {Array.<Array | number>} ranges
       * @return {Index} index
       * @private
       */


      Index.create = function (ranges) {
        var index = new Index();
        Index.apply(index, ranges);
        return index;
      };
      /**
       * Retrieve the size of the index, the number of elements for each dimension.
       * @memberof Index
       * @returns {number[]} size
       */


      Index.prototype.size = function () {
        var size = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var d = this._dimensions[i];
          size[i] = typeof d === 'string' ? 1 : d.size()[0];
        }

        return size;
      };
      /**
       * Get the maximum value for each of the indexes ranges.
       * @memberof Index
       * @returns {number[]} max
       */


      Index.prototype.max = function () {
        var values = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === 'string' ? range : range.max();
        }

        return values;
      };
      /**
       * Get the minimum value for each of the indexes ranges.
       * @memberof Index
       * @returns {number[]} min
       */


      Index.prototype.min = function () {
        var values = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === 'string' ? range : range.min();
        }

        return values;
      };
      /**
       * Loop over each of the ranges of the index
       * @memberof Index
       * @param {Function} callback   Called for each range with a Range as first
       *                              argument, the dimension as second, and the
       *                              index object as third.
       */


      Index.prototype.forEach = function (callback) {
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          callback(this._dimensions[i], i, this);
        }
      };
      /**
       * Retrieve the dimension for the given index
       * @memberof Index
       * @param {Number} dim                  Number of the dimension
       * @returns {Range | null} range
       */


      Index.prototype.dimension = function (dim) {
        return this._dimensions[dim] || null;
      };
      /**
       * Test whether this index contains an object property
       * @returns {boolean} Returns true if the index is an object property
       */


      Index.prototype.isObjectProperty = function () {
        return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
      };
      /**
       * Returns the object property name when the Index holds a single object property,
       * else returns null
       * @returns {string | null}
       */


      Index.prototype.getObjectProperty = function () {
        return this.isObjectProperty() ? this._dimensions[0] : null;
      };
      /**
       * Test whether this index contains only a single value.
       *
       * This is the case when the index is created with only scalar values as ranges,
       * not for ranges resolving into a single value.
       * @memberof Index
       * @return {boolean} isScalar
       */


      Index.prototype.isScalar = function () {
        return this._isScalar;
      };
      /**
       * Expand the Index into an array.
       * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
       * @memberof Index
       * @returns {Array} array
       */


      Index.prototype.toArray = function () {
        var array = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];
          array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
        }

        return array;
      };
      /**
       * Get the primitive value of the Index, a two dimensional array.
       * Equivalent to Index.toArray().
       * @memberof Index
       * @returns {Array} array
       */


      Index.prototype.valueOf = Index.prototype.toArray;
      /**
       * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
       * @memberof Index
       * @returns {String} str
       */

      Index.prototype.toString = function () {
        var strings = [];

        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];

          if (typeof dimension === 'string') {
            strings.push(JSON.stringify(dimension));
          } else {
            strings.push(dimension.toString());
          }
        }

        return '[' + strings.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the Index
       * @memberof Index
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
       */


      Index.prototype.toJSON = function () {
        return {
          mathjs: 'Index',
          dimensions: this._dimensions
        };
      };
      /**
       * Instantiate an Index from a JSON object
       * @memberof Index
       * @param {Object} json A JSON object structured as:
       *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
       * @return {Index}
       */


      Index.fromJSON = function (json) {
        return Index.create(json.dimensions);
      };

      return Index;
    }, {
      isClass: true
    });

    var name$2a = 'FibonacciHeap';
    var dependencies$2b = ['smaller', 'larger'];
    var createFibonacciHeapClass =
    /* #__PURE__ */
    factory(name$2a, dependencies$2b, function (_ref) {
      var smaller = _ref.smaller,
          larger = _ref.larger;
      var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
      /**
       * Fibonacci Heap implementation, used interally for Matrix math.
       * @class FibonacciHeap
       * @constructor FibonacciHeap
       */

      function FibonacciHeap() {
        if (!(this instanceof FibonacciHeap)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // initialize fields


        this._minimum = null;
        this._size = 0;
      }
      /**
       * Attach type information
       */


      FibonacciHeap.prototype.type = 'FibonacciHeap';
      FibonacciHeap.prototype.isFibonacciHeap = true;
      /**
       * Inserts a new data element into the heap. No heap consolidation is
       * performed at this time, the new node is simply inserted into the root
       * list of this heap. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */

      FibonacciHeap.prototype.insert = function (key, value) {
        // create node
        var node = {
          key: key,
          value: value,
          degree: 0
        }; // check we have a node in the minimum

        if (this._minimum) {
          // minimum node
          var minimum = this._minimum; // update left & right of node

          node.left = minimum;
          node.right = minimum.right;
          minimum.right = node;
          node.right.left = node; // update minimum node in heap if needed

          if (smaller(key, minimum.key)) {
            // node has a smaller key, use it as minimum
            this._minimum = node;
          }
        } else {
          // set left & right
          node.left = node;
          node.right = node; // this is the first node

          this._minimum = node;
        } // increment number of nodes in heap


        this._size++; // return node

        return node;
      };
      /**
       * Returns the number of nodes in heap. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.size = function () {
        return this._size;
      };
      /**
       * Removes all elements from this heap.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.clear = function () {
        this._minimum = null;
        this._size = 0;
      };
      /**
       * Returns true if the heap is empty, otherwise false.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.isEmpty = function () {
        return this._size === 0;
      };
      /**
       * Extracts the node with minimum key from heap. Amortized running
       * time: O(log n).
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.extractMinimum = function () {
        // node to remove
        var node = this._minimum; // check we have a minimum

        if (node === null) {
          return node;
        } // current minimum


        var minimum = this._minimum; // get number of children

        var numberOfChildren = node.degree; // pointer to the first child

        var x = node.child; // for each child of node do...

        while (numberOfChildren > 0) {
          // store node in right side
          var tempRight = x.right; // remove x from child list

          x.left.right = x.right;
          x.right.left = x.left; // add x to root list of heap

          x.left = minimum;
          x.right = minimum.right;
          minimum.right = x;
          x.right.left = x; // set Parent[x] to null

          x.parent = null;
          x = tempRight;
          numberOfChildren--;
        } // remove node from root list of heap


        node.left.right = node.right;
        node.right.left = node.left; // update minimum

        if (node === node.right) {
          // empty
          minimum = null;
        } else {
          // update minimum
          minimum = node.right; // we need to update the pointer to the root with minimum key

          minimum = _findMinimumNode(minimum, this._size);
        } // decrement size of heap


        this._size--; // update minimum

        this._minimum = minimum; // return node

        return node;
      };
      /**
       * Removes a node from the heap given the reference to the node. The trees
       * in the heap will be consolidated, if necessary. This operation may fail
       * to remove the correct element if there are nodes with key value -Infinity.
       * Running time: O(log n) amortized.
       * @memberof FibonacciHeap
       */


      FibonacciHeap.prototype.remove = function (node) {
        // decrease key value
        this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

        this.extractMinimum();
      };
      /**
       * Decreases the key value for a heap node, given the new value to take on.
       * The structure of the heap may be changed and will not be consolidated.
       * Running time: O(1) amortized.
       * @memberof FibonacciHeap
       */


      function _decreaseKey(minimum, node, key) {
        // set node key
        node.key = key; // get parent node

        var parent = node.parent;

        if (parent && smaller(node.key, parent.key)) {
          // remove node from parent
          _cut(minimum, node, parent); // remove all nodes from parent to the root parent


          _cascadingCut(minimum, parent);
        } // update minimum node if needed


        if (smaller(node.key, minimum.key)) {
          minimum = node;
        } // return minimum


        return minimum;
      }
      /**
       * The reverse of the link operation: removes node from the child list of parent.
       * This method assumes that min is non-null. Running time: O(1).
       * @memberof FibonacciHeap
       */


      function _cut(minimum, node, parent) {
        // remove node from parent children and decrement Degree[parent]
        node.left.right = node.right;
        node.right.left = node.left;
        parent.degree--; // reset y.child if necessary

        if (parent.child === node) {
          parent.child = node.right;
        } // remove child if degree is 0


        if (parent.degree === 0) {
          parent.child = null;
        } // add node to root list of heap


        node.left = minimum;
        node.right = minimum.right;
        minimum.right = node;
        node.right.left = node; // set parent[node] to null

        node.parent = null; // set mark[node] to false

        node.mark = false;
      }
      /**
       * Performs a cascading cut operation. This cuts node from its parent and then
       * does the same for its parent, and so on up the tree.
       * Running time: O(log n); O(1) excluding the recursion.
       * @memberof FibonacciHeap
       */


      function _cascadingCut(minimum, node) {
        // store parent node
        var parent = node.parent; // if there's a parent...

        if (!parent) {
          return;
        } // if node is unmarked, set it marked


        if (!node.mark) {
          node.mark = true;
        } else {
          // it's marked, cut it from parent
          _cut(minimum, node, parent); // cut its parent as well


          _cascadingCut(parent);
        }
      }
      /**
       * Make the first node a child of the second one. Running time: O(1) actual.
       * @memberof FibonacciHeap
       */


      var _linkNodes = function _linkNodes(node, parent) {
        // remove node from root list of heap
        node.left.right = node.right;
        node.right.left = node.left; // make node a Child of parent

        node.parent = parent;

        if (!parent.child) {
          parent.child = node;
          node.right = node;
          node.left = node;
        } else {
          node.left = parent.child;
          node.right = parent.child.right;
          parent.child.right = node;
          node.right.left = node;
        } // increase degree[parent]


        parent.degree++; // set mark[node] false

        node.mark = false;
      };

      function _findMinimumNode(minimum, size) {
        // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
        var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

        var array = new Array(arraySize); // find the number of root nodes.

        var numRoots = 0;
        var x = minimum;

        if (x) {
          numRoots++;
          x = x.right;

          while (x !== minimum) {
            numRoots++;
            x = x.right;
          }
        } // vars


        var y; // For each node in root list do...

        while (numRoots > 0) {
          // access this node's degree..
          var d = x.degree; // get next node

          var next = x.right; // check if there is a node already in array with the same degree

          while (true) {
            // get node with the same degree is any
            y = array[d];

            if (!y) {
              break;
            } // make one node with the same degree a child of the other, do this based on the key value.


            if (larger(x.key, y.key)) {
              var temp = y;
              y = x;
              x = temp;
            } // make y a child of x


            _linkNodes(y, x); // we have handled this degree, go to next one.


            array[d] = null;
            d++;
          } // save this node for later when we might encounter another of the same degree.


          array[d] = x; // move forward through list.

          x = next;
          numRoots--;
        } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


        minimum = null; // loop nodes in array

        for (var i = 0; i < arraySize; i++) {
          // get current node
          y = array[i];

          if (!y) {
            continue;
          } // check if we have a linked list


          if (minimum) {
            // First remove node from root list.
            y.left.right = y.right;
            y.right.left = y.left; // now add to root list, again.

            y.left = minimum;
            y.right = minimum.right;
            minimum.right = y;
            y.right.left = y; // check if this is a new min.

            if (smaller(y.key, minimum.key)) {
              minimum = y;
            }
          } else {
            minimum = y;
          }
        }

        return minimum;
      }

      return FibonacciHeap;
    }, {
      isClass: true
    });

    var name$2b = 'Spa';
    var dependencies$2c = ['addScalar', 'equalScalar', 'FibonacciHeap'];
    var createSpaClass =
    /* #__PURE__ */
    factory(name$2b, dependencies$2c, function (_ref) {
      var addScalar = _ref.addScalar,
          equalScalar = _ref.equalScalar,
          FibonacciHeap = _ref.FibonacciHeap;

      /**
       * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
       * of the vector elements and an ordered list of non-zero elements.
       */
      function Spa() {
        if (!(this instanceof Spa)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // allocate vector, TODO use typed arrays


        this._values = [];
        this._heap = new FibonacciHeap();
      }
      /**
       * Attach type information
       */


      Spa.prototype.type = 'Spa';
      Spa.prototype.isSpa = true;
      /**
       * Set the value for index i.
       *
       * @param {number} i                       The index
       * @param {number | BigNumber | Complex}   The value at index i
       */

      Spa.prototype.set = function (i, v) {
        // check we have a value @ i
        if (!this._values[i]) {
          // insert in heap
          var node = this._heap.insert(i, v); // set the value @ i


          this._values[i] = node;
        } else {
          // update the value @ i
          this._values[i].value = v;
        }
      };

      Spa.prototype.get = function (i) {
        var node = this._values[i];

        if (node) {
          return node.value;
        }

        return 0;
      };

      Spa.prototype.accumulate = function (i, v) {
        // node @ i
        var node = this._values[i];

        if (!node) {
          // insert in heap
          node = this._heap.insert(i, v); // initialize value

          this._values[i] = node;
        } else {
          // accumulate value
          node.value = addScalar(node.value, v);
        }
      };

      Spa.prototype.forEach = function (from, to, callback) {
        // references
        var heap = this._heap;
        var values = this._values; // nodes

        var nodes = []; // node with minimum key, save it

        var node = heap.extractMinimum();

        if (node) {
          nodes.push(node);
        } // extract nodes from heap (ordered)


        while (node && node.key <= to) {
          // check it is in range
          if (node.key >= from) {
            // check value is not zero
            if (!equalScalar(node.value, 0)) {
              // invoke callback
              callback(node.key, node.value, this);
            }
          } // extract next node, save it


          node = heap.extractMinimum();

          if (node) {
            nodes.push(node);
          }
        } // reinsert all nodes in heap


        for (var i = 0; i < nodes.length; i++) {
          // current node
          var n = nodes[i]; // insert node in heap

          node = heap.insert(n.key, n.value); // update values

          values[node.key] = node;
        }
      };

      Spa.prototype.swap = function (i, j) {
        // node @ i and j
        var nodei = this._values[i];
        var nodej = this._values[j]; // check we need to insert indeces

        if (!nodei && nodej) {
          // insert in heap
          nodei = this._heap.insert(i, nodej.value); // remove from heap

          this._heap.remove(nodej); // set values


          this._values[i] = nodei;
          this._values[j] = undefined;
        } else if (nodei && !nodej) {
          // insert in heap
          nodej = this._heap.insert(j, nodei.value); // remove from heap

          this._heap.remove(nodei); // set values


          this._values[j] = nodej;
          this._values[i] = undefined;
        } else if (nodei && nodej) {
          // swap values
          var v = nodei.value;
          nodei.value = nodej.value;
          nodej.value = v;
        }
      };

      return Spa;
    }, {
      isClass: true
    });

    /**
     * Calculate BigNumber e
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns e
     */

    var createBigNumberE = memoize$2(function (BigNumber) {
      return new BigNumber(1).exp();
    }, hasher);
    /**
     * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns phi
     */

    var createBigNumberPhi = memoize$2(function (BigNumber) {
      return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
    }, hasher);
    /**
     * Calculate BigNumber pi.
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns pi
     */

    var createBigNumberPi = memoize$2(function (BigNumber) {
      return BigNumber.acos(-1);
    }, hasher);
    /**
     * Calculate BigNumber tau, tau = 2 * pi
     * @param {function} BigNumber   BigNumber constructor
     * @returns {BigNumber} Returns tau
     */

    var createBigNumberTau = memoize$2(function (BigNumber) {
      return createBigNumberPi(BigNumber).times(2);
    }, hasher);
    /**
     * Create a hash for a BigNumber constructor function. The created has is
     * the configured precision
     * @param {Array} args         Supposed to contain a single entry with
     *                             a BigNumber constructor
     * @return {number} precision
     * @private
     */

    function hasher(args) {
      return args[0].precision;
    }

    function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
    var name$2c = 'Unit';
    var dependencies$2d = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
    var createUnitClass =
    /* #__PURE__ */
    factory(name$2c, dependencies$2d, function (_ref) {
      var on = _ref.on,
          config = _ref.config,
          addScalar = _ref.addScalar,
          subtract = _ref.subtract,
          multiplyScalar = _ref.multiplyScalar,
          divideScalar = _ref.divideScalar,
          pow = _ref.pow,
          abs = _ref.abs,
          fix = _ref.fix,
          round = _ref.round,
          equal = _ref.equal,
          isNumeric = _ref.isNumeric,
          format = _ref.format,
          number = _ref.number,
          Complex = _ref.Complex,
          _BigNumber = _ref.BigNumber,
          _Fraction = _ref.Fraction;
      var toNumber = number;
      /**
       * A unit can be constructed in the following ways:
       *
       *     const a = new Unit(value, name)
       *     const b = new Unit(null, name)
       *     const c = Unit.parse(str)
       *
       * Example usage:
       *
       *     const a = new Unit(5, 'cm')               // 50 mm
       *     const b = Unit.parse('23 kg')             // 23 kg
       *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
       *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
       *
       * @class Unit
       * @constructor Unit
       * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
       * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
       */

      function Unit(value, name) {
        if (!(this instanceof Unit)) {
          throw new Error('Constructor must be called with the new operator');
        }

        if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {
          throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
        }

        if (name !== undefined && (typeof name !== 'string' || name === '')) {
          throw new TypeError('Second parameter in Unit constructor must be a string');
        }

        if (name !== undefined) {
          var u = Unit.parse(name);
          this.units = u.units;
          this.dimensions = u.dimensions;
        } else {
          this.units = [{
            unit: UNIT_NONE,
            prefix: PREFIXES.NONE,
            // link to a list with supported prefixes
            power: 0
          }];
          this.dimensions = [];

          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            this.dimensions[i] = 0;
          }
        }

        this.value = value !== undefined && value !== null ? this._normalize(value) : null;
        this.fixPrefix = false; // if true, function format will not search for the
        // best prefix but leave it as initially provided.
        // fixPrefix is set true by the method Unit.to
        // The justification behind this is that if the constructor is explicitly called,
        // the caller wishes the units to be returned exactly as he supplied.

        this.skipAutomaticSimplification = true;
      }
      /**
       * Attach type information
       */


      Unit.prototype.type = 'Unit';
      Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

      var text, index, c;

      function skipWhitespace() {
        while (c === ' ' || c === '\t') {
          next();
        }
      }

      function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
      }

      function isDigit(c) {
        return c >= '0' && c <= '9';
      }

      function next() {
        index++;
        c = text.charAt(index);
      }

      function revert(oldIndex) {
        index = oldIndex;
        c = text.charAt(index);
      }

      function parseNumber() {
        var number = '';
        var oldIndex = index;

        if (c === '+') {
          next();
        } else if (c === '-') {
          number += c;
          next();
        }

        if (!isDigitDot(c)) {
          // a + or - must be followed by a digit
          revert(oldIndex);
          return null;
        } // get number, can have a single dot


        if (c === '.') {
          number += c;
          next();

          if (!isDigit(c)) {
            // this is no legal number, it is just a dot
            revert(oldIndex);
            return null;
          }
        } else {
          while (isDigit(c)) {
            number += c;
            next();
          }

          if (c === '.') {
            number += c;
            next();
          }
        }

        while (isDigit(c)) {
          number += c;
          next();
        } // check for exponential notation like "2.3e-4" or "1.23e50"


        if (c === 'E' || c === 'e') {
          // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
          var tentativeNumber = '';
          var tentativeIndex = index;
          tentativeNumber += c;
          next();

          if (c === '+' || c === '-') {
            tentativeNumber += c;
            next();
          } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


          if (!isDigit(c)) {
            // The e or E must belong to something else, so return the number without the e or E.
            revert(tentativeIndex);
            return number;
          } // We can now safely say that this is scientific notation.


          number = number + tentativeNumber;

          while (isDigit(c)) {
            number += c;
            next();
          }
        }

        return number;
      }

      function parseUnit() {
        var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

        var code = text.charCodeAt(index);

        while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
          unitName += c;
          next();
          code = text.charCodeAt(index);
        } // Must begin with [a-zA-Z]


        code = unitName.charCodeAt(0);

        if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
          return unitName || null;
        } else {
          return null;
        }
      }

      function parseCharacter(toFind) {
        if (c === toFind) {
          next();
          return toFind;
        } else {
          return null;
        }
      }
      /**
       * Parse a string into a unit. The value of the unit is parsed as number,
       * BigNumber, or Fraction depending on the math.js config setting `number`.
       *
       * Throws an exception if the provided string does not contain a valid unit or
       * cannot be parsed.
       * @memberof Unit
       * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
       * @return {Unit} unit
       */


      Unit.parse = function (str, options) {
        options = options || {};
        text = str;
        index = -1;
        c = '';

        if (typeof text !== 'string') {
          throw new TypeError('Invalid argument in Unit.parse, string expected');
        }

        var unit = new Unit();
        unit.units = [];
        var powerMultiplierCurrent = 1;
        var expectingUnit = false; // A unit should follow this pattern:
        // [number] ...[ [*/] unit[^number] ]
        // unit[^number] ... [ [*/] unit[^number] ]
        // Rules:
        // number is any floating point number.
        // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
        // The string may optionally begin with a number.
        // Each unit may optionally be followed by ^number.
        // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
        //   2m^2kg/s^2
        // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
        //   4erg

        next();
        skipWhitespace(); // Optional number at the start of the string

        var valueStr = parseNumber();
        var value = null;

        if (valueStr) {
          if (config.number === 'BigNumber') {
            value = new _BigNumber(valueStr);
          } else if (config.number === 'Fraction') {
            try {
              // not all numbers can be turned in Fractions, for example very small numbers not
              value = new _Fraction(valueStr);
            } catch (err) {
              value = parseFloat(valueStr);
            }
          } else {
            // number
            value = parseFloat(valueStr);
          }

          skipWhitespace(); // Whitespace is not required here
          // handle multiplication or division right after the value, like '1/s'

          if (parseCharacter('*')) {
            powerMultiplierCurrent = 1;
            expectingUnit = true;
          } else if (parseCharacter('/')) {
            powerMultiplierCurrent = -1;
            expectingUnit = true;
          }
        } // Stack to keep track of powerMultipliers applied to each parentheses group


        var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

        var powerMultiplierStackProduct = 1;

        while (true) {
          skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
          // A '(' will always appear directly before a unit.

          while (c === '(') {
            powerMultiplierStack.push(powerMultiplierCurrent);
            powerMultiplierStackProduct *= powerMultiplierCurrent;
            powerMultiplierCurrent = 1;
            next();
            skipWhitespace();
          } // Is there something here?


          var uStr = void 0;

          if (c) {
            var oldC = c;
            uStr = parseUnit();

            if (uStr === null) {
              throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
            }
          } else {
            // End of input.
            break;
          } // Verify the unit exists and get the prefix (if any)


          var res = _findUnit(uStr);

          if (res === null) {
            // Unit not found.
            throw new SyntaxError('Unit "' + uStr + '" not found.');
          }

          var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

          skipWhitespace();

          if (parseCharacter('^')) {
            skipWhitespace();
            var p = parseNumber();

            if (p === null) {
              // No valid number found for the power!
              throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
            }

            power *= p;
          } // Add the unit to the list


          unit.units.push({
            unit: res.unit,
            prefix: res.prefix,
            power: power
          });

          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
          } // Check for and consume closing parentheses, popping from the stack.
          // A ')' will always follow a unit.


          skipWhitespace();

          while (c === ')') {
            if (powerMultiplierStack.length === 0) {
              throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
            }

            powerMultiplierStackProduct /= powerMultiplierStack.pop();
            next();
            skipWhitespace();
          } // "*" and "/" should mean we are expecting something to come next.
          // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


          expectingUnit = false;

          if (parseCharacter('*')) {
            // explicit multiplication
            powerMultiplierCurrent = 1;
            expectingUnit = true;
          } else if (parseCharacter('/')) {
            // division
            powerMultiplierCurrent = -1;
            expectingUnit = true;
          } else {
            // implicit multiplication
            powerMultiplierCurrent = 1;
          } // Replace the unit into the auto unit system


          if (res.unit.base) {
            var baseDim = res.unit.base.key;
            UNIT_SYSTEMS.auto[baseDim] = {
              unit: res.unit,
              prefix: res.prefix
            };
          }
        } // Has the string been entirely consumed?


        skipWhitespace();

        if (c) {
          throw new SyntaxError('Could not parse: "' + str + '"');
        } // Is there a trailing slash?


        if (expectingUnit) {
          throw new SyntaxError('Trailing characters: "' + str + '"');
        } // Is the parentheses stack empty?


        if (powerMultiplierStack.length !== 0) {
          throw new SyntaxError('Unmatched "(" in "' + text + '"');
        } // Are there any units at all?


        if (unit.units.length === 0 && !options.allowNoUnits) {
          throw new SyntaxError('"' + str + '" contains no units');
        }

        unit.value = value !== undefined ? unit._normalize(value) : null;
        return unit;
      };
      /**
       * create a copy of this unit
       * @memberof Unit
       * @return {Unit} Returns a cloned version of the unit
       */


      Unit.prototype.clone = function () {
        var unit = new Unit();
        unit.fixPrefix = this.fixPrefix;
        unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
        unit.value = clone$3(this.value);
        unit.dimensions = this.dimensions.slice(0);
        unit.units = [];

        for (var i = 0; i < this.units.length; i++) {
          unit.units[i] = {};

          for (var p in this.units[i]) {
            if (hasOwnProperty$1(this.units[i], p)) {
              unit.units[i][p] = this.units[i][p];
            }
          }
        }

        return unit;
      };
      /**
       * Return whether the unit is derived (such as m/s, or cm^2, but not N)
       * @memberof Unit
       * @return {boolean} True if the unit is derived
       */


      Unit.prototype._isDerived = function () {
        if (this.units.length === 0) {
          return false;
        }

        return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
      };
      /**
       * Normalize a value, based on its currently set unit(s)
       * @memberof Unit
       * @param {number | BigNumber | Fraction | boolean} value
       * @return {number | BigNumber | Fraction | boolean} normalized value
       * @private
       */


      Unit.prototype._normalize = function (value) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;

        if (value === null || value === undefined || this.units.length === 0) {
          return value;
        } else if (this._isDerived()) {
          // This is a derived unit, so do not apply offsets.
          // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
          var res = value;
          convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed

          for (var i = 0; i < this.units.length; i++) {
            unitValue = convert(this.units[i].unit.value);
            unitPrefixValue = convert(this.units[i].prefix.value);
            unitPower = convert(this.units[i].power);
            res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
          }

          return res;
        } else {
          // This is a single unit of power 1, like kg or degC
          convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed

          unitValue = convert(this.units[0].unit.value);
          unitOffset = convert(this.units[0].unit.offset);
          unitPrefixValue = convert(this.units[0].prefix.value);
          return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
        }
      };
      /**
       * Denormalize a value, based on its currently set unit(s)
       * @memberof Unit
       * @param {number} value
       * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
       * @return {number} denormalized value
       * @private
       */


      Unit.prototype._denormalize = function (value, prefixValue) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;

        if (value === null || value === undefined || this.units.length === 0) {
          return value;
        } else if (this._isDerived()) {
          // This is a derived unit, so do not apply offsets.
          // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
          // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
          var res = value;
          convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed

          for (var i = 0; i < this.units.length; i++) {
            unitValue = convert(this.units[i].unit.value);
            unitPrefixValue = convert(this.units[i].prefix.value);
            unitPower = convert(this.units[i].power);
            res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
          }

          return res;
        } else {
          // This is a single unit of power 1, like kg or degC
          convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed

          unitValue = convert(this.units[0].unit.value);
          unitPrefixValue = convert(this.units[0].prefix.value);
          unitOffset = convert(this.units[0].unit.offset);

          if (prefixValue === undefined || prefixValue === null) {
            return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
          } else {
            return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
          }
        }
      };
      /**
       * Find a unit from a string
       * @memberof Unit
       * @param {string} str              A string like 'cm' or 'inch'
       * @returns {Object | null} result  When found, an object with fields unit and
       *                                  prefix is returned. Else, null is returned.
       * @private
       */


      function _findUnit(str) {
        // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
        if (hasOwnProperty$1(UNITS, str)) {
          var unit = UNITS[str];
          var prefix = unit.prefixes[''];
          return {
            unit: unit,
            prefix: prefix
          };
        }

        for (var _name in UNITS) {
          if (hasOwnProperty$1(UNITS, _name)) {
            if (endsWith(str, _name)) {
              var _unit = UNITS[_name];
              var prefixLen = str.length - _name.length;
              var prefixName = str.substring(0, prefixLen);

              var _prefix = hasOwnProperty$1(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;

              if (_prefix !== undefined) {
                // store unit, prefix, and value
                return {
                  unit: _unit,
                  prefix: _prefix
                };
              }
            }
          }
        }

        return null;
      }
      /**
       * Test if the given expression is a unit.
       * The unit can have a prefix but cannot have a value.
       * @memberof Unit
       * @param {string} name   A string to be tested whether it is a value less unit.
       *                        The unit can have prefix, like "cm"
       * @return {boolean}      true if the given string is a unit
       */


      Unit.isValuelessUnit = function (name) {
        return _findUnit(name) !== null;
      };
      /**
       * check if this unit has given base unit
       * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
       * @memberof Unit
       * @param {BASE_UNITS | string | undefined} base
       */


      Unit.prototype.hasBase = function (base) {
        if (typeof base === 'string') {
          base = BASE_UNITS[base];
        }

        if (!base) {
          return false;
        } // All dimensions must be the same


        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }

        return true;
      };
      /**
       * Check if this unit has a base or bases equal to another base or bases
       * For derived units, the exponent on each base also must match
       * @memberof Unit
       * @param {Unit} other
       * @return {boolean} true if equal base
       */


      Unit.prototype.equalBase = function (other) {
        // All dimensions must be the same
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }

        return true;
      };
      /**
       * Check if this unit equals another unit
       * @memberof Unit
       * @param {Unit} other
       * @return {boolean} true if both units are equal
       */


      Unit.prototype.equals = function (other) {
        return this.equalBase(other) && equal(this.value, other.value);
      };
      /**
       * Multiply this unit with another one
       * @memberof Unit
       * @param {Unit} other
       * @return {Unit} product of this unit and the other unit
       */


      Unit.prototype.multiply = function (other) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
        } // Append other's units list onto res


        for (var _i = 0; _i < other.units.length; _i++) {
          // Make a deep copy
          var inverted = {};

          for (var key in other.units[_i]) {
            inverted[key] = other.units[_i][key];
          }

          res.units.push(inverted);
        } // If at least one operand has a value, then the result should also have a value


        if (this.value !== null || other.value !== null) {
          var valThis = this.value === null ? this._normalize(1) : this.value;
          var valOther = other.value === null ? other._normalize(1) : other.value;
          res.value = multiplyScalar(valThis, valOther);
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Divide this unit by another one
       * @memberof Unit
       * @param {Unit} other
       * @return {Unit} result of dividing this unit by the other unit
       */


      Unit.prototype.divide = function (other) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
        } // Invert and append other's units list onto res


        for (var _i2 = 0; _i2 < other.units.length; _i2++) {
          // Make a deep copy
          var inverted = {};

          for (var key in other.units[_i2]) {
            inverted[key] = other.units[_i2][key];
          }

          inverted.power = -inverted.power;
          res.units.push(inverted);
        } // If at least one operand has a value, the result should have a value


        if (this.value !== null || other.value !== null) {
          var valThis = this.value === null ? this._normalize(1) : this.value;
          var valOther = other.value === null ? other._normalize(1) : other.value;
          res.value = divideScalar(valThis, valOther);
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Calculate the power of a unit
       * @memberof Unit
       * @param {number | Fraction | BigNumber} p
       * @returns {Unit}      The result: this^p
       */


      Unit.prototype.pow = function (p) {
        var res = this.clone();

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          // Dimensions arrays may be of different lengths. Default to 0.
          res.dimensions[i] = (this.dimensions[i] || 0) * p;
        } // Adjust the power of each unit in the list


        for (var _i3 = 0; _i3 < res.units.length; _i3++) {
          res.units[_i3].power *= p;
        }

        if (res.value !== null) {
          res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
          // if (!isNumeric(res.value)) {
          //  res.value = NaN
          // }
          // Update: Complex supported now
        } else {
          res.value = null;
        }

        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
      };
      /**
       * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
       * @param {Unit} unit
       * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
       */


      function getNumericIfUnitless(unit) {
        if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
          return unit.value;
        } else {
          return unit;
        }
      }
      /**
       * Calculate the absolute value of a unit
       * @memberof Unit
       * @param {number | Fraction | BigNumber} x
       * @returns {Unit}      The result: |x|, absolute value of x
       */


      Unit.prototype.abs = function () {
        // This gives correct, but unexpected, results for units with an offset.
        // For example, abs(-283.15 degC) = -263.15 degC !!!
        var ret = this.clone();
        ret.value = ret.value !== null ? abs(ret.value) : null;

        for (var i in ret.units) {
          if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
            ret.units[i].unit = UNITS.W;
          }
        }

        return ret;
      };
      /**
       * Convert the unit to a specific unit name.
       * @memberof Unit
       * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
       * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
       */


      Unit.prototype.to = function (valuelessUnit) {
        var other;
        var value = this.value === null ? this._normalize(1) : this.value;

        if (typeof valuelessUnit === 'string') {
          // other = new Unit(null, valuelessUnit)
          other = Unit.parse(valuelessUnit);

          if (!this.equalBase(other)) {
            throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
          }

          if (other.value !== null) {
            throw new Error('Cannot convert to a unit with a value');
          }

          other.value = clone$3(value);
          other.fixPrefix = true;
          other.skipAutomaticSimplification = true;
          return other;
        } else if (isUnit(valuelessUnit)) {
          if (!this.equalBase(valuelessUnit)) {
            throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
          }

          if (valuelessUnit.value !== null) {
            throw new Error('Cannot convert to a unit with a value');
          }

          other = valuelessUnit.clone();
          other.value = clone$3(value);
          other.fixPrefix = true;
          other.skipAutomaticSimplification = true;
          return other;
        } else {
          throw new Error('String or Unit expected as parameter');
        }
      };
      /**
       * Return the value of the unit when represented with given valueless unit
       * @memberof Unit
       * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
       * @return {number} Returns the unit value as number.
       */
      // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


      Unit.prototype.toNumber = function (valuelessUnit) {
        return toNumber(this.toNumeric(valuelessUnit));
      };
      /**
       * Return the value of the unit in the original numeric type
       * @memberof Unit
       * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
       * @return {number | BigNumber | Fraction} Returns the unit value
       */


      Unit.prototype.toNumeric = function (valuelessUnit) {
        var other;

        if (valuelessUnit) {
          // Allow getting the numeric value without converting to a different unit
          other = this.to(valuelessUnit);
        } else {
          other = this.clone();
        }

        if (other._isDerived()) {
          return other._denormalize(other.value);
        } else {
          return other._denormalize(other.value, other.units[0].prefix.value);
        }
      };
      /**
       * Get a string representation of the unit.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.toString = function () {
        return this.format();
      };
      /**
       * Get a JSON representation of the unit
       * @memberof Unit
       * @returns {Object} Returns a JSON object structured as:
       *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
       */


      Unit.prototype.toJSON = function () {
        return {
          mathjs: 'Unit',
          value: this._denormalize(this.value),
          unit: this.formatUnits(),
          fixPrefix: this.fixPrefix
        };
      };
      /**
       * Instantiate a Unit from a JSON object
       * @memberof Unit
       * @param {Object} json  A JSON object structured as:
       *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
       * @return {Unit}
       */


      Unit.fromJSON = function (json) {
        var unit = new Unit(json.value, json.unit);
        unit.fixPrefix = json.fixPrefix || false;
        return unit;
      };
      /**
       * Returns the string representation of the unit.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.valueOf = Unit.prototype.toString;
      /**
       * Simplify this Unit's unit list and return a new Unit with the simplified list.
       * The returned Unit will contain a list of the "best" units for formatting.
       */

      Unit.prototype.simplify = function () {
        var ret = this.clone();
        var proposedUnitList = []; // Search for a matching base

        var matchingBase;

        for (var key in currentUnitSystem) {
          if (ret.hasBase(BASE_UNITS[key])) {
            matchingBase = key;
            break;
          }
        }

        if (matchingBase === 'NONE') {
          ret.units = [];
        } else {
          var matchingUnit;

          if (matchingBase) {
            // Does the unit system have a matching unit?
            if (hasOwnProperty$1(currentUnitSystem, matchingBase)) {
              matchingUnit = currentUnitSystem[matchingBase];
            }
          }

          if (matchingUnit) {
            ret.units = [{
              unit: matchingUnit.unit,
              prefix: matchingUnit.prefix,
              power: 1.0
            }];
          } else {
            // Multiple units or units with powers are formatted like this:
            // 5 (kg m^2) / (s^3 mol)
            // Build an representation from the base units of the current unit system
            var missingBaseDim = false;

            for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
              var baseDim = BASE_DIMENSIONS[i];

              if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
                if (hasOwnProperty$1(currentUnitSystem, baseDim)) {
                  proposedUnitList.push({
                    unit: currentUnitSystem[baseDim].unit,
                    prefix: currentUnitSystem[baseDim].prefix,
                    power: ret.dimensions[i] || 0
                  });
                } else {
                  missingBaseDim = true;
                }
              }
            } // Is the proposed unit list "simpler" than the existing one?


            if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
              // Replace this unit list with the proposed list
              ret.units = proposedUnitList;
            }
          }
        }

        return ret;
      };
      /**
       * Returns a new Unit in the SI system with the same value as this one
       */


      Unit.prototype.toSI = function () {
        var ret = this.clone();
        var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the SI unit system

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (hasOwnProperty$1(UNIT_SYSTEMS.si, baseDim)) {
              proposedUnitList.push({
                unit: UNIT_SYSTEMS.si[baseDim].unit,
                prefix: UNIT_SYSTEMS.si[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
            }
          }
        } // Replace this unit list with the proposed list


        ret.units = proposedUnitList;
        ret.fixPrefix = true;
        ret.skipAutomaticSimplification = true;
        return ret;
      };
      /**
       * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
       * @memberof Unit
       * @return {string}
       */


      Unit.prototype.formatUnits = function () {
        var strNum = '';
        var strDen = '';
        var nNum = 0;
        var nDen = 0;

        for (var i = 0; i < this.units.length; i++) {
          if (this.units[i].power > 0) {
            nNum++;
            strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

            if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
              strNum += '^' + this.units[i].power;
            }
          } else if (this.units[i].power < 0) {
            nDen++;
          }
        }

        if (nDen > 0) {
          for (var _i4 = 0; _i4 < this.units.length; _i4++) {
            if (this.units[_i4].power < 0) {
              if (nNum > 0) {
                strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

                if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
                  strDen += '^' + -this.units[_i4].power;
                }
              } else {
                strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
                strDen += '^' + this.units[_i4].power;
              }
            }
          }
        } // Remove leading " "


        strNum = strNum.substr(1);
        strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

        if (nNum > 1 && nDen > 0) {
          strNum = '(' + strNum + ')';
        }

        if (nDen > 1 && nNum > 0) {
          strDen = '(' + strDen + ')';
        }

        var str = strNum;

        if (nNum > 0 && nDen > 0) {
          str += ' / ';
        }

        str += strDen;
        return str;
      };
      /**
       * Get a string representation of the Unit, with optional formatting options.
       * @memberof Unit
       * @param {Object | number | Function} [options]  Formatting options. See
       *                                                lib/utils/number:format for a
       *                                                description of the available
       *                                                options.
       * @return {string}
       */


      Unit.prototype.format = function (options) {
        // Simplfy the unit list, unless it is valueless or was created directly in the
        // constructor or as the result of to or toSI
        var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

        var isImaginary = false;

        if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {
          // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
          isImaginary = Math.abs(simp.value.re) < 1e-14;
        }

        for (var i in simp.units) {
          if (simp.units[i].unit) {
            if (simp.units[i].unit.name === 'VA' && isImaginary) {
              simp.units[i].unit = UNITS.VAR;
            } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
              simp.units[i].unit = UNITS.VA;
            }
          }
        } // Now apply the best prefix
        // Units must have only one unit and not have the fixPrefix flag set


        if (simp.units.length === 1 && !simp.fixPrefix) {
          // Units must have integer powers, otherwise the prefix will change the
          // outputted value by not-an-integer-power-of-ten
          if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
            // Apply the best prefix
            simp.units[0].prefix = simp._bestPrefix();
          }
        }

        var value = simp._denormalize(simp.value);

        var str = simp.value !== null ? format(value, options || {}) : '';
        var unitStr = simp.formatUnits();

        if (simp.value && isComplex(simp.value)) {
          str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
        }

        if (unitStr.length > 0 && str.length > 0) {
          str += ' ';
        }

        str += unitStr;
        return str;
      };
      /**
       * Calculate the best prefix using current value.
       * @memberof Unit
       * @returns {Object} prefix
       * @private
       */


      Unit.prototype._bestPrefix = function () {
        if (this.units.length !== 1) {
          throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
        }

        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
          throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
        } // find the best prefix value (resulting in the value of which
        // the absolute value of the log10 is closest to zero,
        // though with a little offset of 1.2 for nicer values: you get a
        // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
        // Note: the units value can be any numeric type, but to find the best
        // prefix it's enough to work with limited precision of a regular number
        // Update: using mathjs abs since we also allow complex numbers


        var absValue = this.value !== null ? abs(this.value) : 0;
        var absUnitValue = abs(this.units[0].unit.value);
        var bestPrefix = this.units[0].prefix;

        if (absValue === 0) {
          return bestPrefix;
        }

        var power = this.units[0].power;
        var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
        if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

        bestDiff = Math.abs(bestDiff);
        var prefixes = this.units[0].unit.prefixes;

        for (var p in prefixes) {
          if (hasOwnProperty$1(prefixes, p)) {
            var prefix = prefixes[p];

            if (prefix.scientific) {
              var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

              if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
                // choose the prefix with the smallest diff, or if equal, choose the one
                // with the shortest name (can happen with SHORTLONG for example)
                bestPrefix = prefix;
                bestDiff = diff;
              }
            }
          }
        }

        return bestPrefix;
      };
      /**
       * Returns an array of units whose sum is equal to this unit
       * @memberof Unit
       * @param {Array} [parts] An array of strings or valueless units.
       *
       *   Example:
       *
       *   const u = new Unit(1, 'm')
       *   u.splitUnit(['feet', 'inch'])
       *     [ 3 feet, 3.3700787401575 inch ]
       *
       * @return {Array} An array of units.
       */


      Unit.prototype.splitUnit = function (parts) {
        var x = this.clone();
        var ret = [];

        for (var i = 0; i < parts.length; i++) {
          // Convert x to the requested unit
          x = x.to(parts[i]);
          if (i === parts.length - 1) break; // Get the numeric value of this unit

          var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
          // since fix can incorrectly round down if there is round-off error

          var xRounded = round(xNumeric);
          var xFixed = void 0;
          var isNearlyEqual = equal(xRounded, xNumeric);

          if (isNearlyEqual) {
            xFixed = xRounded;
          } else {
            xFixed = fix(x.toNumeric());
          }

          var y = new Unit(xFixed, parts[i].toString());
          ret.push(y);
          x = subtract(x, y);
        } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
        // But instead of comparing x, the remainder, with zero--we will compare the sum of
        // all the parts so far with the original value. If they are nearly equal,
        // we set the remainder to 0.


        var testSum = 0;

        for (var _i5 = 0; _i5 < ret.length; _i5++) {
          testSum = addScalar(testSum, ret[_i5].value);
        }

        if (equal(testSum, this.value)) {
          x.value = 0;
        }

        ret.push(x);
        return ret;
      };

      var PREFIXES = {
        NONE: {
          '': {
            name: '',
            value: 1,
            scientific: true
          }
        },
        SHORT: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e1,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e2,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e3,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e6,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e9,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e12,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e15,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e18,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e21,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e24,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-1,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-2,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-3,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-6,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-9,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-12,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-15,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-18,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-21,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-24,
            scientific: true
          }
        },
        LONG: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          deca: {
            name: 'deca',
            value: 1e1,
            scientific: false
          },
          hecto: {
            name: 'hecto',
            value: 1e2,
            scientific: false
          },
          kilo: {
            name: 'kilo',
            value: 1e3,
            scientific: true
          },
          mega: {
            name: 'mega',
            value: 1e6,
            scientific: true
          },
          giga: {
            name: 'giga',
            value: 1e9,
            scientific: true
          },
          tera: {
            name: 'tera',
            value: 1e12,
            scientific: true
          },
          peta: {
            name: 'peta',
            value: 1e15,
            scientific: true
          },
          exa: {
            name: 'exa',
            value: 1e18,
            scientific: true
          },
          zetta: {
            name: 'zetta',
            value: 1e21,
            scientific: true
          },
          yotta: {
            name: 'yotta',
            value: 1e24,
            scientific: true
          },
          deci: {
            name: 'deci',
            value: 1e-1,
            scientific: false
          },
          centi: {
            name: 'centi',
            value: 1e-2,
            scientific: false
          },
          milli: {
            name: 'milli',
            value: 1e-3,
            scientific: true
          },
          micro: {
            name: 'micro',
            value: 1e-6,
            scientific: true
          },
          nano: {
            name: 'nano',
            value: 1e-9,
            scientific: true
          },
          pico: {
            name: 'pico',
            value: 1e-12,
            scientific: true
          },
          femto: {
            name: 'femto',
            value: 1e-15,
            scientific: true
          },
          atto: {
            name: 'atto',
            value: 1e-18,
            scientific: true
          },
          zepto: {
            name: 'zepto',
            value: 1e-21,
            scientific: true
          },
          yocto: {
            name: 'yocto',
            value: 1e-24,
            scientific: true
          }
        },
        SQUARED: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e2,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e4,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e6,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e12,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e18,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e24,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e30,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e36,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e42,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e48,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-2,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-4,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-6,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-12,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-18,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-24,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-30,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-36,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-42,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-48,
            scientific: true
          }
        },
        CUBIC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          da: {
            name: 'da',
            value: 1e3,
            scientific: false
          },
          h: {
            name: 'h',
            value: 1e6,
            scientific: false
          },
          k: {
            name: 'k',
            value: 1e9,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e18,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e27,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e36,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e45,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e54,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e63,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e72,
            scientific: true
          },
          d: {
            name: 'd',
            value: 1e-3,
            scientific: false
          },
          c: {
            name: 'c',
            value: 1e-6,
            scientific: false
          },
          m: {
            name: 'm',
            value: 1e-9,
            scientific: true
          },
          u: {
            name: 'u',
            value: 1e-18,
            scientific: true
          },
          n: {
            name: 'n',
            value: 1e-27,
            scientific: true
          },
          p: {
            name: 'p',
            value: 1e-36,
            scientific: true
          },
          f: {
            name: 'f',
            value: 1e-45,
            scientific: true
          },
          a: {
            name: 'a',
            value: 1e-54,
            scientific: true
          },
          z: {
            name: 'z',
            value: 1e-63,
            scientific: true
          },
          y: {
            name: 'y',
            value: 1e-72,
            scientific: true
          }
        },
        BINARY_SHORT_SI: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          k: {
            name: 'k',
            value: 1e3,
            scientific: true
          },
          M: {
            name: 'M',
            value: 1e6,
            scientific: true
          },
          G: {
            name: 'G',
            value: 1e9,
            scientific: true
          },
          T: {
            name: 'T',
            value: 1e12,
            scientific: true
          },
          P: {
            name: 'P',
            value: 1e15,
            scientific: true
          },
          E: {
            name: 'E',
            value: 1e18,
            scientific: true
          },
          Z: {
            name: 'Z',
            value: 1e21,
            scientific: true
          },
          Y: {
            name: 'Y',
            value: 1e24,
            scientific: true
          }
        },
        BINARY_SHORT_IEC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          Ki: {
            name: 'Ki',
            value: 1024,
            scientific: true
          },
          Mi: {
            name: 'Mi',
            value: Math.pow(1024, 2),
            scientific: true
          },
          Gi: {
            name: 'Gi',
            value: Math.pow(1024, 3),
            scientific: true
          },
          Ti: {
            name: 'Ti',
            value: Math.pow(1024, 4),
            scientific: true
          },
          Pi: {
            name: 'Pi',
            value: Math.pow(1024, 5),
            scientific: true
          },
          Ei: {
            name: 'Ei',
            value: Math.pow(1024, 6),
            scientific: true
          },
          Zi: {
            name: 'Zi',
            value: Math.pow(1024, 7),
            scientific: true
          },
          Yi: {
            name: 'Yi',
            value: Math.pow(1024, 8),
            scientific: true
          }
        },
        BINARY_LONG_SI: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          kilo: {
            name: 'kilo',
            value: 1e3,
            scientific: true
          },
          mega: {
            name: 'mega',
            value: 1e6,
            scientific: true
          },
          giga: {
            name: 'giga',
            value: 1e9,
            scientific: true
          },
          tera: {
            name: 'tera',
            value: 1e12,
            scientific: true
          },
          peta: {
            name: 'peta',
            value: 1e15,
            scientific: true
          },
          exa: {
            name: 'exa',
            value: 1e18,
            scientific: true
          },
          zetta: {
            name: 'zetta',
            value: 1e21,
            scientific: true
          },
          yotta: {
            name: 'yotta',
            value: 1e24,
            scientific: true
          }
        },
        BINARY_LONG_IEC: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          kibi: {
            name: 'kibi',
            value: 1024,
            scientific: true
          },
          mebi: {
            name: 'mebi',
            value: Math.pow(1024, 2),
            scientific: true
          },
          gibi: {
            name: 'gibi',
            value: Math.pow(1024, 3),
            scientific: true
          },
          tebi: {
            name: 'tebi',
            value: Math.pow(1024, 4),
            scientific: true
          },
          pebi: {
            name: 'pebi',
            value: Math.pow(1024, 5),
            scientific: true
          },
          exi: {
            name: 'exi',
            value: Math.pow(1024, 6),
            scientific: true
          },
          zebi: {
            name: 'zebi',
            value: Math.pow(1024, 7),
            scientific: true
          },
          yobi: {
            name: 'yobi',
            value: Math.pow(1024, 8),
            scientific: true
          }
        },
        BTU: {
          '': {
            name: '',
            value: 1,
            scientific: true
          },
          MM: {
            name: 'MM',
            value: 1e6,
            scientific: true
          }
        }
      };
      PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);
      PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
      PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
      /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
       * Index  Dimension
       * -----  ---------
       *   0    Length
       *   1    Mass
       *   2    Time
       *   3    Current
       *   4    Temperature
       *   5    Luminous intensity
       *   6    Amount of substance
       *   7    Angle
       *   8    Bit (digital)
       * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
       *
       */

      var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
      var BASE_UNITS = {
        NONE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        MASS: {
          dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        LENGTH: {
          dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
        },
        TIME: {
          dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
        },
        CURRENT: {
          dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
        },
        TEMPERATURE: {
          dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
        },
        LUMINOUS_INTENSITY: {
          dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
        },
        AMOUNT_OF_SUBSTANCE: {
          dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
        },
        FORCE: {
          dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
        },
        SURFACE: {
          dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
        },
        VOLUME: {
          dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
        },
        ENERGY: {
          dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
        },
        POWER: {
          dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
        },
        PRESSURE: {
          dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CHARGE: {
          dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CAPACITANCE: {
          dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_POTENTIAL: {
          dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_RESISTANCE: {
          dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_INDUCTANCE: {
          dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CONDUCTANCE: {
          dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX: {
          dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX_DENSITY: {
          dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
        },
        FREQUENCY: {
          dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
        },
        ANGLE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
        },
        BIT: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
        }
      };

      for (var key in BASE_UNITS) {
        BASE_UNITS[key].key = key;
      }

      var BASE_UNIT_NONE = {};
      var UNIT_NONE = {
        name: '',
        base: BASE_UNIT_NONE,
        value: 1,
        offset: 0,
        dimensions: BASE_DIMENSIONS.map(function (x) {
          return 0;
        })
      };
      var UNITS = {
        // length
        meter: {
          name: 'meter',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        inch: {
          name: 'inch',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        foot: {
          name: 'foot',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yard: {
          name: 'yard',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mile: {
          name: 'mile',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        link: {
          name: 'link',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rod: {
          name: 'rod',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.0292,
          offset: 0
        },
        chain: {
          name: 'chain',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        angstrom: {
          name: 'angstrom',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1e-10,
          offset: 0
        },
        m: {
          name: 'm',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        "in": {
          name: 'in',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        ft: {
          name: 'ft',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yd: {
          name: 'yd',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mi: {
          name: 'mi',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        li: {
          name: 'li',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rd: {
          name: 'rd',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.029210,
          offset: 0
        },
        ch: {
          name: 'ch',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        mil: {
          name: 'mil',
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0000254,
          offset: 0
        },
        // 1/1000 inch
        // Surface
        m2: {
          name: 'm2',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.SQUARED,
          value: 1,
          offset: 0
        },
        sqin: {
          name: 'sqin',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.00064516,
          offset: 0
        },
        // 645.16 mm2
        sqft: {
          name: 'sqft',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.09290304,
          offset: 0
        },
        // 0.09290304 m2
        sqyd: {
          name: 'sqyd',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.83612736,
          offset: 0
        },
        // 0.83612736 m2
        sqmi: {
          name: 'sqmi',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 2589988.110336,
          offset: 0
        },
        // 2.589988110336 km2
        sqrd: {
          name: 'sqrd',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 25.29295,
          offset: 0
        },
        // 25.29295 m2
        sqch: {
          name: 'sqch',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 404.6873,
          offset: 0
        },
        // 404.6873 m2
        sqmil: {
          name: 'sqmil',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 6.4516e-10,
          offset: 0
        },
        // 6.4516 * 10^-10 m2
        acre: {
          name: 'acre',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 4046.86,
          offset: 0
        },
        // 4046.86 m2
        hectare: {
          name: 'hectare',
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 10000,
          offset: 0
        },
        // 10000 m2
        // Volume
        m3: {
          name: 'm3',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.CUBIC,
          value: 1,
          offset: 0
        },
        L: {
          name: 'L',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        // litre
        l: {
          name: 'l',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        // litre
        litre: {
          name: 'litre',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.LONG,
          value: 0.001,
          offset: 0
        },
        cuin: {
          name: 'cuin',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1.6387064e-5,
          offset: 0
        },
        // 1.6387064e-5 m3
        cuft: {
          name: 'cuft',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.028316846592,
          offset: 0
        },
        // 28.316 846 592 L
        cuyd: {
          name: 'cuyd',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.764554857984,
          offset: 0
        },
        // 764.554 857 984 L
        teaspoon: {
          name: 'teaspoon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.000005,
          offset: 0
        },
        // 5 mL
        tablespoon: {
          name: 'tablespoon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.000015,
          offset: 0
        },
        // 15 mL
        // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
        drop: {
          name: 'drop',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        gtt: {
          name: 'gtt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        // Liquid volume
        minim: {
          name: 'minim',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00000006161152,
          offset: 0
        },
        // 0.06161152 mL
        fluiddram: {
          name: 'fluiddram',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0000036966911,
          offset: 0
        },
        // 3.696691 mL
        fluidounce: {
          name: 'fluidounce',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00002957353,
          offset: 0
        },
        // 29.57353 mL
        gill: {
          name: 'gill',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0001182941,
          offset: 0
        },
        // 118.2941 mL
        cc: {
          name: 'cc',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1e-6,
          offset: 0
        },
        // 1e-6 L
        cup: {
          name: 'cup',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0002365882,
          offset: 0
        },
        // 236.5882 mL
        pint: {
          name: 'pint',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0004731765,
          offset: 0
        },
        // 473.1765 mL
        quart: {
          name: 'quart',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0009463529,
          offset: 0
        },
        // 946.3529 mL
        gallon: {
          name: 'gallon',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.003785412,
          offset: 0
        },
        // 3.785412 L
        beerbarrel: {
          name: 'beerbarrel',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        oilbarrel: {
          name: 'oilbarrel',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        hogshead: {
          name: 'hogshead',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.2384810,
          offset: 0
        },
        // 238.4810 L
        // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
        fldr: {
          name: 'fldr',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0000036966911,
          offset: 0
        },
        // 3.696691 mL
        floz: {
          name: 'floz',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.00002957353,
          offset: 0
        },
        // 29.57353 mL
        gi: {
          name: 'gi',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0001182941,
          offset: 0
        },
        // 118.2941 mL
        cp: {
          name: 'cp',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0002365882,
          offset: 0
        },
        // 236.5882 mL
        pt: {
          name: 'pt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0004731765,
          offset: 0
        },
        // 473.1765 mL
        qt: {
          name: 'qt',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.0009463529,
          offset: 0
        },
        // 946.3529 mL
        gal: {
          name: 'gal',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.003785412,
          offset: 0
        },
        // 3.785412 L
        bbl: {
          name: 'bbl',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        obl: {
          name: 'obl',
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
        // Mass
        g: {
          name: 'g',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 0.001,
          offset: 0
        },
        gram: {
          name: 'gram',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.LONG,
          value: 0.001,
          offset: 0
        },
        ton: {
          name: 'ton',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 907.18474,
          offset: 0
        },
        t: {
          name: 't',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 1000,
          offset: 0
        },
        tonne: {
          name: 'tonne',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.LONG,
          value: 1000,
          offset: 0
        },
        grain: {
          name: 'grain',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 64.79891e-6,
          offset: 0
        },
        dram: {
          name: 'dram',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 1.7718451953125e-3,
          offset: 0
        },
        ounce: {
          name: 'ounce',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 28.349523125e-3,
          offset: 0
        },
        poundmass: {
          name: 'poundmass',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 453.59237e-3,
          offset: 0
        },
        hundredweight: {
          name: 'hundredweight',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        stick: {
          name: 'stick',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 115e-3,
          offset: 0
        },
        stone: {
          name: 'stone',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 6.35029318,
          offset: 0
        },
        gr: {
          name: 'gr',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 64.79891e-6,
          offset: 0
        },
        dr: {
          name: 'dr',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 1.7718451953125e-3,
          offset: 0
        },
        oz: {
          name: 'oz',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 28.349523125e-3,
          offset: 0
        },
        lbm: {
          name: 'lbm',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 453.59237e-3,
          offset: 0
        },
        cwt: {
          name: 'cwt',
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        // Time
        s: {
          name: 's',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        min: {
          name: 'min',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        h: {
          name: 'h',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        second: {
          name: 'second',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        sec: {
          name: 'sec',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        minute: {
          name: 'minute',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        hour: {
          name: 'hour',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        day: {
          name: 'day',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 86400,
          offset: 0
        },
        week: {
          name: 'week',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 7 * 86400,
          offset: 0
        },
        month: {
          name: 'month',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 2629800,
          // 1/12th of Julian year
          offset: 0
        },
        year: {
          name: 'year',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 31557600,
          // Julian year
          offset: 0
        },
        decade: {
          name: 'decade',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 315576000,
          // Julian decade
          offset: 0
        },
        century: {
          name: 'century',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3155760000,
          // Julian century
          offset: 0
        },
        millennium: {
          name: 'millennium',
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 31557600000,
          // Julian millennium
          offset: 0
        },
        // Frequency
        hertz: {
          name: 'Hertz',
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        Hz: {
          name: 'Hz',
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        // Angle
        rad: {
          name: 'rad',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        radian: {
          name: 'radian',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
        deg: {
          name: 'deg',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        degree: {
          name: 'degree',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
        grad: {
          name: 'grad',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.SHORT,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        gradian: {
          name: 'gradian',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
        cycle: {
          name: 'cycle',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
        arcsec: {
          name: 'arcsec',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
        arcmin: {
          name: 'arcmin',
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // Electric current
        A: {
          name: 'A',
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        ampere: {
          name: 'ampere',
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // Temperature
        // K(C) = °C + 273.15
        // K(F) = (°F + 459.67) / 1.8
        // K(R) = °R / 1.8
        K: {
          name: 'K',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        degC: {
          name: 'degC',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        degF: {
          name: 'degF',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        degR: {
          name: 'degR',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        kelvin: {
          name: 'kelvin',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        celsius: {
          name: 'celsius',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        fahrenheit: {
          name: 'fahrenheit',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        rankine: {
          name: 'rankine',
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        // amount of substance
        mol: {
          name: 'mol',
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        mole: {
          name: 'mole',
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // luminous intensity
        cd: {
          name: 'cd',
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        candela: {
          name: 'candela',
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // TODO: units STERADIAN
        // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // Force
        N: {
          name: 'N',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        newton: {
          name: 'newton',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        dyn: {
          name: 'dyn',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 0.00001,
          offset: 0
        },
        dyne: {
          name: 'dyne',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 0.00001,
          offset: 0
        },
        lbf: {
          name: 'lbf',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        poundforce: {
          name: 'poundforce',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        kip: {
          name: 'kip',
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 4448.2216,
          offset: 0
        },
        // Energy
        J: {
          name: 'J',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        joule: {
          name: 'joule',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        erg: {
          name: 'erg',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.NONE,
          value: 1e-7,
          offset: 0
        },
        Wh: {
          name: 'Wh',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 3600,
          offset: 0
        },
        BTU: {
          name: 'BTU',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.BTU,
          value: 1055.05585262,
          offset: 0
        },
        eV: {
          name: 'eV',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1.602176565e-19,
          offset: 0
        },
        electronvolt: {
          name: 'electronvolt',
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.LONG,
          value: 1.602176565e-19,
          offset: 0
        },
        // Power
        W: {
          name: 'W',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        watt: {
          name: 'watt',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        hp: {
          name: 'hp',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.NONE,
          value: 745.6998715386,
          offset: 0
        },
        // Electrical power units
        VAR: {
          name: 'VAR',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: Complex.I,
          offset: 0
        },
        VA: {
          name: 'VA',
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Pressure
        Pa: {
          name: 'Pa',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        psi: {
          name: 'psi',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 6894.75729276459,
          offset: 0
        },
        atm: {
          name: 'atm',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 101325,
          offset: 0
        },
        bar: {
          name: 'bar',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.SHORTLONG,
          value: 100000,
          offset: 0
        },
        torr: {
          name: 'torr',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmHg: {
          name: 'mmHg',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmH2O: {
          name: 'mmH2O',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 9.80665,
          offset: 0
        },
        cmH2O: {
          name: 'cmH2O',
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 98.0665,
          offset: 0
        },
        // Electric charge
        coulomb: {
          name: 'coulomb',
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        C: {
          name: 'C',
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric capacitance
        farad: {
          name: 'farad',
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        F: {
          name: 'F',
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric potential
        volt: {
          name: 'volt',
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        V: {
          name: 'V',
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric resistance
        ohm: {
          name: 'ohm',
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORTLONG,
          // Both Mohm and megaohm are acceptable
          value: 1,
          offset: 0
        },

        /*
         * Unicode breaks in browsers if charset is not specified
        Ω: {
          name: 'Ω',
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        */
        // Electric inductance
        henry: {
          name: 'henry',
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        H: {
          name: 'H',
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric conductance
        siemens: {
          name: 'siemens',
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        S: {
          name: 'S',
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux
        weber: {
          name: 'weber',
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        Wb: {
          name: 'Wb',
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux density
        tesla: {
          name: 'tesla',
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        T: {
          name: 'T',
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Binary
        b: {
          name: 'b',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 1,
          offset: 0
        },
        bits: {
          name: 'bits',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 1,
          offset: 0
        },
        B: {
          name: 'B',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 8,
          offset: 0
        },
        bytes: {
          name: 'bytes',
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 8,
          offset: 0
        }
      }; // aliases (formerly plurals)

      var ALIASES = {
        meters: 'meter',
        inches: 'inch',
        feet: 'foot',
        yards: 'yard',
        miles: 'mile',
        links: 'link',
        rods: 'rod',
        chains: 'chain',
        angstroms: 'angstrom',
        lt: 'l',
        litres: 'litre',
        liter: 'litre',
        liters: 'litre',
        teaspoons: 'teaspoon',
        tablespoons: 'tablespoon',
        minims: 'minim',
        fluiddrams: 'fluiddram',
        fluidounces: 'fluidounce',
        gills: 'gill',
        cups: 'cup',
        pints: 'pint',
        quarts: 'quart',
        gallons: 'gallon',
        beerbarrels: 'beerbarrel',
        oilbarrels: 'oilbarrel',
        hogsheads: 'hogshead',
        gtts: 'gtt',
        grams: 'gram',
        tons: 'ton',
        tonnes: 'tonne',
        grains: 'grain',
        drams: 'dram',
        ounces: 'ounce',
        poundmasses: 'poundmass',
        hundredweights: 'hundredweight',
        sticks: 'stick',
        lb: 'lbm',
        lbs: 'lbm',
        kips: 'kip',
        acres: 'acre',
        hectares: 'hectare',
        sqfeet: 'sqft',
        sqyard: 'sqyd',
        sqmile: 'sqmi',
        sqmiles: 'sqmi',
        mmhg: 'mmHg',
        mmh2o: 'mmH2O',
        cmh2o: 'cmH2O',
        seconds: 'second',
        secs: 'second',
        minutes: 'minute',
        mins: 'minute',
        hours: 'hour',
        hr: 'hour',
        hrs: 'hour',
        days: 'day',
        weeks: 'week',
        months: 'month',
        years: 'year',
        decades: 'decade',
        centuries: 'century',
        millennia: 'millennium',
        hertz: 'hertz',
        radians: 'radian',
        degrees: 'degree',
        gradians: 'gradian',
        cycles: 'cycle',
        arcsecond: 'arcsec',
        arcseconds: 'arcsec',
        arcminute: 'arcmin',
        arcminutes: 'arcmin',
        BTUs: 'BTU',
        watts: 'watt',
        joules: 'joule',
        amperes: 'ampere',
        coulombs: 'coulomb',
        volts: 'volt',
        ohms: 'ohm',
        farads: 'farad',
        webers: 'weber',
        teslas: 'tesla',
        electronvolts: 'electronvolt',
        moles: 'mole',
        bit: 'bits',
        "byte": 'bytes'
      };
      /**
       * Calculate the values for the angle units.
       * Value is calculated as number or BigNumber depending on the configuration
       * @param {{number: 'number' | 'BigNumber'}} config
       */

      function calculateAngleValues(config) {
        if (config.number === 'BigNumber') {
          var pi = createBigNumberPi(_BigNumber);
          UNITS.rad.value = new _BigNumber(1);
          UNITS.deg.value = pi.div(180); // 2 * pi / 360

          UNITS.grad.value = pi.div(200); // 2 * pi / 400

          UNITS.cycle.value = pi.times(2); // 2 * pi

          UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

          UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
        } else {
          // number
          UNITS.rad.value = 1;
          UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

          UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

          UNITS.cycle.value = Math.PI * 2; // 2 * pi

          UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

          UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
        } // copy to the full names of the angles


        UNITS.radian.value = UNITS.rad.value;
        UNITS.degree.value = UNITS.deg.value;
        UNITS.gradian.value = UNITS.grad.value;
      } // apply the angle values now


      calculateAngleValues(config);

      if (on) {
        // recalculate the values on change of configuration
        on('config', function (curr, prev) {
          if (curr.number !== prev.number) {
            calculateAngleValues(curr);
          }
        });
      }
      /**
       * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
       * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
       * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
       */


      var UNIT_SYSTEMS = {
        si: {
          // Base units
          NONE: {
            unit: UNIT_NONE,
            prefix: PREFIXES.NONE['']
          },
          LENGTH: {
            unit: UNITS.m,
            prefix: PREFIXES.SHORT['']
          },
          MASS: {
            unit: UNITS.g,
            prefix: PREFIXES.SHORT.k
          },
          TIME: {
            unit: UNITS.s,
            prefix: PREFIXES.SHORT['']
          },
          CURRENT: {
            unit: UNITS.A,
            prefix: PREFIXES.SHORT['']
          },
          TEMPERATURE: {
            unit: UNITS.K,
            prefix: PREFIXES.SHORT['']
          },
          LUMINOUS_INTENSITY: {
            unit: UNITS.cd,
            prefix: PREFIXES.SHORT['']
          },
          AMOUNT_OF_SUBSTANCE: {
            unit: UNITS.mol,
            prefix: PREFIXES.SHORT['']
          },
          ANGLE: {
            unit: UNITS.rad,
            prefix: PREFIXES.SHORT['']
          },
          BIT: {
            unit: UNITS.bits,
            prefix: PREFIXES.SHORT['']
          },
          // Derived units
          FORCE: {
            unit: UNITS.N,
            prefix: PREFIXES.SHORT['']
          },
          ENERGY: {
            unit: UNITS.J,
            prefix: PREFIXES.SHORT['']
          },
          POWER: {
            unit: UNITS.W,
            prefix: PREFIXES.SHORT['']
          },
          PRESSURE: {
            unit: UNITS.Pa,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CHARGE: {
            unit: UNITS.C,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CAPACITANCE: {
            unit: UNITS.F,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_POTENTIAL: {
            unit: UNITS.V,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_RESISTANCE: {
            unit: UNITS.ohm,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_INDUCTANCE: {
            unit: UNITS.H,
            prefix: PREFIXES.SHORT['']
          },
          ELECTRIC_CONDUCTANCE: {
            unit: UNITS.S,
            prefix: PREFIXES.SHORT['']
          },
          MAGNETIC_FLUX: {
            unit: UNITS.Wb,
            prefix: PREFIXES.SHORT['']
          },
          MAGNETIC_FLUX_DENSITY: {
            unit: UNITS.T,
            prefix: PREFIXES.SHORT['']
          },
          FREQUENCY: {
            unit: UNITS.Hz,
            prefix: PREFIXES.SHORT['']
          }
        }
      }; // Clone to create the other unit systems

      UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.cgs.LENGTH = {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT.c
      };
      UNIT_SYSTEMS.cgs.MASS = {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT['']
      };
      UNIT_SYSTEMS.cgs.FORCE = {
        unit: UNITS.dyn,
        prefix: PREFIXES.SHORT['']
      };
      UNIT_SYSTEMS.cgs.ENERGY = {
        unit: UNITS.erg,
        prefix: PREFIXES.NONE['']
      }; // there are wholly 4 unique cgs systems for electricity and magnetism,
      // so let's not worry about it unless somebody complains

      UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.us.LENGTH = {
        unit: UNITS.ft,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.MASS = {
        unit: UNITS.lbm,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.TEMPERATURE = {
        unit: UNITS.degF,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.FORCE = {
        unit: UNITS.lbf,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.ENERGY = {
        unit: UNITS.BTU,
        prefix: PREFIXES.BTU['']
      };
      UNIT_SYSTEMS.us.POWER = {
        unit: UNITS.hp,
        prefix: PREFIXES.NONE['']
      };
      UNIT_SYSTEMS.us.PRESSURE = {
        unit: UNITS.psi,
        prefix: PREFIXES.NONE['']
      }; // Add additional unit systems here.
      // Choose a unit system to seed the auto unit system.

      UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

      var currentUnitSystem = UNIT_SYSTEMS.auto;
      /**
       * Set a unit system for formatting derived units.
       * @param {string} [name] The name of the unit system.
       */

      Unit.setUnitSystem = function (name) {
        if (hasOwnProperty$1(UNIT_SYSTEMS, name)) {
          currentUnitSystem = UNIT_SYSTEMS[name];
        } else {
          throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
        }
      };
      /**
       * Return the current unit system.
       * @return {string} The current unit system.
       */


      Unit.getUnitSystem = function () {
        for (var _key in UNIT_SYSTEMS) {
          if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
            return _key;
          }
        }
      };
      /**
       * Converters to convert from number to an other numeric type like BigNumber
       * or Fraction
       */


      Unit.typeConverters = {
        BigNumber: function BigNumber(x) {
          return new _BigNumber(x + ''); // stringify to prevent constructor error
        },
        Fraction: function Fraction(x) {
          return new _Fraction(x);
        },
        Complex: function Complex(x) {
          return x;
        },
        number: function number(x) {
          return x;
        }
      };
      /**
       * Retrieve the right convertor function corresponding with the type
       * of provided exampleValue.
       *
       * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
       *                        In case of an unknown type,
       * @return {Function}
       */

      Unit._getNumberConverter = function (type) {
        if (!Unit.typeConverters[type]) {
          throw new TypeError('Unsupported type "' + type + '"');
        }

        return Unit.typeConverters[type];
      }; // Add dimensions to each built-in unit


      for (var _key2 in UNITS) {
        var unit = UNITS[_key2];
        unit.dimensions = unit.base.dimensions;
      } // Create aliases


      for (var _name2 in ALIASES) {
        if (hasOwnProperty$1(ALIASES, _name2)) {
          var _unit2 = UNITS[ALIASES[_name2]];
          var alias = {};

          for (var _key3 in _unit2) {
            if (hasOwnProperty$1(_unit2, _key3)) {
              alias[_key3] = _unit2[_key3];
            }
          }

          alias.name = _name2;
          UNITS[_name2] = alias;
        }
      }

      function assertUnitNameIsValid(name) {
        for (var i = 0; i < name.length; i++) {
          var _c = name.charAt(i);

          var isValidAlpha = function isValidAlpha(p) {
            return /^[a-zA-Z]$/.test(p);
          };

          var _isDigit = function _isDigit(c) {
            return c >= '0' && c <= '9';
          };

          if (i === 0 && !isValidAlpha(_c)) {
            throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
          }

          if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {
            throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
          }
        }
      }
      /**
       * Wrapper around createUnitSingle.
       * Example:
       *  createUnit({
       *    foo: { },
       *    bar: {
       *      definition: 'kg/foo',
       *      aliases: ['ba', 'barr', 'bars'],
       *      offset: 200
       *    },
       *    baz: '4 bar'
       *  },
       *  {
       *    override: true
       *  })
       * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
       * @param {object} options
       */


      Unit.createUnit = function (obj, options) {
        if (_typeof$6(obj) !== 'object') {
          throw new TypeError("createUnit expects first parameter to be of type 'Object'");
        } // Remove all units and aliases we are overriding


        if (options && options.override) {
          for (var _key4 in obj) {
            if (hasOwnProperty$1(obj, _key4)) {
              Unit.deleteUnit(_key4);
            }

            if (obj[_key4].aliases) {
              for (var i = 0; i < obj[_key4].aliases.length; i++) {
                Unit.deleteUnit(obj[_key4].aliases[i]);
              }
            }
          }
        } // TODO: traverse multiple times until all units have been added


        var lastUnit;

        for (var _key5 in obj) {
          if (hasOwnProperty$1(obj, _key5)) {
            lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
          }
        }

        return lastUnit;
      };
      /**
       * Create a user-defined unit and register it with the Unit type.
       * Example:
       *  createUnitSingle('knot', '0.514444444 m/s')
       *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
       *
       * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
       * @param {string, Unit, Object} definition      Definition of the unit in terms
       * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
       * or an Object. If an Object, may have the following properties:
       *   - definition {string|Unit} The definition of this unit.
       *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
       *     The default is "none".
       *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
       *   - offset {Numeric} An offset to apply when converting from the unit. For
       *     example, the offset for celsius is 273.15 and the offset for farhenheit
       *     is 459.67. Default is 0.
       *   - baseName {string} If the unit's dimension does not match that of any other
       *     base unit, the name of the newly create base unit. Otherwise, this property
       *     has no effect.
       *
       * @param {Object} options   (optional) An object containing any of the following
       * properties:
       *   - override {boolean} Whether this unit should be allowed to override existing
       *     units.
       *
       * @return {Unit}
       */


      Unit.createUnitSingle = function (name, obj, options) {
        if (typeof obj === 'undefined' || obj === null) {
          obj = {};
        }

        if (typeof name !== 'string') {
          throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
        } // Check collisions with existing units


        if (hasOwnProperty$1(UNITS, name)) {
          throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
        } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


        assertUnitNameIsValid(name);
        var defUnit = null; // The Unit from which the new unit will be created.

        var aliases = [];
        var offset = 0;
        var definition;
        var prefixes;
        var baseName;

        if (obj && obj.type === 'Unit') {
          defUnit = obj.clone();
        } else if (typeof obj === 'string') {
          if (obj !== '') {
            definition = obj;
          }
        } else if (_typeof$6(obj) === 'object') {
          definition = obj.definition;
          prefixes = obj.prefixes;
          offset = obj.offset;
          baseName = obj.baseName;

          if (obj.aliases) {
            aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
          }
        } else {
          throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
        }

        if (aliases) {
          for (var i = 0; i < aliases.length; i++) {
            if (hasOwnProperty$1(UNITS, aliases[i])) {
              throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
            }
          }
        }

        if (definition && typeof definition === 'string' && !defUnit) {
          try {
            defUnit = Unit.parse(definition, {
              allowNoUnits: true
            });
          } catch (ex) {
            ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
            throw ex;
          }
        } else if (definition && definition.type === 'Unit') {
          defUnit = definition.clone();
        }

        aliases = aliases || [];
        offset = offset || 0;

        if (prefixes && prefixes.toUpperCase) {
          prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
        } else {
          prefixes = PREFIXES.NONE;
        } // If defUnit is null, it is because the user did not
        // specify a defintion. So create a new base dimension.


        var newUnit = {};

        if (!defUnit) {
          // Add a new base dimension
          baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

          if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
            throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
          }

          BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

          for (var b in BASE_UNITS) {
            if (hasOwnProperty$1(BASE_UNITS, b)) {
              BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
            }
          } // Add the new base unit


          var newBaseUnit = {
            dimensions: []
          };

          for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
            newBaseUnit.dimensions[_i6] = 0;
          }

          newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
          newBaseUnit.key = baseName;
          BASE_UNITS[baseName] = newBaseUnit;
          newUnit = {
            name: name,
            value: 1,
            dimensions: BASE_UNITS[baseName].dimensions.slice(0),
            prefixes: prefixes,
            offset: offset,
            base: BASE_UNITS[baseName]
          };
          currentUnitSystem[baseName] = {
            unit: newUnit,
            prefix: PREFIXES.NONE['']
          };
        } else {
          newUnit = {
            name: name,
            value: defUnit.value,
            dimensions: defUnit.dimensions.slice(0),
            prefixes: prefixes,
            offset: offset
          }; // Create a new base if no matching base exists

          var anyMatch = false;

          for (var _i7 in BASE_UNITS) {
            if (hasOwnProperty$1(BASE_UNITS, _i7)) {
              var match = true;

              for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
                if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
                  match = false;
                  break;
                }
              }

              if (match) {
                anyMatch = true;
                newUnit.base = BASE_UNITS[_i7];
                break;
              }
            }
          }

          if (!anyMatch) {
            baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
            // Add the new base unit

            var _newBaseUnit = {
              dimensions: defUnit.dimensions.slice(0)
            };
            _newBaseUnit.key = baseName;
            BASE_UNITS[baseName] = _newBaseUnit;
            currentUnitSystem[baseName] = {
              unit: newUnit,
              prefix: PREFIXES.NONE['']
            };
            newUnit.base = BASE_UNITS[baseName];
          }
        }

        Unit.UNITS[name] = newUnit;

        for (var _i8 = 0; _i8 < aliases.length; _i8++) {
          var aliasName = aliases[_i8];
          var _alias = {};

          for (var _key6 in newUnit) {
            if (hasOwnProperty$1(newUnit, _key6)) {
              _alias[_key6] = newUnit[_key6];
            }
          }

          _alias.name = aliasName;
          Unit.UNITS[aliasName] = _alias;
        }

        return new Unit(null, name);
      };

      Unit.deleteUnit = function (name) {
        delete Unit.UNITS[name];
      }; // expose arrays with prefixes, dimensions, units, systems


      Unit.PREFIXES = PREFIXES;
      Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
      Unit.BASE_UNITS = BASE_UNITS;
      Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
      Unit.UNITS = UNITS;
      return Unit;
    }, {
      isClass: true
    });

    var name$2d = 'unit';
    var dependencies$2e = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

    var createUnitFunction =
    /* #__PURE__ */
    factory(name$2d, dependencies$2e, function (_ref) {
      var typed = _ref.typed,
          Unit = _ref.Unit;

      /**
       * Create a unit. Depending on the passed arguments, the function
       * will create and return a new math.Unit object.
       * When a matrix is provided, all elements will be converted to units.
       *
       * Syntax:
       *
       *     math.unit(unit : string)
       *     math.unit(value : number, unit : string)
       *
       * Examples:
       *
       *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
       *    const b = math.unit('23 kg')    // returns Unit 23 kg
       *    a.to('m')                       // returns Unit 0.05 m
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, matrix, number, string, createUnit
       *
       * @param {* | Array | Matrix} args   A number and unit.
       * @return {Unit | Array | Matrix}    The created unit
       */
      var unit = typed(name$2d, {
        Unit: function Unit(x) {
          return x.clone();
        },
        string: function string(x) {
          if (Unit.isValuelessUnit(x)) {
            return new Unit(null, x); // a pure unit
          }

          return Unit.parse(x, {
            allowNoUnits: true
          }); // a unit with value, like '5cm'
        },
        'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
          return new Unit(value, unit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, unit);
        }
      });
      return unit;
    });

    var name$2e = 'sparse';
    var dependencies$2f = ['typed', 'SparseMatrix'];
    var createSparse =
    /* #__PURE__ */
    factory(name$2e, dependencies$2f, function (_ref) {
      var typed = _ref.typed,
          SparseMatrix = _ref.SparseMatrix;

      /**
       * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
       * an `Array`. A Matrix has utility functions to manipulate the data in the
       * matrix, like getting the size and getting or setting values in the matrix.
       *
       * Syntax:
       *
       *    math.sparse()               // creates an empty sparse matrix.
       *    math.sparse(data)           // creates a sparse matrix with initial data.
       *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
       *
       * Examples:
       *
       *    let m = math.sparse([[1, 2], [3, 4]])
       *    m.size()                        // Array [2, 2]
       *    m.resize([3, 2], 5)
       *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
       *    m.get([1, 0])                    // number 3
       *
       * See also:
       *
       *    bignumber, boolean, complex, index, number, string, unit, matrix
       *
       * @param {Array | Matrix} [data]    A two dimensional array
       *
       * @return {Matrix} The created matrix
       */
      return typed(name$2e, {
        '': function _() {
          return new SparseMatrix([]);
        },
        string: function string(datatype) {
          return new SparseMatrix([], datatype);
        },
        'Array | Matrix': function ArrayMatrix(data) {
          return new SparseMatrix(data);
        },
        'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
          return new SparseMatrix(data, datatype);
        }
      });
    });

    var name$2f = 'createUnit';
    var dependencies$2g = ['typed', 'Unit'];
    var createCreateUnit =
    /* #__PURE__ */
    factory(name$2f, dependencies$2g, function (_ref) {
      var typed = _ref.typed,
          Unit = _ref.Unit;

      /**
       * Create a user-defined unit and register it with the Unit type.
       *
       * Syntax:
       *
       *     math.createUnit({
       *       baseUnit1: {
       *         aliases: [string, ...]
       *         prefixes: object
       *       },
       *       unit2: {
       *         definition: string,
       *         aliases: [string, ...]
       *         prefixes: object,
       *         offset: number
       *       },
       *       unit3: string    // Shortcut
       *     })
       *
       *     // Another shortcut:
       *     math.createUnit(string, unit : string, [object])
       *
       * Examples:
       *
       *     math.createUnit('foo')
       *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
       *     math.createUnit('mph', '1 mile/hour')
       *
       * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
       * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
       * @param {Object} options   (optional) An object containing any of the following properties:
       *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
       *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
       *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
       *
       * See also:
       *
       *     unit
       *
       * @return {Unit} The new unit
       */
      return typed(name$2f, {
        // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
        'Object, Object': function ObjectObject(obj, options) {
          return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        Object: function Object(obj) {
          return Unit.createUnit(obj, {});
        },
        // Shortcut method for creating one unit.
        'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
          var obj = {};
          obj[name] = def;
          return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        'string, Unit | string | Object': function stringUnitStringObject(name, def) {
          var obj = {};
          obj[name] = def;
          return Unit.createUnit(obj, {});
        },
        // Without a definition, creates a base unit.
        string: function string(name) {
          var obj = {};
          obj[name] = {};
          return Unit.createUnit(obj, {});
        }
      });
    });

    var name$2g = 'acos';
    var dependencies$2h = ['typed', 'config', 'Complex'];
    var createAcos =
    /* #__PURE__ */
    factory(name$2g, dependencies$2h, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex;

      /**
       * Calculate the inverse cosine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acos(x)
       *
       * Examples:
       *
       *    math.acos(0.5)           // returns number 1.0471975511965979
       *    math.acos(math.cos(1.5)) // returns number 1.5
       *
       *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
       *
       * See also:
       *
       *    cos, atan, asin
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
       */
      var acos = typed(name$2g, {
        number: function number(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.acos(x);
          } else {
            return new Complex(x, 0).acos();
          }
        },
        Complex: function Complex(x) {
          return x.acos();
        },
        BigNumber: function BigNumber(x) {
          return x.acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acos);
        }
      });
      return acos;
    });

    var name$2h = 'acosh';
    var dependencies$2i = ['typed', 'config', 'Complex'];
    var createAcosh =
    /* #__PURE__ */
    factory(name$2h, dependencies$2i, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex;

      /**
       * Calculate the hyperbolic arccos of a value,
       * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acosh(x)
       *
       * Examples:
       *
       *    math.acosh(1.5)       // returns 0.9624236501192069
       *
       * See also:
       *
       *    cosh, asinh, atanh
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
       */
      var acosh = typed(name$2h, {
        number: function number(x) {
          if (x >= 1 || config.predictable) {
            return acoshNumber(x);
          }

          if (x <= -1) {
            return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
          }

          return new Complex(x, 0).acosh();
        },
        Complex: function Complex(x) {
          return x.acosh();
        },
        BigNumber: function BigNumber(x) {
          return x.acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acosh);
        }
      });
      return acosh;
    });

    var name$2i = 'acot';
    var dependencies$2j = ['typed', 'BigNumber'];
    var createAcot =
    /* #__PURE__ */
    factory(name$2i, dependencies$2j, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acot(x)
       *
       * Examples:
       *
       *    math.acot(0.5)           // returns number 0.4636476090008061
       *    math.acot(math.cot(1.5)) // returns number 1.5
       *
       *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    cot, atan
       *
       * @param {number | Complex | Array | Matrix} x   Function input
       * @return {number | Complex | Array | Matrix} The arc cotangent of x
       */
      var acot = typed(name$2i, {
        number: acotNumber,
        Complex: function Complex(x) {
          return x.acot();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acot);
        }
      });
      return acot;
    });

    var name$2j = 'acoth';
    var dependencies$2k = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAcoth =
    /* #__PURE__ */
    factory(name$2j, dependencies$2k, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic arccotangent of a value,
       * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acoth(x)
       *
       * Examples:
       *
       *    math.acoth(0.5)       // returns 0.8047189562170503
       *
       * See also:
       *
       *    acsch, asech
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
       */
      var acoth = typed(name$2j, {
        number: function number(x) {
          if (x >= 1 || x <= -1 || config.predictable) {
            return acothNumber(x);
          }

          return new Complex(x, 0).acoth();
        },
        Complex: function Complex(x) {
          return x.acoth();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acoth);
        }
      });
      return acoth;
    });

    var name$2k = 'acsc';
    var dependencies$2l = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAcsc =
    /* #__PURE__ */
    factory(name$2k, dependencies$2l, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acsc(x)
       *
       * Examples:
       *
       *    math.acsc(0.5)           // returns number 0.5235987755982989
       *    math.acsc(math.csc(1.5)) // returns number ~1.5
       *
       *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    csc, asin, asec
       *
       * @param {number | Complex | Array | Matrix} x   Function input
       * @return {number | Complex | Array | Matrix} The arc cosecant of x
       */
      var acsc = typed(name$2k, {
        number: function number(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return acscNumber(x);
          }

          return new Complex(x, 0).acsc();
        },
        Complex: function Complex(x) {
          return x.acsc();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acsc);
        }
      });
      return acsc;
    });

    var name$2l = 'acsch';
    var dependencies$2m = ['typed', 'BigNumber'];
    var createAcsch =
    /* #__PURE__ */
    factory(name$2l, dependencies$2m, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic arccosecant of a value,
       * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.acsch(x)
       *
       * Examples:
       *
       *    math.acsch(0.5)       // returns 1.4436354751788103
       *
       * See also:
       *
       *    asech, acoth
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
       */
      var acsch = typed(name$2l, {
        number: acschNumber,
        Complex: function Complex(x) {
          return x.acsch();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, acsch);
        }
      });
      return acsch;
    });

    var name$2m = 'asec';
    var dependencies$2n = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAsec =
    /* #__PURE__ */
    factory(name$2m, dependencies$2n, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asec(x)
       *
       * Examples:
       *
       *    math.asec(0.5)           // returns 1.0471975511965979
       *    math.asec(math.sec(1.5)) // returns 1.5
       *
       *    math.asec(2)             // returns 0 + 1.3169578969248166 i
       *
       * See also:
       *
       *    acos, acot, acsc
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} The arc secant of x
       */
      var asec = typed(name$2m, {
        number: function number(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return asecNumber(x);
          }

          return new Complex(x, 0).asec();
        },
        Complex: function Complex(x) {
          return x.asec();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, asec);
        }
      });
      return asec;
    });

    var name$2n = 'asech';
    var dependencies$2o = ['typed', 'config', 'Complex', 'BigNumber'];
    var createAsech =
    /* #__PURE__ */
    factory(name$2n, dependencies$2o, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic arcsecant of a value,
       * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asech(x)
       *
       * Examples:
       *
       *    math.asech(0.5)       // returns 1.3169578969248166
       *
       * See also:
       *
       *    acsch, acoth
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
       */
      var asech = typed(name$2n, {
        number: function number(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            var xInv = 1 / x;

            if (xInv > 0 || config.predictable) {
              return asechNumber(x);
            }

            var ret = Math.sqrt(xInv * xInv - 1);
            return new Complex(Math.log(ret - xInv), Math.PI);
          }

          return new Complex(x, 0).asech();
        },
        Complex: function Complex(x) {
          return x.asech();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x).acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, asech);
        }
      });
      return asech;
    });

    var name$2o = 'asin';
    var dependencies$2p = ['typed', 'config', 'Complex'];
    var createAsin =
    /* #__PURE__ */
    factory(name$2o, dependencies$2p, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex;

      /**
       * Calculate the inverse sine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asin(x)
       *
       * Examples:
       *
       *    math.asin(0.5)           // returns number 0.5235987755982989
       *    math.asin(math.sin(1.5)) // returns number ~1.5
       *
       *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    sin, atan, acos
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
       */
      var asin = typed(name$2o, {
        number: function number(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.asin(x);
          } else {
            return new Complex(x, 0).asin();
          }
        },
        Complex: function Complex(x) {
          return x.asin();
        },
        BigNumber: function BigNumber(x) {
          return x.asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since asin(0) = 0
          return deepMap(x, asin);
        }
      });
      return asin;
    });

    var name$2p = 'asinh';
    var dependencies$2q = ['typed'];
    var createAsinh =
    /* #__PURE__ */
    factory(name$2p, dependencies$2q, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the hyperbolic arcsine of a value,
       * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.asinh(x)
       *
       * Examples:
       *
       *    math.asinh(0.5)       // returns 0.48121182505960347
       *
       * See also:
       *
       *    acosh, atanh
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
       */
      var asinh = typed('asinh', {
        number: asinhNumber,
        Complex: function Complex(x) {
          return x.asinh();
        },
        BigNumber: function BigNumber(x) {
          return x.asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since asinh(0) = 0
          return deepMap(x, asinh);
        }
      });
      return asinh;
    });

    var name$2q = 'atan';
    var dependencies$2r = ['typed'];
    var createAtan =
    /* #__PURE__ */
    factory(name$2q, dependencies$2r, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the inverse tangent of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atan(x)
       *
       * Examples:
       *
       *    math.atan(0.5)           // returns number 0.4636476090008061
       *    math.atan(math.tan(1.5)) // returns number 1.5
       *
       *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    tan, asin, acos
       *
       * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
       * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
       */
      var atan = typed('atan', {
        number: function number(x) {
          return Math.atan(x);
        },
        Complex: function Complex(x) {
          return x.atan();
        },
        BigNumber: function BigNumber(x) {
          return x.atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since atan(0) = 0
          return deepMap(x, atan);
        }
      });
      return atan;
    });

    var name$2r = 'atan2';
    var dependencies$2s = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
    var createAtan2 =
    /* #__PURE__ */
    factory(name$2r, dependencies$2s, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          equalScalar = _ref.equalScalar,
          BigNumber = _ref.BigNumber,
          DenseMatrix = _ref.DenseMatrix;
      var algorithm02 = createAlgorithm02({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm03 = createAlgorithm03({
        typed: typed
      });
      var algorithm09 = createAlgorithm09({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm12 = createAlgorithm12({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Calculate the inverse tangent function with two arguments, y/x.
       * By providing two arguments, the right quadrant of the computed angle can be
       * determined.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atan2(y, x)
       *
       * Examples:
       *
       *    math.atan2(2, 2) / math.pi       // returns number 0.25
       *
       *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
       *    const x = math.cos(angle)
       *    const y = math.sin(angle)
       *
       *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
       *
       * See also:
       *
       *    tan, atan, sin, cos
       *
       * @param {number | Array | Matrix} y  Second dimension
       * @param {number | Array | Matrix} x  First dimension
       * @return {number | Array | Matrix} Four-quadrant inverse tangent
       */

      var atan2 = typed(name$2r, {
        'number, number': Math.atan2,
        // Complex numbers doesn't seem to have a reasonable implementation of
        // atan2(). Even Matlab removed the support, after they only calculated
        // the atan only on base of the real part of the numbers and ignored the imaginary.
        'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
          return BigNumber.atan2(y, x);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm09(x, y, atan2, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          // mind the order of y and x!
          return algorithm02(y, x, atan2, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm03(x, y, atan2, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, atan2);
        },
        'Array, Array': function ArrayArray(x, y) {
          return atan2(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return atan2(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return atan2(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
          return algorithm11(x, y, atan2, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
          return algorithm14(x, y, atan2, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
          // mind the order of y and x
          return algorithm12(y, x, atan2, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
          // mind the order of y and x
          return algorithm14(y, x, atan2, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
          return algorithm14(matrix(x), y, atan2, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
          return algorithm14(matrix(y), x, atan2, true).valueOf();
        }
      });
      return atan2;
    });

    var name$2s = 'atanh';
    var dependencies$2t = ['typed', 'config', 'Complex'];
    var createAtanh =
    /* #__PURE__ */
    factory(name$2s, dependencies$2t, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          Complex = _ref.Complex;

      /**
       * Calculate the hyperbolic arctangent of a value,
       * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.atanh(x)
       *
       * Examples:
       *
       *    math.atanh(0.5)       // returns 0.5493061443340549
       *
       * See also:
       *
       *    acosh, asinh
       *
       * @param {number | Complex | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
       */
      var atanh = typed(name$2s, {
        number: function number(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            return atanhNumber(x);
          }

          return new Complex(x, 0).atanh();
        },
        Complex: function Complex(x) {
          return x.atanh();
        },
        BigNumber: function BigNumber(x) {
          return x.atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since atanh(0) = 0
          return deepMap(x, atanh);
        }
      });
      return atanh;
    });

    var name$2t = 'cos';
    var dependencies$2u = ['typed'];
    var createCos =
    /* #__PURE__ */
    factory(name$2t, dependencies$2u, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the cosine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cos(x)
       *
       * Examples:
       *
       *    math.cos(2)                      // returns number -0.4161468365471422
       *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
       *    math.cos(math.unit(180, 'deg'))  // returns number -1
       *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
       *
       *    const angle = 0.2
       *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
       *
       * See also:
       *
       *    cos, tan
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
       */
      var cos = typed(name$2t, {
        number: Math.cos,
        Complex: function Complex(x) {
          return x.cos();
        },
        BigNumber: function BigNumber(x) {
          return x.cos();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cos is no angle');
          }

          return cos(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, cos);
        }
      });
      return cos;
    });

    var name$2u = 'cosh';
    var dependencies$2v = ['typed'];
    var createCosh =
    /* #__PURE__ */
    factory(name$2u, dependencies$2v, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the hyperbolic cosine of a value,
       * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cosh(x)
       *
       * Examples:
       *
       *    math.cosh(0.5)       // returns number 1.1276259652063807
       *
       * See also:
       *
       *    sinh, tanh
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
       */
      var cosh$1 = typed(name$2u, {
        number: cosh,
        Complex: function Complex(x) {
          return x.cosh();
        },
        BigNumber: function BigNumber(x) {
          return x.cosh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cosh is no angle');
          }

          return cosh$1(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, cosh$1);
        }
      });
      return cosh$1;
    });

    var name$2v = 'cot';
    var dependencies$2w = ['typed', 'BigNumber'];
    var createCot =
    /* #__PURE__ */
    factory(name$2v, dependencies$2w, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.cot(x)
       *
       * Examples:
       *
       *    math.cot(2)      // returns number -0.45765755436028577
       *    1 / math.tan(2)  // returns number -0.45765755436028577
       *
       * See also:
       *
       *    tan, sec, csc
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Cotangent of x
       */
      var cot = typed(name$2v, {
        number: cotNumber,
        Complex: function Complex(x) {
          return x.cot();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.tan());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function cot is no angle');
          }

          return cot(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, cot);
        }
      });
      return cot;
    });

    var name$2w = 'coth';
    var dependencies$2x = ['typed', 'BigNumber'];
    var createCoth =
    /* #__PURE__ */
    factory(name$2w, dependencies$2x, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic cotangent of a value,
       * defined as `coth(x) = 1 / tanh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.coth(x)
       *
       * Examples:
       *
       *    // coth(x) = 1 / tanh(x)
       *    math.coth(2)         // returns 1.0373147207275482
       *    1 / math.tanh(2)     // returns 1.0373147207275482
       *
       * See also:
       *
       *    sinh, tanh, cosh
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
       */
      var coth = typed(name$2w, {
        number: cothNumber,
        Complex: function Complex(x) {
          return x.coth();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.tanh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function coth is no angle');
          }

          return coth(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, coth);
        }
      });
      return coth;
    });

    var name$2x = 'csc';
    var dependencies$2y = ['typed', 'BigNumber'];
    var createCsc =
    /* #__PURE__ */
    factory(name$2x, dependencies$2y, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.csc(x)
       *
       * Examples:
       *
       *    math.csc(2)      // returns number 1.099750170294617
       *    1 / math.sin(2)  // returns number 1.099750170294617
       *
       * See also:
       *
       *    sin, sec, cot
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Cosecant of x
       */
      var csc = typed(name$2x, {
        number: cscNumber,
        Complex: function Complex(x) {
          return x.csc();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.sin());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function csc is no angle');
          }

          return csc(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, csc);
        }
      });
      return csc;
    });

    var name$2y = 'csch';
    var dependencies$2z = ['typed', 'BigNumber'];
    var createCsch =
    /* #__PURE__ */
    factory(name$2y, dependencies$2z, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic cosecant of a value,
       * defined as `csch(x) = 1 / sinh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.csch(x)
       *
       * Examples:
       *
       *    // csch(x) = 1/ sinh(x)
       *    math.csch(0.5)       // returns 1.9190347513349437
       *    1 / math.sinh(0.5)   // returns 1.9190347513349437
       *
       * See also:
       *
       *    sinh, sech, coth
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
       */
      var csch = typed(name$2y, {
        number: cschNumber,
        Complex: function Complex(x) {
          return x.csch();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.sinh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function csch is no angle');
          }

          return csch(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, csch);
        }
      });
      return csch;
    });

    var name$2z = 'sec';
    var dependencies$2A = ['typed', 'BigNumber'];
    var createSec =
    /* #__PURE__ */
    factory(name$2z, dependencies$2A, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sec(x)
       *
       * Examples:
       *
       *    math.sec(2)      // returns number -2.4029979617223822
       *    1 / math.cos(2)  // returns number -2.4029979617223822
       *
       * See also:
       *
       *    cos, csc, cot
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Secant of x
       */
      var sec = typed(name$2z, {
        number: secNumber,
        Complex: function Complex(x) {
          return x.sec();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.cos());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sec is no angle');
          }

          return sec(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, sec);
        }
      });
      return sec;
    });

    var name$2A = 'sech';
    var dependencies$2B = ['typed', 'BigNumber'];
    var createSech =
    /* #__PURE__ */
    factory(name$2A, dependencies$2B, function (_ref) {
      var typed = _ref.typed,
          _BigNumber = _ref.BigNumber;

      /**
       * Calculate the hyperbolic secant of a value,
       * defined as `sech(x) = 1 / cosh(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sech(x)
       *
       * Examples:
       *
       *    // sech(x) = 1/ cosh(x)
       *    math.sech(0.5)       // returns 0.886818883970074
       *    1 / math.cosh(0.5)   // returns 0.886818883970074
       *
       * See also:
       *
       *    cosh, csch, coth
       *
       * @param {number | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
       */
      var sech = typed(name$2A, {
        number: sechNumber,
        Complex: function Complex(x) {
          return x.sech();
        },
        BigNumber: function BigNumber(x) {
          return new _BigNumber(1).div(x.cosh());
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sech is no angle');
          }

          return sech(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          return deepMap(x, sech);
        }
      });
      return sech;
    });

    var name$2B = 'sin';
    var dependencies$2C = ['typed'];
    var createSin =
    /* #__PURE__ */
    factory(name$2B, dependencies$2C, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the sine of a value.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sin(x)
       *
       * Examples:
       *
       *    math.sin(2)                      // returns number 0.9092974268256813
       *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
       *    math.sin(math.unit(90, 'deg'))   // returns number 1
       *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
       *
       *    const angle = 0.2
       *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
       *
       * See also:
       *
       *    cos, tan
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
       */
      var sin = typed(name$2B, {
        number: Math.sin,
        Complex: function Complex(x) {
          return x.sin();
        },
        BigNumber: function BigNumber(x) {
          return x.sin();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sin is no angle');
          }

          return sin(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sin(0) = 0
          return deepMap(x, sin);
        }
      });
      return sin;
    });

    var name$2C = 'sinh';
    var dependencies$2D = ['typed'];
    var createSinh =
    /* #__PURE__ */
    factory(name$2C, dependencies$2D, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the hyperbolic sine of a value,
       * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.sinh(x)
       *
       * Examples:
       *
       *    math.sinh(0.5)       // returns number 0.5210953054937474
       *
       * See also:
       *
       *    cosh, tanh
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
       */
      var sinh = typed(name$2C, {
        number: sinhNumber,
        Complex: function Complex(x) {
          return x.sinh();
        },
        BigNumber: function BigNumber(x) {
          return x.sinh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function sinh is no angle');
          }

          return sinh(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since sinh(0) = 0
          return deepMap(x, sinh);
        }
      });
      return sinh;
    });

    var name$2D = 'tan';
    var dependencies$2E = ['typed'];
    var createTan =
    /* #__PURE__ */
    factory(name$2D, dependencies$2E, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.tan(x)
       *
       * Examples:
       *
       *    math.tan(0.5)                    // returns number 0.5463024898437905
       *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
       *    math.tan(math.pi / 4)            // returns number 1
       *    math.tan(math.unit(45, 'deg'))   // returns number 1
       *
       * See also:
       *
       *    atan, sin, cos
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
       */
      var tan = typed(name$2D, {
        number: Math.tan,
        Complex: function Complex(x) {
          return x.tan();
        },
        BigNumber: function BigNumber(x) {
          return x.tan();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function tan is no angle');
          }

          return tan(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since tan(0) = 0
          return deepMap(x, tan);
        }
      });
      return tan;
    });

    var name$2E = 'tanh';
    var dependencies$2F = ['typed'];
    var createTanh =
    /* #__PURE__ */
    factory(name$2E, dependencies$2F, function (_ref) {
      var typed = _ref.typed;

      /**
       * Calculate the hyperbolic tangent of a value,
       * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.tanh(x)
       *
       * Examples:
       *
       *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
       *    math.tanh(0.5)                   // returns 0.46211715726000974
       *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
       *    1 / math.coth(0.5)               // returns 0.46211715726000974
       *
       * See also:
       *
       *    sinh, cosh, coth
       *
       * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
       * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
       */
      var tanh$1 = typed('tanh', {
        number: tanh,
        Complex: function Complex(x) {
          return x.tanh();
        },
        BigNumber: function BigNumber(x) {
          return x.tanh();
        },
        Unit: function Unit(x) {
          if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
            throw new TypeError('Unit in function tanh is no angle');
          }

          return tanh$1(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
          // deep map collection, skip zeros since tanh(0) = 0
          return deepMap(x, tanh$1);
        }
      });
      return tanh$1;
    });

    var name$2F = 'setCartesian';
    var dependencies$2G = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetCartesian =
    /* #__PURE__ */
    factory(name$2F, dependencies$2G, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Create the cartesian product of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setCartesian(set1, set2)
       *
       * Examples:
       *
       *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference, setPowerset
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The cartesian product of two (multi)sets
       */
      return typed(name$2F, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result = [];

          if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
            // if any of them is empty, return empty
            var b1 = flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
            var b2 = flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
            result = [];

            for (var i = 0; i < b1.length; i++) {
              for (var j = 0; j < b2.length; j++) {
                result.push([b1[i], b2[j]]);
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return result;
          } // return a matrix otherwise


          return new DenseMatrix(result);
        }
      });
    });

    var name$2G = 'setDifference';
    var dependencies$2H = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetDifference =
    /* #__PURE__ */
    factory(name$2G, dependencies$2H, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setDifference(set1, set2)
       *
       * Examples:
       *
       *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
       *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
       *
       * See also:
       *
       *    setUnion, setIntersect, setSymDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The difference of two (multi)sets
       */
      return typed(name$2G, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result;

          if (subset(size(a1), new Index(0)) === 0) {
            // empty-anything=empty
            result = [];
          } else if (subset(size(a2), new Index(0)) === 0) {
            // anything-empty=anything
            return flatten$2(a1.toArray());
          } else {
            var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            result = [];
            var inb2;

            for (var i = 0; i < b1.length; i++) {
              inb2 = false;

              for (var j = 0; j < b2.length; j++) {
                if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                  // the identifier is always a decimal int
                  inb2 = true;
                  break;
                }
              }

              if (!inb2) {
                result.push(b1[i]);
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return generalize(result);
          } // return a matrix otherwise


          return new DenseMatrix(generalize(result));
        }
      });
    });

    var name$2H = 'setDistinct';
    var dependencies$2I = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetDistinct =
    /* #__PURE__ */
    factory(name$2H, dependencies$2I, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Collect the distinct elements of a multiset.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setDistinct(set)
       *
       * Examples:
       *
       *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
       *
       * See also:
       *
       *    setMultiplicity
       *
       * @param {Array | Matrix}    a  A multiset
       * @return {Array | Matrix}    A set containing the distinc elements of the multiset
       */
      return typed(name$2H, {
        'Array | Matrix': function ArrayMatrix(a) {
          var result;

          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return empty
            result = [];
          } else {
            var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            result = [];
            result.push(b[0]);

            for (var i = 1; i < b.length; i++) {
              if (compareNatural(b[i], b[i - 1]) !== 0) {
                result.push(b[i]);
              }
            }
          } // return an array, if the input was an array


          if (Array.isArray(a)) {
            return result;
          } // return a matrix otherwise


          return new DenseMatrix(result);
        }
      });
    });

    var name$2I = 'setIntersect';
    var dependencies$2J = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
    var createSetIntersect =
    /* #__PURE__ */
    factory(name$2I, dependencies$2J, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index,
          DenseMatrix = _ref.DenseMatrix;

      /**
       * Create the intersection of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setIntersect(set1, set2)
       *
       * Examples:
       *
       *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
       *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
       *
       * See also:
       *
       *    setUnion, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The intersection of two (multi)sets
       */
      return typed(name$2I, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          var result;

          if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
            // of any of them is empty, return empty
            result = [];
          } else {
            var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            result = [];

            for (var i = 0; i < b1.length; i++) {
              for (var j = 0; j < b2.length; j++) {
                if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                  // the identifier is always a decimal int
                  result.push(b1[i]);
                  break;
                }
              }
            }
          } // return an array, if both inputs were arrays


          if (Array.isArray(a1) && Array.isArray(a2)) {
            return generalize(result);
          } // return a matrix otherwise


          return new DenseMatrix(generalize(result));
        }
      });
    });

    var name$2J = 'setIsSubset';
    var dependencies$2K = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetIsSubset =
    /* #__PURE__ */
    factory(name$2J, dependencies$2K, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index;

      /**
       * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setIsSubset(set1, set2)
       *
       * Examples:
       *
       *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
       *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {boolean}            true | false
       */
      return typed(name$2J, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // empty is a subset of anything
            return true;
          } else if (subset(size(a2), new Index(0)) === 0) {
            // anything is not a subset of empty
            return false;
          }

          var b1 = identify(flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
          var b2 = identify(flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
          var inb2;

          for (var i = 0; i < b1.length; i++) {
            inb2 = false;

            for (var j = 0; j < b2.length; j++) {
              if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                // the identifier is always a decimal int
                inb2 = true;
                break;
              }
            }

            if (inb2 === false) {
              return false;
            }
          }

          return true;
        }
      });
    });

    var name$2K = 'setMultiplicity';
    var dependencies$2L = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetMultiplicity =
    /* #__PURE__ */
    factory(name$2K, dependencies$2L, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index;

      /**
       * Count the multiplicity of an element in a multiset.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setMultiplicity(element, set)
       *
       * Examples:
       *
       *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
       *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
       *
       * See also:
       *
       *    setDistinct, setSize
       *
       * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
       * @param {Array | Matrix}     a  A multiset
       * @return {number}            The number of how many times the multiset contains the element
       */
      return typed(name$2K, {
        'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return 0
            return 0;
          }

          var b = flatten$2(Array.isArray(a) ? a : a.toArray());
          var count = 0;

          for (var i = 0; i < b.length; i++) {
            if (compareNatural(b[i], e) === 0) {
              count++;
            }
          }

          return count;
        }
      });
    });

    var name$2L = 'setPowerset';
    var dependencies$2M = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
    var createSetPowerset =
    /* #__PURE__ */
    factory(name$2L, dependencies$2M, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          subset = _ref.subset,
          compareNatural = _ref.compareNatural,
          Index = _ref.Index;

      /**
       * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setPowerset(set)
       *
       * Examples:
       *
       *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
       *
       * See also:
       *
       *    setCartesian
       *
       * @param {Array | Matrix}    a  A (multi)set
       * @return {Array}    The powerset of the (multi)set
       */
      return typed(name$2L, {
        'Array | Matrix': function ArrayMatrix(a) {
          if (subset(size(a), new Index(0)) === 0) {
            // if empty, return empty
            return [];
          }

          var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
          var result = [];
          var number = 0;

          while (number.toString(2).length <= b.length) {
            result.push(_subset(b, number.toString(2).split('').reverse()));
            number++;
          } // can not return a matrix, because of the different size of the subarrays


          return _sort(result);
        }
      }); // create subset

      function _subset(array, bitarray) {
        var result = [];

        for (var i = 0; i < bitarray.length; i++) {
          if (bitarray[i] === '1') {
            result.push(array[i]);
          }
        }

        return result;
      } // sort subsests by length


      function _sort(array) {
        var temp = [];

        for (var i = array.length - 1; i > 0; i--) {
          for (var j = 0; j < i; j++) {
            if (array[j].length > array[j + 1].length) {
              temp = array[j];
              array[j] = array[j + 1];
              array[j + 1] = temp;
            }
          }
        }

        return array;
      }
    });

    var name$2M = 'setSize';
    var dependencies$2N = ['typed', 'compareNatural'];
    var createSetSize =
    /* #__PURE__ */
    factory(name$2M, dependencies$2N, function (_ref) {
      var typed = _ref.typed,
          compareNatural = _ref.compareNatural;

      /**
       * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
       * A multi-dimension array will be converted to a single-dimension array before the operation.
       *
       * Syntax:
       *
       *    math.setSize(set)
       *    math.setSize(set, unique)
       *
       * Examples:
       *
       *    math.setSize([1, 2, 2, 4])          // returns 4
       *    math.setSize([1, 2, 2, 4], true)    // returns 3
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a  A multiset
       * @return {number}            The number of elements of the (multi)set
       */
      return typed(name$2M, {
        'Array | Matrix': function ArrayMatrix(a) {
          return Array.isArray(a) ? flatten$2(a).length : flatten$2(a.toArray()).length;
        },
        'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
          if (unique === false || a.length === 0) {
            return Array.isArray(a) ? flatten$2(a).length : flatten$2(a.toArray()).length;
          } else {
            var b = flatten$2(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            var count = 1;

            for (var i = 1; i < b.length; i++) {
              if (compareNatural(b[i], b[i - 1]) !== 0) {
                count++;
              }
            }

            return count;
          }
        }
      });
    });

    var name$2N = 'setSymDifference';
    var dependencies$2O = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
    var createSetSymDifference =
    /* #__PURE__ */
    factory(name$2N, dependencies$2O, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          concat = _ref.concat,
          subset = _ref.subset,
          setDifference = _ref.setDifference,
          Index = _ref.Index;

      /**
       * Create the symmetric difference of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setSymDifference(set1, set2)
       *
       * Examples:
       *
       *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
       *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
       *
       * See also:
       *
       *    setUnion, setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The symmetric difference of two (multi)sets
       */
      return typed(name$2N, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // if any of them is empty, return the other one
            return flatten$2(a2);
          } else if (subset(size(a2), new Index(0)) === 0) {
            return flatten$2(a1);
          }

          var b1 = flatten$2(a1);
          var b2 = flatten$2(a2);
          return concat(setDifference(b1, b2), setDifference(b2, b1));
        }
      });
    });

    var name$2O = 'setUnion';
    var dependencies$2P = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
    var createSetUnion =
    /* #__PURE__ */
    factory(name$2O, dependencies$2P, function (_ref) {
      var typed = _ref.typed,
          size = _ref.size,
          concat = _ref.concat,
          subset = _ref.subset,
          setIntersect = _ref.setIntersect,
          setSymDifference = _ref.setSymDifference,
          Index = _ref.Index;

      /**
       * Create the union of two (multi)sets.
       * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
       *
       * Syntax:
       *
       *    math.setUnion(set1, set2)
       *
       * Examples:
       *
       *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
       *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
       *
       * See also:
       *
       *    setIntersect, setDifference
       *
       * @param {Array | Matrix}    a1  A (multi)set
       * @param {Array | Matrix}    a2  A (multi)set
       * @return {Array | Matrix}    The union of two (multi)sets
       */
      return typed(name$2O, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
          if (subset(size(a1), new Index(0)) === 0) {
            // if any of them is empty, return the other one
            return flatten$2(a2);
          } else if (subset(size(a2), new Index(0)) === 0) {
            return flatten$2(a1);
          }

          var b1 = flatten$2(a1);
          var b2 = flatten$2(a2);
          return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
        }
      });
    });

    var name$2P = 'add';
    var dependencies$2Q = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
    var createAdd =
    /* #__PURE__ */
    factory(name$2P, dependencies$2Q, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          addScalar = _ref.addScalar,
          equalScalar = _ref.equalScalar,
          DenseMatrix = _ref.DenseMatrix,
          SparseMatrix = _ref.SparseMatrix;
      var algorithm01 = createAlgorithm01({
        typed: typed
      });
      var algorithm04 = createAlgorithm04({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm10 = createAlgorithm10({
        typed: typed,
        DenseMatrix: DenseMatrix
      });
      var algorithm13 = createAlgorithm13({
        typed: typed
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Add two or more values, `x + y`.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.add(x, y)
       *    math.add(x, y, z, ...)
       *
       * Examples:
       *
       *    math.add(2, 3)               // returns number 5
       *    math.add(2, 3, 4)            // returns number 9
       *
       *    const a = math.complex(2, 3)
       *    const b = math.complex(-4, 1)
       *    math.add(a, b)               // returns Complex -2 + 4i
       *
       *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
       *
       *    const c = math.unit('5 cm')
       *    const d = math.unit('2.1 mm')
       *    math.add(c, d)               // returns Unit 52.1 mm
       *
       *    math.add("2.3", "4")         // returns number 6.3
       *
       * See also:
       *
       *    subtract, sum
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
       */

      var add = typed(name$2P, extend$1({
        // we extend the signatures of addScalar with signatures dealing with matrices
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
          return algorithm13(x, y, addScalar);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
          return algorithm01(x, y, addScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
          return algorithm01(y, x, addScalar, true);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
          return algorithm04(x, y, addScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
          // use matrix implementation
          return add(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          // use matrix implementation
          return add(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
          // use matrix implementation
          return add(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, addScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm10(x, y, addScalar, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
          return algorithm14(y, x, addScalar, true);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
          return algorithm10(y, x, addScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, addScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
          // use matrix implementation
          return algorithm14(matrix(y), x, addScalar, true).valueOf();
        },
        'any, any': addScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
          var result = add(x, y);

          for (var i = 0; i < rest.length; i++) {
            result = add(result, rest[i]);
          }

          return result;
        }
      }, addScalar.signatures));
      return add;
    });

    var name$2Q = 'hypot';
    var dependencies$2R = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
    var createHypot =
    /* #__PURE__ */
    factory(name$2Q, dependencies$2R, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          addScalar = _ref.addScalar,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          sqrt = _ref.sqrt,
          smaller = _ref.smaller,
          isPositive = _ref.isPositive;

      /**
       * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
       *
       *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
       *
       * For matrix input, the hypotenusa is calculated for all values in the matrix.
       *
       * Syntax:
       *
       *     math.hypot(a, b, ...)
       *     math.hypot([a, b, c, ...])
       *
       * Examples:
       *
       *     math.hypot(3, 4)      // 5
       *     math.hypot(3, 4, 5)   // 7.0710678118654755
       *     math.hypot([3, 4, 5]) // 7.0710678118654755
       *     math.hypot(-2)        // 2
       *
       * See also:
       *
       *     abs, norm
       *
       * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
       *                                                          Matrix and Array input is flattened and returns a
       *                                                          single number for the whole matrix.
       * @return {number | BigNumber} Returns the hypothenusa of the input values.
       */
      var hypot = typed(name$2Q, {
        '... number | BigNumber': _hypot,
        Array: function Array(x) {
          return hypot.apply(hypot, flatten$2(x));
        },
        Matrix: function Matrix(x) {
          return hypot.apply(hypot, flatten$2(x.toArray()));
        }
      });
      /**
       * Calculate the hypotenusa for an Array with values
       * @param {Array.<number | BigNumber>} args
       * @return {number | BigNumber} Returns the result
       * @private
       */

      function _hypot(args) {
        // code based on `hypot` from es6-shim:
        // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
        var result = 0;
        var largest = 0;

        for (var i = 0; i < args.length; i++) {
          var value = abs(args[i]);

          if (smaller(largest, value)) {
            result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
            result = addScalar(result, 1);
            largest = value;
          } else {
            result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
          }
        }

        return multiplyScalar(largest, sqrt(result));
      }

      return hypot;
    });

    var name$2R = 'norm';
    var dependencies$2S = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix'];
    var createNorm =
    /* #__PURE__ */
    factory(name$2R, dependencies$2S, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          add = _ref.add,
          pow = _ref.pow,
          conj = _ref.conj,
          sqrt = _ref.sqrt,
          multiply = _ref.multiply,
          equalScalar = _ref.equalScalar,
          larger = _ref.larger,
          smaller = _ref.smaller,
          matrix = _ref.matrix;

      /**
       * Calculate the norm of a number, vector or matrix.
       *
       * The second parameter p is optional. If not provided, it defaults to 2.
       *
       * Syntax:
       *
       *    math.norm(x)
       *    math.norm(x, p)
       *
       * Examples:
       *
       *    math.abs(-3.5)                         // returns 3.5
       *    math.norm(-3.5)                        // returns 3.5
       *
       *    math.norm(math.complex(3, -4))         // returns 5
       *
       *    math.norm([1, 2, -3], Infinity)        // returns 3
       *    math.norm([1, 2, -3], -Infinity)       // returns 1
       *
       *    math.norm([3, 4], 2)                   // returns 5
       *
       *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
       *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
       *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
       *
       * See also:
       *
       *    abs, hypot
       *
       * @param  {number | BigNumber | Complex | Array | Matrix} x
       *            Value for which to calculate the norm
       * @param  {number | BigNumber | string} [p=2]
       *            Vector space.
       *            Supported numbers include Infinity and -Infinity.
       *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
       * @return {number | BigNumber} the p-norm
       */
      var norm = typed(name$2R, {
        number: Math.abs,
        Complex: function Complex(x) {
          return x.abs();
        },
        BigNumber: function BigNumber(x) {
          // norm(x) = abs(x)
          return x.abs();
        },
        "boolean": function boolean(x) {
          // norm(x) = abs(x)
          return Math.abs(x);
        },
        Array: function Array(x) {
          return _norm(matrix(x), 2);
        },
        Matrix: function Matrix(x) {
          return _norm(x, 2);
        },
        'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
          // ignore second parameter, TODO: remove the option of second parameter for these types
          return norm(x);
        },
        'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
          return _norm(matrix(x), p);
        },
        'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
          return _norm(x, p);
        }
      });
      /**
       * Calculate the norm for an array
       * @param {Matrix} x
       * @param {number | string} p
       * @returns {number} Returns the norm
       * @private
       */

      function _norm(x, p) {
        // size
        var sizeX = x.size(); // check if it is a vector

        if (sizeX.length === 1) {
          // check p
          if (p === Number.POSITIVE_INFINITY || p === 'inf') {
            // norm(x, Infinity) = max(abs(x))
            var pinf = 0; // skip zeros since abs(0) === 0

            x.forEach(function (value) {
              var v = abs(value);

              if (larger(v, pinf)) {
                pinf = v;
              }
            }, true);
            return pinf;
          }

          if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
            // norm(x, -Infinity) = min(abs(x))
            var ninf; // skip zeros since abs(0) === 0

            x.forEach(function (value) {
              var v = abs(value);

              if (!ninf || smaller(v, ninf)) {
                ninf = v;
              }
            }, true);
            return ninf || 0;
          }

          if (p === 'fro') {
            return _norm(x, 2);
          }

          if (typeof p === 'number' && !isNaN(p)) {
            // check p != 0
            if (!equalScalar(p, 0)) {
              // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
              var n = 0; // skip zeros since abs(0) === 0

              x.forEach(function (value) {
                n = add(pow(abs(value), p), n);
              }, true);
              return pow(n, 1 / p);
            }

            return Number.POSITIVE_INFINITY;
          } // invalid parameter value


          throw new Error('Unsupported parameter value');
        } // MxN matrix


        if (sizeX.length === 2) {
          // check p
          if (p === 1) {
            // norm(x) = the largest column sum
            var c = []; // result

            var maxc = 0; // skip zeros since abs(0) == 0

            x.forEach(function (value, index) {
              var j = index[1];
              var cj = add(c[j] || 0, abs(value));

              if (larger(cj, maxc)) {
                maxc = cj;
              }

              c[j] = cj;
            }, true);
            return maxc;
          }

          if (p === Number.POSITIVE_INFINITY || p === 'inf') {
            // norm(x) = the largest row sum
            var r = []; // result

            var maxr = 0; // skip zeros since abs(0) == 0

            x.forEach(function (value, index) {
              var i = index[0];
              var ri = add(r[i] || 0, abs(value));

              if (larger(ri, maxr)) {
                maxr = ri;
              }

              r[i] = ri;
            }, true);
            return maxr;
          }

          if (p === 'fro') {
            // norm(x) = sqrt(sum(diag(x'x)))
            var fro = 0;
            x.forEach(function (value, index) {
              fro = add(fro, multiply(value, conj(value)));
            });
            return abs(sqrt(fro));
          }

          if (p === 2) {
            // not implemented
            throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
          } // invalid parameter value


          throw new Error('Unsupported parameter value');
        }
      }

      return norm;
    });

    var name$2S = 'dot';
    var dependencies$2T = ['typed', 'add', 'multiply'];
    var createDot =
    /* #__PURE__ */
    factory(name$2S, dependencies$2T, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          multiply = _ref.multiply;

      /**
       * Calculate the dot product of two vectors. The dot product of
       * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
       *
       *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
       *
       * Syntax:
       *
       *    math.dot(x, y)
       *
       * Examples:
       *
       *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
       *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
       *
       * See also:
       *
       *    multiply, cross
       *
       * @param  {Array | Matrix} x     First vector
       * @param  {Array | Matrix} y     Second vector
       * @return {number}               Returns the dot product of `x` and `y`
       */
      return typed(name$2S, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
          return _dot(x.toArray(), y.toArray());
        },
        'Matrix, Array': function MatrixArray(x, y) {
          return _dot(x.toArray(), y);
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
          return _dot(x, y.toArray());
        },
        'Array, Array': _dot
      });
      /**
       * Calculate the dot product for two arrays
       * @param {Array} x  First vector
       * @param {Array} y  Second vector
       * @returns {number} Returns the dot product of x and y
       * @private
       */
      // TODO: double code with math.multiply

      function _dot(x, y) {
        var xSize = arraySize(x);
        var ySize = arraySize(y);
        var len = xSize[0];
        if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message

        if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
        if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
        var prod = 0;

        for (var i = 0; i < len; i++) {
          prod = add(prod, multiply(x[i], y[i]));
        }

        return prod;
      }
    });

    var name$2T = 'trace';
    var dependencies$2U = ['typed', 'matrix', 'add'];
    var createTrace =
    /* #__PURE__ */
    factory(name$2T, dependencies$2U, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          add = _ref.add;

      /**
       * Calculate the trace of a matrix: the sum of the elements on the main
       * diagonal of a square matrix.
       *
       * Syntax:
       *
       *    math.trace(x)
       *
       * Examples:
       *
       *    math.trace([[1, 2], [3, 4]]) // returns 5
       *
       *    const A = [
       *      [1, 2, 3],
       *      [-1, 2, 3],
       *      [2, 0, 3]
       *    ]
       *    math.trace(A) // returns 6
       *
       * See also:
       *
       *    diag
       *
       * @param {Array | Matrix} x  A matrix
       *
       * @return {number} The trace of `x`
       */
      return typed('trace', {
        Array: function _arrayTrace(x) {
          // use dense matrix implementation
          return _denseTrace(matrix(x));
        },
        SparseMatrix: _sparseTrace,
        DenseMatrix: _denseTrace,
        any: clone$3
      });

      function _denseTrace(m) {
        // matrix size & data
        var size = m._size;
        var data = m._data; // process dimensions

        switch (size.length) {
          case 1:
            // vector
            if (size[0] === 1) {
              // return data[0]
              return clone$3(data[0]);
            }

            throw new RangeError('Matrix must be square (size: ' + format$5(size) + ')');

          case 2:
            {
              // two dimensional
              var rows = size[0];
              var cols = size[1];

              if (rows === cols) {
                // calulate sum
                var sum = 0; // loop diagonal

                for (var i = 0; i < rows; i++) {
                  sum = add(sum, data[i][i]);
                } // return trace


                return sum;
              } else {
                throw new RangeError('Matrix must be square (size: ' + format$5(size) + ')');
              }
            }

          default:
            // multi dimensional
            throw new RangeError('Matrix must be two dimensional (size: ' + format$5(size) + ')');
        }
      }

      function _sparseTrace(m) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var size = m._size; // check dimensions

        var rows = size[0];
        var columns = size[1]; // matrix must be square

        if (rows === columns) {
          // calulate sum
          var sum = 0; // check we have data (avoid looping columns)

          if (values.length > 0) {
            // loop columns
            for (var j = 0; j < columns; j++) {
              // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
              var k0 = ptr[j];
              var k1 = ptr[j + 1]; // loop k within [k0, k1[

              for (var k = k0; k < k1; k++) {
                // row index
                var i = index[k]; // check row

                if (i === j) {
                  // accumulate value
                  sum = add(sum, values[k]); // exit loop

                  break;
                }

                if (i > j) {
                  // exit loop, no value on the diagonal for column j
                  break;
                }
              }
            }
          } // return trace


          return sum;
        }

        throw new RangeError('Matrix must be square (size: ' + format$5(size) + ')');
      }
    });

    var name$2U = 'index';
    var dependencies$2V = ['typed', 'Index'];
    var createIndex =
    /* #__PURE__ */
    factory(name$2U, dependencies$2V, function (_ref) {
      var typed = _ref.typed,
          Index = _ref.Index;

      /**
       * Create an index. An Index can store ranges having start, step, and end
       * for multiple dimensions.
       * Matrix.get, Matrix.set, and math.subset accept an Index as input.
       *
       * Syntax:
       *
       *     math.index(range1, range2, ...)
       *
       * Where each range can be any of:
       *
       * - A number
       * - A string for getting/setting an object property
       * - An instance of `Range`
       * - A one-dimensional Array or a Matrix with numbers
       *
       * Indexes must be zero-based, integer numbers.
       *
       * Examples:
       *
       *    const b = [1, 2, 3, 4, 5]
       *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
       *
       *    const a = math.matrix([[1, 2], [3, 4]])
       *    a.subset(math.index(0, 1))             // returns 2
       *
       * See also:
       *
       *    bignumber, boolean, complex, matrix, number, string, unit
       *
       * @param {...*} ranges   Zero or more ranges or numbers.
       * @return {Index}        Returns the created index
       */
      return typed(name$2U, {
        '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
          var ranges = args.map(function (arg) {
            if (isBigNumber(arg)) {
              return arg.toNumber(); // convert BigNumber to Number
            } else if (Array.isArray(arg) || isMatrix(arg)) {
              return arg.map(function (elem) {
                // convert BigNumber to Number
                return isBigNumber(elem) ? elem.toNumber() : elem;
              });
            } else {
              return arg;
            }
          });
          var res = new Index();
          Index.apply(res, ranges);
          return res;
        }
      });
    });

    // Reserved keywords not allowed to use in the parser
    var keywords = {
      end: true
    };

    function _typeof$7(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }
    var name$2V = 'Node';
    var dependencies$2W = ['mathWithTransform'];
    var createNode =
    /* #__PURE__ */
    factory(name$2V, dependencies$2W, function (_ref) {
      var mathWithTransform = _ref.mathWithTransform;

      /**
       * Node
       */
      function Node() {
        if (!(this instanceof Node)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }
      }
      /**
       * Evaluate the node
       * @param {Object} [scope]  Scope to read/write variables
       * @return {*}              Returns the result
       */


      Node.prototype.evaluate = function (scope) {
        return this.compile().evaluate(scope);
      };
      /**
       * Evaluate the node
       * @param {Object} [scope]  Scope to read/write variables
       * @return {*}              Returns the result
       */
      // TODO: Deprecated since v6.0.0. Clean up some day


      Node.prototype.eval = function (scope) {
        warnOnce('Method Node.eval is renamed to Node.evaluate. Please use the new method name.');
        return this.evaluate(scope);
      };

      Node.prototype.type = 'Node';
      Node.prototype.isNode = true;
      Node.prototype.comment = '';
      /**
       * Compile the node into an optimized, evauatable JavaScript function
       * @return {{evaluate: function([Object])}} object
       *                Returns an object with a function 'evaluate',
       *                which can be invoked as expr.evaluate([scope: Object]),
       *                where scope is an optional object with
       *                variables.
       */

      Node.prototype.compile = function () {
        var expr = this._compile(mathWithTransform, {});

        var args = {};
        var context = null;

        function evaluate(scope) {
          var s = scope || {};

          _validateScope(s);

          return expr(s, args, context);
        }

        return {
          evaluate: evaluate,
          // TODO: Deprecated since v6.0.0. Clean up some day
          eval: function deprecatedEval(scope) {
            warnOnce('Method eval is renamed to evaluate. Please use the new method.');
            return evaluate(scope);
          }
        };
      };
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */


      Node.prototype._compile = function (math, argNames) {
        throw new Error('Method _compile should be implemented by type ' + this.type);
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      Node.prototype.forEach = function (callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run forEach on a Node interface');
      };
      /**
       * Create a new Node having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {OperatorNode} Returns a transformed copy of the node
       */


      Node.prototype.map = function (callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run map on a Node interface');
      };
      /**
       * Validate whether an object is a Node, for use with map
       * @param {Node} node
       * @returns {Node} Returns the input if it's a node, else throws an Error
       * @protected
       */


      Node.prototype._ifNode = function (node) {
        if (!isNode(node)) {
          throw new TypeError('Callback function must return a Node');
        }

        return node;
      };
      /**
       * Recursively traverse all nodes in a node tree. Executes given callback for
       * this node and each of its child nodes.
       * @param {function(node: Node, path: string, parent: Node)} callback
       *          A callback called for every node in the node tree.
       */


      Node.prototype.traverse = function (callback) {
        // execute callback for itself
        callback(this, null, null); // eslint-disable-line standard/no-callback-literal
        // recursively traverse over all childs of a node

        function _traverse(node, callback) {
          node.forEach(function (child, path, parent) {
            callback(child, path, parent);

            _traverse(child, callback);
          });
        }

        _traverse(this, callback);
      };
      /**
       * Recursively transform a node tree via a transform function.
       *
       * For example, to replace all nodes of type SymbolNode having name 'x' with a
       * ConstantNode with value 2:
       *
       *     const res = Node.transform(function (node, path, parent) {
       *       if (node && node.isSymbolNode) && (node.name === 'x')) {
       *         return new ConstantNode(2)
       *       }
       *       else {
       *         return node
       *       }
       *     })
       *
       * @param {function(node: Node, path: string, parent: Node) : Node} callback
       *          A mapping function accepting a node, and returning
       *          a replacement for the node or the original node.
       *          Signature: callback(node: Node, index: string, parent: Node) : Node
       * @return {Node} Returns the original node or its replacement
       */


      Node.prototype.transform = function (callback) {
        function _transform(child, path, parent) {
          var replacement = callback(child, path, parent);

          if (replacement !== child) {
            // stop iterating when the node is replaced
            return replacement;
          }

          return child.map(_transform);
        }

        return _transform(this, null, null);
      };
      /**
       * Find any node in the node tree matching given filter function. For example, to
       * find all nodes of type SymbolNode having name 'x':
       *
       *     const results = Node.filter(function (node) {
       *       return (node && node.isSymbolNode) && (node.name === 'x')
       *     })
       *
       * @param {function(node: Node, path: string, parent: Node) : Node} callback
       *            A test function returning true when a node matches, and false
       *            otherwise. Function signature:
       *            callback(node: Node, index: string, parent: Node) : boolean
       * @return {Node[]} nodes       An array with nodes matching given filter criteria
       */


      Node.prototype.filter = function (callback) {
        var nodes = [];
        this.traverse(function (node, path, parent) {
          if (callback(node, path, parent)) {
            nodes.push(node);
          }
        });
        return nodes;
      }; // TODO: deprecated since version 1.1.0, remove this some day


      Node.prototype.find = function () {
        throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
      }; // TODO: deprecated since version 1.1.0, remove this some day


      Node.prototype.match = function () {
        throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
      };
      /**
       * Create a shallow clone of this node
       * @return {Node}
       */


      Node.prototype.clone = function () {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot clone a Node interface');
      };
      /**
       * Create a deep clone of this node
       * @return {Node}
       */


      Node.prototype.cloneDeep = function () {
        return this.map(function (node) {
          return node.cloneDeep();
        });
      };
      /**
       * Deep compare this node with another node.
       * @param {Node} other
       * @return {boolean} Returns true when both nodes are of the same type and
       *                   contain the same values (as do their childs)
       */


      Node.prototype.equals = function (other) {
        return other ? deepStrictEqual(this, other) : false;
      };
      /**
       * Get string representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)"or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toString = function (options) {
        var customString;

        if (options && _typeof$7(options) === 'object') {
          switch (_typeof$7(options.handler)) {
            case 'object':
            case 'undefined':
              break;

            case 'function':
              customString = options.handler(this, options);
              break;

            default:
              throw new TypeError('Object or function expected as callback');
          }
        }

        if (typeof customString !== 'undefined') {
          return customString;
        }

        return this._toString(options);
      };
      /**
       * Get a JSON representation of the node
       * Both .toJSON() and the static .fromJSON(json) should be implemented by all
       * implementations of Node
       * @returns {Object}
       */


      Node.prototype.toJSON = function () {
        throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
      };
      /**
       * Get HTML representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)" or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toHTML = function (options) {
        var customString;

        if (options && _typeof$7(options) === 'object') {
          switch (_typeof$7(options.handler)) {
            case 'object':
            case 'undefined':
              break;

            case 'function':
              customString = options.handler(this, options);
              break;

            default:
              throw new TypeError('Object or function expected as callback');
          }
        }

        if (typeof customString !== 'undefined') {
          return customString;
        }

        return this.toHTML(options);
      };
      /**
       * Internal function to generate the string output.
       * This has to be implemented by every Node
       *
       * @throws {Error}
       */


      Node.prototype._toString = function () {
        // must be implemented by each of the Node implementations
        throw new Error('_toString not implemented for ' + this.type);
      };
      /**
       * Get LaTeX representation. (wrapper function)
       *
       * This function can get an object of the following form:
       * {
       *    handler: //This can be a callback function of the form
       *             // "function callback(node, options)"or
       *             // a map that maps function names (used in FunctionNodes)
       *             // to callbacks
       *    parenthesis: "keep" //the parenthesis option (This is optional)
       * }
       *
       * @param {Object} [options]
       * @return {string}
       */


      Node.prototype.toTex = function (options) {
        var customTex;

        if (options && _typeof$7(options) === 'object') {
          switch (_typeof$7(options.handler)) {
            case 'object':
            case 'undefined':
              break;

            case 'function':
              customTex = options.handler(this, options);
              break;

            default:
              throw new TypeError('Object or function expected as callback');
          }
        }

        if (typeof customTex !== 'undefined') {
          return customTex;
        }

        return this._toTex(options);
      };
      /**
       * Internal function to generate the LaTeX output.
       * This has to be implemented by every Node
       *
       * @param {Object} [options]
       * @throws {Error}
       */


      Node.prototype._toTex = function (options) {
        // must be implemented by each of the Node implementations
        throw new Error('_toTex not implemented for ' + this.type);
      };
      /**
       * Get identifier.
       * @return {string}
       */


      Node.prototype.getIdentifier = function () {
        return this.type;
      };
      /**
       * Get the content of the current Node.
       * @return {Node} node
       **/


      Node.prototype.getContent = function () {
        return this;
      };
      /**
       * Validate the symbol names of a scope.
       * Throws an error when the scope contains an illegal symbol.
       * @param {Object} scope
       */


      function _validateScope(scope) {
        for (var symbol in scope) {
          if (hasOwnProperty$1(scope, symbol)) {
            if (symbol in keywords) {
              throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
            }
          }
        }
      }

      return Node;
    }, {
      isClass: true,
      isNode: true
    });

    /**
     * Transform zero-based indices to one-based indices in errors
     * @param {Error} err
     * @returns {Error | IndexError} Returns the transformed error
     */

    function errorTransform(err) {
      if (err && err.isIndexError) {
        return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
      }

      return err;
    }

    function _typeof$8(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }
    function accessFactory(_ref) {
      var subset = _ref.subset;

      /**
       * Retrieve part of an object:
       *
       * - Retrieve a property from an object
       * - Retrieve a part of a string
       * - Retrieve a matrix subset
       *
       * @param {Object | Array | Matrix | string} object
       * @param {Index} index
       * @return {Object | Array | Matrix | string} Returns the subset
       */
      return function access(object, index) {
        try {
          if (Array.isArray(object)) {
            return subset(object, index);
          } else if (object && typeof object.subset === 'function') {
            // Matrix
            return object.subset(index);
          } else if (typeof object === 'string') {
            // TODO: move getStringSubset into a separate util file, use that
            return subset(object, index);
          } else if (_typeof$8(object) === 'object') {
            if (!index.isObjectProperty()) {
              throw new TypeError('Cannot apply a numeric index as object property');
            }

            return getSafeProperty(object, index.getObjectProperty());
          } else {
            throw new TypeError('Cannot apply index: unsupported type of object');
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }

    var name$2W = 'AccessorNode';
    var dependencies$2X = ['subset', 'Node'];
    var createAccessorNode =
    /* #__PURE__ */
    factory(name$2W, dependencies$2X, function (_ref) {
      var subset = _ref.subset,
          Node = _ref.Node;
      var access = accessFactory({
        subset: subset
      });
      /**
       * @constructor AccessorNode
       * @extends {Node}
       * Access an object property or get a matrix subset
       *
       * @param {Node} object                 The object from which to retrieve
       *                                      a property or subset.
       * @param {IndexNode} index             IndexNode containing ranges
       */

      function AccessorNode(object, index) {
        if (!(this instanceof AccessorNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!isNode(object)) {
          throw new TypeError('Node expected for parameter "object"');
        }

        if (!isIndexNode(index)) {
          throw new TypeError('IndexNode expected for parameter "index"');
        }

        this.object = object || null;
        this.index = index; // readonly property name

        Object.defineProperty(this, 'name', {
          get: function () {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
              return this.object.name || '';
            }
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        });
      }

      AccessorNode.prototype = new Node();
      AccessorNode.prototype.type = 'AccessorNode';
      AccessorNode.prototype.isAccessorNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      AccessorNode.prototype._compile = function (math, argNames) {
        var evalObject = this.object._compile(math, argNames);

        var evalIndex = this.index._compile(math, argNames);

        if (this.index.isObjectProperty()) {
          var prop = this.index.getObjectProperty();
          return function evalAccessorNode(scope, args, context) {
            return getSafeProperty(evalObject(scope, args, context), prop);
          };
        } else {
          return function evalAccessorNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            var index = evalIndex(scope, args, object); // we pass object here instead of context

            return access(object, index);
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      AccessorNode.prototype.forEach = function (callback) {
        callback(this.object, 'object', this);
        callback(this.index, 'index', this);
      };
      /**
       * Create a new AccessorNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {AccessorNode} Returns a transformed copy of the node
       */


      AccessorNode.prototype.map = function (callback) {
        return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {AccessorNode}
       */


      AccessorNode.prototype.clone = function () {
        return new AccessorNode(this.object, this.index);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype._toString = function (options) {
        var object = this.object.toString(options);

        if (needParenthesis(this.object)) {
          object = '(' + object + ')';
        }

        return object + this.index.toString(options);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype.toHTML = function (options) {
        var object = this.object.toHTML(options);

        if (needParenthesis(this.object)) {
          object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return object + this.index.toHTML(options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string}
       */


      AccessorNode.prototype._toTex = function (options) {
        var object = this.object.toTex(options);

        if (needParenthesis(this.object)) {
          object = '\\left(\' + object + \'\\right)';
        }

        return object + this.index.toTex(options);
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      AccessorNode.prototype.toJSON = function () {
        return {
          mathjs: 'AccessorNode',
          object: this.object,
          index: this.index
        };
      };
      /**
       * Instantiate an AccessorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
       *                       where mathjs is optional
       * @returns {AccessorNode}
       */


      AccessorNode.fromJSON = function (json) {
        return new AccessorNode(json.object, json.index);
      };
      /**
       * Are parenthesis needed?
       * @private
       */


      function needParenthesis(node) {
        // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
        return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));
      }

      return AccessorNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$2X = 'ArrayNode';
    var dependencies$2Y = ['Node'];
    var createArrayNode =
    /* #__PURE__ */
    factory(name$2X, dependencies$2Y, function (_ref) {
      var Node = _ref.Node;

      /**
       * @constructor ArrayNode
       * @extends {Node}
       * Holds an 1-dimensional array with items
       * @param {Node[]} [items]   1 dimensional array with items
       */
      function ArrayNode(items) {
        if (!(this instanceof ArrayNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.items = items || []; // validate input

        if (!Array.isArray(this.items) || !this.items.every(isNode)) {
          throw new TypeError('Array containing Nodes expected');
        } // TODO: deprecated since v3, remove some day


        var deprecated = function deprecated() {
          throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
        };

        Object.defineProperty(this, 'nodes', {
          get: deprecated,
          set: deprecated
        });
      }

      ArrayNode.prototype = new Node();
      ArrayNode.prototype.type = 'ArrayNode';
      ArrayNode.prototype.isArrayNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ArrayNode.prototype._compile = function (math, argNames) {
        var evalItems = map$4(this.items, function (item) {
          return item._compile(math, argNames);
        });
        var asMatrix = math.config.matrix !== 'Array';

        if (asMatrix) {
          var matrix = math.matrix;
          return function evalArrayNode(scope, args, context) {
            return matrix(map$4(evalItems, function (evalItem) {
              return evalItem(scope, args, context);
            }));
          };
        } else {
          return function evalArrayNode(scope, args, context) {
            return map$4(evalItems, function (evalItem) {
              return evalItem(scope, args, context);
            });
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ArrayNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.items.length; i++) {
          var node = this.items[i];
          callback(node, 'items[' + i + ']', this);
        }
      };
      /**
       * Create a new ArrayNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ArrayNode} Returns a transformed copy of the node
       */


      ArrayNode.prototype.map = function (callback) {
        var items = [];

        for (var i = 0; i < this.items.length; i++) {
          items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
        }

        return new ArrayNode(items);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ArrayNode}
       */


      ArrayNode.prototype.clone = function () {
        return new ArrayNode(this.items.slice(0));
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ArrayNode.prototype._toString = function (options) {
        var items = this.items.map(function (node) {
          return node.toString(options);
        });
        return '[' + items.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ArrayNode.prototype.toJSON = function () {
        return {
          mathjs: 'ArrayNode',
          items: this.items
        };
      };
      /**
       * Instantiate an ArrayNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ArrayNode", items: [...]}`,
       *                       where mathjs is optional
       * @returns {ArrayNode}
       */


      ArrayNode.fromJSON = function (json) {
        return new ArrayNode(json.items);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ArrayNode.prototype.toHTML = function (options) {
        var items = this.items.map(function (node) {
          return node.toHTML(options);
        });
        return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ArrayNode.prototype._toTex = function (options) {
        var s = '\\begin{bmatrix}';
        this.items.forEach(function (node) {
          if (node.items) {
            s += node.items.map(function (childNode) {
              return childNode.toTex(options);
            }).join('&');
          } else {
            s += node.toTex(options);
          } // new line


          s += '\\\\';
        });
        s += '\\end{bmatrix}';
        return s;
      };

      return ArrayNode;
    }, {
      isClass: true,
      isNode: true
    });

    function _typeof$9(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }
    function assignFactory(_ref) {
      var subset = _ref.subset,
          matrix = _ref.matrix;

      /**
       * Replace part of an object:
       *
       * - Assign a property to an object
       * - Replace a part of a string
       * - Replace a matrix subset
       *
       * @param {Object | Array | Matrix | string} object
       * @param {Index} index
       * @param {*} value
       * @return {Object | Array | Matrix | string} Returns the original object
       *                                            except in case of a string
       */
      // TODO: change assign to return the value instead of the object
      return function assign(object, index, value) {
        try {
          if (Array.isArray(object)) {
            // we use matrix.subset here instead of the function subset because we must not clone the contents
            return matrix(object).subset(index, value).valueOf();
          } else if (object && typeof object.subset === 'function') {
            // Matrix
            return object.subset(index, value);
          } else if (typeof object === 'string') {
            // TODO: move setStringSubset into a separate util file, use that
            return subset(object, index, value);
          } else if (_typeof$9(object) === 'object') {
            if (!index.isObjectProperty()) {
              throw TypeError('Cannot apply a numeric index as object property');
            }

            setSafeProperty(object, index.getObjectProperty(), value);
            return object;
          } else {
            throw new TypeError('Cannot apply index: unsupported type of object');
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }

    // list of identifiers of nodes in order of their precedence
    var properties = [{
      // assignment
      AssignmentNode: {},
      FunctionAssignmentNode: {}
    }, {
      // conditional expression
      ConditionalNode: {
        latexLeftParens: false,
        latexRightParens: false,
        latexParens: false // conditionals don't need parentheses in LaTeX because
        // they are 2 dimensional

      }
    }, {
      // logical or
      'OperatorNode:or': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // logical xor
      'OperatorNode:xor': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // logical and
      'OperatorNode:and': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise or
      'OperatorNode:bitOr': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise xor
      'OperatorNode:bitXor': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitwise and
      'OperatorNode:bitAnd': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // relational operators
      'OperatorNode:equal': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:unequal': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:smaller': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:larger': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:smallerEq': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:largerEq': {
        associativity: 'left',
        associativeWith: []
      },
      RelationalNode: {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // bitshift operators
      'OperatorNode:leftShift': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:rightArithShift': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:rightLogShift': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // unit conversion
      'OperatorNode:to': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // range
      RangeNode: {}
    }, {
      // addition, subtraction
      'OperatorNode:add': {
        associativity: 'left',
        associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
      },
      'OperatorNode:subtract': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // multiply, divide, modulus
      'OperatorNode:multiply': {
        associativity: 'left',
        associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
      },
      'OperatorNode:divide': {
        associativity: 'left',
        associativeWith: [],
        latexLeftParens: false,
        latexRightParens: false,
        latexParens: false // fractions don't require parentheses because
        // they're 2 dimensional, so parens aren't needed
        // in LaTeX

      },
      'OperatorNode:dotMultiply': {
        associativity: 'left',
        associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
      },
      'OperatorNode:dotDivide': {
        associativity: 'left',
        associativeWith: []
      },
      'OperatorNode:mod': {
        associativity: 'left',
        associativeWith: []
      }
    }, {
      // unary prefix operators
      'OperatorNode:unaryPlus': {
        associativity: 'right'
      },
      'OperatorNode:unaryMinus': {
        associativity: 'right'
      },
      'OperatorNode:bitNot': {
        associativity: 'right'
      },
      'OperatorNode:not': {
        associativity: 'right'
      }
    }, {
      // exponentiation
      'OperatorNode:pow': {
        associativity: 'right',
        associativeWith: [],
        latexRightParens: false // the exponent doesn't need parentheses in
        // LaTeX because it's 2 dimensional
        // (it's on top)

      },
      'OperatorNode:dotPow': {
        associativity: 'right',
        associativeWith: []
      }
    }, {
      // factorial
      'OperatorNode:factorial': {
        associativity: 'left'
      }
    }, {
      // matrix transpose
      'OperatorNode:transpose': {
        associativity: 'left'
      }
    }];
    /**
     * Get the precedence of a Node.
     * Higher number for higher precedence, starting with 0.
     * Returns null if the precedence is undefined.
     *
     * @param {Node} _node
     * @param {string} parenthesis
     * @return {number | null}
     */

    function getPrecedence(_node, parenthesis) {
      var node = _node;

      if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
      }

      var identifier = node.getIdentifier();

      for (var i = 0; i < properties.length; i++) {
        if (identifier in properties[i]) {
          return i;
        }
      }

      return null;
    }
    /**
     * Get the associativity of an operator (left or right).
     * Returns a string containing 'left' or 'right' or null if
     * the associativity is not defined.
     *
     * @param {Node}
     * @param {string} parenthesis
     * @return {string|null}
     * @throws {Error}
     */

    function getAssociativity(_node, parenthesis) {
      var node = _node;

      if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
      }

      var identifier = node.getIdentifier();
      var index = getPrecedence(node, parenthesis);

      if (index === null) {
        // node isn't in the list
        return null;
      }

      var property = properties[index][identifier];

      if (hasOwnProperty$1(property, 'associativity')) {
        if (property.associativity === 'left') {
          return 'left';
        }

        if (property.associativity === 'right') {
          return 'right';
        } // associativity is invalid


        throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
      } // associativity is undefined


      return null;
    }
    /**
     * Check if an operator is associative with another operator.
     * Returns either true or false or null if not defined.
     *
     * @param {Node} nodeA
     * @param {Node} nodeB
     * @param {string} parenthesis
     * @return {boolean | null}
     */

    function isAssociativeWith(nodeA, nodeB, parenthesis) {
      // ParenthesisNodes are only ignored when not in 'keep' mode
      var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
      var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
      var identifierA = a.getIdentifier();
      var identifierB = b.getIdentifier();
      var index = getPrecedence(a, parenthesis);

      if (index === null) {
        // node isn't in the list
        return null;
      }

      var property = properties[index][identifierA];

      if (hasOwnProperty$1(property, 'associativeWith') && property.associativeWith instanceof Array) {
        for (var i = 0; i < property.associativeWith.length; i++) {
          if (property.associativeWith[i] === identifierB) {
            return true;
          }
        }

        return false;
      } // associativeWith is not defined


      return null;
    }

    var name$2Y = 'AssignmentNode';
    var dependencies$2Z = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
    'Node'];
    var createAssignmentNode =
    /* #__PURE__ */
    factory(name$2Y, dependencies$2Z, function (_ref) {
      var subset = _ref.subset,
          matrix = _ref.matrix,
          Node = _ref.Node;
      var access = accessFactory({
        subset: subset
      });
      var assign = assignFactory({
        subset: subset,
        matrix: matrix
      });
      /**
       * @constructor AssignmentNode
       * @extends {Node}
       *
       * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
       * replace a subset of a matrix like `A[2,2]=42`.
       *
       * Syntax:
       *
       *     new AssignmentNode(symbol, value)
       *     new AssignmentNode(object, index, value)
       *
       * Usage:
       *
       *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
       *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
       *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
       *
       * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
       * @param {IndexNode} [index=null]            Index, property name or matrix
       *                                            index. Optional. If not provided
       *                                            and `object` is a SymbolNode,
       *                                            the property is assigned to the
       *                                            global scope.
       * @param {Node} value                        The value to be assigned
       */

      function AssignmentNode(object, index, value) {
        if (!(this instanceof AssignmentNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.object = object;
        this.index = value ? index : null;
        this.value = value || index; // validate input

        if (!isSymbolNode(object) && !isAccessorNode(object)) {
          throw new TypeError('SymbolNode or AccessorNode expected as "object"');
        }

        if (isSymbolNode(object) && object.name === 'end') {
          throw new Error('Cannot assign to symbol "end"');
        }

        if (this.index && !isIndexNode(this.index)) {
          // index is optional
          throw new TypeError('IndexNode expected as "index"');
        }

        if (!isNode(this.value)) {
          throw new TypeError('Node expected as "value"');
        } // readonly property name


        Object.defineProperty(this, 'name', {
          get: function () {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
              return this.object.name || '';
            }
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        });
      }

      AssignmentNode.prototype = new Node();
      AssignmentNode.prototype.type = 'AssignmentNode';
      AssignmentNode.prototype.isAssignmentNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      AssignmentNode.prototype._compile = function (math, argNames) {
        var evalObject = this.object._compile(math, argNames);

        var evalIndex = this.index ? this.index._compile(math, argNames) : null;

        var evalValue = this.value._compile(math, argNames);

        var name = this.object.name;

        if (!this.index) {
          // apply a variable to the scope, for example `a=2`
          if (!isSymbolNode(this.object)) {
            throw new TypeError('SymbolNode expected as object');
          }

          return function evalAssignmentNode(scope, args, context) {
            return setSafeProperty(scope, name, evalValue(scope, args, context));
          };
        } else if (this.index.isObjectProperty()) {
          // apply an object property for example `a.b=2`
          var prop = this.index.getObjectProperty();
          return function evalAssignmentNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            var value = evalValue(scope, args, context);
            return setSafeProperty(object, prop, value);
          };
        } else if (isSymbolNode(this.object)) {
          // update a matrix subset, for example `a[2]=3`
          return function evalAssignmentNode(scope, args, context) {
            var childObject = evalObject(scope, args, context);
            var value = evalValue(scope, args, context);
            var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

            setSafeProperty(scope, name, assign(childObject, index, value));
            return value;
          };
        } else {
          // isAccessorNode(node.object) === true
          // update a matrix subset, for example `a.b[2]=3`
          // we will not use the compile function of the AccessorNode, but compile it
          // ourselves here as we need the parent object of the AccessorNode:
          // wee need to apply the updated object to parent object
          var evalParentObject = this.object.object._compile(math, argNames);

          if (this.object.index.isObjectProperty()) {
            var parentProp = this.object.index.getObjectProperty();
            return function evalAssignmentNode(scope, args, context) {
              var parent = evalParentObject(scope, args, context);
              var childObject = getSafeProperty(parent, parentProp);
              var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

              var value = evalValue(scope, args, context);
              setSafeProperty(parent, parentProp, assign(childObject, index, value));
              return value;
            };
          } else {
            // if some parameters use the 'end' parameter, we need to calculate the size
            var evalParentIndex = this.object.index._compile(math, argNames);

            return function evalAssignmentNode(scope, args, context) {
              var parent = evalParentObject(scope, args, context);
              var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

              var childObject = access(parent, parentIndex);
              var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

              var value = evalValue(scope, args, context);
              assign(parent, parentIndex, assign(childObject, index, value));
              return value;
            };
          }
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      AssignmentNode.prototype.forEach = function (callback) {
        callback(this.object, 'object', this);

        if (this.index) {
          callback(this.index, 'index', this);
        }

        callback(this.value, 'value', this);
      };
      /**
       * Create a new AssignmentNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {AssignmentNode} Returns a transformed copy of the node
       */


      AssignmentNode.prototype.map = function (callback) {
        var object = this._ifNode(callback(this.object, 'object', this));

        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

        var value = this._ifNode(callback(this.value, 'value', this));

        return new AssignmentNode(object, index, value);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {AssignmentNode}
       */


      AssignmentNode.prototype.clone = function () {
        return new AssignmentNode(this.object, this.index, this.value);
      };
      /*
       * Is parenthesis needed?
       * @param {node} node
       * @param {string} [parenthesis='keep']
       * @private
       */


      function needParenthesis(node, parenthesis) {
        if (!parenthesis) {
          parenthesis = 'keep';
        }

        var precedence = getPrecedence(node, parenthesis);
        var exprPrecedence = getPrecedence(node.value, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      /**
       * Get string representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype._toString = function (options) {
        var object = this.object.toString(options);
        var index = this.index ? this.index.toString(options) : '';
        var value = this.value.toString(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = '(' + value + ')';
        }

        return object + index + ' = ' + value;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      AssignmentNode.prototype.toJSON = function () {
        return {
          mathjs: 'AssignmentNode',
          object: this.object,
          index: this.index,
          value: this.value
        };
      };
      /**
       * Instantiate an AssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
       *                       where mathjs is optional
       * @returns {AssignmentNode}
       */


      AssignmentNode.fromJSON = function (json) {
        return new AssignmentNode(json.object, json.index, json.value);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype.toHTML = function (options) {
        var object = this.object.toHTML(options);
        var index = this.index ? this.index.toHTML(options) : '';
        var value = this.value.toHTML(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
        }

        return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string}
       */


      AssignmentNode.prototype._toTex = function (options) {
        var object = this.object.toTex(options);
        var index = this.index ? this.index.toTex(options) : '';
        var value = this.value.toTex(options);

        if (needParenthesis(this, options && options.parenthesis)) {
          value = "\\left(".concat(value, "\\right)");
        }

        return object + index + ':=' + value;
      };

      return AssignmentNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$2Z = 'BlockNode';
    var dependencies$2_ = ['ResultSet', 'Node'];
    var createBlockNode =
    /* #__PURE__ */
    factory(name$2Z, dependencies$2_, function (_ref) {
      var ResultSet = _ref.ResultSet,
          Node = _ref.Node;

      /**
       * @constructor BlockNode
       * @extends {Node}
       * Holds a set with blocks
       * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
       *            An array with blocks, where a block is constructed as an Object
       *            with properties block, which is a Node, and visible, which is
       *            a boolean. The property visible is optional and is true by default
       */
      function BlockNode(blocks) {
        if (!(this instanceof BlockNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input, copy blocks


        if (!Array.isArray(blocks)) throw new Error('Array expected');
        this.blocks = blocks.map(function (block) {
          var node = block && block.node;
          var visible = block && block.visible !== undefined ? block.visible : true;
          if (!isNode(node)) throw new TypeError('Property "node" must be a Node');
          if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
          return {
            node: node,
            visible: visible
          };
        });
      }

      BlockNode.prototype = new Node();
      BlockNode.prototype.type = 'BlockNode';
      BlockNode.prototype.isBlockNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      BlockNode.prototype._compile = function (math, argNames) {
        var evalBlocks = map$4(this.blocks, function (block) {
          return {
            evaluate: block.node._compile(math, argNames),
            visible: block.visible
          };
        });
        return function evalBlockNodes(scope, args, context) {
          var results = [];
          forEach$3(evalBlocks, function evalBlockNode(block) {
            var result = block.evaluate(scope, args, context);

            if (block.visible) {
              results.push(result);
            }
          });
          return new ResultSet(results);
        };
      };
      /**
       * Execute a callback for each of the child blocks of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      BlockNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.blocks.length; i++) {
          callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
        }
      };
      /**
       * Create a new BlockNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {BlockNode} Returns a transformed copy of the node
       */


      BlockNode.prototype.map = function (callback) {
        var blocks = [];

        for (var i = 0; i < this.blocks.length; i++) {
          var block = this.blocks[i];

          var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

          blocks[i] = {
            node: node,
            visible: block.visible
          };
        }

        return new BlockNode(blocks);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {BlockNode}
       */


      BlockNode.prototype.clone = function () {
        var blocks = this.blocks.map(function (block) {
          return {
            node: block.node,
            visible: block.visible
          };
        });
        return new BlockNode(blocks);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      BlockNode.prototype._toString = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toString(options) + (param.visible ? '' : ';');
        }).join('\n');
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      BlockNode.prototype.toJSON = function () {
        return {
          mathjs: 'BlockNode',
          blocks: this.blocks
        };
      };
      /**
       * Instantiate an BlockNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
       *                       where mathjs is optional
       * @returns {BlockNode}
       */


      BlockNode.fromJSON = function (json) {
        return new BlockNode(json.blocks);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      BlockNode.prototype.toHTML = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
        }).join('<span class="math-separator"><br /></span>');
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      BlockNode.prototype._toTex = function (options) {
        return this.blocks.map(function (param) {
          return param.node.toTex(options) + (param.visible ? '' : ';');
        }).join('\\;\\;\n');
      };

      return BlockNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$2_ = 'ConditionalNode';
    var dependencies$2$ = ['Node'];
    var createConditionalNode =
    /* #__PURE__ */
    factory(name$2_, dependencies$2$, function (_ref) {
      var Node = _ref.Node;

      /**
       * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
       *
       * @param {Node} condition   Condition, must result in a boolean
       * @param {Node} trueExpr    Expression evaluated when condition is true
       * @param {Node} falseExpr   Expression evaluated when condition is true
       *
       * @constructor ConditionalNode
       * @extends {Node}
       */
      function ConditionalNode(condition, trueExpr, falseExpr) {
        if (!(this instanceof ConditionalNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!isNode(condition)) throw new TypeError('Parameter condition must be a Node');
        if (!isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
        if (!isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
        this.condition = condition;
        this.trueExpr = trueExpr;
        this.falseExpr = falseExpr;
      }

      ConditionalNode.prototype = new Node();
      ConditionalNode.prototype.type = 'ConditionalNode';
      ConditionalNode.prototype.isConditionalNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ConditionalNode.prototype._compile = function (math, argNames) {
        var evalCondition = this.condition._compile(math, argNames);

        var evalTrueExpr = this.trueExpr._compile(math, argNames);

        var evalFalseExpr = this.falseExpr._compile(math, argNames);

        return function evalConditionalNode(scope, args, context) {
          return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ConditionalNode.prototype.forEach = function (callback) {
        callback(this.condition, 'condition', this);
        callback(this.trueExpr, 'trueExpr', this);
        callback(this.falseExpr, 'falseExpr', this);
      };
      /**
       * Create a new ConditionalNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ConditionalNode} Returns a transformed copy of the node
       */


      ConditionalNode.prototype.map = function (callback) {
        return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ConditionalNode}
       */


      ConditionalNode.prototype.clone = function () {
        return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability

        var condition = this.condition.toString(options);
        var conditionPrecedence = getPrecedence(this.condition, parenthesis);

        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
          condition = '(' + condition + ')';
        }

        var trueExpr = this.trueExpr.toString(options);
        var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
          trueExpr = '(' + trueExpr + ')';
        }

        var falseExpr = this.falseExpr.toString(options);
        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
          falseExpr = '(' + falseExpr + ')';
        }

        return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ConditionalNode.prototype.toJSON = function () {
        return {
          mathjs: 'ConditionalNode',
          condition: this.condition,
          trueExpr: this.trueExpr,
          falseExpr: this.falseExpr
        };
      };
      /**
       * Instantiate an ConditionalNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
       *                       where mathjs is optional
       * @returns {ConditionalNode}
       */


      ConditionalNode.fromJSON = function (json) {
        return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability

        var condition = this.condition.toHTML(options);
        var conditionPrecedence = getPrecedence(this.condition, parenthesis);

        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
          condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        var trueExpr = this.trueExpr.toHTML(options);
        var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
          trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        var falseExpr = this.falseExpr.toHTML(options);
        var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
          falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ConditionalNode.prototype._toTex = function (options) {
        return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
      };
      /**
       * Test whether a condition is met
       * @param {*} condition
       * @returns {boolean} true if condition is true or non-zero, else false
       */


      function testCondition(condition) {
        if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
          return !!condition;
        }

        if (condition) {
          if (isBigNumber(condition)) {
            return !condition.isZero();
          }

          if (isComplex(condition)) {
            return !!(condition.re || condition.im);
          }

          if (isUnit(condition)) {
            return !!condition.value;
          }
        }

        if (condition === null || condition === undefined) {
          return false;
        }

        throw new TypeError('Unsupported type of condition "' + typeOf(condition) + '"');
      }

      return ConditionalNode;
    }, {
      isClass: true,
      isNode: true
    });

    // Map the characters to escape to their escaped values. The list is derived
    // from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

    var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var defaultEscapes = {
      "{": "\\{",
      "}": "\\}",
      "\\": "\\textbackslash{}",
      "#": "\\#",
      $: "\\$",
      "%": "\\%",
      "&": "\\&",
      "^": "\\textasciicircum{}",
      _: "\\_",
      "~": "\\textasciitilde{}"
    };
    var formatEscapes = {
      "\u2013": "\\--",
      "\u2014": "\\---",
      " ": "~",
      "\t": "\\qquad{}",
      "\r\n": "\\newline{}",
      "\n": "\\newline{}"
    };

    var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
      return _extends$1({}, defaultEscapes, formatEscapes);
    };

    /**
     * Escape a string to be used in LaTeX documents.
     * @param {string} str the string to be escaped.
     * @param {boolean} params.preserveFormatting whether formatting escapes should
     *  be performed (default: false).
     * @param {function} params.escapeMapFn the function to modify the escape maps.
     * @return {string} the escaped string, ready to be used in LaTeX.
     */
    var dist$1 = function (str) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$preserveFormatti = _ref.preserveFormatting,
          preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
          _ref$escapeMapFn = _ref.escapeMapFn,
          escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

      var runningStr = String(str);
      var result = "";

      var escapes = escapeMapFn(_extends$1({}, defaultEscapes), preserveFormatting ? _extends$1({}, formatEscapes) : {});
      var escapeKeys = Object.keys(escapes); // as it is reused later on

      // Algorithm: Go through the string character by character, if it matches
      // with one of the special characters then we'll replace it with the escaped
      // version.

      var _loop = function _loop() {
        var specialCharFound = false;
        escapeKeys.forEach(function (key, index) {
          if (specialCharFound) {
            return;
          }
          if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
            result += escapes[escapeKeys[index]];
            runningStr = runningStr.slice(key.length, runningStr.length);
            specialCharFound = true;
          }
        });
        if (!specialCharFound) {
          result += runningStr.slice(0, 1);
          runningStr = runningStr.slice(1, runningStr.length);
        }
      };

      while (runningStr) {
        _loop();
      }
      return result;
    };

    /* eslint no-template-curly-in-string: "off" */
    var latexSymbols = {
      // GREEK LETTERS
      Alpha: 'A',
      alpha: '\\alpha',
      Beta: 'B',
      beta: '\\beta',
      Gamma: '\\Gamma',
      gamma: '\\gamma',
      Delta: '\\Delta',
      delta: '\\delta',
      Epsilon: 'E',
      epsilon: '\\epsilon',
      varepsilon: '\\varepsilon',
      Zeta: 'Z',
      zeta: '\\zeta',
      Eta: 'H',
      eta: '\\eta',
      Theta: '\\Theta',
      theta: '\\theta',
      vartheta: '\\vartheta',
      Iota: 'I',
      iota: '\\iota',
      Kappa: 'K',
      kappa: '\\kappa',
      varkappa: '\\varkappa',
      Lambda: '\\Lambda',
      lambda: '\\lambda',
      Mu: 'M',
      mu: '\\mu',
      Nu: 'N',
      nu: '\\nu',
      Xi: '\\Xi',
      xi: '\\xi',
      Omicron: 'O',
      omicron: 'o',
      Pi: '\\Pi',
      pi: '\\pi',
      varpi: '\\varpi',
      Rho: 'P',
      rho: '\\rho',
      varrho: '\\varrho',
      Sigma: '\\Sigma',
      sigma: '\\sigma',
      varsigma: '\\varsigma',
      Tau: 'T',
      tau: '\\tau',
      Upsilon: "\\Upsilon",
      upsilon: "\\upsilon",
      Phi: '\\Phi',
      phi: '\\phi',
      varphi: '\\varphi',
      Chi: 'X',
      chi: '\\chi',
      Psi: '\\Psi',
      psi: '\\psi',
      Omega: '\\Omega',
      omega: '\\omega',
      // logic
      "true": '\\mathrm{True}',
      "false": '\\mathrm{False}',
      // other
      i: 'i',
      // TODO use \i ??
      inf: '\\infty',
      Inf: '\\infty',
      infinity: '\\infty',
      Infinity: '\\infty',
      oo: '\\infty',
      lim: '\\lim',
      undefined: '\\mathbf{?}'
    };
    var latexOperators = {
      transpose: '^\\top',
      ctranspose: '^H',
      factorial: '!',
      pow: '^',
      dotPow: '.^\\wedge',
      // TODO find ideal solution
      unaryPlus: '+',
      unaryMinus: '-',
      bitNot: '\\~',
      // TODO find ideal solution
      not: '\\neg',
      multiply: '\\cdot',
      divide: '\\frac',
      // TODO how to handle that properly?
      dotMultiply: '.\\cdot',
      // TODO find ideal solution
      dotDivide: '.:',
      // TODO find ideal solution
      mod: '\\mod',
      add: '+',
      subtract: '-',
      to: '\\rightarrow',
      leftShift: '<<',
      rightArithShift: '>>',
      rightLogShift: '>>>',
      equal: '=',
      unequal: '\\neq',
      smaller: '<',
      larger: '>',
      smallerEq: '\\leq',
      largerEq: '\\geq',
      bitAnd: '\\&',
      bitXor: "\\underline{|}",
      bitOr: '|',
      and: '\\wedge',
      xor: '\\veebar',
      or: '\\vee'
    };
    var latexFunctions = {
      // arithmetic
      abs: {
        1: '\\left|${args[0]}\\right|'
      },
      add: {
        2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
      },
      cbrt: {
        1: '\\sqrt[3]{${args[0]}}'
      },
      ceil: {
        1: '\\left\\lceil${args[0]}\\right\\rceil'
      },
      cube: {
        1: '\\left(${args[0]}\\right)^3'
      },
      divide: {
        2: '\\frac{${args[0]}}{${args[1]}}'
      },
      dotDivide: {
        2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
      },
      dotMultiply: {
        2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
      },
      dotPow: {
        2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
      },
      exp: {
        1: '\\exp\\left(${args[0]}\\right)'
      },
      expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
      fix: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
      },
      floor: {
        1: '\\left\\lfloor${args[0]}\\right\\rfloor'
      },
      gcd: '\\gcd\\left(${args}\\right)',
      hypot: '\\hypot\\left(${args}\\right)',
      log: {
        1: '\\ln\\left(${args[0]}\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
      },
      log10: {
        1: '\\log_{10}\\left(${args[0]}\\right)'
      },
      log1p: {
        1: '\\ln\\left(${args[0]}+1\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
      },
      log2: '\\log_{2}\\left(${args[0]}\\right)',
      mod: {
        2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
      },
      multiply: {
        2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
      },
      norm: {
        1: '\\left\\|${args[0]}\\right\\|',
        2: undefined // use default template

      },
      nthRoot: {
        2: '\\sqrt[${args[1]}]{${args[0]}}'
      },
      nthRoots: {
        2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
      },
      pow: {
        2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
      },
      round: {
        1: '\\left\\lfloor${args[0]}\\right\\rceil',
        2: undefined // use default template

      },
      sign: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
      },
      sqrt: {
        1: '\\sqrt{${args[0]}}'
      },
      square: {
        1: '\\left(${args[0]}\\right)^2'
      },
      subtract: {
        2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
      },
      unaryMinus: {
        1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
      },
      unaryPlus: {
        1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
      },
      // bitwise
      bitAnd: {
        2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
      },
      bitNot: {
        1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
      },
      bitOr: {
        2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
      },
      bitXor: {
        2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
      },
      leftShift: {
        2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
      },
      rightArithShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
      },
      rightLogShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
      },
      // combinatorics
      bellNumbers: {
        1: '\\mathrm{B}_{${args[0]}}'
      },
      catalan: {
        1: '\\mathrm{C}_{${args[0]}}'
      },
      stirlingS2: {
        2: '\\mathrm{S}\\left(${args}\\right)'
      },
      // complex
      arg: {
        1: '\\arg\\left(${args[0]}\\right)'
      },
      conj: {
        1: '\\left(${args[0]}\\right)^*'
      },
      im: {
        1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
      },
      re: {
        1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
      },
      // logical
      and: {
        2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
      },
      not: {
        1: latexOperators.not + '\\left(${args[0]}\\right)'
      },
      or: {
        2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
      },
      xor: {
        2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
      },
      // matrix
      cross: {
        2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
      },
      ctranspose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
      },
      det: {
        1: '\\det\\left(${args[0]}\\right)'
      },
      dot: {
        2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
      },
      expm: {
        1: '\\exp\\left(${args[0]}\\right)'
      },
      inv: {
        1: '\\left(${args[0]}\\right)^{-1}'
      },
      sqrtm: {
        1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
      },
      trace: {
        1: '\\mathrm{tr}\\left(${args[0]}\\right)'
      },
      transpose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
      },
      // probability
      combinations: {
        2: '\\binom{${args[0]}}{${args[1]}}'
      },
      combinationsWithRep: {
        2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
      },
      factorial: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
      },
      gamma: {
        1: '\\Gamma\\left(${args[0]}\\right)'
      },
      // relational
      equal: {
        2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
      },
      larger: {
        2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
      },
      largerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
      },
      smaller: {
        2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
      },
      smallerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
      },
      unequal: {
        2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
      },
      // special
      erf: {
        1: 'erf\\left(${args[0]}\\right)'
      },
      // statistics
      max: '\\max\\left(${args}\\right)',
      min: '\\min\\left(${args}\\right)',
      variance: '\\mathrm{Var}\\left(${args}\\right)',
      // trigonometry
      acos: {
        1: '\\cos^{-1}\\left(${args[0]}\\right)'
      },
      acosh: {
        1: '\\cosh^{-1}\\left(${args[0]}\\right)'
      },
      acot: {
        1: '\\cot^{-1}\\left(${args[0]}\\right)'
      },
      acoth: {
        1: '\\coth^{-1}\\left(${args[0]}\\right)'
      },
      acsc: {
        1: '\\csc^{-1}\\left(${args[0]}\\right)'
      },
      acsch: {
        1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
      },
      asec: {
        1: '\\sec^{-1}\\left(${args[0]}\\right)'
      },
      asech: {
        1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
      },
      asin: {
        1: '\\sin^{-1}\\left(${args[0]}\\right)'
      },
      asinh: {
        1: '\\sinh^{-1}\\left(${args[0]}\\right)'
      },
      atan: {
        1: '\\tan^{-1}\\left(${args[0]}\\right)'
      },
      atan2: {
        2: '\\mathrm{atan2}\\left(${args}\\right)'
      },
      atanh: {
        1: '\\tanh^{-1}\\left(${args[0]}\\right)'
      },
      cos: {
        1: '\\cos\\left(${args[0]}\\right)'
      },
      cosh: {
        1: '\\cosh\\left(${args[0]}\\right)'
      },
      cot: {
        1: '\\cot\\left(${args[0]}\\right)'
      },
      coth: {
        1: '\\coth\\left(${args[0]}\\right)'
      },
      csc: {
        1: '\\csc\\left(${args[0]}\\right)'
      },
      csch: {
        1: '\\mathrm{csch}\\left(${args[0]}\\right)'
      },
      sec: {
        1: '\\sec\\left(${args[0]}\\right)'
      },
      sech: {
        1: '\\mathrm{sech}\\left(${args[0]}\\right)'
      },
      sin: {
        1: '\\sin\\left(${args[0]}\\right)'
      },
      sinh: {
        1: '\\sinh\\left(${args[0]}\\right)'
      },
      tan: {
        1: '\\tan\\left(${args[0]}\\right)'
      },
      tanh: {
        1: '\\tanh\\left(${args[0]}\\right)'
      },
      // unit
      to: {
        2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
      },
      // utils
      numeric: function numeric(node, options) {
        // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
        return node.args[0].toTex();
      },
      // type
      number: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
      },
      string: {
        0: '\\mathtt{""}',
        1: '\\mathrm{string}\\left(${args[0]}\\right)'
      },
      bignumber: {
        0: '0',
        1: '\\left(${args[0]}\\right)'
      },
      complex: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
      },
      matrix: {
        0: '\\begin{bmatrix}\\end{bmatrix}',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(${args[0]}\\right)'
      },
      sparse: {
        0: '\\begin{bsparse}\\end{bsparse}',
        1: '\\left(${args[0]}\\right)'
      },
      unit: {
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
      }
    };
    var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
    var latexUnits = {
      deg: '^\\circ'
    };
    function escapeLatex(string) {
      return dist$1(string, {
        preserveFormatting: true
      });
    } // @param {string} name
    // @param {boolean} isUnit

    function toSymbol(name, isUnit) {
      isUnit = typeof isUnit === 'undefined' ? false : isUnit;

      if (isUnit) {
        if (hasOwnProperty$1(latexUnits, name)) {
          return latexUnits[name];
        }

        return '\\mathrm{' + escapeLatex(name) + '}';
      }

      if (hasOwnProperty$1(latexSymbols, name)) {
        return latexSymbols[name];
      }

      return escapeLatex(name);
    }

    var name$2$ = 'ConstantNode';
    var dependencies$30 = ['Node'];
    var createConstantNode =
    /* #__PURE__ */
    factory(name$2$, dependencies$30, function (_ref) {
      var Node = _ref.Node;

      /**
       * A ConstantNode holds a constant value like a number or string.
       *
       * Usage:
       *
       *     new ConstantNode(2.3)
       *     new ConstantNode('hello')
       *
       * @param {*} value    Value can be any type (number, BigNumber, string, ...)
       * @constructor ConstantNode
       * @extends {Node}
       */
      function ConstantNode(value) {
        if (!(this instanceof ConstantNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (arguments.length === 2) {
          // TODO: remove deprecation error some day (created 2018-01-23)
          throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');
        }

        this.value = value;
      }

      ConstantNode.prototype = new Node();
      ConstantNode.prototype.type = 'ConstantNode';
      ConstantNode.prototype.isConstantNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ConstantNode.prototype._compile = function (math, argNames) {
        var value = this.value;
        return function evalConstantNode() {
          return value;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

      /**
       * Create a new ConstantNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {ConstantNode} Returns a clone of the node
       */
      ;

      ConstantNode.prototype.map = function (callback) {
        return this.clone();
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ConstantNode}
       */


      ConstantNode.prototype.clone = function () {
        return new ConstantNode(this.value);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype._toString = function (options) {
        return format$5(this.value, options);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype.toHTML = function (options) {
        var value = this._toString(options);

        switch (typeOf(this.value)) {
          case 'number':
          case 'BigNumber':
          case 'Fraction':
            return '<span class="math-number">' + value + '</span>';

          case 'string':
            return '<span class="math-string">' + value + '</span>';

          case 'boolean':
            return '<span class="math-boolean">' + value + '</span>';

          case 'null':
            return '<span class="math-null-symbol">' + value + '</span>';

          case 'undefined':
            return '<span class="math-undefined">' + value + '</span>';

          default:
            return '<span class="math-symbol">' + value + '</span>';
        }
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ConstantNode.prototype.toJSON = function () {
        return {
          mathjs: 'ConstantNode',
          value: this.value
        };
      };
      /**
       * Instantiate a ConstantNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SymbolNode", value: 2.3}`,
       *                       where mathjs is optional
       * @returns {ConstantNode}
       */


      ConstantNode.fromJSON = function (json) {
        return new ConstantNode(json.value);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ConstantNode.prototype._toTex = function (options) {
        var value = this._toString(options);

        switch (typeOf(this.value)) {
          case 'string':
            return '\\mathtt{' + escapeLatex(value) + '}';

          case 'number':
          case 'BigNumber':
            {
              var index = value.toLowerCase().indexOf('e');

              if (index !== -1) {
                return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
              }
            }
            return value;

          case 'Fraction':
            return this.value.toLatex();

          default:
            return value;
        }
      };

      return ConstantNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$30 = 'FunctionAssignmentNode';
    var dependencies$31 = ['typed', 'Node'];
    var createFunctionAssignmentNode =
    /* #__PURE__ */
    factory(name$30, dependencies$31, function (_ref) {
      var typed = _ref.typed,
          Node = _ref.Node;

      /**
       * @constructor FunctionAssignmentNode
       * @extends {Node}
       * Function assignment
       *
       * @param {string} name           Function name
       * @param {string[] | Array.<{name: string, type: string}>} params
       *                                Array with function parameter names, or an
       *                                array with objects containing the name
       *                                and type of the parameter
       * @param {Node} expr             The function expression
       */
      function FunctionAssignmentNode(name, params, expr) {
        if (!(this instanceof FunctionAssignmentNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
        if (!isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
        if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
        this.name = name;
        this.params = params.map(function (param) {
          return param && param.name || param;
        });
        this.types = params.map(function (param) {
          return param && param.type || 'any';
        });
        this.expr = expr;
      }

      FunctionAssignmentNode.prototype = new Node();
      FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
      FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      FunctionAssignmentNode.prototype._compile = function (math, argNames) {
        var childArgNames = Object.create(argNames);
        forEach$3(this.params, function (param) {
          childArgNames[param] = true;
        }); // compile the function expression with the child args

        var evalExpr = this.expr._compile(math, childArgNames);

        var name = this.name;
        var params = this.params;
        var signature = join(this.types, ',');
        var syntax = name + '(' + join(this.params, ', ') + ')';
        return function evalFunctionAssignmentNode(scope, args, context) {
          var signatures = {};

          signatures[signature] = function () {
            var childArgs = Object.create(args);

            for (var i = 0; i < params.length; i++) {
              childArgs[params[i]] = arguments[i];
            }

            return evalExpr(scope, childArgs, context);
          };

          var fn = typed(name, signatures);
          fn.syntax = syntax;
          setSafeProperty(scope, name, fn);
          return fn;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      FunctionAssignmentNode.prototype.forEach = function (callback) {
        callback(this.expr, 'expr', this);
      };
      /**
       * Create a new FunctionAssignmentNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
       */


      FunctionAssignmentNode.prototype.map = function (callback) {
        var expr = this._ifNode(callback(this.expr, 'expr', this));

        return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {FunctionAssignmentNode}
       */


      FunctionAssignmentNode.prototype.clone = function () {
        return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
      };
      /**
       * Is parenthesis needed?
       * @param {Node} node
       * @param {Object} parenthesis
       * @private
       */


      function needParenthesis(node, parenthesis) {
        var precedence = getPrecedence(node, parenthesis);
        var exprPrecedence = getPrecedence(node.expr, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      /**
       * get string representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toString(options);

        if (needParenthesis(this, parenthesis)) {
          expr = '(' + expr + ')';
        }

        return this.name + '(' + this.params.join(', ') + ') = ' + expr;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      FunctionAssignmentNode.prototype.toJSON = function () {
        var types = this.types;
        return {
          mathjs: 'FunctionAssignmentNode',
          name: this.name,
          params: this.params.map(function (param, index) {
            return {
              name: param,
              type: types[index]
            };
          }),
          expr: this.expr
        };
      };
      /**
       * Instantiate an FunctionAssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
       *                       where mathjs is optional
       * @returns {FunctionAssignmentNode}
       */


      FunctionAssignmentNode.fromJSON = function (json) {
        return new FunctionAssignmentNode(json.name, json.params, json.expr);
      };
      /**
       * get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var params = [];

        for (var i = 0; i < this.params.length; i++) {
          params.push('<span class="math-symbol math-parameter">' + escape$2(this.params[i]) + '</span>');
        }

        var expr = this.expr.toHTML(options);

        if (needParenthesis(this, parenthesis)) {
          expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return '<span class="math-function">' + escape$2(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
      };
      /**
       * get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionAssignmentNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toTex(options);

        if (needParenthesis(this, parenthesis)) {
          expr = "\\left(".concat(expr, "\\right)");
        }

        return '\\mathrm{' + this.name + '}\\left(' + this.params.map(toSymbol).join(',') + '\\right):=' + expr;
      };

      return FunctionAssignmentNode;
    }, {
      isClass: true,
      isNode: true
    });

    function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

    function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

    function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

    function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }
    var name$31 = 'IndexNode';
    var dependencies$32 = ['Range', 'Node', 'size'];
    var createIndexNode =
    /* #__PURE__ */
    factory(name$31, dependencies$32, function (_ref) {
      var Range = _ref.Range,
          Node = _ref.Node,
          size = _ref.size;

      /**
       * @constructor IndexNode
       * @extends Node
       *
       * Describes a subset of a matrix or an object property.
       * Cannot be used on its own, needs to be used within an AccessorNode or
       * AssignmentNode.
       *
       * @param {Node[]} dimensions
       * @param {boolean} [dotNotation=false]  Optional property describing whether
       *                                       this index was written using dot
       *                                       notation like `a.b`, or using bracket
       *                                       notation like `a["b"]` (default).
       *                                       Used to stringify an IndexNode.
       */
      function IndexNode(dimensions, dotNotation) {
        if (!(this instanceof IndexNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.dimensions = dimensions;
        this.dotNotation = dotNotation || false; // validate input

        if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
        }

        if (this.dotNotation && !this.isObjectProperty()) {
          throw new Error('dotNotation only applicable for object properties');
        } // TODO: deprecated since v3, remove some day


        var deprecated = function deprecated() {
          throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
        };

        Object.defineProperty(this, 'object', {
          get: deprecated,
          set: deprecated
        });
      }

      IndexNode.prototype = new Node();
      IndexNode.prototype.type = 'IndexNode';
      IndexNode.prototype.isIndexNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      IndexNode.prototype._compile = function (math, argNames) {
        // TODO: implement support for bignumber (currently bignumbers are silently
        //       reduced to numbers when changing the value to zero-based)
        // TODO: Optimization: when the range values are ConstantNodes,
        //       we can beforehand resolve the zero-based value
        // optimization for a simple object property
        var evalDimensions = map$4(this.dimensions, function (range, i) {
          if (isRangeNode(range)) {
            if (range.needsEnd()) {
              // create a range containing end (like '4:end')
              var childArgNames = Object.create(argNames);
              childArgNames.end = true;

              var evalStart = range.start._compile(math, childArgNames);

              var evalEnd = range.end._compile(math, childArgNames);

              var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
                return 1;
              };
              return function evalDimension(scope, args, context) {
                var s = size(context).valueOf();
                var childArgs = Object.create(args);
                childArgs.end = s[i];
                return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
              };
            } else {
              // create range
              var _evalStart = range.start._compile(math, argNames);

              var _evalEnd = range.end._compile(math, argNames);

              var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
                return 1;
              };

              return function evalDimension(scope, args, context) {
                return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
              };
            }
          } else if (isSymbolNode(range) && range.name === 'end') {
            // SymbolNode 'end'
            var _childArgNames = Object.create(argNames);

            _childArgNames.end = true;

            var evalRange = range._compile(math, _childArgNames);

            return function evalDimension(scope, args, context) {
              var s = size(context).valueOf();
              var childArgs = Object.create(args);
              childArgs.end = s[i];
              return evalRange(scope, childArgs, context);
            };
          } else {
            // ConstantNode
            var _evalRange = range._compile(math, argNames);

            return function evalDimension(scope, args, context) {
              return _evalRange(scope, args, context);
            };
          }
        });
        var index = getSafeProperty(math, 'index');
        return function evalIndexNode(scope, args, context) {
          var dimensions = map$4(evalDimensions, function (evalDimension) {
            return evalDimension(scope, args, context);
          });
          return index.apply(void 0, _toConsumableArray(dimensions));
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      IndexNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.dimensions.length; i++) {
          callback(this.dimensions[i], 'dimensions[' + i + ']', this);
        }
      };
      /**
       * Create a new IndexNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {IndexNode} Returns a transformed copy of the node
       */


      IndexNode.prototype.map = function (callback) {
        var dimensions = [];

        for (var i = 0; i < this.dimensions.length; i++) {
          dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
        }

        return new IndexNode(dimensions, this.dotNotation);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {IndexNode}
       */


      IndexNode.prototype.clone = function () {
        return new IndexNode(this.dimensions.slice(0), this.dotNotation);
      };
      /**
       * Test whether this IndexNode contains a single property name
       * @return {boolean}
       */


      IndexNode.prototype.isObjectProperty = function () {
        return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
      };
      /**
       * Returns the property name if IndexNode contains a property.
       * If not, returns null.
       * @return {string | null}
       */


      IndexNode.prototype.getObjectProperty = function () {
        return this.isObjectProperty() ? this.dimensions[0].value : null;
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype._toString = function (options) {
        // format the parameters like "[1, 0:5]"
        return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      IndexNode.prototype.toJSON = function () {
        return {
          mathjs: 'IndexNode',
          dimensions: this.dimensions,
          dotNotation: this.dotNotation
        };
      };
      /**
       * Instantiate an IndexNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
       *                       where mathjs is optional
       * @returns {IndexNode}
       */


      IndexNode.fromJSON = function (json) {
        return new IndexNode(json.dimensions, json.dotNotation);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype.toHTML = function (options) {
        // format the parameters like "[1, 0:5]"
        var dimensions = [];

        for (var i = 0; i < this.dimensions.length; i++) {
          dimensions[i] = this.dimensions[i].toHTML();
        }

        if (this.dotNotation) {
          return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape$2(this.getObjectProperty()) + '</span>';
        } else {
          return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
        }
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      IndexNode.prototype._toTex = function (options) {
        var dimensions = this.dimensions.map(function (range) {
          return range.toTex(options);
        });
        return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
      }; // helper function to create a Range from start, step and end


      function createRange(start, end, step) {
        return new Range(isBigNumber(start) ? start.toNumber() : start, isBigNumber(end) ? end.toNumber() : end, isBigNumber(step) ? step.toNumber() : step);
      }

      return IndexNode;
    }, {
      isClass: true,
      isNode: true
    });

    function _typeof$a(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$a = function _typeof(obj) { return typeof obj; }; } else { _typeof$a = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$a(obj); }
    var name$32 = 'ObjectNode';
    var dependencies$33 = ['Node'];
    var createObjectNode =
    /* #__PURE__ */
    factory(name$32, dependencies$33, function (_ref) {
      var Node = _ref.Node;

      /**
       * @constructor ObjectNode
       * @extends {Node}
       * Holds an object with keys/values
       * @param {Object.<string, Node>} [properties]   object with key/value pairs
       */
      function ObjectNode(properties) {
        if (!(this instanceof ObjectNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.properties = properties || {}; // validate input

        if (properties) {
          if (!(_typeof$a(properties) === 'object') || !Object.keys(properties).every(function (key) {
            return isNode(properties[key]);
          })) {
            throw new TypeError('Object containing Nodes expected');
          }
        }
      }

      ObjectNode.prototype = new Node();
      ObjectNode.prototype.type = 'ObjectNode';
      ObjectNode.prototype.isObjectNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ObjectNode.prototype._compile = function (math, argNames) {
        var evalEntries = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            // we stringify/parse the key here to resolve unicode characters,
            // so you cannot create a key like {"co\\u006Estructor": null}
            var stringifiedKey = stringify(key);
            var parsedKey = JSON.parse(stringifiedKey);

            if (!isSafeProperty(this.properties, parsedKey)) {
              throw new Error('No access to property "' + parsedKey + '"');
            }

            evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
          }
        }

        return function evalObjectNode(scope, args, context) {
          var obj = {};

          for (var _key in evalEntries) {
            if (hasOwnProperty$1(evalEntries, _key)) {
              obj[_key] = evalEntries[_key](scope, args, context);
            }
          }

          return obj;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ObjectNode.prototype.forEach = function (callback) {
        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
          }
        }
      };
      /**
       * Create a new ObjectNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {ObjectNode} Returns a transformed copy of the node
       */


      ObjectNode.prototype.map = function (callback) {
        var properties = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
          }
        }

        return new ObjectNode(properties);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ObjectNode}
       */


      ObjectNode.prototype.clone = function () {
        var properties = {};

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            properties[key] = this.properties[key];
          }
        }

        return new ObjectNode(properties);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ObjectNode.prototype._toString = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
          }
        }

        return '{' + entries.join(', ') + '}';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ObjectNode.prototype.toJSON = function () {
        return {
          mathjs: 'ObjectNode',
          properties: this.properties
        };
      };
      /**
       * Instantiate an OperatorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
       *                       where mathjs is optional
       * @returns {ObjectNode}
       */


      ObjectNode.fromJSON = function (json) {
        return new ObjectNode(json.properties);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ObjectNode.prototype.toHTML = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push('<span class="math-symbol math-property">' + escape$2(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
          }
        }

        return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      ObjectNode.prototype._toTex = function (options) {
        var entries = [];

        for (var key in this.properties) {
          if (hasOwnProperty$1(this.properties, key)) {
            entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
          }
        }

        return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
      };

      return ObjectNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$33 = 'OperatorNode';
    var dependencies$34 = ['Node'];
    var createOperatorNode =
    /* #__PURE__ */
    factory(name$33, dependencies$34, function (_ref) {
      var Node = _ref.Node;

      /**
       * @constructor OperatorNode
       * @extends {Node}
       * An operator with two arguments, like 2+3
       *
       * @param {string} op           Operator name, for example '+'
       * @param {string} fn           Function name, for example 'add'
       * @param {Node[]} args         Operator arguments
       * @param {boolean} [implicit]  Is this an implicit multiplication?
       */
      function OperatorNode(op, fn, args, implicit) {
        if (!(this instanceof OperatorNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof op !== 'string') {
          throw new TypeError('string expected for parameter "op"');
        }

        if (typeof fn !== 'string') {
          throw new TypeError('string expected for parameter "fn"');
        }

        if (!Array.isArray(args) || !args.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }

        this.implicit = implicit === true;
        this.op = op;
        this.fn = fn;
        this.args = args || [];
      }

      OperatorNode.prototype = new Node();
      OperatorNode.prototype.type = 'OperatorNode';
      OperatorNode.prototype.isOperatorNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      OperatorNode.prototype._compile = function (math, argNames) {
        // validate fn
        if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {
          if (!math[this.fn]) {
            throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
          } else {
            throw new Error('No access to function "' + this.fn + '"');
          }
        }

        var fn = getSafeProperty(math, this.fn);
        var evalArgs = map$4(this.args, function (arg) {
          return arg._compile(math, argNames);
        });

        if (evalArgs.length === 1) {
          var evalArg0 = evalArgs[0];
          return function evalOperatorNode(scope, args, context) {
            return fn(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          var _evalArg = evalArgs[0];
          var evalArg1 = evalArgs[1];
          return function evalOperatorNode(scope, args, context) {
            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalOperatorNode(scope, args, context) {
            return fn.apply(null, map$4(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      OperatorNode.prototype.forEach = function (callback) {
        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], 'args[' + i + ']', this);
        }
      };
      /**
       * Create a new OperatorNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {OperatorNode} Returns a transformed copy of the node
       */


      OperatorNode.prototype.map = function (callback) {
        var args = [];

        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        }

        return new OperatorNode(this.op, this.fn, args, this.implicit);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {OperatorNode}
       */


      OperatorNode.prototype.clone = function () {
        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
      };
      /**
       * Check whether this is an unary OperatorNode:
       * has exactly one argument, like `-a`.
       * @return {boolean} Returns true when an unary operator node, false otherwise.
       */


      OperatorNode.prototype.isUnary = function () {
        return this.args.length === 1;
      };
      /**
       * Check whether this is a binary OperatorNode:
       * has exactly two arguments, like `a + b`.
       * @return {boolean} Returns true when a binary operator node, false otherwise.
       */


      OperatorNode.prototype.isBinary = function () {
        return this.args.length === 2;
      };
      /**
       * Calculate which parentheses are necessary. Gets an OperatorNode
       * (which is the root of the tree) and an Array of Nodes
       * (this.args) and returns an array where 'true' means that an argument
       * has to be enclosed in parentheses whereas 'false' means the opposite.
       *
       * @param {OperatorNode} root
       * @param {string} parenthesis
       * @param {Node[]} args
       * @param {boolean} latex
       * @return {boolean[]}
       * @private
       */


      function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
        // precedence of the root OperatorNode
        var precedence = getPrecedence(root, parenthesis);
        var associativity = getAssociativity(root, parenthesis);

        if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
          return args.map(function (arg) {
            switch (arg.getContent().type) {
              // Nodes that don't need extra parentheses
              case 'ArrayNode':
              case 'ConstantNode':
              case 'SymbolNode':
              case 'ParenthesisNode':
                return false;

              default:
                return true;
            }
          });
        }

        var result;

        switch (args.length) {
          case 0:
            result = [];
            break;

          case 1:
            // unary operators
            {
              // precedence of the operand
              var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

              if (latex && operandPrecedence !== null) {
                var operandIdentifier;
                var rootIdentifier;

                if (parenthesis === 'keep') {
                  operandIdentifier = args[0].getIdentifier();
                  rootIdentifier = root.getIdentifier();
                } else {
                  // Ignore Parenthesis Nodes when not in 'keep' mode
                  operandIdentifier = args[0].getContent().getIdentifier();
                  rootIdentifier = root.getContent().getIdentifier();
                }

                if (properties[precedence][rootIdentifier].latexLeftParens === false) {
                  result = [false];
                  break;
                }

                if (properties[operandPrecedence][operandIdentifier].latexParens === false) {
                  result = [false];
                  break;
                }
              }

              if (operandPrecedence === null) {
                // if the operand has no defined precedence, no parens are needed
                result = [false];
                break;
              }

              if (operandPrecedence <= precedence) {
                // if the operands precedence is lower, parens are needed
                result = [true];
                break;
              } // otherwise, no parens needed


              result = [false];
            }
            break;

          case 2:
            // binary operators
            {
              var lhsParens; // left hand side needs parenthesis?
              // precedence of the left hand side

              var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side

              var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);

              if (lhsPrecedence === null) {
                // if the left hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                lhsParens = false;
              } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
                // In case of equal precedence, if the root node is left associative
                // parens are **never** necessary for the left hand side.
                // If it is right associative however, parens are necessary
                // if the root node isn't associative with the left hand side
                lhsParens = true;
              } else if (lhsPrecedence < precedence) {
                lhsParens = true;
              } else {
                lhsParens = false;
              }

              var rhsParens; // right hand side needs parenthesis?
              // precedence of the right hand side

              var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?

              var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);

              if (rhsPrecedence === null) {
                // if the right hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                rhsParens = false;
              } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
                // In case of equal precedence, if the root node is right associative
                // parens are **never** necessary for the right hand side.
                // If it is left associative however, parens are necessary
                // if the root node isn't associative with the right hand side
                rhsParens = true;
              } else if (rhsPrecedence < precedence) {
                rhsParens = true;
              } else {
                rhsParens = false;
              } // handle special cases for LaTeX, where some of the parentheses aren't needed


              if (latex) {
                var _rootIdentifier;

                var lhsIdentifier;
                var rhsIdentifier;

                if (parenthesis === 'keep') {
                  _rootIdentifier = root.getIdentifier();
                  lhsIdentifier = root.args[0].getIdentifier();
                  rhsIdentifier = root.args[1].getIdentifier();
                } else {
                  // Ignore ParenthesisNodes when not in 'keep' mode
                  _rootIdentifier = root.getContent().getIdentifier();
                  lhsIdentifier = root.args[0].getContent().getIdentifier();
                  rhsIdentifier = root.args[1].getContent().getIdentifier();
                }

                if (lhsPrecedence !== null) {
                  if (properties[precedence][_rootIdentifier].latexLeftParens === false) {
                    lhsParens = false;
                  }

                  if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                    lhsParens = false;
                  }
                }

                if (rhsPrecedence !== null) {
                  if (properties[precedence][_rootIdentifier].latexRightParens === false) {
                    rhsParens = false;
                  }

                  if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                    rhsParens = false;
                  }
                }
              }

              result = [lhsParens, rhsParens];
            }
            break;

          default:
            if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
              result = args.map(function (arg) {
                var argPrecedence = getPrecedence(arg, parenthesis);
                var assocWithArg = isAssociativeWith(root, arg, parenthesis);
                var argAssociativity = getAssociativity(arg, parenthesis);

                if (argPrecedence === null) {
                  // if the argument has no defined precedence, no parens are needed
                  return false;
                } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
                  return true;
                } else if (argPrecedence < precedence) {
                  return true;
                }

                return false;
              });
            }

            break;
        } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
        // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
        // printed.


        if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
          result = args.map(function (arg, index) {
            var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

            if (result[index] || isParenthesisNode) {
              // put in parenthesis?
              return true;
            }

            return false;
          });
        }

        return result;
      }
      /**
       * Get string representation.
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toString(options);

          if (parens[0]) {
            operand = '(' + operand + ')';
          } // for example for "not", we want a space between operand and argument


          var opIsNamed = /[a-zA-Z]+/.test(this.op);

          if (assoc === 'right') {
            // prefix operator
            return this.op + (opIsNamed ? ' ' : '') + operand;
          } else if (assoc === 'left') {
            // postfix
            return operand + (opIsNamed ? ' ' : '') + this.op;
          } // fall back to postfix


          return operand + this.op;
        } else if (args.length === 2) {
          var lhs = args[0].toString(options); // left hand side

          var rhs = args[1].toString(options); // right hand side

          if (parens[0]) {
            // left hand side in parenthesis?
            lhs = '(' + lhs + ')';
          }

          if (parens[1]) {
            // right hand side in parenthesis?
            rhs = '(' + rhs + ')';
          }

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return lhs + ' ' + rhs;
          }

          return lhs + ' ' + this.op + ' ' + rhs;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
          var stringifiedArgs = args.map(function (arg, index) {
            arg = arg.toString(options);

            if (parens[index]) {
              // put in parenthesis?
              arg = '(' + arg + ')';
            }

            return arg;
          });

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return stringifiedArgs.join(' ');
          }

          return stringifiedArgs.join(' ' + this.op + ' ');
        } else {
          // fallback to formatting as a function call
          return this.fn + '(' + this.args.join(', ') + ')';
        }
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      OperatorNode.prototype.toJSON = function () {
        return {
          mathjs: 'OperatorNode',
          op: this.op,
          fn: this.fn,
          args: this.args,
          implicit: this.implicit
        };
      };
      /**
       * Instantiate an OperatorNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
       *                       where mathjs is optional
       * @returns {OperatorNode}
       */


      OperatorNode.fromJSON = function (json) {
        return new OperatorNode(json.op, json.fn, json.args, json.implicit);
      };
      /**
       * Get HTML representation.
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toHTML(options);

          if (parens[0]) {
            operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (assoc === 'right') {
            // prefix operator
            return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape$2(this.op) + '</span>' + operand;
          } else {
            // postfix when assoc === 'left' or undefined
            return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$2(this.op) + '</span>';
          }
        } else if (args.length === 2) {
          // binary operatoes
          var lhs = args[0].toHTML(options); // left hand side

          var rhs = args[1].toHTML(options); // right hand side

          if (parens[0]) {
            // left hand side in parenthesis?
            lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (parens[1]) {
            // right hand side in parenthesis?
            rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
            return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
          }

          return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$2(this.op) + '</span>' + rhs;
        } else {
          var stringifiedArgs = args.map(function (arg, index) {
            arg = arg.toHTML(options);

            if (parens[index]) {
              // put in parenthesis?
              arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }

            return arg;
          });

          if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
              return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
            }

            return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$2(this.op) + '</span>');
          } else {
            // fallback to formatting as a function call
            return '<span class="math-function">' + escape$2(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
          }
        }
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      OperatorNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
        var op = latexOperators[this.fn];
        op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

        if (args.length === 1) {
          // unary operators
          var assoc = getAssociativity(this, parenthesis);
          var operand = args[0].toTex(options);

          if (parens[0]) {
            operand = "\\left(".concat(operand, "\\right)");
          }

          if (assoc === 'right') {
            // prefix operator
            return op + operand;
          } else if (assoc === 'left') {
            // postfix operator
            return operand + op;
          } // fall back to postfix


          return operand + op;
        } else if (args.length === 2) {
          // binary operators
          var lhs = args[0]; // left hand side

          var lhsTex = lhs.toTex(options);

          if (parens[0]) {
            lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }

          var rhs = args[1]; // right hand side

          var rhsTex = rhs.toTex(options);

          if (parens[1]) {
            rhsTex = "\\left(".concat(rhsTex, "\\right)");
          } // handle some exceptions (due to the way LaTeX works)


          var lhsIdentifier;

          if (parenthesis === 'keep') {
            lhsIdentifier = lhs.getIdentifier();
          } else {
            // Ignore ParenthesisNodes if in 'keep' mode
            lhsIdentifier = lhs.getContent().getIdentifier();
          }

          switch (this.getIdentifier()) {
            case 'OperatorNode:divide':
              // op contains '\\frac' at this point
              return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

            case 'OperatorNode:pow':
              lhsTex = '{' + lhsTex + '}';
              rhsTex = '{' + rhsTex + '}';

              switch (lhsIdentifier) {
                case 'ConditionalNode': //

                case 'OperatorNode:divide':
                  lhsTex = "\\left(".concat(lhsTex, "\\right)");
              }

              break;

            case 'OperatorNode:multiply':
              if (this.implicit && implicit === 'hide') {
                return lhsTex + '~' + rhsTex;
              }

          }

          return lhsTex + op + rhsTex;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
          var texifiedArgs = args.map(function (arg, index) {
            arg = arg.toTex(options);

            if (parens[index]) {
              arg = "\\left(".concat(arg, "\\right)");
            }

            return arg;
          });

          if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
            return texifiedArgs.join('~');
          }

          return texifiedArgs.join(op);
        } else {
          // fall back to formatting as a function call
          // as this is a fallback, it doesn't use
          // fancy function names
          return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
            return arg.toTex(options);
          }).join(',') + '\\right)';
        }
      };
      /**
       * Get identifier.
       * @return {string}
       */


      OperatorNode.prototype.getIdentifier = function () {
        return this.type + ':' + this.fn;
      };

      return OperatorNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$34 = 'ParenthesisNode';
    var dependencies$35 = ['Node'];
    var createParenthesisNode =
    /* #__PURE__ */
    factory(name$34, dependencies$35, function (_ref) {
      var Node = _ref.Node;

      /**
       * @constructor ParenthesisNode
       * @extends {Node}
       * A parenthesis node describes manual parenthesis from the user input
       * @param {Node} content
       * @extends {Node}
       */
      function ParenthesisNode(content) {
        if (!(this instanceof ParenthesisNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (!isNode(content)) {
          throw new TypeError('Node expected for parameter "content"');
        }

        this.content = content;
      }

      ParenthesisNode.prototype = new Node();
      ParenthesisNode.prototype.type = 'ParenthesisNode';
      ParenthesisNode.prototype.isParenthesisNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      ParenthesisNode.prototype._compile = function (math, argNames) {
        return this.content._compile(math, argNames);
      };
      /**
       * Get the content of the current Node.
       * @return {Node} content
       * @override
       **/


      ParenthesisNode.prototype.getContent = function () {
        return this.content.getContent();
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      ParenthesisNode.prototype.forEach = function (callback) {
        callback(this.content, 'content', this);
      };
      /**
       * Create a new ParenthesisNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {ParenthesisNode} Returns a clone of the node
       */


      ParenthesisNode.prototype.map = function (callback) {
        var content = callback(this.content, 'content', this);
        return new ParenthesisNode(content);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {ParenthesisNode}
       */


      ParenthesisNode.prototype.clone = function () {
        return new ParenthesisNode(this.content);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype._toString = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return '(' + this.content.toString(options) + ')';
        }

        return this.content.toString(options);
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      ParenthesisNode.prototype.toJSON = function () {
        return {
          mathjs: 'ParenthesisNode',
          content: this.content
        };
      };
      /**
       * Instantiate an ParenthesisNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
       *                       where mathjs is optional
       * @returns {ParenthesisNode}
       */


      ParenthesisNode.fromJSON = function (json) {
        return new ParenthesisNode(json.content);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype.toHTML = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return this.content.toHTML(options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      ParenthesisNode.prototype._toTex = function (options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
          return "\\left(".concat(this.content.toTex(options), "\\right)");
        }

        return this.content.toTex(options);
      };

      return ParenthesisNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$35 = 'RangeNode';
    var dependencies$36 = ['Node'];
    var createRangeNode =
    /* #__PURE__ */
    factory(name$35, dependencies$36, function (_ref) {
      var Node = _ref.Node;

      /**
       * @constructor RangeNode
       * @extends {Node}
       * create a range
       * @param {Node} start  included lower-bound
       * @param {Node} end    included upper-bound
       * @param {Node} [step] optional step
       */
      function RangeNode(start, end, step) {
        if (!(this instanceof RangeNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate inputs


        if (!isNode(start)) throw new TypeError('Node expected');
        if (!isNode(end)) throw new TypeError('Node expected');
        if (step && !isNode(step)) throw new TypeError('Node expected');
        if (arguments.length > 3) throw new Error('Too many arguments');
        this.start = start; // included lower-bound

        this.end = end; // included upper-bound

        this.step = step || null; // optional step
      }

      RangeNode.prototype = new Node();
      RangeNode.prototype.type = 'RangeNode';
      RangeNode.prototype.isRangeNode = true;
      /**
       * Check whether the RangeNode needs the `end` symbol to be defined.
       * This end is the size of the Matrix in current dimension.
       * @return {boolean}
       */

      RangeNode.prototype.needsEnd = function () {
        // find all `end` symbols in this RangeNode
        var endSymbols = this.filter(function (node) {
          return isSymbolNode(node) && node.name === 'end';
        });
        return endSymbols.length > 0;
      };
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */


      RangeNode.prototype._compile = function (math, argNames) {
        var range = math.range;

        var evalStart = this.start._compile(math, argNames);

        var evalEnd = this.end._compile(math, argNames);

        if (this.step) {
          var evalStep = this.step._compile(math, argNames);

          return function evalRangeNode(scope, args, context) {
            return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
          };
        } else {
          return function evalRangeNode(scope, args, context) {
            return range(evalStart(scope, args, context), evalEnd(scope, args, context));
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      RangeNode.prototype.forEach = function (callback) {
        callback(this.start, 'start', this);
        callback(this.end, 'end', this);

        if (this.step) {
          callback(this.step, 'step', this);
        }
      };
      /**
       * Create a new RangeNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {RangeNode} Returns a transformed copy of the node
       */


      RangeNode.prototype.map = function (callback) {
        return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {RangeNode}
       */


      RangeNode.prototype.clone = function () {
        return new RangeNode(this.start, this.end, this.step && this.step);
      };
      /**
       * Calculate the necessary parentheses
       * @param {Node} node
       * @param {string} parenthesis
       * @return {Object} parentheses
       * @private
       */


      function calculateNecessaryParentheses(node, parenthesis) {
        var precedence = getPrecedence(node, parenthesis);
        var parens = {};
        var startPrecedence = getPrecedence(node.start, parenthesis);
        parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

        if (node.step) {
          var stepPrecedence = getPrecedence(node.step, parenthesis);
          parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
        }

        var endPrecedence = getPrecedence(node.end, parenthesis);
        parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
        return parens;
      }
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      RangeNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

        var str;
        var start = this.start.toString(options);

        if (parens.start) {
          start = '(' + start + ')';
        }

        str = start;

        if (this.step) {
          var step = this.step.toString(options);

          if (parens.step) {
            step = '(' + step + ')';
          }

          str += ':' + step;
        }

        var end = this.end.toString(options);

        if (parens.end) {
          end = '(' + end + ')';
        }

        str += ':' + end;
        return str;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      RangeNode.prototype.toJSON = function () {
        return {
          mathjs: 'RangeNode',
          start: this.start,
          end: this.end,
          step: this.step
        };
      };
      /**
       * Instantiate an RangeNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
       *                       where mathjs is optional
       * @returns {RangeNode}
       */


      RangeNode.fromJSON = function (json) {
        return new RangeNode(json.start, json.end, json.step);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      RangeNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

        var str;
        var start = this.start.toHTML(options);

        if (parens.start) {
          start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        str = start;

        if (this.step) {
          var step = this.step.toHTML(options);

          if (parens.step) {
            step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
          }

          str += '<span class="math-operator math-range-operator">:</span>' + step;
        }

        var end = this.end.toHTML(options);

        if (parens.end) {
          end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        str += '<span class="math-operator math-range-operator">:</span>' + end;
        return str;
      };
      /**
       * Get LaTeX representation
       * @params {Object} options
       * @return {string} str
       */


      RangeNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis);
        var str = this.start.toTex(options);

        if (parens.start) {
          str = "\\left(".concat(str, "\\right)");
        }

        if (this.step) {
          var step = this.step.toTex(options);

          if (parens.step) {
            step = "\\left(".concat(step, "\\right)");
          }

          str += ':' + step;
        }

        var end = this.end.toTex(options);

        if (parens.end) {
          end = "\\left(".concat(end, "\\right)");
        }

        str += ':' + end;
        return str;
      };

      return RangeNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$36 = 'RelationalNode';
    var dependencies$37 = ['Node'];
    var createRelationalNode =
    /* #__PURE__ */
    factory(name$36, dependencies$37, function (_ref) {
      var Node = _ref.Node;

      /**
       * A node representing a chained conditional expression, such as 'x > y > z'
       *
       * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
       * @param {Node[]} params   The parameters that will be compared
       *
       * @constructor RelationalNode
       * @extends {Node}
       */
      function RelationalNode(conditionals, params) {
        if (!(this instanceof RelationalNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
        if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
        if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
        this.conditionals = conditionals;
        this.params = params;
      }

      RelationalNode.prototype = new Node();
      RelationalNode.prototype.type = 'RelationalNode';
      RelationalNode.prototype.isRelationalNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      RelationalNode.prototype._compile = function (math, argNames) {
        var self = this;
        var compiled = this.params.map(function (p) {
          return p._compile(math, argNames);
        });
        return function evalRelationalNode(scope, args, context) {
          var evalLhs;
          var evalRhs = compiled[0](scope, args, context);

          for (var i = 0; i < self.conditionals.length; i++) {
            evalLhs = evalRhs;
            evalRhs = compiled[i + 1](scope, args, context);
            var condFn = getSafeProperty(math, self.conditionals[i]);

            if (!condFn(evalLhs, evalRhs)) {
              return false;
            }
          }

          return true;
        };
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      RelationalNode.prototype.forEach = function (callback) {
        var _this = this;

        this.params.forEach(function (n, i) {
          return callback(n, 'params[' + i + ']', _this);
        }, this);
      };
      /**
       * Create a new RelationalNode having its childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {RelationalNode} Returns a transformed copy of the node
       */


      RelationalNode.prototype.map = function (callback) {
        var _this2 = this;

        return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {
          return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));
        }, this));
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {RelationalNode}
       */


      RelationalNode.prototype.clone = function () {
        return new RelationalNode(this.conditionals, this.params);
      };
      /**
       * Get string representation.
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype._toString = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
        });
        var operatorMap = {
          equal: '==',
          unequal: '!=',
          smaller: '<',
          larger: '>',
          smallerEq: '<=',
          largerEq: '>='
        };
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
        }

        return ret;
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      RelationalNode.prototype.toJSON = function () {
        return {
          mathjs: 'RelationalNode',
          conditionals: this.conditionals,
          params: this.params
        };
      };
      /**
       * Instantiate a RelationalNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
       *                       where mathjs is optional
       * @returns {RelationalNode}
       */


      RelationalNode.fromJSON = function (json) {
        return new RelationalNode(json.conditionals, json.params);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype.toHTML = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
        });
        var operatorMap = {
          equal: '==',
          unequal: '!=',
          smaller: '<',
          larger: '>',
          smallerEq: '<=',
          largerEq: '>='
        };
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$2(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
        }

        return ret;
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      RelationalNode.prototype._toTex = function (options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function (p, index) {
          var paramPrecedence = getPrecedence(p, parenthesis);
          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
        });
        var ret = paramStrings[0];

        for (var i = 0; i < this.conditionals.length; i++) {
          ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];
        }

        return ret;
      };

      return RelationalNode;
    }, {
      isClass: true,
      isNode: true
    });

    var name$37 = 'SymbolNode';
    var dependencies$38 = ['math', '?Unit', 'Node'];
    var createSymbolNode =
    /* #__PURE__ */
    factory(name$37, dependencies$38, function (_ref) {
      var math = _ref.math,
          Unit = _ref.Unit,
          Node = _ref.Node;

      /**
       * Check whether some name is a valueless unit like "inch".
       * @param {string} name
       * @return {boolean}
       */
      function isValuelessUnit(name) {
        return Unit ? Unit.isValuelessUnit(name) : false;
      }
      /**
       * @constructor SymbolNode
       * @extends {Node}
       * A symbol node can hold and resolve a symbol
       * @param {string} name
       * @extends {Node}
       */


      function SymbolNode(name) {
        if (!(this instanceof SymbolNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        } // validate input


        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        this.name = name;
      }

      SymbolNode.prototype = new Node();
      SymbolNode.prototype.type = 'SymbolNode';
      SymbolNode.prototype.isSymbolNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      SymbolNode.prototype._compile = function (math, argNames) {
        var name = this.name;

        if (argNames[name] === true) {
          // this is a FunctionAssignment argument
          // (like an x when inside the expression of a function assignment `f(x) = ...`)
          return function (scope, args, context) {
            return args[name];
          };
        } else if (name in math) {
          return function (scope, args, context) {
            return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);
          };
        } else {
          var isUnit = isValuelessUnit(name);
          return function (scope, args, context) {
            return name in scope ? getSafeProperty(scope, name) : isUnit ? new Unit(null, name) : undef(name);
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

      /**
       * Create a new SymbolNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node) : Node} callback
       * @returns {SymbolNode} Returns a clone of the node
       */
      ;

      SymbolNode.prototype.map = function (callback) {
        return this.clone();
      };
      /**
       * Throws an error 'Undefined symbol {name}'
       * @param {string} name
       */


      function undef(name) {
        throw new Error('Undefined symbol ' + name);
      }
      /**
       * Create a clone of this node, a shallow copy
       * @return {SymbolNode}
       */


      SymbolNode.prototype.clone = function () {
        return new SymbolNode(this.name);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype._toString = function (options) {
        return this.name;
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype.toHTML = function (options) {
        var name = escape$2(this.name);

        if (name === 'true' || name === 'false') {
          return '<span class="math-symbol math-boolean">' + name + '</span>';
        } else if (name === 'i') {
          return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
        } else if (name === 'Infinity') {
          return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
        } else if (name === 'NaN') {
          return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
        } else if (name === 'null') {
          return '<span class="math-symbol math-null-symbol">' + name + '</span>';
        } else if (name === 'undefined') {
          return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
        }

        return '<span class="math-symbol">' + name + '</span>';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      SymbolNode.prototype.toJSON = function () {
        return {
          mathjs: 'SymbolNode',
          name: this.name
        };
      };
      /**
       * Instantiate a SymbolNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "SymbolNode", name: "x"}`,
       *                       where mathjs is optional
       * @returns {SymbolNode}
       */


      SymbolNode.fromJSON = function (json) {
        return new SymbolNode(json.name);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       * @override
       */


      SymbolNode.prototype._toTex = function (options) {
        var isUnit = false;

        if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
          isUnit = true;
        }

        var symbol = toSymbol(this.name, isUnit);

        if (symbol[0] === '\\') {
          // no space needed if the symbol starts with '\'
          return symbol;
        } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


        return ' ' + symbol;
      };

      return SymbolNode;
    }, {
      isClass: true,
      isNode: true
    });

    function _typeof$b(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$b = function _typeof(obj) { return typeof obj; }; } else { _typeof$b = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$b(obj); }

    function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
    var name$38 = 'FunctionNode';
    var dependencies$39 = ['math', 'Node', 'SymbolNode'];
    var createFunctionNode =
    /* #__PURE__ */
    factory(name$38, dependencies$39, function (_ref) {
      var math = _ref.math,
          Node = _ref.Node,
          SymbolNode = _ref.SymbolNode;

      /**
       * @constructor FunctionNode
       * @extends {./Node}
       * invoke a list with arguments on a node
       * @param {./Node | string} fn Node resolving with a function on which to invoke
       *                             the arguments, typically a SymboNode or AccessorNode
       * @param {./Node[]} args
       */
      function FunctionNode(fn, args) {
        if (!(this instanceof FunctionNode)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (typeof fn === 'string') {
          fn = new SymbolNode(fn);
        } // validate input


        if (!isNode(fn)) throw new TypeError('Node expected as parameter "fn"');

        if (!Array.isArray(args) || !args.every(isNode)) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }

        this.fn = fn;
        this.args = args || []; // readonly property name

        Object.defineProperty(this, 'name', {
          get: function () {
            return this.fn.name || '';
          }.bind(this),
          set: function set() {
            throw new Error('Cannot assign a new name, name is read-only');
          }
        }); // TODO: deprecated since v3, remove some day

        var deprecated = function deprecated() {
          throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
        };

        Object.defineProperty(this, 'object', {
          get: deprecated,
          set: deprecated
        });
      }

      FunctionNode.prototype = new Node();
      FunctionNode.prototype.type = 'FunctionNode';
      FunctionNode.prototype.isFunctionNode = true;
      /**
       * Compile a node into a JavaScript function.
       * This basically pre-calculates as much as possible and only leaves open
       * calculations which depend on a dynamic scope with variables.
       * @param {Object} math     Math.js namespace with functions and constants.
       * @param {Object} argNames An object with argument names as key and `true`
       *                          as value. Used in the SymbolNode to optimize
       *                          for arguments from user assigned functions
       *                          (see FunctionAssignmentNode) or special symbols
       *                          like `end` (see IndexNode).
       * @return {function} Returns a function which can be called like:
       *                        evalNode(scope: Object, args: Object, context: *)
       */

      FunctionNode.prototype._compile = function (math, argNames) {
        if (!(this instanceof FunctionNode)) {
          throw new TypeError('No valid FunctionNode');
        } // compile arguments


        var evalArgs = map$4(this.args, function (arg) {
          return arg._compile(math, argNames);
        });

        if (isSymbolNode(this.fn)) {
          // we can statically determine whether the function has an rawArgs property
          var _name = this.fn.name;
          var fn = _name in math ? getSafeProperty(math, _name) : undefined;
          var isRaw = typeof fn === 'function' && fn.rawArgs === true;

          if (isRaw) {
            // pass unevaluated parameters (nodes) to the function
            // "raw" evaluation
            var rawArgs = this.args;
            return function evalFunctionNode(scope, args, context) {
              return (_name in scope ? getSafeProperty(scope, _name) : fn)(rawArgs, math, _extends$2({}, scope, args));
            };
          } else {
            // "regular" evaluation
            if (evalArgs.length === 1) {
              var evalArg0 = evalArgs[0];
              return function evalFunctionNode(scope, args, context) {
                return (_name in scope ? getSafeProperty(scope, _name) : fn)(evalArg0(scope, args, context));
              };
            } else if (evalArgs.length === 2) {
              var _evalArg = evalArgs[0];
              var evalArg1 = evalArgs[1];
              return function evalFunctionNode(scope, args, context) {
                return (_name in scope ? getSafeProperty(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
              };
            } else {
              return function evalFunctionNode(scope, args, context) {
                return (_name in scope ? getSafeProperty(scope, _name) : fn).apply(null, map$4(evalArgs, function (evalArg) {
                  return evalArg(scope, args, context);
                }));
              };
            }
          }
        } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
          // execute the function with the right context: the object of the AccessorNode
          var evalObject = this.fn.object._compile(math, argNames);

          var prop = this.fn.index.getObjectProperty();
          var _rawArgs = this.args;
          return function evalFunctionNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            validateSafeMethod(object, prop);
            var isRaw = object[prop] && object[prop].rawArgs;
            return isRaw ? object[prop](_rawArgs, math, _extends$2({}, scope, args)) // "raw" evaluation
            : object[prop].apply(object, map$4(evalArgs, function (evalArg) {
              // "regular" evaluation
              return evalArg(scope, args, context);
            }));
          };
        } else {
          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
          // we have to dynamically determine whether the function has a rawArgs property
          var evalFn = this.fn._compile(math, argNames);

          var _rawArgs2 = this.args;
          return function evalFunctionNode(scope, args, context) {
            var fn = evalFn(scope, args, context);
            var isRaw = fn && fn.rawArgs;
            return isRaw ? fn(_rawArgs2, math, _extends$2({}, scope, args)) // "raw" evaluation
            : fn.apply(fn, map$4(evalArgs, function (evalArg) {
              // "regular" evaluation
              return evalArg(scope, args, context);
            }));
          };
        }
      };
      /**
       * Execute a callback for each of the child nodes of this node
       * @param {function(child: Node, path: string, parent: Node)} callback
       */


      FunctionNode.prototype.forEach = function (callback) {
        callback(this.fn, 'fn', this);

        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], 'args[' + i + ']', this);
        }
      };
      /**
       * Create a new FunctionNode having it's childs be the results of calling
       * the provided callback function for each of the childs of the original node.
       * @param {function(child: Node, path: string, parent: Node): Node} callback
       * @returns {FunctionNode} Returns a transformed copy of the node
       */


      FunctionNode.prototype.map = function (callback) {
        var fn = this._ifNode(callback(this.fn, 'fn', this));

        var args = [];

        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        }

        return new FunctionNode(fn, args);
      };
      /**
       * Create a clone of this node, a shallow copy
       * @return {FunctionNode}
       */


      FunctionNode.prototype.clone = function () {
        return new FunctionNode(this.fn, this.args.slice(0));
      }; // backup Node's toString function
      // @private


      var nodeToString = FunctionNode.prototype.toString;
      /**
       * Get string representation. (wrapper function)
       * This overrides parts of Node's toString function.
       * If callback is an object containing callbacks, it
       * calls the correct callback for the current node,
       * otherwise it falls back to calling Node's toString
       * function.
       *
       * @param {Object} options
       * @return {string} str
       * @override
       */

      FunctionNode.prototype.toString = function (options) {
        var customString;
        var name = this.fn.toString(options);

        if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$1(options.handler, name)) {
          // callback is a map of callback functions
          customString = options.handler[name](this, options);
        }

        if (typeof customString !== 'undefined') {
          return customString;
        } // fall back to Node's toString


        return nodeToString.call(this, options);
      };
      /**
       * Get string representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype._toString = function (options) {
        var args = this.args.map(function (arg) {
          return arg.toString(options);
        });
        var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

        return fn + '(' + args.join(', ') + ')';
      };
      /**
       * Get a JSON representation of the node
       * @returns {Object}
       */


      FunctionNode.prototype.toJSON = function () {
        return {
          mathjs: 'FunctionNode',
          fn: this.fn,
          args: this.args
        };
      };
      /**
       * Instantiate an AssignmentNode from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
       *                       where mathjs is optional
       * @returns {FunctionNode}
       */


      FunctionNode.fromJSON = function (json) {
        return new FunctionNode(json.fn, json.args);
      };
      /**
       * Get HTML representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype.toHTML = function (options) {
        var args = this.args.map(function (arg) {
          return arg.toHTML(options);
        }); // format the arguments like "add(2, 4.2)"

        return '<span class="math-function">' + escape$2(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      };
      /*
       * Expand a LaTeX template
       *
       * @param {string} template
       * @param {Node} node
       * @param {Object} options
       * @private
       **/


      function expandTemplate(template, node, options) {
        var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
        // while submatching identifier and 2 (in the second case)

        var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
        var inputPos = 0; // position in the input string

        var match;

        while ((match = regex.exec(template)) !== null) {
          // go through all matches
          // add everything in front of the match to the LaTeX string
          latex += template.substring(inputPos, match.index);
          inputPos = match.index;

          if (match[0] === '$$') {
            // escaped dollar sign
            latex += '$';
            inputPos++;
          } else {
            // template parameter
            inputPos += match[0].length;
            var property = node[match[1]];

            if (!property) {
              throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
            }

            if (match[2] === undefined) {
              // no square brackets
              switch (_typeof$b(property)) {
                case 'string':
                  latex += property;
                  break;

                case 'object':
                  if (isNode(property)) {
                    latex += property.toTex(options);
                  } else if (Array.isArray(property)) {
                    // make array of Nodes into comma separated list
                    latex += property.map(function (arg, index) {
                      if (isNode(arg)) {
                        return arg.toTex(options);
                      }

                      throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                    }).join(',');
                  } else {
                    throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                  }

                  break;

                default:
                  throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }
            } else {
              // with square brackets
              if (isNode(property[match[2]] && property[match[2]])) {
                latex += property[match[2]].toTex(options);
              } else {
                throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
              }
            }
          }
        }

        latex += template.slice(inputPos); // append rest of the template

        return latex;
      } // backup Node's toTex function
      // @private


      var nodeToTex = FunctionNode.prototype.toTex;
      /**
       * Get LaTeX representation. (wrapper function)
       * This overrides parts of Node's toTex function.
       * If callback is an object containing callbacks, it
       * calls the correct callback for the current node,
       * otherwise it falls back to calling Node's toTex
       * function.
       *
       * @param {Object} options
       * @return {string}
       */

      FunctionNode.prototype.toTex = function (options) {
        var customTex;

        if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$1(options.handler, this.name)) {
          // callback is a map of callback functions
          customTex = options.handler[this.name](this, options);
        }

        if (typeof customTex !== 'undefined') {
          return customTex;
        } // fall back to Node's toTex


        return nodeToTex.call(this, options);
      };
      /**
       * Get LaTeX representation
       * @param {Object} options
       * @return {string} str
       */


      FunctionNode.prototype._toTex = function (options) {
        var args = this.args.map(function (arg) {
          // get LaTeX of the arguments
          return arg.toTex(options);
        });
        var latexConverter;

        if (latexFunctions[this.name]) {
          latexConverter = latexFunctions[this.name];
        } // toTex property on the function itself


        if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof$b(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
          // .toTex is a callback function
          latexConverter = math[this.name].toTex;
        }

        var customToTex;

        switch (_typeof$b(latexConverter)) {
          case 'function':
            // a callback function
            customToTex = latexConverter(this, options);
            break;

          case 'string':
            // a template string
            customToTex = expandTemplate(latexConverter, this, options);
            break;

          case 'object':
            // an object with different "converters" for different numbers of arguments
            switch (_typeof$b(latexConverter[args.length])) {
              case 'function':
                customToTex = latexConverter[args.length](this, options);
                break;

              case 'string':
                customToTex = expandTemplate(latexConverter[args.length], this, options);
                break;
            }

        }

        if (typeof customToTex !== 'undefined') {
          return customToTex;
        }

        return expandTemplate(defaultTemplate, this, options);
      };
      /**
       * Get identifier.
       * @return {string}
       */


      FunctionNode.prototype.getIdentifier = function () {
        return this.type + ':' + this.name;
      };

      return FunctionNode;
    }, {
      isClass: true,
      isNode: true
    });

    function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
    var name$39 = 'parse';
    var dependencies$3a = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
    var createParse =
    /* #__PURE__ */
    factory(name$39, dependencies$3a, function (_ref) {
      var typed = _ref.typed,
          numeric = _ref.numeric,
          config = _ref.config,
          AccessorNode = _ref.AccessorNode,
          ArrayNode = _ref.ArrayNode,
          AssignmentNode = _ref.AssignmentNode,
          BlockNode = _ref.BlockNode,
          ConditionalNode = _ref.ConditionalNode,
          ConstantNode = _ref.ConstantNode,
          FunctionAssignmentNode = _ref.FunctionAssignmentNode,
          FunctionNode = _ref.FunctionNode,
          IndexNode = _ref.IndexNode,
          ObjectNode = _ref.ObjectNode,
          OperatorNode = _ref.OperatorNode,
          ParenthesisNode = _ref.ParenthesisNode,
          RangeNode = _ref.RangeNode,
          RelationalNode = _ref.RelationalNode,
          SymbolNode = _ref.SymbolNode;

      /**
       * Parse an expression. Returns a node tree, which can be evaluated by
       * invoking node.evaluate().
       *
       * Note the evaluating arbitrary expressions may involve security risks,
       * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
       *
       * Syntax:
       *
       *     math.parse(expr)
       *     math.parse(expr, options)
       *     math.parse([expr1, expr2, expr3, ...])
       *     math.parse([expr1, expr2, expr3, ...], options)
       *
       * Example:
       *
       *     const node1 = math.parse('sqrt(3^2 + 4^2)')
       *     node1.compile().evaluate() // 5
       *
       *     let scope = {a:3, b:4}
       *     const node2 = math.parse('a * b') // 12
       *     const code2 = node2.compile()
       *     code2.evaluate(scope) // 12
       *     scope.a = 5
       *     code2.evaluate(scope) // 20
       *
       *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
       *     nodes[2].compile().evaluate() // 12
       *
       * See also:
       *
       *     evaluate, compile
       *
       * @param {string | string[] | Matrix} expr          Expression to be parsed
       * @param {{nodes: Object<string, Node>}} [options]  Available options:
       *                                                   - `nodes` a set of custom nodes
       * @return {Node | Node[]} node
       * @throws {Error}
       */
      var parse = typed(name$39, {
        string: function string(expression) {
          return parseStart(expression, {});
        },
        'Array | Matrix': function ArrayMatrix(expressions) {
          return parseMultiple(expressions, {});
        },
        'string, Object': function stringObject(expression, options) {
          var extraNodes = options.nodes !== undefined ? options.nodes : {};
          return parseStart(expression, extraNodes);
        },
        'Array | Matrix, Object': parseMultiple
      });

      function parseMultiple(expressions) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

        return deepMap(expressions, function (elem) {
          if (typeof elem !== 'string') throw new TypeError('String expected');
          return parseStart(elem, extraNodes);
        });
      } // token types enumeration


      var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        NUMBER: 2,
        SYMBOL: 3,
        UNKNOWN: 4
      }; // map with all delimiters

      var DELIMITERS = {
        ',': true,
        '(': true,
        ')': true,
        '[': true,
        ']': true,
        '{': true,
        '}': true,
        '"': true,
        '\'': true,
        ';': true,
        '+': true,
        '-': true,
        '*': true,
        '.*': true,
        '/': true,
        './': true,
        '%': true,
        '^': true,
        '.^': true,
        '~': true,
        '!': true,
        '&': true,
        '|': true,
        '^|': true,
        '=': true,
        ':': true,
        '?': true,
        '==': true,
        '!=': true,
        '<': true,
        '>': true,
        '<=': true,
        '>=': true,
        '<<': true,
        '>>': true,
        '>>>': true
      }; // map with all named delimiters

      var NAMED_DELIMITERS = {
        mod: true,
        to: true,
        "in": true,
        and: true,
        xor: true,
        or: true,
        not: true
      };
      var CONSTANTS = {
        "true": true,
        "false": false,
        "null": null,
        undefined: undefined
      };
      var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

      function initialState() {
        return {
          extraNodes: {},
          // current extra nodes, must be careful not to mutate
          expression: '',
          // current expression
          comment: '',
          // last parsed comment
          index: 0,
          // current index in expr
          token: '',
          // current token
          tokenType: TOKENTYPE.NULL,
          // type of the token
          nestingLevel: 0,
          // level of nesting inside parameters, used to ignore newline characters
          conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

        };
      }
      /**
       * View upto `length` characters of the expression starting at the current character.
       *
       * @param {Object} state
       * @param {number} [length=1] Number of characters to view
       * @returns {string}
       * @private
       */


      function currentString(state, length) {
        return state.expression.substr(state.index, length);
      }
      /**
       * View the current character. Returns '' if end of expression is reached.
       *
       * @param {Object} state
       * @returns {string}
       * @private
       */


      function currentCharacter(state) {
        return currentString(state, 1);
      }
      /**
       * Get the next character from the expression.
       * The character is stored into the char c. If the end of the expression is
       * reached, the function puts an empty string in c.
       * @private
       */


      function next(state) {
        state.index++;
      }
      /**
       * Preview the previous character from the expression.
       * @return {string} cNext
       * @private
       */


      function prevCharacter(state) {
        return state.expression.charAt(state.index - 1);
      }
      /**
       * Preview the next character from the expression.
       * @return {string} cNext
       * @private
       */


      function nextCharacter(state) {
        return state.expression.charAt(state.index + 1);
      }
      /**
       * Get next token in the current string expr.
       * The token and token type are available as token and tokenType
       * @private
       */


      function getToken(state) {
        state.tokenType = TOKENTYPE.NULL;
        state.token = '';
        state.comment = ''; // skip over whitespaces
        // space, tab, and newline when inside parameters

        while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
          next(state);
        } // skip comment


        if (currentCharacter(state) === '#') {
          while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
            state.comment += currentCharacter(state);
            next(state);
          }
        } // check for end of expression


        if (currentCharacter(state) === '') {
          // token is still empty
          state.tokenType = TOKENTYPE.DELIMITER;
          return;
        } // check for new line character


        if (currentCharacter(state) === '\n' && !state.nestingLevel) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = currentCharacter(state);
          next(state);
          return;
        }

        var c1 = currentCharacter(state);
        var c2 = currentString(state, 2);
        var c3 = currentString(state, 3);

        if (c3.length === 3 && DELIMITERS[c3]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c3;
          next(state);
          next(state);
          next(state);
          return;
        } // check for delimiters consisting of 2 characters


        if (c2.length === 2 && DELIMITERS[c2]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c2;
          next(state);
          next(state);
          return;
        } // check for delimiters consisting of 1 character


        if (DELIMITERS[c1]) {
          state.tokenType = TOKENTYPE.DELIMITER;
          state.token = c1;
          next(state);
          return;
        } // check for a number


        if (parse.isDigitDot(c1)) {
          state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot

          if (currentCharacter(state) === '.') {
            state.token += currentCharacter(state);
            next(state);

            if (!parse.isDigit(currentCharacter(state))) {
              // this is no number, it is just a dot (can be dot notation)
              state.tokenType = TOKENTYPE.DELIMITER;
            }
          } else {
            while (parse.isDigit(currentCharacter(state))) {
              state.token += currentCharacter(state);
              next(state);
            }

            if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
              state.token += currentCharacter(state);
              next(state);
            }
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


          if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
            if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
              state.token += currentCharacter(state);
              next(state);

              if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
                state.token += currentCharacter(state);
                next(state);
              } // Scientific notation MUST be followed by an exponent


              if (!parse.isDigit(currentCharacter(state))) {
                throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
              }

              while (parse.isDigit(currentCharacter(state))) {
                state.token += currentCharacter(state);
                next(state);
              }

              if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
                throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
              }
            } else if (nextCharacter(state) === '.') {
              next(state);
              throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
            }
          }

          return;
        } // check for variables, functions, named operators


        if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
          while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (hasOwnProperty$1(NAMED_DELIMITERS, state.token)) {
            state.tokenType = TOKENTYPE.DELIMITER;
          } else {
            state.tokenType = TOKENTYPE.SYMBOL;
          }

          return;
        } // something unknown is found, wrong characters -> a syntax error


        state.tokenType = TOKENTYPE.UNKNOWN;

        while (currentCharacter(state) !== '') {
          state.token += currentCharacter(state);
          next(state);
        }

        throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
      }
      /**
       * Get next token and skip newline tokens
       */


      function getTokenSkipNewline(state) {
        do {
          getToken(state);
        } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

      }
      /**
       * Open parameters.
       * New line characters will be ignored until closeParams(state) is called
       */


      function openParams(state) {
        state.nestingLevel++;
      }
      /**
       * Close parameters.
       * New line characters will no longer be ignored
       */


      function closeParams(state) {
        state.nestingLevel--;
      }
      /**
       * Checks whether the current character `c` is a valid alpha character:
       *
       * - A latin letter (upper or lower case) Ascii: a-z, A-Z
       * - An underscore                        Ascii: _
       * - A dollar sign                        Ascii: $
       * - A latin letter with accents          Unicode: \u00C0 - \u02AF
       * - A greek letter                       Unicode: \u0370 - \u03FF
       * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
       *
       * The previous and next characters are needed to determine whether
       * this character is part of a unicode surrogate pair.
       *
       * @param {string} c      Current character in the expression
       * @param {string} cPrev  Previous character
       * @param {string} cNext  Next character
       * @return {boolean}
       */


      parse.isAlpha = function isAlpha(c, cPrev, cNext) {
        return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
      };
      /**
       * Test whether a character is a valid latin, greek, or letter-like character
       * @param {string} c
       * @return {boolean}
       */


      parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
        return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
      };
      /**
       * Test whether two given 16 bit characters form a surrogate pair of a
       * unicode math symbol.
       *
       * https://unicode-table.com/en/
       * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
       *
       * Note: In ES6 will be unicode aware:
       * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
       * https://mathiasbynens.be/notes/es6-unicode-regex
       *
       * @param {string} high
       * @param {string} low
       * @return {boolean}
       */


      parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
      };
      /**
       * Check whether given character c is a white space character: space, tab, or enter
       * @param {string} c
       * @param {number} nestingLevel
       * @return {boolean}
       */


      parse.isWhitespace = function isWhitespace(c, nestingLevel) {
        // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
        return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
      };
      /**
       * Test whether the character c is a decimal mark (dot).
       * This is the case when it's not the start of a delimiter '.*', './', or '.^'
       * @param {string} c
       * @param {string} cNext
       * @return {boolean}
       */


      parse.isDecimalMark = function isDecimalMark(c, cNext) {
        return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
      };
      /**
       * checks if the given char c is a digit or dot
       * @param {string} c   a string with one character
       * @return {boolean}
       */


      parse.isDigitDot = function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
      };
      /**
       * checks if the given char c is a digit
       * @param {string} c   a string with one character
       * @return {boolean}
       */


      parse.isDigit = function isDigit(c) {
        return c >= '0' && c <= '9';
      };
      /**
       * Start of the parse levels below, in order of precedence
       * @return {Node} node
       * @private
       */


      function parseStart(expression, extraNodes) {
        var state = initialState();

        _extends$3(state, {
          expression: expression,
          extraNodes: extraNodes
        });

        getToken(state);
        var node = parseBlock(state); // check for garbage at the end of the expression
        // an expression ends with a empty character '' and tokenType DELIMITER

        if (state.token !== '') {
          if (state.tokenType === TOKENTYPE.DELIMITER) {
            // user entered a not existing operator like "//"
            // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
            throw createError(state, 'Unexpected operator ' + state.token);
          } else {
            throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
          }
        }

        return node;
      }
      /**
       * Parse a block with expressions. Expressions can be separated by a newline
       * character '\n', or by a semicolon ';'. In case of a semicolon, no output
       * of the preceding line is returned.
       * @return {Node} node
       * @private
       */


      function parseBlock(state) {
        var node;
        var blocks = [];
        var visible;

        if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
          node = parseAssignment(state);
          node.comment = state.comment;
        } // TODO: simplify this loop


        while (state.token === '\n' || state.token === ';') {
          // eslint-disable-line no-unmodified-loop-condition
          if (blocks.length === 0 && node) {
            visible = state.token !== ';';
            blocks.push({
              node: node,
              visible: visible
            });
          }

          getToken(state);

          if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
            node = parseAssignment(state);
            node.comment = state.comment;
            visible = state.token !== ';';
            blocks.push({
              node: node,
              visible: visible
            });
          }
        }

        if (blocks.length > 0) {
          return new BlockNode(blocks);
        } else {
          if (!node) {
            node = new ConstantNode(undefined);
            node.comment = state.comment;
          }

          return node;
        }
      }
      /**
       * Assignment of a function or variable,
       * - can be a variable like 'a=2.3'
       * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
       * - defining a function like 'f(x) = x^2'
       * @return {Node} node
       * @private
       */


      function parseAssignment(state) {
        var name, args, value, valid;
        var node = parseConditional(state);

        if (state.token === '=') {
          if (isSymbolNode(node)) {
            // parse a variable assignment like 'a = 2/3'
            name = node.name;
            getTokenSkipNewline(state);
            value = parseAssignment(state);
            return new AssignmentNode(new SymbolNode(name), value);
          } else if (isAccessorNode(node)) {
            // parse a matrix subset assignment like 'A[1,2] = 4'
            getTokenSkipNewline(state);
            value = parseAssignment(state);
            return new AssignmentNode(node.object, node.index, value);
          } else if (isFunctionNode(node) && isSymbolNode(node.fn)) {
            // parse function assignment like 'f(x) = x^2'
            valid = true;
            args = [];
            name = node.name;
            node.args.forEach(function (arg, index) {
              if (isSymbolNode(arg)) {
                args[index] = arg.name;
              } else {
                valid = false;
              }
            });

            if (valid) {
              getTokenSkipNewline(state);
              value = parseAssignment(state);
              return new FunctionAssignmentNode(name, args, value);
            }
          }

          throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
        }

        return node;
      }
      /**
       * conditional operation
       *
       *     condition ? truePart : falsePart
       *
       * Note: conditional operator is right-associative
       *
       * @return {Node} node
       * @private
       */


      function parseConditional(state) {
        var node = parseLogicalOr(state);

        while (state.token === '?') {
          // eslint-disable-line no-unmodified-loop-condition
          // set a conditional level, the range operator will be ignored as long
          // as conditionalLevel === state.nestingLevel.
          var prev = state.conditionalLevel;
          state.conditionalLevel = state.nestingLevel;
          getTokenSkipNewline(state);
          var condition = node;
          var trueExpr = parseAssignment(state);
          if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
          state.conditionalLevel = null;
          getTokenSkipNewline(state);
          var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

          node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

          state.conditionalLevel = prev;
        }

        return node;
      }
      /**
       * logical or, 'x or y'
       * @return {Node} node
       * @private
       */


      function parseLogicalOr(state) {
        var node = parseLogicalXor(state);

        while (state.token === 'or') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
        }

        return node;
      }
      /**
       * logical exclusive or, 'x xor y'
       * @return {Node} node
       * @private
       */


      function parseLogicalXor(state) {
        var node = parseLogicalAnd(state);

        while (state.token === 'xor') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
        }

        return node;
      }
      /**
       * logical and, 'x and y'
       * @return {Node} node
       * @private
       */


      function parseLogicalAnd(state) {
        var node = parseBitwiseOr(state);

        while (state.token === 'and') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
        }

        return node;
      }
      /**
       * bitwise or, 'x | y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseOr(state) {
        var node = parseBitwiseXor(state);

        while (state.token === '|') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
        }

        return node;
      }
      /**
       * bitwise exclusive or (xor), 'x ^| y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseXor(state) {
        var node = parseBitwiseAnd(state);

        while (state.token === '^|') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
        }

        return node;
      }
      /**
       * bitwise and, 'x & y'
       * @return {Node} node
       * @private
       */


      function parseBitwiseAnd(state) {
        var node = parseRelational(state);

        while (state.token === '&') {
          // eslint-disable-line no-unmodified-loop-condition
          getTokenSkipNewline(state);
          node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
        }

        return node;
      }
      /**
       * Parse a chained conditional, like 'a > b >= c'
       * @return {Node} node
       */


      function parseRelational(state) {
        var params = [parseShift(state)];
        var conditionals = [];
        var operators = {
          '==': 'equal',
          '!=': 'unequal',
          '<': 'smaller',
          '>': 'larger',
          '<=': 'smallerEq',
          '>=': 'largerEq'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          // eslint-disable-line no-unmodified-loop-condition
          var cond = {
            name: state.token,
            fn: operators[state.token]
          };
          conditionals.push(cond);
          getTokenSkipNewline(state);
          params.push(parseShift(state));
        }

        if (params.length === 1) {
          return params[0];
        } else if (params.length === 2) {
          return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
        } else {
          return new RelationalNode(conditionals.map(function (c) {
            return c.fn;
          }), params);
        }
      }
      /**
       * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
       * @return {Node} node
       * @private
       */


      function parseShift(state) {
        var node, name, fn, params;
        node = parseConversion(state);
        var operators = {
          '<<': 'leftShift',
          '>>': 'rightArithShift',
          '>>>': 'rightLogShift'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);
          params = [node, parseConversion(state)];
          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * conversion operators 'to' and 'in'
       * @return {Node} node
       * @private
       */


      function parseConversion(state) {
        var node, name, fn, params;
        node = parseRange(state);
        var operators = {
          to: 'to',
          "in": 'to' // alias of 'to'

        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);

          if (name === 'in' && state.token === '') {
            // end of expression -> this is the unit 'in' ('inch')
            node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
          } else {
            // operator 'a to b' or 'a in b'
            params = [node, parseRange(state)];
            node = new OperatorNode(name, fn, params);
          }
        }

        return node;
      }
      /**
       * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
       * @return {Node} node
       * @private
       */


      function parseRange(state) {
        var node;
        var params = [];

        if (state.token === ':') {
          // implicit start=1 (one-based)
          node = new ConstantNode(1);
        } else {
          // explicit start
          node = parseAddSubtract(state);
        }

        if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
          // we ignore the range operator when a conditional operator is being processed on the same level
          params.push(node); // parse step and end

          while (state.token === ':' && params.length < 3) {
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);

            if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
              // implicit end
              params.push(new SymbolNode('end'));
            } else {
              // explicit end
              params.push(parseAddSubtract(state));
            }
          }

          if (params.length === 3) {
            // params = [start, step, end]
            node = new RangeNode(params[0], params[2], params[1]); // start, end, step
          } else {
            // length === 2
            // params = [start, end]
            node = new RangeNode(params[0], params[1]); // start, end
          }
        }

        return node;
      }
      /**
       * add or subtract
       * @return {Node} node
       * @private
       */


      function parseAddSubtract(state) {
        var node, name, fn, params;
        node = parseMultiplyDivide(state);
        var operators = {
          '+': 'add',
          '-': 'subtract'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getTokenSkipNewline(state);
          params = [node, parseMultiplyDivide(state)];
          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * multiply, divide, modulus
       * @return {Node} node
       * @private
       */


      function parseMultiplyDivide(state) {
        var node, last, name, fn;
        node = parseImplicitMultiplication(state);
        last = node;
        var operators = {
          '*': 'multiply',
          '.*': 'dotMultiply',
          '/': 'divide',
          './': 'dotDivide',
          '%': 'mod',
          mod: 'mod'
        };

        while (true) {
          if (hasOwnProperty$1(operators, state.token)) {
            // explicit operators
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            last = parseImplicitMultiplication(state);
            node = new OperatorNode(name, fn, [node, last]);
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * implicit multiplication
       * @return {Node} node
       * @private
       */


      function parseImplicitMultiplication(state) {
        var node, last;
        node = parseRule2(state);
        last = node;

        while (true) {
          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !isConstantNode(last) && (!isOperatorNode(last) || last.op === '!') || state.token === '(') {
            // parse implicit multiplication
            //
            // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
            // number:      implicit multiplication like '(2+3)2'
            // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
            last = parseRule2(state);
            node = new OperatorNode('*', 'multiply', [node, last], true
            /* implicit */
            );
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
       * Explicit division gets higher precedence than implicit multiplication
       * when the division matches this pattern: [number] / [number] [symbol]
       * @return {Node} node
       * @private
       */


      function parseRule2(state) {
        var node = parseUnary(state);
        var last = node;
        var tokenStates = [];

        while (true) {
          // Match the "number /" part of the pattern "number / number symbol"
          if (state.token === '/' && isConstantNode(last)) {
            // Look ahead to see if the next token is a number
            tokenStates.push(_extends$3({}, state));
            getTokenSkipNewline(state); // Match the "number / number" part of the pattern

            if (state.tokenType === TOKENTYPE.NUMBER) {
              // Look ahead again
              tokenStates.push(_extends$3({}, state));
              getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

              if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
                // We've matched the pattern "number / number symbol".
                // Rewind once and build the "number / number" node; the symbol will be consumed later
                _extends$3(state, tokenStates.pop());

                tokenStates.pop();
                last = parseUnary(state);
                node = new OperatorNode('/', 'divide', [node, last]);
              } else {
                // Not a match, so rewind
                tokenStates.pop();

                _extends$3(state, tokenStates.pop());

                break;
              }
            } else {
              // Not a match, so rewind
              _extends$3(state, tokenStates.pop());

              break;
            }
          } else {
            break;
          }
        }

        return node;
      }
      /**
       * Unary plus and minus, and logical and bitwise not
       * @return {Node} node
       * @private
       */


      function parseUnary(state) {
        var name, params, fn;
        var operators = {
          '-': 'unaryMinus',
          '+': 'unaryPlus',
          '~': 'bitNot',
          not: 'not'
        };

        if (hasOwnProperty$1(operators, state.token)) {
          fn = operators[state.token];
          name = state.token;
          getTokenSkipNewline(state);
          params = [parseUnary(state)];
          return new OperatorNode(name, fn, params);
        }

        return parsePow(state);
      }
      /**
       * power
       * Note: power operator is right associative
       * @return {Node} node
       * @private
       */


      function parsePow(state) {
        var node, name, fn, params;
        node = parseLeftHandOperators(state);

        if (state.token === '^' || state.token === '.^') {
          name = state.token;
          fn = name === '^' ? 'pow' : 'dotPow';
          getTokenSkipNewline(state);
          params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

          node = new OperatorNode(name, fn, params);
        }

        return node;
      }
      /**
       * Left hand operators: factorial x!, ctranspose x'
       * @return {Node} node
       * @private
       */


      function parseLeftHandOperators(state) {
        var node, name, fn, params;
        node = parseCustomNodes(state);
        var operators = {
          '!': 'factorial',
          '\'': 'ctranspose'
        };

        while (hasOwnProperty$1(operators, state.token)) {
          name = state.token;
          fn = operators[name];
          getToken(state);
          params = [node];
          node = new OperatorNode(name, fn, params);
          node = parseAccessors(state, node);
        }

        return node;
      }
      /**
       * Parse a custom node handler. A node handler can be used to process
       * nodes in a custom way, for example for handling a plot.
       *
       * A handler must be passed as second argument of the parse function.
       * - must extend math.expression.node.Node
       * - must contain a function _compile(defs: Object) : string
       * - must contain a function find(filter: Object) : Node[]
       * - must contain a function toString() : string
       * - the constructor is called with a single argument containing all parameters
       *
       * For example:
       *
       *     nodes = {
       *       'plot': PlotHandler
       *     }
       *
       * The constructor of the handler is called as:
       *
       *     node = new PlotHandler(params)
       *
       * The handler will be invoked when evaluating an expression like:
       *
       *     node = math.parse('plot(sin(x), x)', nodes)
       *
       * @return {Node} node
       * @private
       */


      function parseCustomNodes(state) {
        var params = [];

        if (state.tokenType === TOKENTYPE.SYMBOL && hasOwnProperty$1(state.extraNodes, state.token)) {
          var CustomNode = state.extraNodes[state.token];
          getToken(state); // parse parameters

          if (state.token === '(') {
            params = [];
            openParams(state);
            getToken(state);

            if (state.token !== ')') {
              params.push(parseAssignment(state)); // parse a list with parameters

              while (state.token === ',') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params.push(parseAssignment(state));
              }
            }

            if (state.token !== ')') {
              throw createSyntaxError(state, 'Parenthesis ) expected');
            }

            closeParams(state);
            getToken(state);
          } // create a new custom node
          // noinspection JSValidateTypes


          return new CustomNode(params);
        }

        return parseSymbol(state);
      }
      /**
       * parse symbols: functions, variables, constants, units
       * @return {Node} node
       * @private
       */


      function parseSymbol(state) {
        var node, name;

        if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
          name = state.token;
          getToken(state);

          if (hasOwnProperty$1(CONSTANTS, name)) {
            // true, false, null, ...
            node = new ConstantNode(CONSTANTS[name]);
          } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
            // NaN, Infinity
            node = new ConstantNode(numeric(name, 'number'));
          } else {
            node = new SymbolNode(name);
          } // parse function parameters and matrix index


          node = parseAccessors(state, node);
          return node;
        }

        return parseDoubleQuotesString(state);
      }
      /**
       * parse accessors:
       * - function invocation in round brackets (...), for example sqrt(2)
       * - index enclosed in square brackets [...], for example A[2,3]
       * - dot notation for properties, like foo.bar
       * @param {Object} state
       * @param {Node} node    Node on which to apply the parameters. If there
       *                       are no parameters in the expression, the node
       *                       itself is returned
       * @param {string[]} [types]  Filter the types of notations
       *                            can be ['(', '[', '.']
       * @return {Node} node
       * @private
       */


      function parseAccessors(state, node, types) {
        var params;

        while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
          // eslint-disable-line no-unmodified-loop-condition
          params = [];

          if (state.token === '(') {
            if (isSymbolNode(node) || isAccessorNode(node)) {
              // function invocation like fn(2, 3) or obj.fn(2, 3)
              openParams(state);
              getToken(state);

              if (state.token !== ')') {
                params.push(parseAssignment(state)); // parse a list with parameters

                while (state.token === ',') {
                  // eslint-disable-line no-unmodified-loop-condition
                  getToken(state);
                  params.push(parseAssignment(state));
                }
              }

              if (state.token !== ')') {
                throw createSyntaxError(state, 'Parenthesis ) expected');
              }

              closeParams(state);
              getToken(state);
              node = new FunctionNode(node, params);
            } else {
              // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
              // don't parse it here but let it be handled by parseImplicitMultiplication
              // with correct precedence
              return node;
            }
          } else if (state.token === '[') {
            // index notation like variable[2, 3]
            openParams(state);
            getToken(state);

            if (state.token !== ']') {
              params.push(parseAssignment(state)); // parse a list with parameters

              while (state.token === ',') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params.push(parseAssignment(state));
              }
            }

            if (state.token !== ']') {
              throw createSyntaxError(state, 'Parenthesis ] expected');
            }

            closeParams(state);
            getToken(state);
            node = new AccessorNode(node, new IndexNode(params));
          } else {
            // dot notation like variable.prop
            getToken(state);

            if (state.tokenType !== TOKENTYPE.SYMBOL) {
              throw createSyntaxError(state, 'Property name expected after dot');
            }

            params.push(new ConstantNode(state.token));
            getToken(state);
            var dotNotation = true;
            node = new AccessorNode(node, new IndexNode(params, dotNotation));
          }
        }

        return node;
      }
      /**
       * Parse a double quotes string.
       * @return {Node} node
       * @private
       */


      function parseDoubleQuotesString(state) {
        var node, str;

        if (state.token === '"') {
          str = parseDoubleQuotesStringToken(state); // create constant

          node = new ConstantNode(str); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseSingleQuotesString(state);
      }
      /**
       * Parse a string surrounded by double quotes "..."
       * @return {string}
       */


      function parseDoubleQuotesStringToken(state) {
        var str = '';

        while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
          if (currentCharacter(state) === '\\') {
            // escape character, immediately process the next
            // character to prevent stopping at a next '\"'
            str += currentCharacter(state);
            next(state);
          }

          str += currentCharacter(state);
          next(state);
        }

        getToken(state);

        if (state.token !== '"') {
          throw createSyntaxError(state, 'End of string " expected');
        }

        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
      }
      /**
       * Parse a single quotes string.
       * @return {Node} node
       * @private
       */


      function parseSingleQuotesString(state) {
        var node, str;

        if (state.token === '\'') {
          str = parseSingleQuotesStringToken(state); // create constant

          node = new ConstantNode(str); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseMatrix(state);
      }
      /**
       * Parse a string surrounded by single quotes '...'
       * @return {string}
       */


      function parseSingleQuotesStringToken(state) {
        var str = '';

        while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
          if (currentCharacter(state) === '\\') {
            // escape character, immediately process the next
            // character to prevent stopping at a next '\''
            str += currentCharacter(state);
            next(state);
          }

          str += currentCharacter(state);
          next(state);
        }

        getToken(state);

        if (state.token !== '\'') {
          throw createSyntaxError(state, 'End of string \' expected');
        }

        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
      }
      /**
       * parse the matrix
       * @return {Node} node
       * @private
       */


      function parseMatrix(state) {
        var array, params, rows, cols;

        if (state.token === '[') {
          // matrix [...]
          openParams(state);
          getToken(state);

          if (state.token !== ']') {
            // this is a non-empty matrix
            var row = parseRow(state);

            if (state.token === ';') {
              // 2 dimensional array
              rows = 1;
              params = [row]; // the rows of the matrix are separated by dot-comma's

              while (state.token === ';') {
                // eslint-disable-line no-unmodified-loop-condition
                getToken(state);
                params[rows] = parseRow(state);
                rows++;
              }

              if (state.token !== ']') {
                throw createSyntaxError(state, 'End of matrix ] expected');
              }

              closeParams(state);
              getToken(state); // check if the number of columns matches in all rows

              cols = params[0].items.length;

              for (var r = 1; r < rows; r++) {
                if (params[r].items.length !== cols) {
                  throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
                }
              }

              array = new ArrayNode(params);
            } else {
              // 1 dimensional vector
              if (state.token !== ']') {
                throw createSyntaxError(state, 'End of matrix ] expected');
              }

              closeParams(state);
              getToken(state);
              array = row;
            }
          } else {
            // this is an empty matrix "[ ]"
            closeParams(state);
            getToken(state);
            array = new ArrayNode([]);
          }

          return parseAccessors(state, array);
        }

        return parseObject(state);
      }
      /**
       * Parse a single comma-separated row from a matrix, like 'a, b, c'
       * @return {ArrayNode} node
       */


      function parseRow(state) {
        var params = [parseAssignment(state)];
        var len = 1;

        while (state.token === ',') {
          // eslint-disable-line no-unmodified-loop-condition
          getToken(state); // parse expression

          params[len] = parseAssignment(state);
          len++;
        }

        return new ArrayNode(params);
      }
      /**
       * parse an object, enclosed in angle brackets{...}, for example {value: 2}
       * @return {Node} node
       * @private
       */


      function parseObject(state) {
        if (state.token === '{') {
          openParams(state);
          var key;
          var properties = {};

          do {
            getToken(state);

            if (state.token !== '}') {
              // parse key
              if (state.token === '"') {
                key = parseDoubleQuotesStringToken(state);
              } else if (state.token === '\'') {
                key = parseSingleQuotesStringToken(state);
              } else if (state.tokenType === TOKENTYPE.SYMBOL) {
                key = state.token;
                getToken(state);
              } else {
                throw createSyntaxError(state, 'Symbol or string expected as object key');
              } // parse key/value separator


              if (state.token !== ':') {
                throw createSyntaxError(state, 'Colon : expected after object key');
              }

              getToken(state); // parse key

              properties[key] = parseAssignment(state);
            }
          } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


          if (state.token !== '}') {
            throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
          }

          closeParams(state);
          getToken(state);
          var node = new ObjectNode(properties); // parse index parameters

          node = parseAccessors(state, node);
          return node;
        }

        return parseNumber(state);
      }
      /**
       * parse a number
       * @return {Node} node
       * @private
       */


      function parseNumber(state) {
        var numberStr;

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // this is a number
          numberStr = state.token;
          getToken(state);
          return new ConstantNode(numeric(numberStr, config.number));
        }

        return parseParentheses(state);
      }
      /**
       * parentheses
       * @return {Node} node
       * @private
       */


      function parseParentheses(state) {
        var node; // check if it is a parenthesized expression

        if (state.token === '(') {
          // parentheses (...)
          openParams(state);
          getToken(state);
          node = parseAssignment(state); // start again

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new ParenthesisNode(node);
          node = parseAccessors(state, node);
          return node;
        }

        return parseEnd(state);
      }
      /**
       * Evaluated when the expression is not yet ended but expected to end
       * @return {Node} res
       * @private
       */


      function parseEnd(state) {
        if (state.token === '') {
          // syntax error or unexpected end of expression
          throw createSyntaxError(state, 'Unexpected end of expression');
        } else {
          throw createSyntaxError(state, 'Value expected');
        }
      }
      /**
       * Shortcut for getting the current row value (one based)
       * Returns the line of the currently handled expression
       * @private
       */

      /* TODO: implement keeping track on the row number
      function row () {
        return null
      }
      */

      /**
       * Shortcut for getting the current col value (one based)
       * Returns the column (position) where the last state.token starts
       * @private
       */


      function col(state) {
        return state.index - state.token.length + 1;
      }
      /**
       * Create an error
       * @param {Object} state
       * @param {string} message
       * @return {SyntaxError} instantiated error
       * @private
       */


      function createSyntaxError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error["char"] = c;
        return error;
      }
      /**
       * Create an error
       * @param {Object} state
       * @param {string} message
       * @return {Error} instantiated error
       * @private
       */


      function createError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error["char"] = c;
        return error;
      }

      return parse;
    });

    var name$3a = 'compile';
    var dependencies$3b = ['typed', 'parse'];
    var createCompile =
    /* #__PURE__ */
    factory(name$3a, dependencies$3b, function (_ref) {
      var typed = _ref.typed,
          parse = _ref.parse;

      /**
       * Parse and compile an expression.
       * Returns a an object with a function `evaluate([scope])` to evaluate the
       * compiled expression.
       *
       * Syntax:
       *
       *     math.compile(expr)                       // returns one node
       *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
       *
       * Examples:
       *
       *     const code1 = math.compile('sqrt(3^2 + 4^2)')
       *     code1.evaluate() // 5
       *
       *     let scope = {a: 3, b: 4}
       *     const code2 = math.compile('a * b') // 12
       *     code2.evaluate(scope) // 12
       *     scope.a = 5
       *     code2.evaluate(scope) // 20
       *
       *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
       *     nodes[2].evaluate() // 12
       *
       * See also:
       *
       *    parse, evaluate
       *
       * @param {string | string[] | Array | Matrix} expr
       *            The expression to be compiled
       * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
       *            An object with the compiled expression
       * @throws {Error}
       */
      return typed(name$3a, {
        string: function string(expr) {
          return parse(expr).compile();
        },
        'Array | Matrix': function ArrayMatrix(expr) {
          return deepMap(expr, function (entry) {
            return parse(entry).compile();
          });
        }
      });
    });

    var name$3b = 'evaluate';
    var dependencies$3c = ['typed', 'parse'];
    var createEvaluate =
    /* #__PURE__ */
    factory(name$3b, dependencies$3c, function (_ref) {
      var typed = _ref.typed,
          parse = _ref.parse;

      /**
       * Evaluate an expression.
       *
       * Note the evaluating arbitrary expressions may involve security risks,
       * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
       *
       * Syntax:
       *
       *     math.evaluate(expr)
       *     math.evaluate(expr, scope)
       *     math.evaluate([expr1, expr2, expr3, ...])
       *     math.evaluate([expr1, expr2, expr3, ...], scope)
       *
       * Example:
       *
       *     math.evaluate('(2+3)/4')                // 1.25
       *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
       *     math.evaluate('sqrt(-4)')               // 2i
       *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
       *
       *     let scope = {a:3, b:4}
       *     math.evaluate('a * b', scope)           // 12
       *
       * See also:
       *
       *    parse, compile
       *
       * @param {string | string[] | Matrix} expr   The expression to be evaluated
       * @param {Object} [scope]                    Scope to read/write variables
       * @return {*} The result of the expression
       * @throws {Error}
       */
      return typed(name$3b, {
        string: function string(expr) {
          var scope = {};
          return parse(expr).compile().evaluate(scope);
        },
        'string, Object': function stringObject(expr, scope) {
          return parse(expr).compile().evaluate(scope);
        },
        'Array | Matrix': function ArrayMatrix(expr) {
          var scope = {};
          return deepMap(expr, function (entry) {
            return parse(entry).compile().evaluate(scope);
          });
        },
        'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
          return deepMap(expr, function (entry) {
            return parse(entry).compile().evaluate(scope);
          });
        }
      });
    });

    // For backward compatibility, deprecated since version 6.0.0. Date: 2018-12-05
    var createDeprecatedEval =
    /* #__PURE__ */
    factory('eval', ['evaluate'], function (_ref) {
      var evaluate = _ref.evaluate;
      return function () {
        warnOnce('Function "eval" has been renamed to "evaluate" in v6.0.0, please use the new function instead.');

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return evaluate.apply(evaluate, args);
      };
    });

    var name$3c = 'Parser';
    var dependencies$3d = ['parse'];
    var createParserClass =
    /* #__PURE__ */
    factory(name$3c, dependencies$3d, function (_ref) {
      var parse = _ref.parse;

      /**
       * @constructor Parser
       * Parser contains methods to evaluate or parse expressions, and has a number
       * of convenience methods to get, set, and remove variables from memory. Parser
       * keeps a scope containing variables in memory, which is used for all
       * evaluations.
       *
       * Methods:
       *    const result = parser.evaluate(expr)  // evaluate an expression
       *    const value = parser.get(name)        // retrieve a variable from the parser
       *    const values = parser.getAll()        // retrieve all defined variables
       *    parser.set(name, value)               // set a variable in the parser
       *    parser.remove(name)                   // clear a variable from the
       *                                          // parsers scope
       *    parser.clear()                        // clear the parsers scope
       *
       * Example usage:
       *    const parser = new Parser()
       *    // Note: there is a convenience method which can be used instead:
       *    // const parser = new math.parser()
       *
       *    // evaluate expressions
       *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
       *    parser.evaluate('sqrt(-4)')               // 2i
       *    parser.evaluate('2 inch in cm')           // 5.08 cm
       *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
       *
       *    // define variables and functions
       *    parser.evaluate('x = 7 / 2')              // 3.5
       *    parser.evaluate('x + 3')                  // 6.5
       *    parser.evaluate('function f(x, y) = x^y') // f(x, y)
       *    parser.evaluate('f(2, 3)')                // 8
       *
       *    // get and set variables and functions
       *    const x = parser.get('x')                 // 7
       *    const f = parser.get('f')                 // function
       *    const g = f(3, 2)                         // 9
       *    parser.set('h', 500)
       *    const i = parser.evaluate('h / 2')        // 250
       *    parser.set('hello', function (name) {
       *        return 'hello, ' + name + '!'
       *    })
       *    parser.evaluate('hello("user")')          // "hello, user!"
       *
       *    // clear defined functions and variables
       *    parser.clear()
       *
       */
      function Parser() {
        if (!(this instanceof Parser)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        this.scope = {};
      }
      /**
       * Attach type information
       */


      Parser.prototype.type = 'Parser';
      Parser.prototype.isParser = true;
      /**
       * Parse an expression and return the parsed function node.
       * The node tree can be compiled via `code = node.compile(math)`,
       * and the compiled code can be executed as `code.evaluate([scope])`
       * @param {string} expr
       * @return {Node} node
       * @throws {Error}
       */

      Parser.prototype.parse = function (expr) {
        throw new Error('Parser.parse is deprecated. Use math.parse instead.');
      };
      /**
       * Parse and compile an expression, return the compiled javascript code.
       * The node can be evaluated via code.evaluate([scope])
       * @param {string} expr
       * @return {{evaluate: function}} code
       * @throws {Error}
       */


      Parser.prototype.compile = function (expr) {
        throw new Error('Parser.compile is deprecated. Use math.compile instead.');
      };
      /**
       * Parse and evaluate the given expression
       * @param {string} expr   A string containing an expression, for example "2+3"
       * @return {*} result     The result, or undefined when the expression was empty
       * @throws {Error}
       */


      Parser.prototype.evaluate = function (expr) {
        // TODO: validate arguments
        return parse(expr).compile().evaluate(this.scope);
      };
      /**
       * Parse and evaluate the given expression
       * @param {string} expr   A string containing an expression, for example "2+3"
       * @return {*} result     The result, or undefined when the expression was empty
       * @throws {Error}
       */
      // TODO: Deprecated since v6.0.0. Clean up some day


      Parser.prototype.eval = function (expr) {
        warnOnce('Method Parser.eval is renamed to Parser.evaluate. Please use the new method name.');
        return this.evaluate(expr);
      };
      /**
       * Get a variable (a function or variable) by name from the parsers scope.
       * Returns undefined when not found
       * @param {string} name
       * @return {* | undefined} value
       */


      Parser.prototype.get = function (name) {
        // TODO: validate arguments
        return name in this.scope ? getSafeProperty(this.scope, name) : undefined;
      };
      /**
       * Get a map with all defined variables
       * @return {Object} values
       */


      Parser.prototype.getAll = function () {
        return extend$1({}, this.scope);
      };
      /**
       * Set a symbol (a function or variable) by name from the parsers scope.
       * @param {string} name
       * @param {* | undefined} value
       */


      Parser.prototype.set = function (name, value) {
        // TODO: validate arguments
        return setSafeProperty(this.scope, name, value);
      };
      /**
       * Remove a variable from the parsers scope
       * @param {string} name
       */


      Parser.prototype.remove = function (name) {
        // TODO: validate arguments
        delete this.scope[name];
      };
      /**
       * Clear the scope with variables and functions
       */


      Parser.prototype.clear = function () {
        for (var _name in this.scope) {
          if (hasOwnProperty$1(this.scope, _name)) {
            delete this.scope[_name];
          }
        }
      };

      return Parser;
    }, {
      isClass: true
    });

    var name$3d = 'parser';
    var dependencies$3e = ['typed', 'Parser'];
    var createParser =
    /* #__PURE__ */
    factory(name$3d, dependencies$3e, function (_ref) {
      var typed = _ref.typed,
          Parser = _ref.Parser;

      /**
       * Create a parser. The function creates a new `math.Parser` object.
       *
       * Syntax:
       *
       *    math.parser()
       *
       * Examples:
       *
       *     const parser = new math.parser()
       *
       *     // evaluate expressions
       *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
       *     const b = parser.evaluate('sqrt(-4)')        // 2i
       *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
       *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
       *
       *     // define variables and functions
       *     parser.evaluate('x = 7 / 2')                 // 3.5
       *     parser.evaluate('x + 3')                     // 6.5
       *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)
       *     parser.evaluate('f(2, 3)')                   // 8
       *
       *     // get and set variables and functions
       *     const x = parser.get('x')                // 7
       *     const f = parser.get('f')                // function
       *     const g = f(3, 2)                        // 9
       *     parser.set('h', 500)
       *     const i = parser.evaluate('h / 2')       // 250
       *     parser.set('hello', function (name) {
       *       return 'hello, ' + name + '!'
       *     })
       *     parser.evaluate('hello("user")')         // "hello, user!"
       *
       *     // clear defined functions and variables
       *     parser.clear()
       *
       * See also:
       *
       *    evaluate, compile, parse
       *
       * @return {Parser} Parser
       */
      return typed(name$3d, {
        '': function _() {
          return new Parser();
        }
      });
    });

    var name$3e = 'lup';
    var dependencies$3f = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
    var createLup =
    /* #__PURE__ */
    factory(name$3e, dependencies$3f, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          abs = _ref.abs,
          addScalar = _ref.addScalar,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          subtract = _ref.subtract,
          larger = _ref.larger,
          equalScalar = _ref.equalScalar,
          unaryMinus = _ref.unaryMinus,
          DenseMatrix = _ref.DenseMatrix,
          SparseMatrix = _ref.SparseMatrix,
          Spa = _ref.Spa;

      /**
       * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
       * row permutation vector `p` where `A[p,:] = L * U`
       *
       * Syntax:
       *
       *    math.lup(A)
       *
       * Example:
       *
       *    const m = [[2, 1], [1, 4]]
       *    const r = math.lup(m)
       *    // r = {
       *    //   L: [[1, 0], [0.5, 1]],
       *    //   U: [[2, 1], [0, 3.5]],
       *    //   P: [0, 1]
       *    // }
       *
       * See also:
       *
       *    slu, lsolve, lusolve, usolve
       *
       * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
       *
       * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
       */
      return typed(name$3e, {
        DenseMatrix: function DenseMatrix(m) {
          return _denseLUP(m);
        },
        SparseMatrix: function SparseMatrix(m) {
          return _sparseLUP(m);
        },
        Array: function Array(a) {
          // create dense matrix from array
          var m = matrix(a); // lup, use matrix implementation

          var r = _denseLUP(m); // result


          return {
            L: r.L.valueOf(),
            U: r.U.valueOf(),
            p: r.p
          };
        }
      });

      function _denseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns

        var n = Math.min(rows, columns); // matrix array, clone original data

        var data = clone$3(m._data); // l matrix arrays

        var ldata = [];
        var lsize = [rows, n]; // u matrix arrays

        var udata = [];
        var usize = [n, columns]; // vars

        var i, j, k; // permutation vector

        var p = [];

        for (i = 0; i < rows; i++) {
          p[i] = i;
        } // loop columns


        for (j = 0; j < columns; j++) {
          // skip first column in upper triangular matrix
          if (j > 0) {
            // loop rows
            for (i = 0; i < rows; i++) {
              // min i,j
              var min = Math.min(i, j); // v[i, j]

              var s = 0; // loop up to min

              for (k = 0; k < min; k++) {
                // s = l[i, k] - data[k, j]
                s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
              }

              data[i][j] = subtract(data[i][j], s);
            }
          } // row with larger value in cvector, row >= j


          var pi = j;
          var pabsv = 0;
          var vjj = 0; // loop rows

          for (i = j; i < rows; i++) {
            // data @ i, j
            var v = data[i][j]; // absolute value

            var absv = abs(v); // value is greater than pivote value

            if (larger(absv, pabsv)) {
              // store row
              pi = i; // update max value

              pabsv = absv; // value @ [j, j]

              vjj = v;
            }
          } // swap rows (j <-> pi)


          if (j !== pi) {
            // swap values j <-> pi in p
            p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

            DenseMatrix._swapRows(j, pi, data);
          } // check column is in lower triangular matrix


          if (j < rows) {
            // loop rows (lower triangular matrix)
            for (i = j + 1; i < rows; i++) {
              // value @ i, j
              var vij = data[i][j];

              if (!equalScalar(vij, 0)) {
                // update data
                data[i][j] = divideScalar(data[i][j], vjj);
              }
            }
          }
        } // loop columns


        for (j = 0; j < columns; j++) {
          // loop rows
          for (i = 0; i < rows; i++) {
            // initialize row in arrays
            if (j === 0) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i] = [];
              } // L


              ldata[i] = [];
            } // check we are in the upper triangular matrix


            if (i < j) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i][j] = data[i][j];
              } // check column exists in lower triangular matrix


              if (j < rows) {
                // L
                ldata[i][j] = 0;
              }

              continue;
            } // diagonal value


            if (i === j) {
              // check row exists in upper triangular matrix
              if (i < columns) {
                // U
                udata[i][j] = data[i][j];
              } // check column exists in lower triangular matrix


              if (j < rows) {
                // L
                ldata[i][j] = 1;
              }

              continue;
            } // check row exists in upper triangular matrix


            if (i < columns) {
              // U
              udata[i][j] = 0;
            } // check column exists in lower triangular matrix


            if (j < rows) {
              // L
              ldata[i][j] = data[i][j];
            }
          }
        } // l matrix


        var l = new DenseMatrix({
          data: ldata,
          size: lsize
        }); // u matrix

        var u = new DenseMatrix({
          data: udata,
          size: usize
        }); // p vector

        var pv = [];

        for (i = 0, n = p.length; i < n; i++) {
          pv[p[i]] = i;
        } // return matrices


        return {
          L: l,
          U: u,
          p: pv,
          toString: function toString() {
            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
          }
        };
      }

      function _sparseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns

        var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // l matrix arrays

        var lvalues = [];
        var lindex = [];
        var lptr = [];
        var lsize = [rows, n]; // u matrix arrays

        var uvalues = [];
        var uindex = [];
        var uptr = [];
        var usize = [n, columns]; // vars

        var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

        var pvCo = [];
        var pvOc = [];

        for (i = 0; i < rows; i++) {
          pvCo[i] = i;
          pvOc[i] = i;
        } // swap indices in permutation vectors (condition x < y)!


        var swapIndeces = function swapIndeces(x, y) {
          // find pv indeces getting data from x and y
          var kx = pvOc[x];
          var ky = pvOc[y]; // update permutation vector current -> original

          pvCo[kx] = y;
          pvCo[ky] = x; // update permutation vector original -> current

          pvOc[x] = ky;
          pvOc[y] = kx;
        }; // loop columns


        var _loop = function _loop() {
          // sparse accumulator
          var spa = new Spa(); // check lower triangular matrix has a value @ column j

          if (j < rows) {
            // update ptr
            lptr.push(lvalues.length); // first value in j column for lower triangular matrix

            lvalues.push(1);
            lindex.push(j);
          } // update ptr


          uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // copy column j into sparse accumulator

          for (k = k0; k < k1; k++) {
            // row
            i = index[k]; // copy column values into sparse accumulator (use permutation vector)

            spa.set(pvCo[i], values[k]);
          } // skip first column in upper triangular matrix


          if (j > 0) {
            // loop rows in column j (above diagonal)
            spa.forEach(0, j - 1, function (k, vkj) {
              // loop rows in column k (L)
              SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
                // check row is below k
                if (i > k) {
                  // update spa value
                  spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
                }
              });
            });
          } // row with larger value in spa, row >= j


          var pi = j;
          var vjj = spa.get(j);
          var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

          spa.forEach(j + 1, rows - 1, function (x, v) {
            // absolute value
            var absv = abs(v); // value is greater than pivote value

            if (larger(absv, pabsv)) {
              // store row
              pi = x; // update max value

              pabsv = absv; // value @ [j, j]

              vjj = v;
            }
          }); // swap rows (j <-> pi)

          if (j !== pi) {
            // swap values j <-> pi in L
            SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


            SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


            spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

            swapIndeces(j, pi);
          } // loop values in spa (order by row)


          spa.forEach(0, rows - 1, function (x, v) {
            // check we are above diagonal
            if (x <= j) {
              // update upper triangular matrix
              uvalues.push(v);
              uindex.push(x);
            } else {
              // update value
              v = divideScalar(v, vjj); // check value is non zero

              if (!equalScalar(v, 0)) {
                // update lower triangular matrix
                lvalues.push(v);
                lindex.push(x);
              }
            }
          });
        };

        for (j = 0; j < columns; j++) {
          _loop();
        } // update ptrs


        uptr.push(uvalues.length);
        lptr.push(lvalues.length); // return matrices

        return {
          L: new SparseMatrix({
            values: lvalues,
            index: lindex,
            ptr: lptr,
            size: lsize
          }),
          U: new SparseMatrix({
            values: uvalues,
            index: uindex,
            ptr: uptr,
            size: usize
          }),
          p: pvCo,
          toString: function toString() {
            return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
          }
        };
      }
    });

    function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
    var name$3f = 'qr';
    var dependencies$3g = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
    var createQr =
    /* #__PURE__ */
    factory(name$3f, dependencies$3g, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          zeros = _ref.zeros,
          identity = _ref.identity,
          isZero = _ref.isZero,
          equal = _ref.equal,
          sign = _ref.sign,
          sqrt = _ref.sqrt,
          conj = _ref.conj,
          unaryMinus = _ref.unaryMinus,
          addScalar = _ref.addScalar,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          subtract = _ref.subtract,
          complex = _ref.complex;

      /**
       * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
       * two matrices (`Q`, `R`) where `Q` is an
       * orthogonal matrix and `R` is an upper triangular matrix.
       *
       * Syntax:
       *
       *    math.qr(A)
       *
       * Example:
       *
       *    const m = [
       *      [1, -1,  4],
       *      [1,  4, -2],
       *      [1,  4,  2],
       *      [1,  -1, 0]
       *    ]
       *    const result = math.qr(m)
       *    // r = {
       *    //   Q: [
       *    //     [0.5, -0.5,   0.5],
       *    //     [0.5,  0.5,  -0.5],
       *    //     [0.5,  0.5,   0.5],
       *    //     [0.5, -0.5,  -0.5],
       *    //   ],
       *    //   R: [
       *    //     [2, 3,  2],
       *    //     [0, 5, -2],
       *    //     [0, 0,  4],
       *    //     [0, 0,  0]
       *    //   ]
       *    // }
       *
       * See also:
       *
       *    lup, lusolve
       *
       * @param {Matrix | Array} A    A two dimensional matrix or array
       * for which to get the QR decomposition.
       *
       * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
       * matrix and R: the upper triangular matrix
       */
      return _extends$4(typed(name$3f, {
        DenseMatrix: function DenseMatrix(m) {
          return _denseQR(m);
        },
        SparseMatrix: function SparseMatrix(m) {
          return _sparseQR();
        },
        Array: function Array(a) {
          // create dense matrix from array
          var m = matrix(a); // lup, use matrix implementation

          var r = _denseQR(m); // result


          return {
            Q: r.Q.valueOf(),
            R: r.R.valueOf()
          };
        }
      }), {
        _denseQRimpl: _denseQRimpl
      });

      function _denseQRimpl(m) {
        // rows & columns (m x n)
        var rows = m._size[0]; // m

        var cols = m._size[1]; // n

        var Q = identity([rows], 'dense');
        var Qdata = Q._data;
        var R = m.clone();
        var Rdata = R._data; // vars

        var i, j, k;
        var w = zeros([rows], '');

        for (k = 0; k < Math.min(cols, rows); ++k) {
          /*
           * **k-th Household matrix**
           *
           * The matrix I - 2*v*transpose(v)
           * x     = first column of A
           * x1    = first element of x
           * alpha = x1 / |x1| * |x|
           * e1    = tranpose([1, 0, 0, ...])
           * u     = x - alpha * e1
           * v     = u / |u|
           *
           * Household matrix = I - 2 * v * tranpose(v)
           *
           *  * Initially Q = I and R = A.
           *  * Household matrix is a reflection in a plane normal to v which
           *    will zero out all but the top right element in R.
           *  * Appplying reflection to both Q and R will not change product.
           *  * Repeat this process on the (1,1) minor to get R as an upper
           *    triangular matrix.
           *  * Reflections leave the magnitude of the columns of Q unchanged
           *    so Q remains othoganal.
           *
           */
          var pivot = Rdata[k][k];
          var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
          var conjSgn = conj(sgn);
          var alphaSquared = 0;

          for (i = k; i < rows; i++) {
            alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
          }

          var alpha = multiplyScalar(sgn, sqrt(alphaSquared));

          if (!isZero(alpha)) {
            // first element in vector u
            var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

            w[k] = 1;

            for (i = k + 1; i < rows; i++) {
              w[i] = divideScalar(Rdata[i][k], u1);
            } // tau = - conj(u1 / alpha)


            var tau = unaryMinus(conj(divideScalar(u1, alpha)));
            var s = void 0;
            /*
             * tau and w have been choosen so that
             *
             * 2 * v * tranpose(v) = tau * w * tranpose(w)
             */

            /*
             * -- calculate R = R - tau * w * tranpose(w) * R --
             * Only do calculation with rows k to (rows-1)
             * Additionally columns 0 to (k-1) will not be changed by this
             *   multiplication so do not bother recalculating them
             */

            for (j = k; j < cols; j++) {
              s = 0.0; // calculate jth element of [tranpose(w) * R]

              for (i = k; i < rows; i++) {
                s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
              } // calculate the jth element of [tau * transpose(w) * R]


              s = multiplyScalar(s, tau);

              for (i = k; i < rows; i++) {
                Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
              }
            }
            /*
             * -- calculate Q = Q - tau * Q * w * transpose(w) --
             * Q is a square matrix (rows x rows)
             * Only do calculation with columns k to (rows-1)
             * Additionally rows 0 to (k-1) will not be changed by this
             *   multiplication so do not bother recalculating them
             */


            for (i = 0; i < rows; i++) {
              s = 0.0; // calculate ith element of [Q * w]

              for (j = k; j < rows; j++) {
                s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
              } // calculate the ith element of [tau * Q * w]


              s = multiplyScalar(s, tau);

              for (j = k; j < rows; ++j) {
                Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
              }
            }
          }
        } // return matrices


        return {
          Q: Q,
          R: R,
          toString: function toString() {
            return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
          }
        };
      }

      function _denseQR(m) {
        var ret = _denseQRimpl(m);

        var Rdata = ret.R._data;

        if (m._data.length > 0) {
          var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;

          for (var i = 0; i < Rdata.length; ++i) {
            for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
              Rdata[i][j] = zero;
            }
          }
        }

        return ret;
      }

      function _sparseQR(m) {
        throw new Error('qr not implemented for sparse matrices yet');
      }
    });

    /**
     * Permutes a sparse matrix C = P * A * Q
     *
     * @param {SparseMatrix}  a         The Matrix A
     * @param {Array}   pinv            The row permutation vector
     * @param {Array}   q               The column permutation vector
     * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
     *
     * @return {Matrix}                 C = P * A * Q, null on error
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csPermute(a, pinv, q, values) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size;
      var adt = a._datatype; // rows & columns

      var m = asize[0];
      var n = asize[1]; // c arrays

      var cvalues = values && a._values ? [] : null;
      var cindex = []; // (aptr[n])

      var cptr = []; // (n + 1)
      // initialize vars

      var nz = 0; // loop columns

      for (var k = 0; k < n; k++) {
        // column k of C is column q[k] of A
        cptr[k] = nz; // apply column permutation

        var j = q ? q[k] : k; // loop values in column j of A

        for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
          // row i of A is row pinv[i] of C
          var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

          cindex[nz] = r; // check we need to populate values

          if (cvalues) {
            cvalues[nz] = avalues[t];
          } // increment number of nonzero elements


          nz++;
        }
      } // finalize the last column of C


      cptr[n] = nz; // return C matrix

      return a.createSparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [m, n],
        datatype: adt
      });
    }

    /**
     * Depth-first search and postorder of a tree rooted at node j
     *
     * @param {Number}  j               The tree node
     * @param {Number}  k
     * @param {Array}   w               The workspace array
     * @param {Number}  head            The index offset within the workspace for the head array
     * @param {Number}  next            The index offset within the workspace for the next array
     * @param {Array}   post            The post ordering array
     * @param {Number}  stack           The index offset within the workspace for the stack array
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csTdfs(j, k, w, head, next, post, stack) {
      // variables
      var top = 0; // place j on the stack

      w[stack] = j; // while (stack is not empty)

      while (top >= 0) {
        // p = top of stack
        var p = w[stack + top]; // i = youngest child of p

        var i = w[head + p];

        if (i === -1) {
          // p has no unordered children left
          top--; // node p is the kth postordered node

          post[k++] = p;
        } else {
          // remove i from children of p
          w[head + p] = w[next + i]; // increment top

          ++top; // start dfs on child node i

          w[stack + top] = i;
        }
      }

      return k;
    }

    /**
     * Post order a tree of forest
     *
     * @param {Array}   parent          The tree or forest
     * @param {Number}  n               Number of columns
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csPost(parent, n) {
      // check inputs
      if (!parent) {
        return null;
      } // vars


      var k = 0;
      var j; // allocate result

      var post = []; // (n)
      // workspace, head: first n entries, next: next n entries, stack: last n entries

      var w = []; // (3 * n)

      var head = 0;
      var next = n;
      var stack = 2 * n; // initialize workspace

      for (j = 0; j < n; j++) {
        // empty linked lists
        w[head + j] = -1;
      } // traverse nodes in reverse order


      for (j = n - 1; j >= 0; j--) {
        // check j is a root
        if (parent[j] === -1) {
          continue;
        } // add j to list of its parent


        w[next + j] = w[head + parent[j]];
        w[head + parent[j]] = j;
      } // loop nodes


      for (j = 0; j < n; j++) {
        // skip j if it is not a root
        if (parent[j] !== -1) {
          continue;
        } // depth-first search


        k = csTdfs(j, k, w, head, next, post, stack);
      }

      return post;
    }

    /**
     * Computes the elimination tree of Matrix A (using triu(A)) or the
     * elimination tree of A'A without forming A'A.
     *
     * @param {Matrix}  a               The A Matrix
     * @param {boolean} ata             A value of true the function computes the etree of A'A
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csEtree(a, ata) {
      // check inputs
      if (!a) {
        return null;
      } // a arrays


      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size; // rows & columns

      var m = asize[0];
      var n = asize[1]; // allocate result

      var parent = []; // (n)
      // allocate workspace

      var w = []; // (n + (ata ? m : 0))

      var ancestor = 0; // first n entries in w

      var prev = n; // last m entries (ata = true)

      var i, inext; // check we are calculating A'A

      if (ata) {
        // initialize workspace
        for (i = 0; i < m; i++) {
          w[prev + i] = -1;
        }
      } // loop columns


      for (var k = 0; k < n; k++) {
        // node k has no parent yet
        parent[k] = -1; // nor does k have an ancestor

        w[ancestor + k] = -1; // values in column k

        for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
          // row
          var r = aindex[p]; // node

          i = ata ? w[prev + r] : r; // traverse from i to k

          for (; i !== -1 && i < k; i = inext) {
            // inext = ancestor of i
            inext = w[ancestor + i]; // path compression

            w[ancestor + i] = k; // check no anc., parent is k

            if (inext === -1) {
              parent[i] = k;
            }
          }

          if (ata) {
            w[prev + r] = k;
          }
        }
      }

      return parent;
    }

    /**
     * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
     *
     * @param {Matrix}   a              The sparse matrix
     * @param {function} callback       The callback function, function will be invoked with the following args:
     *                                    - The entry row
     *                                    - The entry column
     *                                    - The entry value
     *                                    - The state parameter
     * @param {any}      other          The state
     *
     * @return                          The number of nonzero elements in the matrix
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csFkeep(a, callback, other) {
      // a arrays
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var asize = a._size; // columns

      var n = asize[1]; // nonzero items

      var nz = 0; // loop columns

      for (var j = 0; j < n; j++) {
        // get current location of col j
        var p = aptr[j]; // record new location of col j

        aptr[j] = nz;

        for (; p < aptr[j + 1]; p++) {
          // check we need to keep this item
          if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
            // keep A(i,j)
            aindex[nz] = aindex[p]; // check we need to process values (pattern only)

            if (avalues) {
              avalues[nz] = avalues[p];
            } // increment nonzero items


            nz++;
          }
        }
      } // finalize A


      aptr[n] = nz; // trim arrays

      aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

      if (avalues) {
        avalues.splice(nz, avalues.length - nz);
      } // return number of nonzero items


      return nz;
    }

    /**
     * This function "flips" its input about the integer -1.
     *
     * @param {Number}  i               The value to flip
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csFlip(i) {
      // flip the value
      return -i - 2;
    }

    var name$3g = 'csAmd';
    var dependencies$3h = ['add', 'multiply', 'transpose'];
    var createCsAmd =
    /* #__PURE__ */
    factory(name$3g, dependencies$3h, function (_ref) {
      var add = _ref.add,
          multiply = _ref.multiply,
          transpose = _ref.transpose;

      /**
       * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
       * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
       * than A. It is a gready method that selects the sparsest pivot row and column during the course
       * of a right looking sparse Cholesky factorization.
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       *
       * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
       * @param {Matrix} m        Sparse Matrix
       */
      return function csAmd(order, a) {
        // check input parameters
        if (!a || order <= 0 || order > 3) {
          return null;
        } // a matrix arrays


        var asize = a._size; // rows and columns

        var m = asize[0];
        var n = asize[1]; // initialize vars

        var lemax = 0; // dense threshold

        var dense = Math.max(16, 10 * Math.sqrt(n));
        dense = Math.min(n - 2, dense); // create target matrix C

        var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


        csFkeep(cm, _diag, null); // C matrix arrays

        var cindex = cm._index;
        var cptr = cm._ptr; // number of nonzero elements in C

        var cnz = cptr[n]; // allocate result (n+1)

        var P = []; // create workspace (8 * (n + 1))

        var W = [];
        var len = 0; // first n + 1 entries

        var nv = n + 1; // next n + 1 entries

        var next = 2 * (n + 1); // next n + 1 entries

        var head = 3 * (n + 1); // next n + 1 entries

        var elen = 4 * (n + 1); // next n + 1 entries

        var degree = 5 * (n + 1); // next n + 1 entries

        var w = 6 * (n + 1); // next n + 1 entries

        var hhead = 7 * (n + 1); // last n + 1 entries
        // use P as workspace for last

        var last = P; // initialize quotient graph

        var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


        var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


        var mindeg = 0; // vars

        var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

        while (nel < n) {
          // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
          // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
          // many nodes have been eliminated.
          for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
          }

          if (W[next + k] !== -1) {
            last[W[next + k]] = -1;
          } // remove k from degree list


          W[head + mindeg] = W[next + k]; // elenk = |Ek|

          var elenk = W[elen + k]; // # of nodes k represents

          var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

          nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
          // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
          // degree lists. All elements e in Ek are absorved into element k.

          var dk = 0; // flag k as in Lk

          W[nv + k] = -nvk;
          var p = cptr[k]; // do in place if W[elen + k] === 0

          var pk1 = elenk === 0 ? p : cnz;
          var pk2 = pk1;

          for (k1 = 1; k1 <= elenk + 1; k1++) {
            if (k1 > elenk) {
              // search the nodes in k
              e = k; // list of nodes starts at cindex[pj]

              pj = p; // length of list of nodes in k

              ln = W[len + k] - elenk;
            } else {
              // search the nodes in e
              e = cindex[p++];
              pj = cptr[e]; // length of list of nodes in e

              ln = W[len + e];
            }

            for (k2 = 1; k2 <= ln; k2++) {
              i = cindex[pj++]; // check  node i dead, or seen

              if ((nvi = W[nv + i]) <= 0) {
                continue;
              } // W[degree + Lk] += size of node i


              dk += nvi; // negate W[nv + i] to denote i in Lk

              W[nv + i] = -nvi; // place i in Lk

              cindex[pk2++] = i;

              if (W[next + i] !== -1) {
                last[W[next + i]] = last[i];
              } // check we need to remove i from degree list


              if (last[i] !== -1) {
                W[next + last[i]] = W[next + i];
              } else {
                W[head + W[degree + i]] = W[next + i];
              }
            }

            if (e !== k) {
              // absorb e into k
              cptr[e] = csFlip(k); // e is now a dead element

              W[w + e] = 0;
            }
          } // cindex[cnz...nzmax] is free


          if (elenk !== 0) {
            cnz = pk2;
          } // external degree of k - |Lk\i|


          W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

          cptr[k] = pk1;
          W[len + k] = pk2 - pk1; // k is now an element

          W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
          // scan, no entry in the w array is greater than or equal to mark.
          // clear w if necessary

          mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check if W[elen + i] empty, skip it

            if ((eln = W[elen + i]) <= 0) {
              continue;
            } // W[nv + i] was negated


            nvi = -W[nv + i];
            var wnvi = mark - nvi; // scan Ei

            for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
              e = cindex[p];

              if (W[w + e] >= mark) {
                // decrement |Le\Lk|
                W[w + e] -= nvi;
              } else if (W[w + e] !== 0) {
                // ensure e is a live element, 1st time e seen in scan 1
                W[w + e] = W[degree + e] + wnvi;
              }
            }
          } // degree update
          // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
          // function h(i) for all nodes in Lk.
          // scan2: degree update


          for (pk = pk1; pk < pk2; pk++) {
            // consider node i in Lk
            i = cindex[pk];
            p1 = cptr[i];
            p2 = p1 + W[elen + i] - 1;
            pn = p1; // scan Ei

            for (h = 0, d = 0, p = p1; p <= p2; p++) {
              e = cindex[p]; // check e is an unabsorbed element

              if (W[w + e] !== 0) {
                // dext = |Le\Lk|
                var dext = W[w + e] - mark;

                if (dext > 0) {
                  // sum up the set differences
                  d += dext; // keep e in Ei

                  cindex[pn++] = e; // compute the hash of node i

                  h += e;
                } else {
                  // aggressive absorb. e->k
                  cptr[e] = csFlip(k); // e is a dead element

                  W[w + e] = 0;
                }
              }
            } // W[elen + i] = |Ei|


            W[elen + i] = pn - p1 + 1;
            var p3 = pn;
            var p4 = p1 + W[len + i]; // prune edges in Ai

            for (p = p2 + 1; p < p4; p++) {
              j = cindex[p]; // check node j dead or in Lk

              var nvj = W[nv + j];

              if (nvj <= 0) {
                continue;
              } // degree(i) += |j|


              d += nvj; // place j in node list of i

              cindex[pn++] = j; // compute hash for node i

              h += j;
            } // check for mass elimination


            if (d === 0) {
              // absorb i into k
              cptr[i] = csFlip(k);
              nvi = -W[nv + i]; // |Lk| -= |i|

              dk -= nvi; // |k| += W[nv + i]

              nvk += nvi;
              nel += nvi;
              W[nv + i] = 0; // node i is dead

              W[elen + i] = -1;
            } else {
              // update degree(i)
              W[degree + i] = Math.min(W[degree + i], d); // move first node to end

              cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

              cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

              cindex[p1] = k; // new len of adj. list of node i

              W[len + i] = pn - p1 + 1; // finalize hash of i

              h = (h < 0 ? -h : h) % n; // place i in hash bucket

              W[next + i] = W[hhead + h];
              W[hhead + h] = i; // save hash of i in last[i]

              last[i] = h;
            }
          } // finalize |Lk|


          W[degree + k] = dk;
          lemax = Math.max(lemax, dk); // clear w

          mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
          // If two nodes have identical adjacency lists, their hash functions wil be identical.

          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check i is dead, skip it

            if (W[nv + i] >= 0) {
              continue;
            } // scan hash bucket of node i


            h = last[i];
            i = W[hhead + h]; // hash bucket will be empty

            W[hhead + h] = -1;

            for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
              ln = W[len + i];
              eln = W[elen + i];

              for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
                W[w + cindex[p]] = mark;
              }

              var jlast = i; // compare i with all j

              for (j = W[next + i]; j !== -1;) {
                var ok = W[len + j] === ln && W[elen + j] === eln;

                for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
                  // compare i and j
                  if (W[w + cindex[p]] !== mark) {
                    ok = 0;
                  }
                } // check i and j are identical


                if (ok) {
                  // absorb j into i
                  cptr[j] = csFlip(i);
                  W[nv + i] += W[nv + j];
                  W[nv + j] = 0; // node j is dead

                  W[elen + j] = -1; // delete j from hash bucket

                  j = W[next + j];
                  W[next + jlast] = j;
                } else {
                  // j and i are different
                  jlast = j;
                  j = W[next + j];
                }
              }
            }
          } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
          // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


          for (p = pk1, pk = pk1; pk < pk2; pk++) {
            i = cindex[pk]; // check  i is dead, skip it

            if ((nvi = -W[nv + i]) <= 0) {
              continue;
            } // restore W[nv + i]


            W[nv + i] = nvi; // compute external degree(i)

            d = W[degree + i] + dk - nvi;
            d = Math.min(d, n - nel - nvi);

            if (W[head + d] !== -1) {
              last[W[head + d]] = i;
            } // put i back in degree list


            W[next + i] = W[head + d];
            last[i] = -1;
            W[head + d] = i; // find new minimum degree

            mindeg = Math.min(mindeg, d);
            W[degree + i] = d; // place i in Lk

            cindex[p++] = i;
          } // # nodes absorbed into k


          W[nv + k] = nvk; // length of adj list of element k

          if ((W[len + k] = p - pk1) === 0) {
            // k is a root of the tree
            cptr[k] = -1; // k is now a dead element

            W[w + k] = 0;
          }

          if (elenk !== 0) {
            // free unused space in Lk
            cnz = p;
          }
        } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
        // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
        // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
        // is computed. The tree is restored by unflipping all of ptr.
        // fix assembly tree


        for (i = 0; i < n; i++) {
          cptr[i] = csFlip(cptr[i]);
        }

        for (j = 0; j <= n; j++) {
          W[head + j] = -1;
        } // place unordered nodes in lists


        for (j = n; j >= 0; j--) {
          // skip if j is an element
          if (W[nv + j] > 0) {
            continue;
          } // place j in list of its parent


          W[next + j] = W[head + cptr[j]];
          W[head + cptr[j]] = j;
        } // place elements in lists


        for (e = n; e >= 0; e--) {
          // skip unless e is an element
          if (W[nv + e] <= 0) {
            continue;
          }

          if (cptr[e] !== -1) {
            // place e in list of its parent
            W[next + e] = W[head + cptr[e]];
            W[head + cptr[e]] = e;
          }
        } // postorder the assembly tree


        for (k = 0, i = 0; i <= n; i++) {
          if (cptr[i] === -1) {
            k = csTdfs(i, k, W, head, next, P, w);
          }
        } // remove last item in array


        P.splice(P.length - 1, 1); // return P

        return P;
      };
      /**
       * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
       * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
       *
       * Order: 0
       *   A natural ordering P=null matrix is returned.
       *
       * Order: 1
       *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
       *   P = M + M'
       *
       * Order: 2
       *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
       *   P = M' * M
       *
       * Order: 3
       *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
       *   P = M' * M
       */

      function _createTargetMatrix(order, a, m, n, dense) {
        // compute A'
        var at = transpose(a); // check order = 1, matrix must be square

        if (order === 1 && n === m) {
          // C = A + A'
          return add(a, at);
        } // check order = 2, drop dense columns from M'


        if (order === 2) {
          // transpose arrays
          var tindex = at._index;
          var tptr = at._ptr; // new column index

          var p2 = 0; // loop A' columns (rows)

          for (var j = 0; j < m; j++) {
            // column j of AT starts here
            var p = tptr[j]; // new column j starts here

            tptr[j] = p2; // skip dense col j

            if (tptr[j + 1] - p > dense) {
              continue;
            } // map rows in column j of A


            for (var p1 = tptr[j + 1]; p < p1; p++) {
              tindex[p2++] = tindex[p];
            }
          } // finalize AT


          tptr[m] = p2; // recreate A from new transpose matrix

          a = transpose(at); // use A' * A

          return multiply(at, a);
        } // use A' * A, square or rectangular matrix


        return multiply(at, a);
      }
      /**
       * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
       *
       *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
       *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
       *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
       *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
       */


      function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
        // Initialize quotient graph
        for (var k = 0; k < n; k++) {
          W[len + k] = cptr[k + 1] - cptr[k];
        }

        W[len + n] = 0; // initialize workspace

        for (var i = 0; i <= n; i++) {
          // degree list i is empty
          W[head + i] = -1;
          last[i] = -1;
          W[next + i] = -1; // hash list i is empty

          W[hhead + i] = -1; // node i is just one node

          W[nv + i] = 1; // node i is alive

          W[w + i] = 1; // Ek of node i is empty

          W[elen + i] = 0; // degree of node i

          W[degree + i] = W[len + i];
        } // clear w


        var mark = _wclear(0, 0, W, w, n); // n is a dead element


        W[elen + n] = -2; // n is a root of assembly tree

        cptr[n] = -1; // n is a dead element

        W[w + n] = 0; // return mark

        return mark;
      }
      /**
       * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
       * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
       * output permutation p.
       */


      function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
        // result
        var nel = 0; // loop columns

        for (var i = 0; i < n; i++) {
          // degree @ i
          var d = W[degree + i]; // check node i is empty

          if (d === 0) {
            // element i is dead
            W[elen + i] = -2;
            nel++; // i is a root of assembly tree

            cptr[i] = -1;
            W[w + i] = 0;
          } else if (d > dense) {
            // absorb i into element n
            W[nv + i] = 0; // node i is dead

            W[elen + i] = -1;
            nel++;
            cptr[i] = csFlip(n);
            W[nv + n]++;
          } else {
            var h = W[head + d];

            if (h !== -1) {
              last[h] = i;
            } // put node i in degree list d


            W[next + i] = W[head + d];
            W[head + d] = i;
          }
        }

        return nel;
      }

      function _wclear(mark, lemax, W, w, n) {
        if (mark < 2 || mark + lemax < 0) {
          for (var k = 0; k < n; k++) {
            if (W[w + k] !== 0) {
              W[w + k] = 1;
            }
          }

          mark = 2;
        } // at this point, W [0..n-1] < mark holds


        return mark;
      }

      function _diag(i, j) {
        return i !== j;
      }
    });

    /**
     * This function determines if j is a leaf of the ith row subtree.
     * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
     *
     * @param {Number}  i               The ith row subtree
     * @param {Number}  j               The node to test
     * @param {Array}   w               The workspace array
     * @param {Number}  first           The index offset within the workspace for the first array
     * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
     * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
     * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
     *
     * @return {Object}
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
      var s, sparent; // our result

      var jleaf = 0;
      var q; // check j is a leaf

      if (i <= j || w[first + j] <= w[maxfirst + i]) {
        return -1;
      } // update max first[j] seen so far


      w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

      var jprev = w[prevleaf + i];
      w[prevleaf + i] = j; // check j is first or subsequent leaf

      if (jprev === -1) {
        // 1st leaf, q = root of ith subtree
        jleaf = 1;
        q = i;
      } else {
        // update jleaf
        jleaf = 2; // q = least common ancester (jprev,j)

        for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
        }

        for (s = jprev; s !== q; s = sparent) {
          // path compression
          sparent = w[ancestor + s];
          w[ancestor + s] = q;
        }
      }

      return {
        jleaf: jleaf,
        q: q
      };
    }

    var name$3h = 'csCounts';
    var dependencies$3i = ['transpose'];
    var createCsCounts =
    /* #__PURE__ */
    factory(name$3h, dependencies$3i, function (_ref) {
      var transpose = _ref.transpose;

      /**
       * Computes the column counts using the upper triangular part of A.
       * It transposes A internally, none of the input parameters are modified.
       *
       * @param {Matrix} a           The sparse matrix A
       *
       * @param {Matrix} ata         Count the columns of A'A instead
       *
       * @return                     An array of size n of the column counts or null on error
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */
      return function (a, parent, post, ata) {
        // check inputs
        if (!a || !parent || !post) {
          return null;
        } // a matrix arrays


        var asize = a._size; // rows and columns

        var m = asize[0];
        var n = asize[1]; // variables

        var i, j, k, J, p, p0, p1; // workspace size

        var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

        var w = []; // (s)

        var ancestor = 0; // first n entries

        var maxfirst = n; // next n entries

        var prevleaf = 2 * n; // next n entries

        var first = 3 * n; // next n entries

        var head = 4 * n; // next n + 1 entries (used when ata is true)

        var next = 5 * n + 1; // last entries in workspace
        // clear workspace w[0..s-1]

        for (k = 0; k < s; k++) {
          w[k] = -1;
        } // allocate result


        var colcount = []; // (n)
        // AT = A'

        var at = transpose(a); // at arrays

        var tindex = at._index;
        var tptr = at._ptr; // find w[first + j]

        for (k = 0; k < n; k++) {
          j = post[k]; // colcount[j]=1 if j is a leaf

          colcount[j] = w[first + j] === -1 ? 1 : 0;

          for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
            w[first + j] = k;
          }
        } // initialize ata if needed


        if (ata) {
          // invert post
          for (k = 0; k < n; k++) {
            w[post[k]] = k;
          } // loop rows (columns in AT)


          for (i = 0; i < m; i++) {
            // values in column i of AT
            for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
              k = Math.min(k, w[tindex[p]]);
            } // place row i in linked list k


            w[next + i] = w[head + k];
            w[head + k] = i;
          }
        } // each node in its own set


        for (i = 0; i < n; i++) {
          w[ancestor + i] = i;
        }

        for (k = 0; k < n; k++) {
          // j is the kth node in postordered etree
          j = post[k]; // check j is not a root

          if (parent[j] !== -1) {
            colcount[parent[j]]--;
          } // J=j for LL'=A case


          for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
            for (p = tptr[J]; p < tptr[J + 1]; p++) {
              i = tindex[p];
              var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

              if (r.jleaf >= 1) {
                colcount[j]++;
              } // check account for overlap in q


              if (r.jleaf === 2) {
                colcount[r.q]--;
              }
            }
          }

          if (parent[j] !== -1) {
            w[ancestor + j] = parent[j];
          }
        } // sum up colcount's of each child


        for (j = 0; j < n; j++) {
          if (parent[j] !== -1) {
            colcount[parent[j]] += colcount[j];
          }
        }

        return colcount;
      };
    });

    var name$3i = 'csSqr';
    var dependencies$3j = ['add', 'multiply', 'transpose'];
    var createCsSqr =
    /* #__PURE__ */
    factory(name$3i, dependencies$3j, function (_ref) {
      var add = _ref.add,
          multiply = _ref.multiply,
          transpose = _ref.transpose;
      var csAmd = createCsAmd({
        add: add,
        multiply: multiply,
        transpose: transpose
      });
      var csCounts = createCsCounts({
        transpose: transpose
      });
      /**
       * Symbolic ordering and analysis for QR and LU decompositions.
       *
       * @param {Number}  order           The ordering strategy (see csAmd for more details)
       * @param {Matrix}  a               The A matrix
       * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
       *                                  symbolic ordering and analysis for LU decomposition (false)
       *
       * @return {Object}                 The Symbolic ordering and analysis for matrix A
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */

      return function csSqr(order, a, qr) {
        // a arrays
        var aptr = a._ptr;
        var asize = a._size; // columns

        var n = asize[1]; // vars

        var k; // symbolic analysis result

        var s = {}; // fill-reducing ordering

        s.q = csAmd(order, a); // validate results

        if (order && !s.q) {
          return null;
        } // QR symbolic analysis


        if (qr) {
          // apply permutations if needed
          var c = order ? csPermute(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

          s.parent = csEtree(c, 1); // post order elimination tree

          var post = csPost(s.parent, n); // col counts chol(C'*C)

          s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

          if (c && s.parent && s.cp && _vcount(c, s)) {
            // calculate number of nonzero elements
            for (s.unz = 0, k = 0; k < n; k++) {
              s.unz += s.cp[k];
            }
          }
        } else {
          // for LU factorization only, guess nnz(L) and nnz(U)
          s.unz = 4 * aptr[n] + n;
          s.lnz = s.unz;
        } // return result S


        return s;
      };
      /**
       * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
       */

      function _vcount(a, s) {
        // a arrays
        var aptr = a._ptr;
        var aindex = a._index;
        var asize = a._size; // rows & columns

        var m = asize[0];
        var n = asize[1]; // initialize s arrays

        s.pinv = []; // (m + n)

        s.leftmost = []; // (m)
        // vars

        var parent = s.parent;
        var pinv = s.pinv;
        var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

        var w = []; // (m + 3 * n)

        var next = 0;
        var head = m;
        var tail = m + n;
        var nque = m + 2 * n; // vars

        var i, k, p, p0, p1; // initialize w

        for (k = 0; k < n; k++) {
          // queue k is empty
          w[head + k] = -1;
          w[tail + k] = -1;
          w[nque + k] = 0;
        } // initialize row arrays


        for (i = 0; i < m; i++) {
          leftmost[i] = -1;
        } // loop columns backwards


        for (k = n - 1; k >= 0; k--) {
          // values & index for column k
          for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
            // leftmost[i] = min(find(A(i,:)))
            leftmost[aindex[p]] = k;
          }
        } // scan rows in reverse order


        for (i = m - 1; i >= 0; i--) {
          // row i is not yet ordered
          pinv[i] = -1;
          k = leftmost[i]; // check row i is empty

          if (k === -1) {
            continue;
          } // first row in queue k


          if (w[nque + k]++ === 0) {
            w[tail + k] = i;
          } // put i at head of queue k


          w[next + i] = w[head + k];
          w[head + k] = i;
        }

        s.lnz = 0;
        s.m2 = m; // find row permutation and nnz(V)

        for (k = 0; k < n; k++) {
          // remove row i from queue k
          i = w[head + k]; // count V(k,k) as nonzero

          s.lnz++; // add a fictitious row

          if (i < 0) {
            i = s.m2++;
          } // associate row i with V(:,k)


          pinv[i] = k; // skip if V(k+1:m,k) is empty

          if (--nque[k] <= 0) {
            continue;
          } // nque[k] is nnz (V(k+1:m,k))


          s.lnz += w[nque + k]; // move all rows to parent of k

          var pa = parent[k];

          if (pa !== -1) {
            if (w[nque + pa] === 0) {
              w[tail + pa] = w[tail + k];
            }

            w[next + w[tail + k]] = w[head + pa];
            w[head + pa] = w[next + i];
            w[nque + pa] += w[nque + k];
          }
        }

        for (i = 0; i < m; i++) {
          if (pinv[i] < 0) {
            pinv[i] = k++;
          }
        }

        return true;
      }
    });

    /**
     * Checks if the node at w[j] is marked
     *
     * @param {Array}   w               The array
     * @param {Number}  j               The array index
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */
    function csMarked(w, j) {
      // check node is marked
      return w[j] < 0;
    }

    /**
     * Marks the node at w[j]
     *
     * @param {Array}   w               The array
     * @param {Number}  j               The array index
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csMark(w, j) {
      // mark w[j]
      w[j] = csFlip(w[j]);
    }

    /**
     * Flips the value if it is negative of returns the same value otherwise.
     *
     * @param {Number}  i               The value to flip
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csUnflip(i) {
      // flip the value if it is negative
      return i < 0 ? csFlip(i) : i;
    }

    /**
     * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
     * at nodes in B (see csReach()).
     *
     * @param {Number}  j               The starting node for the DFS algorithm
     * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
     * @param {Number}  top             Start index in stack xi[top..n-1]
     * @param {Number}  k               The kth column in B
     * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
     *                                  The first n entries is the nonzero pattern, the last n entries is the stack
     * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
     *
     * @return {Number}                 New value of top
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csDfs(j, g, top, xi, pinv) {
      // g arrays
      var index = g._index;
      var ptr = g._ptr;
      var size = g._size; // columns

      var n = size[1]; // vars

      var i, p, p2; // initialize head

      var head = 0; // initialize the recursion stack

      xi[0] = j; // loop

      while (head >= 0) {
        // get j from the top of the recursion stack
        j = xi[head]; // apply permutation vector

        var jnew = pinv ? pinv[j] : j; // check node j is marked

        if (!csMarked(ptr, j)) {
          // mark node j as visited
          csMark(ptr, j); // update stack (last n entries in xi)

          xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);
        } // node j done if no unvisited neighbors


        var done = 1; // examine all neighbors of j, stack (last n entries in xi)

        for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {
          // consider neighbor node i
          i = index[p]; // check we have visited node i, skip it

          if (csMarked(ptr, i)) {
            continue;
          } // pause depth-first search of node j, update stack (last n entries in xi)


          xi[n + head] = p; // start dfs at node i

          xi[++head] = i; // node j is not done

          done = 0; // break, to start dfs(i)

          break;
        } // check depth-first search at node j is done


        if (done) {
          // remove j from the recursion stack
          head--; // and place in the output stack

          xi[--top] = j;
        }
      }

      return top;
    }

    /**
     * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
     * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
     * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
     *
     * @param {Matrix}  g               The G matrix
     * @param {Matrix}  b               The B matrix
     * @param {Number}  k               The kth column in B
     * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
     *                                  The first n entries is the nonzero pattern, the last n entries is the stack
     * @param {Array}   pinv            The inverse row permutation vector
     *
     * @return {Number}                 The index for the nonzero pattern
     *
     * Reference: http://faculty.cse.tamu.edu/davis/publications.html
     */

    function csReach(g, b, k, xi, pinv) {
      // g arrays
      var gptr = g._ptr;
      var gsize = g._size; // b arrays

      var bindex = b._index;
      var bptr = b._ptr; // columns

      var n = gsize[1]; // vars

      var p, p0, p1; // initialize top

      var top = n; // loop column indeces in B

      for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
        // node i
        var i = bindex[p]; // check node i is marked

        if (!csMarked(gptr, i)) {
          // start a dfs at unmarked node i
          top = csDfs(i, g, top, xi, pinv);
        }
      } // loop columns from top -> n - 1


      for (p = top; p < n; p++) {
        // restore G
        csMark(gptr, xi[p]);
      }

      return top;
    }

    var name$3j = 'csSpsolve';
    var dependencies$3k = ['divideScalar', 'multiply', 'subtract'];
    var createCsSpsolve =
    /* #__PURE__ */
    factory(name$3j, dependencies$3k, function (_ref) {
      var divideScalar = _ref.divideScalar,
          multiply = _ref.multiply,
          subtract = _ref.subtract;

      /**
       * The function csSpsolve() computes the solution to G * x = bk, where bk is the
       * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
       * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
       * is upper triangular with the diagonal entry as the last entry in each column.
       *
       * @param {Matrix}  g               The G matrix
       * @param {Matrix}  b               The B matrix
       * @param {Number}  k               The kth column in B
       * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
       *                                  The first n entries is the nonzero pattern, the last n entries is the stack
       * @param {Array}   x               The soluton to the linear system G * x = b
       * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
       * @param {boolean} lo              The lower (true) upper triangular (false) flag
       *
       * @return {Number}                 The index for the nonzero pattern
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */
      return function csSpsolve(g, b, k, xi, x, pinv, lo) {
        // g arrays
        var gvalues = g._values;
        var gindex = g._index;
        var gptr = g._ptr;
        var gsize = g._size; // columns

        var n = gsize[1]; // b arrays

        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr; // vars

        var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

        var top = csReach(g, b, k, xi, pinv); // clear x

        for (p = top; p < n; p++) {
          x[xi[p]] = 0;
        } // scatter b


        for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
          x[bindex[p]] = bvalues[p];
        } // loop columns


        for (var px = top; px < n; px++) {
          // x array index for px
          var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

          var J = pinv ? pinv[j] : j; // check column J is empty

          if (J < 0) {
            continue;
          } // column value indeces in G, p0 <= p < p1


          p0 = gptr[J];
          p1 = gptr[J + 1]; // x(j) /= G(j,j)

          x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

          p = lo ? p0 + 1 : p0;
          q = lo ? p1 : p1 - 1; // loop

          for (; p < q; p++) {
            // row
            var i = gindex[p]; // x(i) -= G(i,j) * x(j)

            x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
          }
        } // return top of stack


        return top;
      };
    });

    var name$3k = 'csLu';
    var dependencies$3l = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
    var createCsLu =
    /* #__PURE__ */
    factory(name$3k, dependencies$3l, function (_ref) {
      var abs = _ref.abs,
          divideScalar = _ref.divideScalar,
          multiply = _ref.multiply,
          subtract = _ref.subtract,
          larger = _ref.larger,
          largerEq = _ref.largerEq,
          SparseMatrix = _ref.SparseMatrix;
      var csSpsolve = createCsSpsolve({
        divideScalar: divideScalar,
        multiply: multiply,
        subtract: subtract
      });
      /**
       * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
       * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
       * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
       * L * U = A(p, q), where p is the inverse of pinv.
       *
       * @param {Matrix}  m               The A Matrix to factorize
       * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
       *                                  column ordering q
       * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
       *
       * @return {Number}                 The numeric LU factorization of A or null
       *
       * Reference: http://faculty.cse.tamu.edu/davis/publications.html
       */

      return function csLu(m, s, tol) {
        // validate input
        if (!m) {
          return null;
        } // m arrays


        var size = m._size; // columns

        var n = size[1]; // symbolic analysis result

        var q;
        var lnz = 100;
        var unz = 100; // update symbolic analysis parameters

        if (s) {
          q = s.q;
          lnz = s.lnz || lnz;
          unz = s.unz || unz;
        } // L arrays


        var lvalues = []; // (lnz)

        var lindex = []; // (lnz)

        var lptr = []; // (n + 1)
        // L

        var L = new SparseMatrix({
          values: lvalues,
          index: lindex,
          ptr: lptr,
          size: [n, n]
        }); // U arrays

        var uvalues = []; // (unz)

        var uindex = []; // (unz)

        var uptr = []; // (n + 1)
        // U

        var U = new SparseMatrix({
          values: uvalues,
          index: uindex,
          ptr: uptr,
          size: [n, n]
        }); // inverse of permutation vector

        var pinv = []; // (n)
        // vars

        var i, p; // allocate arrays

        var x = []; // (n)

        var xi = []; // (2 * n)
        // initialize variables

        for (i = 0; i < n; i++) {
          // clear workspace
          x[i] = 0; // no rows pivotal yet

          pinv[i] = -1; // no cols of L yet

          lptr[i + 1] = 0;
        } // reset number of nonzero elements in L and U


        lnz = 0;
        unz = 0; // compute L(:,k) and U(:,k)

        for (var k = 0; k < n; k++) {
          // update ptr
          lptr[k] = lnz;
          uptr[k] = unz; // apply column permutations if needed

          var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

          var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

          var ipiv = -1;
          var a = -1; // loop xi[] from top -> n

          for (p = top; p < n; p++) {
            // x[i] is nonzero
            i = xi[p]; // check row i is not yet pivotal

            if (pinv[i] < 0) {
              // absolute value of x[i]
              var xabs = abs(x[i]); // check absoulte value is greater than pivot value

              if (larger(xabs, a)) {
                // largest pivot candidate so far
                a = xabs;
                ipiv = i;
              }
            } else {
              // x(i) is the entry U(pinv[i],k)
              uindex[unz] = pinv[i];
              uvalues[unz++] = x[i];
            }
          } // validate we found a valid pivot


          if (ipiv === -1 || a <= 0) {
            return null;
          } // update actual pivot column, give preference to diagonal value


          if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
            ipiv = col;
          } // the chosen pivot


          var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

          uindex[unz] = k;
          uvalues[unz++] = pivot; // ipiv is the kth pivot row

          pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

          lindex[lnz] = ipiv;
          lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

          for (p = top; p < n; p++) {
            // row
            i = xi[p]; // check x(i) is an entry in L(:,k)

            if (pinv[i] < 0) {
              // save unpermuted row in L
              lindex[lnz] = i; // scale pivot column

              lvalues[lnz++] = divideScalar(x[i], pivot);
            } // x[0..n-1] = 0 for next k


            x[i] = 0;
          }
        } // update ptr


        lptr[n] = lnz;
        uptr[n] = unz; // fix row indices of L for final pinv

        for (p = 0; p < lnz; p++) {
          lindex[p] = pinv[lindex[p]];
        } // trim arrays


        lvalues.splice(lnz, lvalues.length - lnz);
        lindex.splice(lnz, lindex.length - lnz);
        uvalues.splice(unz, uvalues.length - unz);
        uindex.splice(unz, uindex.length - unz); // return LU factor

        return {
          L: L,
          U: U,
          pinv: pinv
        };
      };
    });

    var name$3l = 'slu';
    var dependencies$3m = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
    var createSlu =
    /* #__PURE__ */
    factory(name$3l, dependencies$3m, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          add = _ref.add,
          multiply = _ref.multiply,
          transpose = _ref.transpose,
          divideScalar = _ref.divideScalar,
          subtract = _ref.subtract,
          larger = _ref.larger,
          largerEq = _ref.largerEq,
          SparseMatrix = _ref.SparseMatrix;
      var csSqr = createCsSqr({
        add: add,
        multiply: multiply,
        transpose: transpose
      });
      var csLu = createCsLu({
        abs: abs,
        divideScalar: divideScalar,
        multiply: multiply,
        subtract: subtract,
        larger: larger,
        largerEq: largerEq,
        SparseMatrix: SparseMatrix
      });
      /**
       * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
       *
       * `P * A * Q = L * U`
       *
       * Syntax:
       *
       *    math.slu(A, order, threshold)
       *
       * Examples:
       *
       *    const A = math.sparse([[4,3], [6, 3]])
       *    math.slu(A, 1, 0.001)
       *    // returns:
       *    // {
       *    //   L: [[1, 0], [1.5, 1]]
       *    //   U: [[4, 3], [0, -1.5]]
       *    //   p: [0, 1]
       *    //   q: [0, 1]
       *    // }
       *
       * See also:
       *
       *    lup, lsolve, usolve, lusolve
       *
       * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
       * @param {Number}       order          The Symbolic Ordering and Analysis order:
       *                                       0 - Natural ordering, no permutation vector q is returned
       *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
       *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
       *                                           This is appropriatefor LU factorization of unsymmetric matrices.
       *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
       *                                           A dense row is a row with more than 10*sqr(columns) entries.
       * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
       *
       * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
       */

      return typed(name$3l, {
        'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
          // verify order
          if (!isInteger$1(order) || order < 0 || order > 3) {
            throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
          } // verify threshold


          if (threshold < 0 || threshold > 1) {
            throw new Error('Partial pivoting threshold must be a number from 0 to 1');
          } // perform symbolic ordering and analysis


          var s = csSqr(order, a, false); // perform lu decomposition

          var f = csLu(a, s, threshold); // return decomposition

          return {
            L: f.L,
            U: f.U,
            p: f.pinv,
            q: s.q,
            toString: function toString() {
              return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
            }
          };
        }
      });
    });

    /**
     * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
     *
     * @param {Array} p           The permutation vector of length n. null value denotes identity
     * @param {Array} b           The input vector
     *
     * @return {Array}            The output vector x = P'b
     */
    function csIpvec(p, b) {
      // vars
      var k;
      var n = b.length;
      var x = []; // check permutation vector was provided, p = null denotes identity

      if (p) {
        // loop vector
        for (k = 0; k < n; k++) {
          // apply permutation
          x[p[k]] = b[k];
        }
      } else {
        // loop vector
        for (k = 0; k < n; k++) {
          // x[i] = b[i]
          x[k] = b[k];
        }
      }

      return x;
    }

    var name$3m = 'lusolve';
    var dependencies$3n = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
    var createLusolve =
    /* #__PURE__ */
    factory(name$3m, dependencies$3n, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          lup = _ref.lup,
          slu = _ref.slu,
          usolve = _ref.usolve,
          lsolve = _ref.lsolve,
          DenseMatrix = _ref.DenseMatrix;
      var solveValidation = createSolveValidation({
        DenseMatrix: DenseMatrix
      });
      /**
       * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
       *
       * Syntax:
       *
       *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
       *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
       *
       * Examples:
       *
       *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
       *
       *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
       *
       *    const f = math.lup(m)
       *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
       *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
       *
       *    const a = [[-2, 3], [2, 1]]
       *    const b = [11, 9]
       *    const x = math.lusolve(a, b)  // [[2], [5]]
       *
       * See also:
       *
       *    lup, slu, lsolve, usolve
       *
       * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
       * @param {Matrix | Array} b               Column Vector
       * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
       * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
       *
       * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
       */

      return typed(name$3m, {
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
          // convert a to matrix
          a = matrix(a); // matrix lup decomposition

          var d = lup(a); // solve

          var x = _lusolve(d.L, d.U, d.p, null, b); // convert result to array


          return x.valueOf();
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
          // matrix lup decomposition
          var d = lup(a); // solve

          return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
          // matrix lup decomposition
          var d = lup(a); // solve

          return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
          // matrix lu decomposition
          var d = slu(a, order, threshold); // solve

          return _lusolve(d.L, d.U, d.p, d.q, b);
        },
        'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
          // solve
          return _lusolve(d.L, d.U, d.p, d.q, b);
        }
      });

      function _toMatrix(a) {
        // check it is a matrix
        if (isMatrix(a)) {
          return a;
        } // check array


        if (isArray$i(a)) {
          return matrix(a);
        } // throw


        throw new TypeError('Invalid Matrix LU decomposition');
      }

      function _lusolve(l, u, p, q, b) {
        // verify L, U, P
        l = _toMatrix(l);
        u = _toMatrix(u); // validate matrix and vector

        b = solveValidation(l, b, false); // apply row permutations if needed (b is a DenseMatrix)

        if (p) {
          b._data = csIpvec(p, b._data);
        } // use forward substitution to resolve L * y = b


        var y = lsolve(l, b); // use backward substitution to resolve U * x = y

        var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

        if (q) {
          x._data = csIpvec(q, x._data);
        } // return solution


        return x;
      }
    });

    var name$3n = 'Help';
    var dependencies$3o = ['parse'];
    var createHelpClass =
    /* #__PURE__ */
    factory(name$3n, dependencies$3o, function (_ref) {
      var parse = _ref.parse;

      /**
       * Documentation object
       * @param {Object} doc  Object containing properties:
       *                      {string} name
       *                      {string} category
       *                      {string} description
       *                      {string[]} syntax
       *                      {string[]} examples
       *                      {string[]} seealso
       * @constructor
       */
      function Help(doc) {
        if (!(this instanceof Help)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (!doc) throw new Error('Argument "doc" missing');
        this.doc = doc;
      }
      /**
       * Attach type information
       */


      Help.prototype.type = 'Help';
      Help.prototype.isHelp = true;
      /**
       * Generate a string representation of the Help object
       * @return {string} Returns a string
       * @private
       */

      Help.prototype.toString = function () {
        var doc = this.doc || {};
        var desc = '\n';

        if (doc.name) {
          desc += 'Name: ' + doc.name + '\n\n';
        }

        if (doc.category) {
          desc += 'Category: ' + doc.category + '\n\n';
        }

        if (doc.description) {
          desc += 'Description:\n    ' + doc.description + '\n\n';
        }

        if (doc.syntax) {
          desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
        }

        if (doc.examples) {
          desc += 'Examples:\n';
          var scope = {};

          for (var i = 0; i < doc.examples.length; i++) {
            var expr = doc.examples[i];
            desc += '    ' + expr + '\n';
            var res = void 0;

            try {
              // note: res can be undefined when `expr` is an empty string
              res = parse(expr).compile().evaluate(scope);
            } catch (e) {
              res = e;
            }

            if (res !== undefined && !isHelp(res)) {
              desc += '        ' + format$5(res, {
                precision: 14
              }) + '\n';
            }
          }

          desc += '\n';
        }

        if (doc.seealso && doc.seealso.length) {
          desc += 'See also: ' + doc.seealso.join(', ') + '\n';
        }

        return desc;
      };
      /**
       * Export the help object to JSON
       */


      Help.prototype.toJSON = function () {
        var obj = clone$3(this.doc);
        obj.mathjs = 'Help';
        return obj;
      };
      /**
       * Instantiate a Help object from a JSON object
       * @param {Object} json
       * @returns {Help} Returns a new Help object
       */


      Help.fromJSON = function (json) {
        var doc = {};

        for (var prop in json) {
          if (prop !== 'mathjs') {
            // ignore mathjs field
            doc[prop] = json[prop];
          }
        }

        return new Help(doc);
      };
      /**
       * Returns a string representation of the Help object
       */


      Help.prototype.valueOf = Help.prototype.toString;
      return Help;
    }, {
      isClass: true
    });

    var name$3o = 'Chain';
    var dependencies$3p = ['?on', 'math'];
    var createChainClass =
    /* #__PURE__ */
    factory(name$3o, dependencies$3p, function (_ref) {
      var on = _ref.on,
          math = _ref.math;

      /**
       * @constructor Chain
       * Wrap any value in a chain, allowing to perform chained operations on
       * the value.
       *
       * All methods available in the math.js library can be called upon the chain,
       * and then will be evaluated with the value itself as first argument.
       * The chain can be closed by executing chain.done(), which will return
       * the final value.
       *
       * The Chain has a number of special functions:
       * - done()             Finalize the chained operation and return the
       *                      chain's value.
       * - valueOf()          The same as done()
       * - toString()         Returns a string representation of the chain's value.
       *
       * @param {*} [value]
       */
      function Chain(value) {
        if (!(this instanceof Chain)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        if (isChain(value)) {
          this.value = value.value;
        } else {
          this.value = value;
        }
      }
      /**
       * Attach type information
       */


      Chain.prototype.type = 'Chain';
      Chain.prototype.isChain = true;
      /**
       * Close the chain. Returns the final value.
       * Does the same as method valueOf()
       * @returns {*} value
       */

      Chain.prototype.done = function () {
        return this.value;
      };
      /**
       * Close the chain. Returns the final value.
       * Does the same as method done()
       * @returns {*} value
       */


      Chain.prototype.valueOf = function () {
        return this.value;
      };
      /**
       * Get a string representation of the value in the chain
       * @returns {string}
       */


      Chain.prototype.toString = function () {
        return format$5(this.value);
      };
      /**
       * Get a JSON representation of the chain
       * @returns {Object}
       */


      Chain.prototype.toJSON = function () {
        return {
          mathjs: 'Chain',
          value: this.value
        };
      };
      /**
       * Instantiate a Chain from its JSON representation
       * @param {Object} json  An object structured like
       *                       `{"mathjs": "Chain", value: ...}`,
       *                       where mathjs is optional
       * @returns {Chain}
       */


      Chain.fromJSON = function (json) {
        return new Chain(json.value);
      };
      /**
       * Create a proxy method for the chain
       * @param {string} name
       * @param {Function} fn      The function to be proxied
       *                           If fn is no function, it is silently ignored.
       * @private
       */


      function createProxy(name, fn) {
        if (typeof fn === 'function') {
          Chain.prototype[name] = chainify(fn);
        }
      }
      /**
       * Create a proxy method for the chain
       * @param {string} name
       * @param {function} resolver   The function resolving with the
       *                              function to be proxied
       * @private
       */


      function createLazyProxy(name, resolver) {
        lazy$1(Chain.prototype, name, function outerResolver() {
          var fn = resolver();

          if (typeof fn === 'function') {
            return chainify(fn);
          }

          return undefined; // if not a function, ignore
        });
      }
      /**
       * Make a function chainable
       * @param {function} fn
       * @return {Function} chain function
       * @private
       */


      function chainify(fn) {
        return function () {
          var args = [this.value]; // `this` will be the context of a Chain instance

          for (var i = 0; i < arguments.length; i++) {
            args[i + 1] = arguments[i];
          }

          return new Chain(fn.apply(fn, args));
        };
      }
      /**
       * Create a proxy for a single method, or an object with multiple methods.
       * Example usage:
       *
       *   Chain.createProxy('add', function add (x, y) {...})
       *   Chain.createProxy({
       *     add:      function add (x, y) {...},
       *     subtract: function subtract (x, y) {...}
       *   }
       *
       * @param {string | Object} arg0   A name (string), or an object with
       *                                 functions
       * @param {*} [arg1]               A function, when arg0 is a name
       */


      Chain.createProxy = function (arg0, arg1) {
        if (typeof arg0 === 'string') {
          // createProxy(name, value)
          createProxy(arg0, arg1);
        } else {
          var _loop = function _loop(_name) {
            if (hasOwnProperty$1(arg0, _name) && excludedNames[_name] === undefined) {
              createLazyProxy(_name, function () {
                return arg0[_name];
              });
            }
          };

          // createProxy(values)
          for (var _name in arg0) {
            _loop(_name);
          }
        }
      };

      var excludedNames = {
        expression: true,
        docs: true,
        type: true,
        classes: true,
        json: true,
        error: true,
        isChain: true // conflicts with the property isChain of a Chain instance

      }; // create proxy for everything that is in math.js

      Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

      if (on) {
        on('import', function (name, resolver, path) {
          if (!path) {
            // an imported function (not a data type or something special)
            createLazyProxy(name, resolver);
          }
        });
      }

      return Chain;
    }, {
      isClass: true
    });

    var bignumberDocs = {
      name: 'bignumber',
      category: 'Construction',
      syntax: ['bignumber(x)'],
      description: 'Create a big number from a number or string.',
      examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
      seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
    };

    var typeOfDocs = {
      name: 'typeOf',
      category: 'Utils',
      syntax: ['typeOf(x)'],
      description: 'Get the type of a variable.',
      examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
      seealso: ['getMatrixDataType']
    };

    var isZeroDocs = {
      name: 'isZero',
      category: 'Utils',
      syntax: ['isZero(x)'],
      description: 'Test whether a value is zero.',
      examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
    };

    var isPrimeDocs = {
      name: 'isPrime',
      category: 'Utils',
      syntax: ['isPrime(x)'],
      description: 'Test whether a value is prime: has no divisors other than itself and one.',
      examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
    };

    var isPositiveDocs = {
      name: 'isPositive',
      category: 'Utils',
      syntax: ['isPositive(x)'],
      description: 'Test whether a value is positive: larger than zero.',
      examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
      seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
    };

    var isNumericDocs = {
      name: 'isNumeric',
      category: 'Utils',
      syntax: ['isNumeric(x)'],
      description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
      examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
      seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
    };

    var hasNumericValueDocs = {
      name: 'hasNumericValue',
      category: 'Utils',
      syntax: ['hasNumericValue(x)'],
      description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
      examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
      seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
    };

    var isNegativeDocs = {
      name: 'isNegative',
      category: 'Utils',
      syntax: ['isNegative(x)'],
      description: 'Test whether a value is negative: smaller than zero.',
      examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
      seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
    };

    var isIntegerDocs = {
      name: 'isInteger',
      category: 'Utils',
      syntax: ['isInteger(x)'],
      description: 'Test whether a value is an integer number.',
      examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
      seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
    };

    var isNaNDocs = {
      name: 'isNaN',
      category: 'Utils',
      syntax: ['isNaN(x)'],
      description: 'Test whether a value is NaN (not a number)',
      examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
      seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
    };

    var formatDocs = {
      name: 'format',
      category: 'Utils',
      syntax: ['format(value)', 'format(value, precision)'],
      description: 'Format a value of any type as string.',
      examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
      seealso: ['print']
    };

    var cloneDocs = {
      name: 'clone',
      category: 'Utils',
      syntax: ['clone(x)'],
      description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
      examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
      seealso: []
    };

    var toDocs = {
      name: 'to',
      category: 'Units',
      syntax: ['x to unit', 'to(x, unit)'],
      description: 'Change the unit of a value.',
      examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
      seealso: []
    };

    var tanhDocs = {
      name: 'tanh',
      category: 'Trigonometry',
      syntax: ['tanh(x)'],
      description: 'Compute the hyperbolic tangent of x in radians.',
      examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
      seealso: ['sinh', 'cosh']
    };

    var tanDocs = {
      name: 'tan',
      category: 'Trigonometry',
      syntax: ['tan(x)'],
      description: 'Compute the tangent of x in radians.',
      examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
      seealso: ['atan', 'sin', 'cos']
    };

    var sinhDocs = {
      name: 'sinh',
      category: 'Trigonometry',
      syntax: ['sinh(x)'],
      description: 'Compute the hyperbolic sine of x in radians.',
      examples: ['sinh(0.5)'],
      seealso: ['cosh', 'tanh']
    };

    var sechDocs = {
      name: 'sech',
      category: 'Trigonometry',
      syntax: ['sech(x)'],
      description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
      examples: ['sech(2)', '1 / cosh(2)'],
      seealso: ['coth', 'csch', 'cosh']
    };

    var secDocs = {
      name: 'sec',
      category: 'Trigonometry',
      syntax: ['sec(x)'],
      description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
      examples: ['sec(2)', '1 / cos(2)'],
      seealso: ['cot', 'csc', 'cos']
    };

    var cschDocs = {
      name: 'csch',
      category: 'Trigonometry',
      syntax: ['csch(x)'],
      description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
      examples: ['csch(2)', '1 / sinh(2)'],
      seealso: ['sech', 'coth', 'sinh']
    };

    var cscDocs = {
      name: 'csc',
      category: 'Trigonometry',
      syntax: ['csc(x)'],
      description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
      examples: ['csc(2)', '1 / sin(2)'],
      seealso: ['sec', 'cot', 'sin']
    };

    var cothDocs = {
      name: 'coth',
      category: 'Trigonometry',
      syntax: ['coth(x)'],
      description: 'Compute the hyperbolic cotangent of x in radians.',
      examples: ['coth(2)', '1 / tanh(2)'],
      seealso: ['sech', 'csch', 'tanh']
    };

    var cotDocs = {
      name: 'cot',
      category: 'Trigonometry',
      syntax: ['cot(x)'],
      description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
      examples: ['cot(2)', '1 / tan(2)'],
      seealso: ['sec', 'csc', 'tan']
    };

    var coshDocs = {
      name: 'cosh',
      category: 'Trigonometry',
      syntax: ['cosh(x)'],
      description: 'Compute the hyperbolic cosine of x in radians.',
      examples: ['cosh(0.5)'],
      seealso: ['sinh', 'tanh', 'coth']
    };

    var cosDocs = {
      name: 'cos',
      category: 'Trigonometry',
      syntax: ['cos(x)'],
      description: 'Compute the cosine of x in radians.',
      examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
      seealso: ['acos', 'sin', 'tan']
    };

    var atan2Docs = {
      name: 'atan2',
      category: 'Trigonometry',
      syntax: ['atan2(y, x)'],
      description: 'Computes the principal value of the arc tangent of y/x in radians.',
      examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
      seealso: ['sin', 'cos', 'tan']
    };

    var atanhDocs = {
      name: 'atanh',
      category: 'Trigonometry',
      syntax: ['atanh(x)'],
      description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
      examples: ['atanh(0.5)'],
      seealso: ['acosh', 'asinh']
    };

    var atanDocs = {
      name: 'atan',
      category: 'Trigonometry',
      syntax: ['atan(x)'],
      description: 'Compute the inverse tangent of a value in radians.',
      examples: ['atan(0.5)', 'atan(tan(0.5))'],
      seealso: ['tan', 'acos', 'asin']
    };

    var asinhDocs = {
      name: 'asinh',
      category: 'Trigonometry',
      syntax: ['asinh(x)'],
      description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
      examples: ['asinh(0.5)'],
      seealso: ['acosh', 'atanh']
    };

    var asinDocs = {
      name: 'asin',
      category: 'Trigonometry',
      syntax: ['asin(x)'],
      description: 'Compute the inverse sine of a value in radians.',
      examples: ['asin(0.5)', 'asin(sin(0.5))'],
      seealso: ['sin', 'acos', 'atan']
    };

    var asechDocs = {
      name: 'asech',
      category: 'Trigonometry',
      syntax: ['asech(x)'],
      description: 'Calculate the inverse secant of a value.',
      examples: ['asech(0.5)'],
      seealso: ['acsch', 'acoth']
    };

    var asecDocs = {
      name: 'asec',
      category: 'Trigonometry',
      syntax: ['asec(x)'],
      description: 'Calculate the inverse secant of a value.',
      examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
      seealso: ['acos', 'acot', 'acsc']
    };

    var acschDocs = {
      name: 'acsch',
      category: 'Trigonometry',
      syntax: ['acsch(x)'],
      description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
      examples: ['acsch(0.5)'],
      seealso: ['asech', 'acoth']
    };

    var acscDocs = {
      name: 'acsc',
      category: 'Trigonometry',
      syntax: ['acsc(x)'],
      description: 'Calculate the inverse cotangent of a value.',
      examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
      seealso: ['csc', 'asin', 'asec']
    };

    var acothDocs = {
      name: 'acoth',
      category: 'Trigonometry',
      syntax: ['acoth(x)'],
      description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
      examples: ['acoth(2)', 'acoth(0.5)'],
      seealso: ['acsch', 'asech']
    };

    var acotDocs = {
      name: 'acot',
      category: 'Trigonometry',
      syntax: ['acot(x)'],
      description: 'Calculate the inverse cotangent of a value.',
      examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
      seealso: ['cot', 'atan']
    };

    var acoshDocs = {
      name: 'acosh',
      category: 'Trigonometry',
      syntax: ['acosh(x)'],
      description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
      examples: ['acosh(1.5)'],
      seealso: ['cosh', 'asinh', 'atanh']
    };

    var acosDocs = {
      name: 'acos',
      category: 'Trigonometry',
      syntax: ['acos(x)'],
      description: 'Compute the inverse cosine of a value in radians.',
      examples: ['acos(0.5)', 'acos(cos(2.3))'],
      seealso: ['cos', 'atan', 'asin']
    };

    var sumDocs = {
      name: 'sum',
      category: 'Statistics',
      syntax: ['sum(a, b, c, ...)', 'sum(A)'],
      description: 'Compute the sum of all values.',
      examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
      seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var stdDocs = {
      name: 'std',
      category: 'Statistics',
      syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
      description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
      seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']
    };

    var quantileSeqDocs = {
      name: 'quantileSeq',
      category: 'Statistics',
      syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
      description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
      examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
      seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
    };

    var prodDocs = {
      name: 'prod',
      category: 'Statistics',
      syntax: ['prod(a, b, c, ...)', 'prod(A)'],
      description: 'Compute the product of all values.',
      examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
      seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
    };

    var modeDocs = {
      name: 'mode',
      category: 'Statistics',
      syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
      description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
      examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
      seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
    };

    var minDocs = {
      name: 'min',
      category: 'Statistics',
      syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
      description: 'Compute the minimum value of a list of values.',
      examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
      seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
    };

    var medianDocs = {
      name: 'median',
      category: 'Statistics',
      syntax: ['median(a, b, c, ...)', 'median(A)'],
      description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
      examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
      seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
    };

    var meanDocs = {
      name: 'mean',
      category: 'Statistics',
      syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
      description: 'Compute the arithmetic mean of a list of values.',
      examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
      seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var maxDocs = {
      name: 'max',
      category: 'Statistics',
      syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
      description: 'Compute the maximum value of a list of values.',
      examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
      seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
    };

    var madDocs = {
      name: 'mad',
      category: 'Statistics',
      syntax: ['mad(a, b, c, ...)', 'mad(A)'],
      description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
      examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
      seealso: ['mean', 'median', 'std', 'abs']
    };

    var erfDocs = {
      name: 'erf',
      category: 'Special',
      syntax: ['erf(x)'],
      description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
      examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
      seealso: []
    };

    var setUnionDocs = {
      name: 'setUnion',
      category: 'Set',
      syntax: ['setUnion(set1, set2)'],
      description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setIntersect', 'setDifference']
    };

    var setSymDifferenceDocs = {
      name: 'setSymDifference',
      category: 'Set',
      syntax: ['setSymDifference(set1, set2)'],
      description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setSizeDocs = {
      name: 'setSize',
      category: 'Set',
      syntax: ['setSize(set)', 'setSize(set, unique)'],
      description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setPowersetDocs = {
      name: 'setPowerset',
      category: 'Set',
      syntax: ['setPowerset(set)'],
      description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setPowerset([1, 2, 3])'],
      seealso: ['setCartesian']
    };

    var setMultiplicityDocs = {
      name: 'setMultiplicity',
      category: 'Set',
      syntax: ['setMultiplicity(element, set)'],
      description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
      seealso: ['setDistinct', 'setSize']
    };

    var setIsSubsetDocs = {
      name: 'setIsSubset',
      category: 'Set',
      syntax: ['setIsSubset(set1, set2)'],
      description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference']
    };

    var setIntersectDocs = {
      name: 'setIntersect',
      category: 'Set',
      syntax: ['setIntersect(set1, set2)'],
      description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setDifference']
    };

    var setDistinctDocs = {
      name: 'setDistinct',
      category: 'Set',
      syntax: ['setDistinct(set)'],
      description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
      examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
      seealso: ['setMultiplicity']
    };

    var setDifferenceDocs = {
      name: 'setDifference',
      category: 'Set',
      syntax: ['setDifference(set1, set2)'],
      description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
      seealso: ['setUnion', 'setIntersect', 'setSymDifference']
    };

    var setCartesianDocs = {
      name: 'setCartesian',
      category: 'Set',
      syntax: ['setCartesian(set1, set2)'],
      description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
      examples: ['setCartesian([1, 2], [3, 4])'],
      seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
    };

    var unequalDocs = {
      name: 'unequal',
      category: 'Relational',
      syntax: ['x != y', 'unequal(x, y)'],
      description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
      examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
      seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
    };

    var smallerEqDocs = {
      name: 'smallerEq',
      category: 'Relational',
      syntax: ['x <= y', 'smallerEq(x, y)'],
      description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
      examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
      seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
    };

    var smallerDocs = {
      name: 'smaller',
      category: 'Relational',
      syntax: ['x < y', 'smaller(x, y)'],
      description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
      examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
      seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
    };

    var largerEqDocs = {
      name: 'largerEq',
      category: 'Relational',
      syntax: ['x >= y', 'largerEq(x, y)'],
      description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
      examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
      seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
    };

    var largerDocs = {
      name: 'larger',
      category: 'Relational',
      syntax: ['x > y', 'larger(x, y)'],
      description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
      examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
    };

    var equalTextDocs = {
      name: 'equalText',
      category: 'Relational',
      syntax: ['equalText(x, y)'],
      description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
      examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
      seealso: ['compare', 'compareNatural', 'compareText', 'equal']
    };

    var equalDocs = {
      name: 'equal',
      category: 'Relational',
      syntax: ['x == y', 'equal(x, y)'],
      description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
      examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
      seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
    };

    var deepEqualDocs = {
      name: 'deepEqual',
      category: 'Relational',
      syntax: ['deepEqual(x, y)'],
      description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
      examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
      seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
    };

    var compareTextDocs = {
      name: 'compareText',
      category: 'Relational',
      syntax: ['compareText(x, y)'],
      description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
      seealso: ['compare', 'compareNatural']
    };

    var compareNaturalDocs = {
      name: 'compareNatural',
      category: 'Relational',
      syntax: ['compareNatural(x, y)'],
      description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
    };

    var compareDocs = {
      name: 'compare',
      category: 'Relational',
      syntax: ['compare(x, y)'],
      description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
      examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
      seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
    };

    var randomIntDocs = {
      name: 'randomInt',
      category: 'Probability',
      syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
      description: 'Return a random integer number',
      examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
      seealso: ['pickRandom', 'random']
    };

    var randomDocs = {
      name: 'random',
      category: 'Probability',
      syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
      description: 'Return a random number.',
      examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
      seealso: ['pickRandom', 'randomInt']
    };

    var pickRandomDocs = {
      name: 'pickRandom',
      category: 'Probability',
      syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
      description: 'Pick a random entry from a given array.',
      examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
      seealso: ['random', 'randomInt']
    };

    var permutationsDocs = {
      name: 'permutations',
      category: 'Probability',
      syntax: ['permutations(n)', 'permutations(n, k)'],
      description: 'Compute the number of permutations of n items taken k at a time',
      examples: ['permutations(5)', 'permutations(5, 3)'],
      seealso: ['combinations', 'combinationsWithRep', 'factorial']
    };

    var multinomialDocs = {
      name: 'multinomial',
      category: 'Probability',
      syntax: ['multinomial(A)'],
      description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
      examples: ['multinomial([1, 2, 1])'],
      seealso: ['combinations', 'factorial']
    };

    var kldivergenceDocs = {
      name: 'kldivergence',
      category: 'Probability',
      syntax: ['kldivergence(x, y)'],
      description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
      examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
      seealso: []
    };

    var gammaDocs = {
      name: 'gamma',
      category: 'Probability',
      syntax: ['gamma(n)'],
      description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
      examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
      seealso: ['factorial']
    };

    var factorialDocs = {
      name: 'factorial',
      category: 'Probability',
      syntax: ['n!', 'factorial(n)'],
      description: 'Compute the factorial of a value',
      examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
      seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
    };

    var combinationsDocs = {
      name: 'combinations',
      category: 'Probability',
      syntax: ['combinations(n, k)'],
      description: 'Compute the number of combinations of n items taken k at a time',
      examples: ['combinations(7, 5)'],
      seealso: ['combinationsWithRep', 'permutations', 'factorial']
    };

    var combinationsWithRepDocs = {
      name: 'combinationsWithRep',
      category: 'Probability',
      syntax: ['combinationsWithRep(n, k)'],
      description: 'Compute the number of combinations of n items taken k at a time with replacements.',
      examples: ['combinationsWithRep(7, 5)'],
      seealso: ['combinations', 'permutations', 'factorial']
    };

    var zerosDocs = {
      name: 'zeros',
      category: 'Matrix',
      syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
      description: 'Create a matrix containing zeros.',
      examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
    };

    var transposeDocs = {
      name: 'transpose',
      category: 'Matrix',
      syntax: ['x\'', 'transpose(x)'],
      description: 'Transpose a matrix',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
    };

    var traceDocs = {
      name: 'trace',
      category: 'Matrix',
      syntax: ['trace(A)'],
      description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
      examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
    };

    var subsetDocs = {
      name: 'subset',
      category: 'Matrix',
      syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
      description: 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
      examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
    };

    var squeezeDocs = {
      name: 'squeeze',
      category: 'Matrix',
      syntax: ['squeeze(x)'],
      description: 'Remove inner and outer singleton dimensions from a matrix.',
      examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
    };

    var sortDocs = {
      name: 'sort',
      category: 'Matrix',
      syntax: ['sort(x)', 'sort(x, compare)'],
      description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
      examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
      seealso: ['map', 'filter', 'forEach']
    };

    var sizeDocs = {
      name: 'size',
      category: 'Matrix',
      syntax: ['size(x)'],
      description: 'Calculate the size of a matrix.',
      examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var reshapeDocs = {
      name: 'reshape',
      category: 'Matrix',
      syntax: ['reshape(x, sizes)'],
      description: 'Reshape a multi dimensional array to fit the specified dimensions.',
      examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
      seealso: ['size', 'squeeze', 'resize']
    };

    var resizeDocs = {
      name: 'resize',
      category: 'Matrix',
      syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
      description: 'Resize a matrix.',
      examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
      seealso: ['size', 'subset', 'squeeze', 'reshape']
    };

    var rangeDocs = {
      name: 'range',
      category: 'Type',
      syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
      description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
      examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var partitionSelectDocs = {
      name: 'partitionSelect',
      category: 'Matrix',
      syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
      description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
      examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
      seealso: ['sort']
    };

    var onesDocs = {
      name: 'ones',
      category: 'Matrix',
      syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
      description: 'Create a matrix containing ones.',
      examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var mapDocs = {
      name: 'map',
      category: 'Matrix',
      syntax: ['map(x, callback)'],
      description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
      examples: ['map([1, 2, 3], square)'],
      seealso: ['filter', 'forEach']
    };

    var kronDocs = {
      name: 'kron',
      category: 'Matrix',
      syntax: ['kron(x, y)'],
      description: 'Calculates the kronecker product of 2 matrices or vectors.',
      examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
      seealso: ['multiply', 'dot', 'cross']
    };

    var invDocs = {
      name: 'inv',
      category: 'Matrix',
      syntax: ['inv(x)'],
      description: 'Calculate the inverse of a matrix',
      examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
      seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var forEachDocs = {
      name: 'forEach',
      category: 'Matrix',
      syntax: ['forEach(x, callback)'],
      description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
      examples: ['forEach([1, 2, 3], function(val) { console.log(val) })'],
      seealso: ['map', 'sort', 'filter']
    };

    var flattenDocs = {
      name: 'flatten',
      category: 'Matrix',
      syntax: ['flatten(x)'],
      description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
      seealso: ['concat', 'resize', 'size', 'squeeze']
    };

    var filterDocs = {
      name: 'filter',
      category: 'Matrix',
      syntax: ['filter(x, test)'],
      description: 'Filter items in a matrix.',
      examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
      seealso: ['sort', 'map', 'forEach']
    };

    var identityDocs = {
      name: 'identity',
      category: 'Matrix',
      syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
      description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
      examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
      seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var getMatrixDataTypeDocs = {
      name: 'getMatrixDataType',
      category: 'Matrix',
      syntax: ['getMatrixDataType(x)'],
      description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
      examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
      seealso: ['matrix', 'sparse', 'typeOf']
    };

    var dotDocs = {
      name: 'dot',
      category: 'Matrix',
      syntax: ['dot(A, B)', 'A * B'],
      description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
      examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
      seealso: ['multiply', 'cross']
    };

    var diagDocs = {
      name: 'diag',
      category: 'Matrix',
      syntax: ['diag(x)', 'diag(x, k)'],
      description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
      examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
      seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var detDocs = {
      name: 'det',
      category: 'Matrix',
      syntax: ['det(x)'],
      description: 'Calculate the determinant of a matrix',
      examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
      seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var ctransposeDocs = {
      name: 'ctranspose',
      category: 'Matrix',
      syntax: ['x\'', 'ctranspose(x)'],
      description: 'Complex Conjugate and Transpose a matrix',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
      seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
    };

    var crossDocs = {
      name: 'cross',
      category: 'Matrix',
      syntax: ['cross(A, B)'],
      description: 'Calculate the cross product for two vectors in three dimensional space.',
      examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
      seealso: ['multiply', 'dot']
    };

    var concatDocs = {
      name: 'concat',
      category: 'Matrix',
      syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
      description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
      examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
      seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
    };

    var xorDocs = {
      name: 'xor',
      category: 'Logical',
      syntax: ['x xor y', 'xor(x, y)'],
      description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
      examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
      seealso: ['not', 'and', 'or']
    };

    var orDocs = {
      name: 'or',
      category: 'Logical',
      syntax: ['x or y', 'or(x, y)'],
      description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
      examples: ['true or false', 'false or false', '0 or 4'],
      seealso: ['not', 'and', 'xor']
    };

    var notDocs = {
      name: 'not',
      category: 'Logical',
      syntax: ['not x', 'not(x)'],
      description: 'Logical not. Flips the boolean value of given argument.',
      examples: ['not true', 'not false', 'not 2', 'not 0'],
      seealso: ['and', 'or', 'xor']
    };

    var andDocs = {
      name: 'and',
      category: 'Logical',
      syntax: ['x and y', 'and(x, y)'],
      description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
      examples: ['true and false', 'true and true', '2 and 4'],
      seealso: ['not', 'or', 'xor']
    };

    var intersectDocs = {
      name: 'intersect',
      category: 'Geometry',
      syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
      description: 'Computes the intersection point of lines and/or planes.',
      examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
      seealso: []
    };

    var distanceDocs = {
      name: 'distance',
      category: 'Geometry',
      syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],
      description: 'Calculates the Euclidean distance between two points.',
      examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
      seealso: []
    };

    var helpDocs = {
      name: 'help',
      category: 'Expression',
      syntax: ['help(object)', 'help(string)'],
      description: 'Display documentation on a function or data type.',
      examples: ['help(sqrt)', 'help("complex")'],
      seealso: []
    };

    var evaluateDocs = {
      name: 'evaluate',
      category: 'Expression',
      syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
      description: 'Evaluate an expression or an array with expressions.',
      examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
      seealso: []
    };

    var imDocs = {
      name: 'im',
      category: 'Complex',
      syntax: ['im(x)'],
      description: 'Get the imaginary part of a complex number.',
      examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
      seealso: ['re', 'conj', 'abs', 'arg']
    };

    var reDocs = {
      name: 're',
      category: 'Complex',
      syntax: ['re(x)'],
      description: 'Get the real part of a complex number.',
      examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
      seealso: ['im', 'conj', 'abs', 'arg']
    };

    var conjDocs = {
      name: 'conj',
      category: 'Complex',
      syntax: ['conj(x)'],
      description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
      examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
      seealso: ['re', 'im', 'abs', 'arg']
    };

    var argDocs = {
      name: 'arg',
      category: 'Complex',
      syntax: ['arg(x)'],
      description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
      examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
      seealso: ['re', 'im', 'conj', 'abs']
    };

    var typedDocs = {
      name: 'typed',
      category: 'Core',
      syntax: ['typed(signatures)', 'typed(name, signatures)'],
      description: 'Create a typed function.',
      examples: ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
      seealso: []
    };

    var importDocs = {
      name: 'import',
      category: 'Core',
      syntax: ['import(functions)', 'import(functions, options)'],
      description: 'Import functions or constants from an object.',
      examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
      seealso: []
    };

    var configDocs = {
      name: 'config',
      category: 'Core',
      syntax: ['config()', 'config(options)'],
      description: 'Get configuration or change configuration.',
      examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
      seealso: []
    };

    var stirlingS2Docs = {
      name: 'stirlingS2',
      category: 'Combinatorics',
      syntax: ['stirlingS2(n, k)'],
      description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
      examples: ['stirlingS2(5, 3)'],
      seealso: ['bellNumbers']
    };

    var compositionDocs = {
      name: 'composition',
      category: 'Combinatorics',
      syntax: ['composition(n, k)'],
      description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
      examples: ['composition(5, 3)'],
      seealso: ['combinations']
    };

    var catalanDocs = {
      name: 'catalan',
      category: 'Combinatorics',
      syntax: ['catalan(n)'],
      description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
      examples: ['catalan(3)', 'catalan(8)'],
      seealso: ['bellNumbers']
    };

    var bellNumbersDocs = {
      name: 'bellNumbers',
      category: 'Combinatorics',
      syntax: ['bellNumbers(n)'],
      description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
      examples: ['bellNumbers(3)', 'bellNumbers(8)'],
      seealso: ['stirlingS2']
    };

    var rightLogShiftDocs = {
      name: 'rightLogShift',
      category: 'Bitwise',
      syntax: ['x >>> y', 'rightLogShift(x, y)'],
      description: 'Bitwise right logical shift of a value x by y number of bits.',
      examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
    };

    var rightArithShiftDocs = {
      name: 'rightArithShift',
      category: 'Bitwise',
      syntax: ['x >> y', 'rightArithShift(x, y)'],
      description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
      examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
    };

    var leftShiftDocs = {
      name: 'leftShift',
      category: 'Bitwise',
      syntax: ['x << y', 'leftShift(x, y)'],
      description: 'Bitwise left logical shift of a value x by y number of bits.',
      examples: ['4 << 1', '8 >> 1'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
    };

    var bitXorDocs = {
      name: 'bitXor',
      category: 'Bitwise',
      syntax: ['bitXor(x, y)'],
      description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
      examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
      seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitOrDocs = {
      name: 'bitOr',
      category: 'Bitwise',
      syntax: ['x | y', 'bitOr(x, y)'],
      description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
      examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
      seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitNotDocs = {
      name: 'bitNot',
      category: 'Bitwise',
      syntax: ['~x', 'bitNot(x)'],
      description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
      examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
      seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var bitAndDocs = {
      name: 'bitAnd',
      category: 'Bitwise',
      syntax: ['x & y', 'bitAnd(x, y)'],
      description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
      examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
      seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
    };

    var xgcdDocs = {
      name: 'xgcd',
      category: 'Arithmetic',
      syntax: ['xgcd(a, b)'],
      description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
      examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
      seealso: ['gcd', 'lcm']
    };

    var unaryPlusDocs = {
      name: 'unaryPlus',
      category: 'Operators',
      syntax: ['+x', 'unaryPlus(x)'],
      description: 'Converts booleans and strings to numbers.',
      examples: ['+true', '+"2"'],
      seealso: ['add', 'subtract', 'unaryMinus']
    };

    var unaryMinusDocs = {
      name: 'unaryMinus',
      category: 'Operators',
      syntax: ['-x', 'unaryMinus(x)'],
      description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
      examples: ['-4.5', '-(-5.6)', '-"22"'],
      seealso: ['add', 'subtract', 'unaryPlus']
    };

    var squareDocs = {
      name: 'square',
      category: 'Arithmetic',
      syntax: ['square(x)'],
      description: 'Compute the square of a value. The square of x is x * x.',
      examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
      seealso: ['multiply', 'pow', 'sqrt', 'cube']
    };

    var sqrtmDocs = {
      name: 'sqrtm',
      category: 'Arithmetic',
      syntax: ['sqrtm(x)'],
      description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
      examples: ['sqrtm([[1, 2], [3, 4]])'],
      seealso: ['sqrt', 'abs', 'square', 'multiply']
    };

    var sqrtDocs = {
      name: 'sqrt',
      category: 'Arithmetic',
      syntax: ['sqrt(x)'],
      description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
      examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
      seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
    };

    var signDocs = {
      name: 'sign',
      category: 'Arithmetic',
      syntax: ['sign(x)'],
      description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
      examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
      seealso: ['abs']
    };

    var roundDocs = {
      name: 'round',
      category: 'Arithmetic',
      syntax: ['round(x)', 'round(x, n)'],
      description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
      examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
      seealso: ['ceil', 'floor', 'fix']
    };

    var powDocs = {
      name: 'pow',
      category: 'Operators',
      syntax: ['x ^ y', 'pow(x, y)'],
      description: 'Calculates the power of x to y, x^y.',
      examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
      seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
    };

    var nthRootsDocs = {
      name: 'nthRoots',
      category: 'Arithmetic',
      syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
      description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
      examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
      seealso: ['sqrt', 'pow', 'nthRoot']
    };

    var nthRootDocs = {
      name: 'nthRoot',
      category: 'Arithmetic',
      syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
      description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
      examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
      seealso: ['nthRoots', 'pow', 'sqrt']
    };

    var normDocs = {
      name: 'norm',
      category: 'Arithmetic',
      syntax: ['norm(x)', 'norm(x, p)'],
      description: 'Calculate the norm of a number, vector or matrix.',
      examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
    };

    var multiplyDocs = {
      name: 'multiply',
      category: 'Operators',
      syntax: ['x * y', 'multiply(x, y)'],
      description: 'multiply two values.',
      examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
      seealso: ['divide']
    };

    var modDocs = {
      name: 'mod',
      category: 'Operators',
      syntax: ['x % y', 'x mod y', 'mod(x, y)'],
      description: 'Calculates the modulus, the remainder of an integer division.',
      examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
      seealso: ['divide']
    };

    var log10Docs = {
      name: 'log10',
      category: 'Arithmetic',
      syntax: ['log10(x)'],
      description: 'Compute the 10-base logarithm of a value.',
      examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
      seealso: ['exp', 'log']
    };

    var log1pDocs = {
      name: 'log1p',
      category: 'Arithmetic',
      syntax: ['log1p(x)', 'log1p(x, base)'],
      description: 'Calculate the logarithm of a `value+1`',
      examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
      seealso: ['exp', 'log', 'log2', 'log10']
    };

    var log2Docs = {
      name: 'log2',
      category: 'Arithmetic',
      syntax: ['log2(x)'],
      description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
      examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
      seealso: ['exp', 'log1p', 'log', 'log10']
    };

    var logDocs = {
      name: 'log',
      category: 'Arithmetic',
      syntax: ['log(x)', 'log(x, base)'],
      description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
      examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
      seealso: ['exp', 'log1p', 'log2', 'log10']
    };

    var lcmDocs = {
      name: 'lcm',
      category: 'Arithmetic',
      syntax: ['lcm(x, y)'],
      description: 'Compute the least common multiple.',
      examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
      seealso: ['gcd']
    };

    var hypotDocs = {
      name: 'hypot',
      category: 'Arithmetic',
      syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
      description: 'Calculate the hypotenusa of a list with values. ',
      examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
      seealso: ['abs', 'norm']
    };

    var gcdDocs = {
      name: 'gcd',
      category: 'Arithmetic',
      syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
      description: 'Compute the greatest common divisor.',
      examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
      seealso: ['lcm', 'xgcd']
    };

    var floorDocs = {
      name: 'floor',
      category: 'Arithmetic',
      syntax: ['floor(x)'],
      description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
      examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
      seealso: ['ceil', 'fix', 'round']
    };

    var fixDocs = {
      name: 'fix',
      category: 'Arithmetic',
      syntax: ['fix(x)'],
      description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
      examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
      seealso: ['ceil', 'floor', 'round']
    };

    var expm1Docs = {
      name: 'expm1',
      category: 'Arithmetic',
      syntax: ['expm1(x)'],
      description: 'Calculate the value of subtracting 1 from the exponential value.',
      examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
      seealso: ['exp', 'pow', 'log']
    };

    var expmDocs = {
      name: 'expm',
      category: 'Arithmetic',
      syntax: ['exp(x)'],
      description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
      examples: ['expm([[0,2],[0,0]])'],
      seealso: ['exp']
    };

    var eigsDocs = {
      name: 'eigs',
      category: 'Matrix',
      syntax: ['eigs(x)'],
      description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
      examples: ['eigs([[5, 2.3], [2.3, 1]])'],
      seealso: ['inv']
    };

    var expDocs = {
      name: 'exp',
      category: 'Arithmetic',
      syntax: ['exp(x)'],
      description: 'Calculate the exponent of a value.',
      examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
      seealso: ['expm', 'expm1', 'pow', 'log']
    };

    var dotMultiplyDocs = {
      name: 'dotMultiply',
      category: 'Operators',
      syntax: ['x .* y', 'dotMultiply(x, y)'],
      description: 'Multiply two values element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
      seealso: ['multiply', 'divide', 'dotDivide']
    };

    var dotDivideDocs = {
      name: 'dotDivide',
      category: 'Operators',
      syntax: ['x ./ y', 'dotDivide(x, y)'],
      description: 'Divide two values element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
      seealso: ['multiply', 'dotMultiply', 'divide']
    };

    var divideDocs = {
      name: 'divide',
      category: 'Operators',
      syntax: ['x / y', 'divide(x, y)'],
      description: 'Divide two values.',
      examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
      seealso: ['multiply']
    };

    var cubeDocs = {
      name: 'cube',
      category: 'Arithmetic',
      syntax: ['cube(x)'],
      description: 'Compute the cube of a value. The cube of x is x * x * x.',
      examples: ['cube(2)', '2^3', '2 * 2 * 2'],
      seealso: ['multiply', 'square', 'pow']
    };

    var ceilDocs = {
      name: 'ceil',
      category: 'Arithmetic',
      syntax: ['ceil(x)'],
      description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
      examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
      seealso: ['floor', 'fix', 'round']
    };

    var cbrtDocs = {
      name: 'cbrt',
      category: 'Arithmetic',
      syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
      description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
      examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
      seealso: ['square', 'sqrt', 'cube', 'multiply']
    };

    var addDocs = {
      name: 'add',
      category: 'Operators',
      syntax: ['x + y', 'add(x, y)'],
      description: 'Add two values.',
      examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
      seealso: ['subtract']
    };

    var absDocs = {
      name: 'abs',
      category: 'Arithmetic',
      syntax: ['abs(x)'],
      description: 'Compute the absolute value.',
      examples: ['abs(3.5)', 'abs(-4.2)'],
      seealso: ['sign']
    };

    var qrDocs = {
      name: 'qr',
      category: 'Algebra',
      syntax: ['qr(A)'],
      description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
      examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
      seealso: ['lup', 'slu', 'matrix']
    };

    var usolveDocs = {
      name: 'usolve',
      category: 'Algebra',
      syntax: ['x=usolve(U, b)'],
      description: 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
      examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
      seealso: ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
    };

    var sluDocs = {
      name: 'slu',
      category: 'Algebra',
      syntax: ['slu(A, order, threshold)'],
      description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
      examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
      seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
    };

    var rationalizeDocs = {
      name: 'rationalize',
      category: 'Algebra',
      syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
      description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
      examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
      seealso: ['simplify']
    };

    var simplifyDocs = {
      name: 'simplify',
      category: 'Algebra',
      syntax: ['simplify(expr)', 'simplify(expr, rules)'],
      description: 'Simplify an expression tree.',
      examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
      seealso: ['derivative', 'parse', 'evaluate']
    };

    var lupDocs = {
      name: 'lup',
      category: 'Algebra',
      syntax: ['lup(m)'],
      description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
      examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
      seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
    };

    var lsolveDocs = {
      name: 'lsolve',
      category: 'Algebra',
      syntax: ['x=lsolve(L, b)'],
      description: 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
      examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
      seealso: ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
    };

    var derivativeDocs = {
      name: 'derivative',
      category: 'Algebra',
      syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
      description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
      examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
      seealso: ['simplify', 'parse', 'evaluate']
    };

    var versionDocs = {
      name: 'version',
      category: 'Constants',
      syntax: ['version'],
      description: 'A string with the version number of math.js',
      examples: ['version'],
      seealso: []
    };

    var trueDocs = {
      name: 'true',
      category: 'Constants',
      syntax: ['true'],
      description: 'Boolean value true',
      examples: ['true'],
      seealso: ['false']
    };

    var tauDocs = {
      name: 'tau',
      category: 'Constants',
      syntax: ['tau'],
      description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
      examples: ['tau', '2 * pi'],
      seealso: ['pi']
    };

    var SQRT2Docs = {
      name: 'SQRT2',
      category: 'Constants',
      syntax: ['SQRT2'],
      description: 'Returns the square root of 2, approximately equal to 1.414',
      examples: ['SQRT2', 'sqrt(2)'],
      seealso: []
    };

    var SQRT12Docs = {
      name: 'SQRT1_2',
      category: 'Constants',
      syntax: ['SQRT1_2'],
      description: 'Returns the square root of 1/2, approximately equal to 0.707',
      examples: ['SQRT1_2', 'sqrt(1/2)'],
      seealso: []
    };

    var phiDocs = {
      name: 'phi',
      category: 'Constants',
      syntax: ['phi'],
      description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
      examples: ['phi'],
      seealso: []
    };

    var piDocs = {
      name: 'pi',
      category: 'Constants',
      syntax: ['pi'],
      description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
      examples: ['pi', 'sin(pi/2)'],
      seealso: ['tau']
    };

    var nullDocs = {
      name: 'null',
      category: 'Constants',
      syntax: ['null'],
      description: 'Value null',
      examples: ['null'],
      seealso: ['true', 'false']
    };

    var NaNDocs = {
      name: 'NaN',
      category: 'Constants',
      syntax: ['NaN'],
      description: 'Not a number',
      examples: ['NaN', '0 / 0'],
      seealso: []
    };

    var LOG10EDocs = {
      name: 'LOG10E',
      category: 'Constants',
      syntax: ['LOG10E'],
      description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
      examples: ['LOG10E', 'log(e, 10)'],
      seealso: []
    };

    var LOG2EDocs = {
      name: 'LOG2E',
      category: 'Constants',
      syntax: ['LOG2E'],
      description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
      examples: ['LOG2E', 'log(e, 2)'],
      seealso: []
    };

    var LN10Docs = {
      name: 'LN10',
      category: 'Constants',
      syntax: ['LN10'],
      description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
      examples: ['LN10', 'log(10)'],
      seealso: []
    };

    var LN2Docs = {
      name: 'LN2',
      category: 'Constants',
      syntax: ['LN2'],
      description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
      examples: ['LN2', 'log(2)'],
      seealso: []
    };

    var InfinityDocs = {
      name: 'Infinity',
      category: 'Constants',
      syntax: ['Infinity'],
      description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
      examples: ['Infinity', '1 / 0'],
      seealso: []
    };

    var iDocs = {
      name: 'i',
      category: 'Constants',
      syntax: ['i'],
      description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
      examples: ['i', 'i * i', 'sqrt(-1)'],
      seealso: []
    };

    var falseDocs = {
      name: 'false',
      category: 'Constants',
      syntax: ['false'],
      description: 'Boolean value false',
      examples: ['false'],
      seealso: ['true']
    };

    var eDocs = {
      name: 'e',
      category: 'Constants',
      syntax: ['e'],
      description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
      examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
      seealso: ['exp']
    };

    var unitDocs = {
      name: 'unit',
      category: 'Construction',
      syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
      description: 'Create a unit.',
      examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
    };

    var stringDocs = {
      name: 'string',
      category: 'Construction',
      syntax: ['"text"', 'string(x)'],
      description: 'Create a string or convert a value to a string',
      examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
    };

    var splitUnitDocs = {
      name: 'splitUnit',
      category: 'Construction',
      syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
      description: 'Split a unit in an array of units whose sum is equal to the original unit.',
      examples: ['splitUnit(1 m, ["feet", "inch"])'],
      seealso: ['unit', 'createUnit']
    };

    var sparseDocs = {
      name: 'sparse',
      category: 'Construction',
      syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
      description: 'Create a sparse matrix.',
      examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
    };

    var numberDocs = {
      name: 'number',
      category: 'Construction',
      syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
      description: 'Create a number or convert a string or boolean into a number.',
      examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
      seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
    };

    var matrixDocs = {
      name: 'matrix',
      category: 'Construction',
      syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
      description: 'Create a matrix.',
      examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
    };

    var indexDocs = {
      name: 'index',
      category: 'Construction',
      syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
      description: 'Create an index to get or replace a subset of a matrix',
      examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
      seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
    };

    var fractionDocs = {
      name: 'fraction',
      category: 'Construction',
      syntax: ['fraction(num)', 'fraction(num,den)'],
      description: 'Create a fraction from a number or from a numerator and denominator.',
      examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
      seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
    };

    var createUnitDocs = {
      name: 'createUnit',
      category: 'Construction',
      syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
      description: 'Create a user-defined unit and register it with the Unit type.',
      examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
      seealso: ['unit', 'splitUnit']
    };

    var complexDocs = {
      name: 'complex',
      category: 'Construction',
      syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
      description: 'Create a complex number.',
      examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
      seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
    };

    var booleanDocs = {
      name: 'boolean',
      category: 'Construction',
      syntax: ['x', 'boolean(x)'],
      description: 'Convert a string or number into a boolean.',
      examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
      seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
    };

    var dotPowDocs = {
      name: 'dotPow',
      category: 'Operators',
      syntax: ['x .^ y', 'dotPow(x, y)'],
      description: 'Calculates the power of x to y element wise.',
      examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
      seealso: ['pow']
    };

    var lusolveDocs = {
      name: 'lusolve',
      category: 'Algebra',
      syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
      description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
      examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
      seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
    };

    var subtractDocs = {
      name: 'subtract',
      category: 'Operators',
      syntax: ['x - y', 'subtract(x, y)'],
      description: 'subtract two values.',
      examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
      seealso: ['add']
    };

    var varianceDocs = {
      name: 'variance',
      category: 'Statistics',
      syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
      description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
      seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
    };

    var sinDocs = {
      name: 'sin',
      category: 'Trigonometry',
      syntax: ['sin(x)'],
      description: 'Compute the sine of x in radians.',
      examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
      seealso: ['asin', 'cos', 'tan']
    };

    var numericDocs = {
      name: 'numeric',
      category: 'Utils',
      syntax: ['numeric(x)'],
      description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
      examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
      seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
    };

    var columnDocs = {
      name: 'column',
      category: 'Matrix',
      syntax: ['column(x, index)'],
      description: 'Return a column from a matrix or array.',
      examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
      seealso: ['row']
    };

    var rowDocs = {
      name: 'row',
      category: 'Matrix',
      syntax: ['row(x, index)'],
      description: 'Return a row from a matrix or array.',
      examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
      seealso: ['column']
    };

    var embeddedDocs = {
      // construction functions
      bignumber: bignumberDocs,
      "boolean": booleanDocs,
      complex: complexDocs,
      createUnit: createUnitDocs,
      fraction: fractionDocs,
      index: indexDocs,
      matrix: matrixDocs,
      number: numberDocs,
      sparse: sparseDocs,
      splitUnit: splitUnitDocs,
      string: stringDocs,
      unit: unitDocs,
      // constants
      e: eDocs,
      E: eDocs,
      "false": falseDocs,
      i: iDocs,
      Infinity: InfinityDocs,
      LN2: LN2Docs,
      LN10: LN10Docs,
      LOG2E: LOG2EDocs,
      LOG10E: LOG10EDocs,
      NaN: NaNDocs,
      "null": nullDocs,
      pi: piDocs,
      PI: piDocs,
      phi: phiDocs,
      SQRT1_2: SQRT12Docs,
      SQRT2: SQRT2Docs,
      tau: tauDocs,
      "true": trueDocs,
      version: versionDocs,
      // physical constants
      // TODO: more detailed docs for physical constants
      speedOfLight: {
        description: 'Speed of light in vacuum',
        examples: ['speedOfLight']
      },
      gravitationConstant: {
        description: 'Newtonian constant of gravitation',
        examples: ['gravitationConstant']
      },
      planckConstant: {
        description: 'Planck constant',
        examples: ['planckConstant']
      },
      reducedPlanckConstant: {
        description: 'Reduced Planck constant',
        examples: ['reducedPlanckConstant']
      },
      magneticConstant: {
        description: 'Magnetic constant (vacuum permeability)',
        examples: ['magneticConstant']
      },
      electricConstant: {
        description: 'Electric constant (vacuum permeability)',
        examples: ['electricConstant']
      },
      vacuumImpedance: {
        description: 'Characteristic impedance of vacuum',
        examples: ['vacuumImpedance']
      },
      coulomb: {
        description: 'Coulomb\'s constant',
        examples: ['coulomb']
      },
      elementaryCharge: {
        description: 'Elementary charge',
        examples: ['elementaryCharge']
      },
      bohrMagneton: {
        description: 'Borh magneton',
        examples: ['bohrMagneton']
      },
      conductanceQuantum: {
        description: 'Conductance quantum',
        examples: ['conductanceQuantum']
      },
      inverseConductanceQuantum: {
        description: 'Inverse conductance quantum',
        examples: ['inverseConductanceQuantum']
      },
      // josephson: {description: 'Josephson constant', examples: ['josephson']},
      magneticFluxQuantum: {
        description: 'Magnetic flux quantum',
        examples: ['magneticFluxQuantum']
      },
      nuclearMagneton: {
        description: 'Nuclear magneton',
        examples: ['nuclearMagneton']
      },
      klitzing: {
        description: 'Von Klitzing constant',
        examples: ['klitzing']
      },
      bohrRadius: {
        description: 'Borh radius',
        examples: ['bohrRadius']
      },
      classicalElectronRadius: {
        description: 'Classical electron radius',
        examples: ['classicalElectronRadius']
      },
      electronMass: {
        description: 'Electron mass',
        examples: ['electronMass']
      },
      fermiCoupling: {
        description: 'Fermi coupling constant',
        examples: ['fermiCoupling']
      },
      fineStructure: {
        description: 'Fine-structure constant',
        examples: ['fineStructure']
      },
      hartreeEnergy: {
        description: 'Hartree energy',
        examples: ['hartreeEnergy']
      },
      protonMass: {
        description: 'Proton mass',
        examples: ['protonMass']
      },
      deuteronMass: {
        description: 'Deuteron Mass',
        examples: ['deuteronMass']
      },
      neutronMass: {
        description: 'Neutron mass',
        examples: ['neutronMass']
      },
      quantumOfCirculation: {
        description: 'Quantum of circulation',
        examples: ['quantumOfCirculation']
      },
      rydberg: {
        description: 'Rydberg constant',
        examples: ['rydberg']
      },
      thomsonCrossSection: {
        description: 'Thomson cross section',
        examples: ['thomsonCrossSection']
      },
      weakMixingAngle: {
        description: 'Weak mixing angle',
        examples: ['weakMixingAngle']
      },
      efimovFactor: {
        description: 'Efimov factor',
        examples: ['efimovFactor']
      },
      atomicMass: {
        description: 'Atomic mass constant',
        examples: ['atomicMass']
      },
      avogadro: {
        description: 'Avogadro\'s number',
        examples: ['avogadro']
      },
      boltzmann: {
        description: 'Boltzmann constant',
        examples: ['boltzmann']
      },
      faraday: {
        description: 'Faraday constant',
        examples: ['faraday']
      },
      firstRadiation: {
        description: 'First radiation constant',
        examples: ['firstRadiation']
      },
      loschmidt: {
        description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
        examples: ['loschmidt']
      },
      gasConstant: {
        description: 'Gas constant',
        examples: ['gasConstant']
      },
      molarPlanckConstant: {
        description: 'Molar Planck constant',
        examples: ['molarPlanckConstant']
      },
      molarVolume: {
        description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
        examples: ['molarVolume']
      },
      sackurTetrode: {
        description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
        examples: ['sackurTetrode']
      },
      secondRadiation: {
        description: 'Second radiation constant',
        examples: ['secondRadiation']
      },
      stefanBoltzmann: {
        description: 'Stefan-Boltzmann constant',
        examples: ['stefanBoltzmann']
      },
      wienDisplacement: {
        description: 'Wien displacement law constant',
        examples: ['wienDisplacement']
      },
      // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
      molarMass: {
        description: 'Molar mass constant',
        examples: ['molarMass']
      },
      molarMassC12: {
        description: 'Molar mass constant of carbon-12',
        examples: ['molarMassC12']
      },
      gravity: {
        description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
        examples: ['gravity']
      },
      planckLength: {
        description: 'Planck length',
        examples: ['planckLength']
      },
      planckMass: {
        description: 'Planck mass',
        examples: ['planckMass']
      },
      planckTime: {
        description: 'Planck time',
        examples: ['planckTime']
      },
      planckCharge: {
        description: 'Planck charge',
        examples: ['planckCharge']
      },
      planckTemperature: {
        description: 'Planck temperature',
        examples: ['planckTemperature']
      },
      // functions - algebra
      derivative: derivativeDocs,
      lsolve: lsolveDocs,
      lup: lupDocs,
      lusolve: lusolveDocs,
      simplify: simplifyDocs,
      rationalize: rationalizeDocs,
      slu: sluDocs,
      usolve: usolveDocs,
      qr: qrDocs,
      // functions - arithmetic
      abs: absDocs,
      add: addDocs,
      cbrt: cbrtDocs,
      ceil: ceilDocs,
      cube: cubeDocs,
      divide: divideDocs,
      dotDivide: dotDivideDocs,
      dotMultiply: dotMultiplyDocs,
      dotPow: dotPowDocs,
      exp: expDocs,
      expm: expmDocs,
      expm1: expm1Docs,
      fix: fixDocs,
      floor: floorDocs,
      gcd: gcdDocs,
      hypot: hypotDocs,
      lcm: lcmDocs,
      log: logDocs,
      log2: log2Docs,
      log1p: log1pDocs,
      log10: log10Docs,
      mod: modDocs,
      multiply: multiplyDocs,
      norm: normDocs,
      nthRoot: nthRootDocs,
      nthRoots: nthRootsDocs,
      pow: powDocs,
      round: roundDocs,
      sign: signDocs,
      sqrt: sqrtDocs,
      sqrtm: sqrtmDocs,
      square: squareDocs,
      subtract: subtractDocs,
      unaryMinus: unaryMinusDocs,
      unaryPlus: unaryPlusDocs,
      xgcd: xgcdDocs,
      // functions - bitwise
      bitAnd: bitAndDocs,
      bitNot: bitNotDocs,
      bitOr: bitOrDocs,
      bitXor: bitXorDocs,
      leftShift: leftShiftDocs,
      rightArithShift: rightArithShiftDocs,
      rightLogShift: rightLogShiftDocs,
      // functions - combinatorics
      bellNumbers: bellNumbersDocs,
      catalan: catalanDocs,
      composition: compositionDocs,
      stirlingS2: stirlingS2Docs,
      // functions - core
      config: configDocs,
      "import": importDocs,
      typed: typedDocs,
      // functions - complex
      arg: argDocs,
      conj: conjDocs,
      re: reDocs,
      im: imDocs,
      // functions - expression
      evaluate: evaluateDocs,
      eval: evaluateDocs,
      // TODO: deprecated, cleanup in v7
      help: helpDocs,
      // functions - geometry
      distance: distanceDocs,
      intersect: intersectDocs,
      // functions - logical
      and: andDocs,
      not: notDocs,
      or: orDocs,
      xor: xorDocs,
      // functions - matrix
      concat: concatDocs,
      cross: crossDocs,
      column: columnDocs,
      ctranspose: ctransposeDocs,
      det: detDocs,
      diag: diagDocs,
      dot: dotDocs,
      getMatrixDataType: getMatrixDataTypeDocs,
      identity: identityDocs,
      filter: filterDocs,
      flatten: flattenDocs,
      forEach: forEachDocs,
      inv: invDocs,
      eigs: eigsDocs,
      kron: kronDocs,
      map: mapDocs,
      ones: onesDocs,
      partitionSelect: partitionSelectDocs,
      range: rangeDocs,
      resize: resizeDocs,
      reshape: reshapeDocs,
      row: rowDocs,
      size: sizeDocs,
      sort: sortDocs,
      squeeze: squeezeDocs,
      subset: subsetDocs,
      trace: traceDocs,
      transpose: transposeDocs,
      zeros: zerosDocs,
      // functions - probability
      combinations: combinationsDocs,
      combinationsWithRep: combinationsWithRepDocs,
      // distribution: distributionDocs,
      factorial: factorialDocs,
      gamma: gammaDocs,
      kldivergence: kldivergenceDocs,
      multinomial: multinomialDocs,
      permutations: permutationsDocs,
      pickRandom: pickRandomDocs,
      random: randomDocs,
      randomInt: randomIntDocs,
      // functions - relational
      compare: compareDocs,
      compareNatural: compareNaturalDocs,
      compareText: compareTextDocs,
      deepEqual: deepEqualDocs,
      equal: equalDocs,
      equalText: equalTextDocs,
      larger: largerDocs,
      largerEq: largerEqDocs,
      smaller: smallerDocs,
      smallerEq: smallerEqDocs,
      unequal: unequalDocs,
      // functions - set
      setCartesian: setCartesianDocs,
      setDifference: setDifferenceDocs,
      setDistinct: setDistinctDocs,
      setIntersect: setIntersectDocs,
      setIsSubset: setIsSubsetDocs,
      setMultiplicity: setMultiplicityDocs,
      setPowerset: setPowersetDocs,
      setSize: setSizeDocs,
      setSymDifference: setSymDifferenceDocs,
      setUnion: setUnionDocs,
      // functions - special
      erf: erfDocs,
      // functions - statistics
      mad: madDocs,
      max: maxDocs,
      mean: meanDocs,
      median: medianDocs,
      min: minDocs,
      mode: modeDocs,
      prod: prodDocs,
      quantileSeq: quantileSeqDocs,
      std: stdDocs,
      sum: sumDocs,
      variance: varianceDocs,
      "var": varianceDocs,
      // TODO: deprecated, cleanup in v7
      // functions - trigonometry
      acos: acosDocs,
      acosh: acoshDocs,
      acot: acotDocs,
      acoth: acothDocs,
      acsc: acscDocs,
      acsch: acschDocs,
      asec: asecDocs,
      asech: asechDocs,
      asin: asinDocs,
      asinh: asinhDocs,
      atan: atanDocs,
      atanh: atanhDocs,
      atan2: atan2Docs,
      cos: cosDocs,
      cosh: coshDocs,
      cot: cotDocs,
      coth: cothDocs,
      csc: cscDocs,
      csch: cschDocs,
      sec: secDocs,
      sech: sechDocs,
      sin: sinDocs,
      sinh: sinhDocs,
      tan: tanDocs,
      tanh: tanhDocs,
      // functions - units
      to: toDocs,
      // functions - utils
      clone: cloneDocs,
      format: formatDocs,
      isNaN: isNaNDocs,
      isInteger: isIntegerDocs,
      isNegative: isNegativeDocs,
      isNumeric: isNumericDocs,
      hasNumericValue: hasNumericValueDocs,
      isPositive: isPositiveDocs,
      isPrime: isPrimeDocs,
      isZero: isZeroDocs,
      // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
      typeOf: typeOfDocs,
      "typeof": typeOfDocs,
      // TODO: deprecated, cleanup in v7
      numeric: numericDocs
    };

    var name$3p = 'help';
    var dependencies$3q = ['typed', 'mathWithTransform', 'Help'];
    var createHelp =
    /* #__PURE__ */
    factory(name$3p, dependencies$3q, function (_ref) {
      var typed = _ref.typed,
          mathWithTransform = _ref.mathWithTransform,
          Help = _ref.Help;

      /**
       * Retrieve help on a function or data type.
       * Help files are retrieved from the embedded documentation in math.docs.
       *
       * Syntax:
       *
       *    math.help(search)
       *
       * Examples:
       *
       *    console.log(math.help('sin').toString())
       *    console.log(math.help(math.add).toString())
       *    console.log(math.help(math.add).toJSON())
       *
       * @param {Function | string | Object} search   A function or function name
       *                                              for which to get help
       * @return {Help} A help object
       */
      return typed(name$3p, {
        any: function any(search) {
          var prop;
          var searchName = search;

          if (typeof search !== 'string') {
            for (prop in mathWithTransform) {
              // search in functions and constants
              if (hasOwnProperty$1(mathWithTransform, prop) && search === mathWithTransform[prop]) {
                searchName = prop;
                break;
              }
            }
            /* TODO: implement help for data types
             if (!text) {
             // search data type
             for (prop in math.type) {
             if (hasOwnProperty(math, prop)) {
             if (search === math.type[prop]) {
             text = prop
             break
             }
             }
             }
             }
             */

          }

          var doc = getSafeProperty(embeddedDocs, searchName);

          if (!doc) {
            var searchText = typeof searchName === 'function' ? searchName.name : searchName;
            throw new Error('No documentation found on "' + searchText + '"');
          }

          return new Help(doc);
        }
      });
    });

    var name$3q = 'chain';
    var dependencies$3r = ['typed', 'Chain'];
    var createChain =
    /* #__PURE__ */
    factory(name$3q, dependencies$3r, function (_ref) {
      var typed = _ref.typed,
          Chain = _ref.Chain;

      /**
       * Wrap any value in a chain, allowing to perform chained operations on
       * the value.
       *
       * All methods available in the math.js library can be called upon the chain,
       * and then will be evaluated with the value itself as first argument.
       * The chain can be closed by executing `chain.done()`, which returns
       * the final value.
       *
       * The chain has a number of special functions:
       *
       * - `done()`     Finalize the chain and return the chain's value.
       * - `valueOf()`  The same as `done()`
       * - `toString()` Executes `math.format()` onto the chain's value, returning
       *                a string representation of the value.
       *
       * Syntax:
       *
       *    math.chain(value)
       *
       * Examples:
       *
       *     math.chain(3)
       *         .add(4)
       *         .subtract(2)
       *         .done()     // 5
       *
       *     math.chain( [[1, 2], [3, 4]] )
       *         .subset(math.index(0, 0), 8)
       *         .multiply(3)
       *         .done()     // [[24, 6], [9, 12]]
       *
       * @param {*} [value]   A value of any type on which to start a chained operation.
       * @return {math.Chain} The created chain
       */
      return typed(name$3q, {
        '': function _() {
          return new Chain();
        },
        any: function any(value) {
          return new Chain(value);
        }
      });
    });

    var name$3r = 'det';
    var dependencies$3s = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
    var createDet =
    /* #__PURE__ */
    factory(name$3r, dependencies$3s, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          unaryMinus = _ref.unaryMinus,
          lup = _ref.lup;

      /**
       * Calculate the determinant of a matrix.
       *
       * Syntax:
       *
       *    math.det(x)
       *
       * Examples:
       *
       *    math.det([[1, 2], [3, 4]]) // returns -2
       *
       *    const A = [
       *      [-2, 2, 3],
       *      [-1, 1, 3],
       *      [2, 0, -1]
       *    ]
       *    math.det(A) // returns 6
       *
       * See also:
       *
       *    inv
       *
       * @param {Array | Matrix} x  A matrix
       * @return {number} The determinant of `x`
       */
      return typed(name$3r, {
        any: function any(x) {
          return clone$3(x);
        },
        'Array | Matrix': function det(x) {
          var size;

          if (isMatrix(x)) {
            size = x.size();
          } else if (Array.isArray(x)) {
            x = matrix(x);
            size = x.size();
          } else {
            // a scalar
            size = [];
          }

          switch (size.length) {
            case 0:
              // scalar
              return clone$3(x);

            case 1:
              // vector
              if (size[0] === 1) {
                return clone$3(x.valueOf()[0]);
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
              }

            case 2:
              {
                // two dimensional array
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  return _det(x.clone().valueOf(), rows);
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
                }
              }

            default:
              // multi dimensional array
              throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$5(size) + ')');
          }
        }
      });
      /**
       * Calculate the determinant of a matrix
       * @param {Array[]} matrix  A square, two dimensional matrix
       * @param {number} rows     Number of rows of the matrix (zero-based)
       * @param {number} cols     Number of columns of the matrix (zero-based)
       * @returns {number} det
       * @private
       */

      function _det(matrix, rows, cols) {
        if (rows === 1) {
          // this is a 1 x 1 matrix
          return clone$3(matrix[0][0]);
        } else if (rows === 2) {
          // this is a 2 x 2 matrix
          // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
          return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
        } else {
          // Compute the LU decomposition
          var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

          var det = decomp.U[0][0];

          for (var _i = 1; _i < rows; _i++) {
            det = multiply(det, decomp.U[_i][_i]);
          } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
          // This can be determined by counting the cycles. This is roughly a linear time algorithm.


          var evenCycles = 0;
          var i = 0;
          var visited = [];

          while (true) {
            while (visited[i]) {
              i++;
            }

            if (i >= rows) break;
            var j = i;
            var cycleLen = 0;

            while (!visited[decomp.p[j]]) {
              visited[decomp.p[j]] = true;
              j = decomp.p[j];
              cycleLen++;
            }

            if (cycleLen % 2 === 0) {
              evenCycles++;
            }
          }

          return evenCycles % 2 === 0 ? det : unaryMinus(det);
        }
      }
    });

    var name$3s = 'inv';
    var dependencies$3t = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
    var createInv =
    /* #__PURE__ */
    factory(name$3s, dependencies$3t, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          divideScalar = _ref.divideScalar,
          addScalar = _ref.addScalar,
          multiply = _ref.multiply,
          unaryMinus = _ref.unaryMinus,
          det = _ref.det,
          identity = _ref.identity,
          abs = _ref.abs;

      /**
       * Calculate the inverse of a square matrix.
       *
       * Syntax:
       *
       *     math.inv(x)
       *
       * Examples:
       *
       *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
       *     math.inv(4)                 // returns 0.25
       *     1 / 4                       // returns 0.25
       *
       * See also:
       *
       *     det, transpose
       *
       * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
       * @return {number | Complex | Array | Matrix} The inverse of `x`.
       */
      return typed(name$3s, {
        'Array | Matrix': function ArrayMatrix(x) {
          var size = isMatrix(x) ? x.size() : arraySize(x);

          switch (size.length) {
            case 1:
              // vector
              if (size[0] === 1) {
                if (isMatrix(x)) {
                  return matrix([divideScalar(1, x.valueOf()[0])]);
                } else {
                  return [divideScalar(1, x[0])];
                }
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
              }

            case 2:
              // two dimensional array
              {
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  if (isMatrix(x)) {
                    return matrix(_inv(x.valueOf(), rows, cols), x.storage());
                  } else {
                    // return an Array
                    return _inv(x, rows, cols);
                  }
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
                }
              }

            default:
              // multi dimensional array
              throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$5(size) + ')');
          }
        },
        any: function any(x) {
          // scalar
          return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
        }
      });
      /**
       * Calculate the inverse of a square matrix
       * @param {Array[]} mat     A square matrix
       * @param {number} rows     Number of rows
       * @param {number} cols     Number of columns, must equal rows
       * @return {Array[]} inv    Inverse matrix
       * @private
       */

      function _inv(mat, rows, cols) {
        var r, s, f, value, temp;

        if (rows === 1) {
          // this is a 1 x 1 matrix
          value = mat[0][0];

          if (value === 0) {
            throw Error('Cannot calculate inverse, determinant is zero');
          }

          return [[divideScalar(1, value)]];
        } else if (rows === 2) {
          // this is a 2 x 2 matrix
          var d = det(mat);

          if (d === 0) {
            throw Error('Cannot calculate inverse, determinant is zero');
          }

          return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
        } else {
          // this is a matrix of 3 x 3 or larger
          // calculate inverse using gauss-jordan elimination
          //      https://en.wikipedia.org/wiki/Gaussian_elimination
          //      http://mathworld.wolfram.com/MatrixInverse.html
          //      http://math.uww.edu/~mcfarlat/inverse.htm
          // make a copy of the matrix (only the arrays, not of the elements)
          var A = mat.concat();

          for (r = 0; r < rows; r++) {
            A[r] = A[r].concat();
          } // create an identity matrix which in the end will contain the
          // matrix inverse


          var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

          for (var c = 0; c < cols; c++) {
            // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
            var ABig = abs(A[c][c]);
            var rBig = c;
            r = c + 1;

            while (r < rows) {
              if (abs(A[r][c]) > ABig) {
                ABig = abs(A[r][c]);
                rBig = r;
              }

              r++;
            }

            if (ABig === 0) {
              throw Error('Cannot calculate inverse, determinant is zero');
            }

            r = rBig;

            if (r !== c) {
              temp = A[c];
              A[c] = A[r];
              A[r] = temp;
              temp = B[c];
              B[c] = B[r];
              B[r] = temp;
            } // eliminate non-zero values on the other rows at column c


            var Ac = A[c];
            var Bc = B[c];

            for (r = 0; r < rows; r++) {
              var Ar = A[r];
              var Br = B[r];

              if (r !== c) {
                // eliminate value at column c and row r
                if (Ar[c] !== 0) {
                  f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
                  // at column c

                  for (s = c; s < cols; s++) {
                    Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                  }

                  for (s = 0; s < cols; s++) {
                    Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                  }
                }
              } else {
                // normalize value at Acc to 1,
                // divide each value on row r with the value at Acc
                f = Ac[c];

                for (s = c; s < cols; s++) {
                  Ar[s] = divideScalar(Ar[s], f);
                }

                for (s = 0; s < cols; s++) {
                  Br[s] = divideScalar(Br[s], f);
                }
              }
            }
          }

          return B;
        }
      }
    });

    var name$3t = 'eigs';
    var dependencies$3u = ['typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];
    var createEigs =
    /* #__PURE__ */
    factory(name$3t, dependencies$3u, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          addScalar = _ref.addScalar,
          subtract = _ref.subtract,
          equal = _ref.equal,
          abs = _ref.abs,
          atan = _ref.atan,
          cos = _ref.cos,
          sin = _ref.sin,
          multiplyScalar = _ref.multiplyScalar,
          inv = _ref.inv,
          bignumber = _ref.bignumber,
          multiply = _ref.multiply,
          add = _ref.add;

      /**
       * Compute eigenvalue and eigenvector of a real symmetric matrix.
       * Only applicable to two dimensional symmetric matrices. Uses Jacobi
       * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')
       * of elements are not supported. Input matrix or 2D array should contain all elements
       * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the
       * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.
       * Eigenvectors are always of 'number' type.
       *
       * Syntax:
       *
       *     math.eigs(x)
       *
       * Examples:
       *
       *     const H = [[5, 2.3], [2.3, 1]]
       *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors]}
       *     const E = ans.values
       *     const U = ans.vectors
       *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation
       *     E[0] == UTxHxU[0][0]  // returns true
       * See also:
       *
       *     inv
       *
       * @param {Array | Matrix} x  Matrix to be diagonalized
       * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix).
       */
      var eigs = typed('eigs', {
        Array: function Array(x) {
          // check array size
          var mat = matrix(x);
          var size = mat.size();

          if (size.length !== 2 || size[0] !== size[1]) {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
          } // use dense 2D matrix implementation


          var ans = checkAndSubmit(mat, size[0]);
          return {
            values: ans[0],
            vectors: ans[1]
          };
        },
        Matrix: function Matrix(x) {
          // use dense 2D array implementation
          // dense matrix
          var size = x.size();

          if (size.length !== 2 || size[0] !== size[1]) {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
          }

          var ans = checkAndSubmit(x, size[0]);
          return {
            values: matrix(ans[0]),
            vectors: matrix(ans[1])
          };
        }
      }); // Is the matrix
      // symmetric ?

      function isSymmetric(x, n) {
        for (var i = 0; i < n; i++) {
          for (var j = i; j < n; j++) {
            // not symmtric
            if (!equal(x[i][j], x[j][i])) {
              throw new TypeError('Input matrix is not symmetric');
            }
          }
        }
      } // check input for possible problems
      // and perform diagonalization efficiently for
      // specific type of number


      function checkAndSubmit(x, n) {
        var type = x.datatype(); // type check

        if (type === undefined) {
          type = x.getDataType();
        }

        if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {
          if (type === 'mixed') {
            throw new TypeError('Mixed matrix element type is not supported');
          } else {
            throw new TypeError('Matrix element type not supported (' + type + ')');
          }
        } else {
          isSymmetric(x.toArray(), n);
        } // perform efficient calculation for 'numbers'


        if (type === 'number') {
          return diag(x.toArray());
        } else if (type === 'Fraction') {
          var xArr = x.toArray(); // convert fraction to numbers

          for (var i = 0; i < n; i++) {
            for (var j = i; j < n; j++) {
              xArr[i][j] = xArr[i][j].valueOf();
              xArr[j][i] = xArr[i][j];
            }
          }

          return diag(x.toArray());
        } else if (type === 'BigNumber') {
          return diagBig(x.toArray());
        }
      } // diagonalization implementation for number (efficient)


      function diag(x) {
        var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;
        var N = x.length;
        var e0 = Math.abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix

        for (var i = 0; i < N; i++) {
          Sij[i] = createArray(N, 0);
          Sij[i][i] = 1.0;
        } // initial error


        var Vab = getAij(x);

        while (Math.abs(Vab[1]) >= Math.abs(e0)) {
          var _i = Vab[0][0];
          var j = Vab[0][1];
          psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
          x = x1(x, psi, _i, j);
          Sij = Sij1(Sij, psi, _i, j);
          Vab = getAij(x);
        }

        var Ei = createArray(N, 0); // eigenvalues

        for (var _i2 = 0; _i2 < N; _i2++) {
          Ei[_i2] = x[_i2][_i2];
        }

        return sorting(clone$3(Ei), clone$3(Sij));
      } // diagonalization implementation for bigNumber


      function diagBig(x) {
        var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;
        var N = x.length;
        var e0 = abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix

        for (var i = 0; i < N; i++) {
          Sij[i] = createArray(N, 0);
          Sij[i][i] = 1.0;
        } // initial error


        var Vab = getAijBig(x);

        while (abs(Vab[1]) >= abs(e0)) {
          var _i3 = Vab[0][0];
          var j = Vab[0][1];
          psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
          x = x1Big(x, psi, _i3, j);
          Sij = Sij1Big(Sij, psi, _i3, j);
          Vab = getAijBig(x);
        }

        var Ei = createArray(N, 0); // eigenvalues

        for (var _i4 = 0; _i4 < N; _i4++) {
          Ei[_i4] = x[_i4][_i4];
        } // return [clone(Ei), clone(Sij)]


        return sorting(clone$3(Ei), clone$3(Sij));
      } // get angle


      function getTheta(aii, ajj, aij) {
        var th = 0;
        var denom = ajj - aii;

        if (Math.abs(denom) <= 1E-14) {
          th = Math.PI / 4.0;
        } else {
          th = 0.5 * Math.atan(2.0 * aij / (ajj - aii));
        }

        return th;
      } // get angle


      function getThetaBig(aii, ajj, aij) {
        var th = 0;
        var denom = subtract(ajj, aii);

        if (abs(denom) <= 1E-14) {
          th = Math.PI / 4.0;
        } else {
          th = multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));
        }

        return th;
      } // update eigvec


      function Sij1(Sij, theta, i, j) {
        var N = Sij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var Ski = createArray(N, 0);
        var Skj = createArray(N, 0);

        for (var k = 0; k < N; k++) {
          Ski[k] = c * Sij[k][i] - s * Sij[k][j];
          Skj[k] = s * Sij[k][i] + c * Sij[k][j];
        }

        for (var _k = 0; _k < N; _k++) {
          Sij[_k][i] = Ski[_k];
          Sij[_k][j] = Skj[_k];
        }

        return Sij;
      } // update eigvec for overlap


      function Sij1Big(Sij, theta, i, j) {
        var N = Sij.length;
        var c = cos(theta);
        var s = sin(theta);
        var Ski = createArray(N, 0);
        var Skj = createArray(N, 0);

        for (var k = 0; k < N; k++) {
          Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
          Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
        }

        for (var _k2 = 0; _k2 < N; _k2++) {
          Sij[_k2][i] = Ski[_k2];
          Sij[_k2][j] = Skj[_k2];
        }

        return Sij;
      } // update matrix


      function x1Big(Hij, theta, i, j) {
        var N = Hij.length;
        var c = bignumber(cos(theta));
        var s = bignumber(sin(theta));
        var c2 = multiplyScalar(c, c);
        var s2 = multiplyScalar(s, s);
        var Aki = createArray(N, 0);
        var Akj = createArray(N, 0); // 2cs Hij

        var csHij = multiply(2, c, s, Hij[i][j]); //  Aii

        var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
        var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i

        for (var k = 0; k < N; k++) {
          Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
          Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
        } // Modify Hij


        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = 0;
        Hij[j][i] = 0; // 0  to i

        for (var _k3 = 0; _k3 < N; _k3++) {
          if (_k3 !== i && _k3 !== j) {
            Hij[i][_k3] = Aki[_k3];
            Hij[_k3][i] = Aki[_k3];
            Hij[j][_k3] = Akj[_k3];
            Hij[_k3][j] = Akj[_k3];
          }
        }

        return Hij;
      } // update matrix


      function x1(Hij, theta, i, j) {
        var N = Hij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var c2 = c * c;
        var s2 = s * s;
        var Aki = createArray(N, 0);
        var Akj = createArray(N, 0); //  Aii

        var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
        var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i

        for (var k = 0; k < N; k++) {
          Aki[k] = c * Hij[i][k] - s * Hij[j][k];
          Akj[k] = s * Hij[i][k] + c * Hij[j][k];
        } // Modify Hij


        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = 0;
        Hij[j][i] = 0; // 0  to i

        for (var _k4 = 0; _k4 < N; _k4++) {
          if (_k4 !== i && _k4 !== j) {
            Hij[i][_k4] = Aki[_k4];
            Hij[_k4][i] = Aki[_k4];
            Hij[j][_k4] = Akj[_k4];
            Hij[_k4][j] = Akj[_k4];
          }
        }

        return Hij;
      } // get max off-diagonal value from Upper Diagonal


      function getAij(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [0, 1];

        for (var i = 0; i < N; i++) {
          for (var j = i + 1; j < N; j++) {
            if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
              maxMij = Math.abs(Mij[i][j]);
              maxIJ = [i, j];
            }
          }
        }

        return [maxIJ, maxMij];
      } // get max off-diagonal value from Upper Diagonal


      function getAijBig(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [0, 1];

        for (var i = 0; i < N; i++) {
          for (var j = i + 1; j < N; j++) {
            if (abs(maxMij) < abs(Mij[i][j])) {
              maxMij = abs(Mij[i][j]);
              maxIJ = [i, j];
            }
          }
        }

        return [maxIJ, maxMij];
      } // sort results


      function sorting(E, S) {
        var N = E.length;
        var Ef = Array(N);
        var Sf = Array(N);

        for (var k = 0; k < N; k++) {
          Sf[k] = Array(N);
        }

        for (var i = 0; i < N; i++) {
          var minID = 0;
          var minE = E[0];

          for (var j = 0; j < E.length; j++) {
            if (E[j] < minE) {
              minID = j;
              minE = E[minID];
            }
          }

          Ef[i] = E.splice(minID, 1)[0];

          for (var _k5 = 0; _k5 < N; _k5++) {
            Sf[_k5][i] = S[_k5][minID];

            S[_k5].splice(minID, 1);
          }
        }

        return [clone$3(Ef), clone$3(Sf)];
      }
      /**
       * Create an array of a certain size and fill all items with an initial value
       * @param {number} size
       * @param {number} value
       * @return {number[]}
       */


      function createArray(size, value) {
        // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
        var array = new Array(size);

        for (var i = 0; i < size; i++) {
          array[i] = value;
        }

        return array;
      }

      return eigs;
    });

    var name$3u = 'expm';
    var dependencies$3v = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
    var createExpm =
    /* #__PURE__ */
    factory(name$3u, dependencies$3v, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          add = _ref.add,
          identity = _ref.identity,
          inv = _ref.inv,
          multiply = _ref.multiply;

      /**
       * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
       * Not to be confused with exp(a), which performs element-wise
       * exponentiation.
       *
       * The exponential is calculated using the Padé approximant with scaling and
       * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
       * Matrix," by Moler and Van Loan.
       *
       * Syntax:
       *
       *     math.expm(x)
       *
       * Examples:
       *
       *     const A = [[0,2],[0,0]]
       *     math.expm(A)        // returns [[1,2],[0,1]]
       *
       * See also:
       *
       *     exp
       *
       * @param {Matrix} x  A square Matrix
       * @return {Matrix}   The exponential of x
       */
      return typed(name$3u, {
        Matrix: function Matrix(A) {
          // Check matrix size
          var size = A.size();

          if (size.length !== 2 || size[0] !== size[1]) {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
          }

          var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
          // will be affected by round-off error)

          var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
          // are "large", so scale A by powers of two. Then compute the
          // exponential, and square the result repeatedly according to
          // the identity e^A = (e^(A/m))^m
          // Compute infinity-norm of A, ||A||, to see how "big" it is

          var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
          // Padé approximant to reach the desired accuracy

          var params = findParams(infNorm, eps);
          var q = params.q;
          var j = params.j; // The Pade approximation to e^A is:
          // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
          // where
          // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
          // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
          // Scale A by 1 / 2^j

          var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

          var N = identity(n);
          var D = identity(n); // Initialization (i=0)

          var factor = 1; // Initialization (i=1)

          var AposToI = Apos; // Cloning not necessary

          var alternate = -1;

          for (var i = 1; i <= q; i++) {
            if (i > 1) {
              AposToI = multiply(AposToI, Apos);
              alternate = -alternate;
            }

            factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
            N = add(N, multiply(factor, AposToI));
            D = add(D, multiply(factor * alternate, AposToI));
          }

          var R = multiply(inv(D), N); // Square j times

          for (var _i = 0; _i < j; _i++) {
            R = multiply(R, R);
          }

          return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;
        }
      });

      function infinityNorm(A) {
        var n = A.size()[0];
        var infNorm = 0;

        for (var i = 0; i < n; i++) {
          var rowSum = 0;

          for (var j = 0; j < n; j++) {
            rowSum += abs(A.get([i, j]));
          }

          infNorm = Math.max(rowSum, infNorm);
        }

        return infNorm;
      }
      /**
       * Find the best parameters for the Pade approximant given
       * the matrix norm and desired accuracy. Returns the first acceptable
       * combination in order of increasing computational load.
       */


      function findParams(infNorm, eps) {
        var maxSearchSize = 30;

        for (var k = 0; k < maxSearchSize; k++) {
          for (var q = 0; q <= k; q++) {
            var j = k - q;

            if (errorEstimate(infNorm, q, j) < eps) {
              return {
                q: q,
                j: j
              };
            }
          }
        }

        throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
      }
      /**
       * Returns the estimated error of the Pade approximant for the given
       * parameters.
       */


      function errorEstimate(infNorm, q, j) {
        var qfac = 1;

        for (var i = 2; i <= q; i++) {
          qfac *= i;
        }

        var twoqfac = qfac;

        for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
          twoqfac *= _i2;
        }

        var twoqp1fac = twoqfac * (2 * q + 1);
        return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
      }
    });

    var name$3v = 'sqrtm';
    var dependencies$3w = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
    var createSqrtm =
    /* #__PURE__ */
    factory(name$3v, dependencies$3w, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          add = _ref.add,
          multiply = _ref.multiply,
          sqrt = _ref.sqrt,
          subtract = _ref.subtract,
          inv = _ref.inv,
          size = _ref.size,
          max = _ref.max,
          identity = _ref.identity;

      /**
       * Calculate the principal square root of a square matrix.
       * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
       *
       * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
       *
       * Syntax:
       *
       *     X = math.sqrtm(A)
       *
       * Examples:
       *
       *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
       *
       * See also:
       *
       *     sqrt, pow
       *
       * @param  {Array | Matrix} A   The square matrix `A`
       * @return {Array | Matrix}     The principal square root of matrix `A`
       */
      var sqrtm = typed(name$3v, {
        'Array | Matrix': function ArrayMatrix(A) {
          var size = isMatrix(A) ? A.size() : arraySize(A);

          switch (size.length) {
            case 1:
              // Single element Array | Matrix
              if (size[0] === 1) {
                return sqrt(A);
              } else {
                throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
              }

            case 2:
              {
                // Two-dimensional Array | Matrix
                var rows = size[0];
                var cols = size[1];

                if (rows === cols) {
                  return _denmanBeavers(A);
                } else {
                  throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
                }
              }
          }
        }
      });
      var _maxIterations = 1e3;
      var _tolerance = 1e-6;
      /**
       * Calculate the principal square root matrix using the Denman–Beavers iterative method
       *
       * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
       *
       * @param  {Array | Matrix} A   The square matrix `A`
       * @return {Array | Matrix}     The principal square root of matrix `A`
       * @private
       */

      function _denmanBeavers(A) {
        var error;
        var iterations = 0;
        var Y = A;
        var Z = identity(size(A));

        do {
          var Yk = Y;
          Y = multiply(0.5, add(Yk, inv(Z)));
          Z = multiply(0.5, add(Z, inv(Yk)));
          error = max(abs(subtract(Y, Yk)));

          if (error > _tolerance && ++iterations > _maxIterations) {
            throw new Error('computing square root of matrix: iterative method could not converge');
          }
        } while (error > _tolerance);

        return Y;
      }

      return sqrtm;
    });

    var name$3w = 'divide';
    var dependencies$3x = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
    var createDivide =
    /* #__PURE__ */
    factory(name$3w, dependencies$3x, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          multiply = _ref.multiply,
          equalScalar = _ref.equalScalar,
          divideScalar = _ref.divideScalar,
          inv = _ref.inv;
      var algorithm11 = createAlgorithm11({
        typed: typed,
        equalScalar: equalScalar
      });
      var algorithm14 = createAlgorithm14({
        typed: typed
      });
      /**
       * Divide two values, `x / y`.
       * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
       *
       * Syntax:
       *
       *    math.divide(x, y)
       *
       * Examples:
       *
       *    math.divide(2, 3)            // returns number 0.6666666666666666
       *
       *    const a = math.complex(5, 14)
       *    const b = math.complex(4, 1)
       *    math.divide(a, b)            // returns Complex 2 + 3i
       *
       *    const c = [[7, -6], [13, -4]]
       *    const d = [[1, 2], [4, 3]]
       *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
       *
       *    const e = math.unit('18 km')
       *    math.divide(e, 4.5)          // returns Unit 4 km
       *
       * See also:
       *
       *    multiply
       *
       * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
       * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
       * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
       */

      return typed('divide', extend$1({
        // we extend the signatures of divideScalar with signatures dealing with matrices
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
          // TODO: implement matrix right division using pseudo inverse
          // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
          // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
          // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
          return multiply(x, inv(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
          return algorithm14(x, y, divideScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
          return algorithm11(x, y, divideScalar, false);
        },
        'Array, any': function ArrayAny(x, y) {
          // use matrix implementation
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array | Matrix': function anyArrayMatrix(x, y) {
          return multiply(x, inv(y));
        }
      }, divideScalar.signatures));
    });

    var name$3x = 'distance';
    var dependencies$3y = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
    var createDistance =
    /* #__PURE__ */
    factory(name$3x, dependencies$3y, function (_ref) {
      var typed = _ref.typed,
          addScalar = _ref.addScalar,
          subtract = _ref.subtract,
          multiplyScalar = _ref.multiplyScalar,
          divideScalar = _ref.divideScalar,
          unaryMinus = _ref.unaryMinus,
          sqrt = _ref.sqrt,
          abs = _ref.abs;

      /**
        * Calculates:
        *    The eucledian distance between two points in N-dimensional spaces.
        *    Distance between point and a line in 2 and 3 dimensional spaces.
        *    Pairwise distance between a set of 2D or 3D points
        * NOTE:
        *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
        *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
        *
        * Syntax:
        *    math.distance([x1, y1], [x2, y2])
        *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
        *    math.distance([x1, y1, z1], [x2, y2, z2])
        *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
        *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
        *    math.distance([[A], [B], [C]...])
        *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
        *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
        *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
        *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
        *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
        *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
        *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
        *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
        *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
        *
        * Examples:
        *    math.distance([0,0], [4,4])                     // Returns 5.6569
        *    math.distance(
        *     {pointOneX: 0, pointOneY: 0},
        *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
        *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
        *    math.distance(
        *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
        *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
        *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
        *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
        *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
        *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
        *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
        *    math.distance(
        *     {pointX: 1, pointY: 4},
        *     {lineOnePtX: 6, lineOnePtY: 3},
        *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
        *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
        *    math.distance(
        *     {pointX: 2, pointY: 3, pointZ: 1},
        *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
        *
        * @param {Array | Matrix | Object} x    Co-ordinates of first point
        * @param {Array | Matrix | Object} y    Co-ordinates of second point
        * @return {Number | BigNumber} Returns the distance from two/three points
      */
      return typed(name$3x, {
        'Array, Array, Array': function ArrayArrayArray(x, y, z) {
          // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
          if (x.length === 2 && y.length === 2 && z.length === 2) {
            if (!_2d(x)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }

            if (!_2d(y)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
            }

            if (!_2d(z)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
            }

            var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
            var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
            var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
            var constant = x[1];
            return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Object, Object, Object': function ObjectObjectObject(x, y, z) {
          if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
            if (!_2d(x)) {
              throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
            }

            if (!_2d(y)) {
              throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
            }

            if (!_2d(z)) {
              throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
              var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
              var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
              var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
              var constant = x.pointX;
              return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Array, Array': function ArrayArray(x, y) {
          // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
          if (x.length === 2 && y.length === 3) {
            if (!_2d(x)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }

            if (!_3d(y)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
            }

            return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
          } else if (x.length === 3 && y.length === 6) {
            // Point to Line 3D
            if (!_3d(x)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
            }

            if (!_parametricLine(y)) {
              throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
            }

            return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
          } else if (x.length === y.length && x.length > 0) {
            // Point to Point N-dimensions
            if (!_containsOnlyNumbers(x)) {
              throw new TypeError('All values of an array should be numbers or BigNumbers');
            }

            if (!_containsOnlyNumbers(y)) {
              throw new TypeError('All values of an array should be numbers or BigNumbers');
            }

            return _euclideanDistance(x, y);
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        'Object, Object': function ObjectObject(x, y) {
          if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
            if (!_2d(x)) {
              throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
            }

            if (!_3d(y)) {
              throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
              return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
            // Point to Line 3D
            if (!_3d(x)) {
              throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
            }

            if (!_parametricLine(y)) {
              throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
            }

            if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
              return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
            // Point to Point 2D
            if (!_2d(x)) {
              throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
            }

            if (!_2d(y)) {
              throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
            }

            if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
              return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
            // Point to Point 3D
            if (!_3d(x)) {
              throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
            }

            if (!_3d(y)) {
              throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
            }

            if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
              return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
            } else {
              throw new TypeError('Key names do not match');
            }
          } else {
            throw new TypeError('Invalid Arguments: Try again');
          }
        },
        Array: function Array(arr) {
          if (!_pairwise(arr)) {
            throw new TypeError('Incorrect array format entered for pairwise distance calculation');
          }

          return _distancePairwise(arr);
        }
      });

      function _isNumber(a) {
        // distance supports numbers and bignumbers
        return typeof a === 'number' || isBigNumber(a);
      }

      function _2d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]);
      }

      function _3d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
      }

      function _containsOnlyNumbers(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (!Array.isArray(a)) {
          a = _objectToArray(a);
        }

        return a.every(_isNumber);
      }

      function _parametricLine(a) {
        if (a.constructor !== Array) {
          a = _objectToArray(a);
        }

        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
      }

      function _objectToArray(o) {
        var keys = Object.keys(o);
        var a = [];

        for (var i = 0; i < keys.length; i++) {
          a.push(o[keys[i]]);
        }

        return a;
      }

      function _pairwise(a) {
        // checks for valid arguments passed to _distancePairwise(Array)
        if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
          if (a.some(function (aI) {
            return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);
          })) {
            return false;
          }
        } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
          if (a.some(function (aI) {
            return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);
          })) {
            return false;
          }
        } else {
          return false;
        }

        return true;
      }

      function _distancePointLine2D(x, y, a, b, c) {
        var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
        var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
        return divideScalar(num, den);
      }

      function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
        var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
        num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
        var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
        return divideScalar(num, den);
      }

      function _euclideanDistance(x, y) {
        var vectorSize = x.length;
        var result = 0;
        var diff = 0;

        for (var i = 0; i < vectorSize; i++) {
          diff = subtract(x[i], y[i]);
          result = addScalar(multiplyScalar(diff, diff), result);
        }

        return sqrt(result);
      }

      function _distancePairwise(a) {
        var result = [];
        var pointA = [];
        var pointB = [];

        for (var i = 0; i < a.length - 1; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[0].length === 2) {
              pointA = [a[i][0], a[i][1]];
              pointB = [a[j][0], a[j][1]];
            } else if (a[0].length === 3) {
              pointA = [a[i][0], a[i][1], a[i][2]];
              pointB = [a[j][0], a[j][1], a[j][2]];
            }

            result.push(_euclideanDistance(pointA, pointB));
          }
        }

        return result;
      }
    });

    var name$3y = 'intersect';
    var dependencies$3z = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];
    var createIntersect =
    /* #__PURE__ */
    factory(name$3y, dependencies$3z, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          abs = _ref.abs,
          add = _ref.add,
          addScalar = _ref.addScalar,
          matrix = _ref.matrix,
          multiply = _ref.multiply,
          multiplyScalar = _ref.multiplyScalar,
          divideScalar = _ref.divideScalar,
          subtract = _ref.subtract,
          smaller = _ref.smaller,
          equalScalar = _ref.equalScalar;

      /**
       * Calculates the point of intersection of two lines in two or three dimensions
       * and of a line and a plane in three dimensions. The inputs are in the form of
       * arrays or 1 dimensional matrices. The line intersection functions return null
       * if the lines do not meet.
       *
       * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
       *
       * Syntax:
       *
       *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
       *    math.intersect(endPoint1, endPoint2, planeCoefficients)
       *
       * Examples:
       *
       *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
       *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
       *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
       *
       * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
       * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
       * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
       *                              OR Co-efficients of the plane's equation
       * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
       *                              OR null if the calculation is for line and plane
       * @return {Array}              Returns the point of intersection of lines/lines-planes
       */
      var intersect = typed('intersect', {
        'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
          if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
          }

          if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
          }

          if (!_4d(plane)) {
            throw new TypeError('Array with 4 numbers expected as third argument');
          }

          return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
        },
        'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
          if (w.length === 2) {
            if (!_2d(w)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }

            if (!_2d(x)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
            }

            if (!_2d(y)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
            }

            if (!_2d(z)) {
              throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
            }

            return _intersect2d(w, x, y, z);
          } else if (w.length === 3) {
            if (!_3d(w)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
            }

            if (!_3d(x)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
            }

            if (!_3d(y)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
            }

            if (!_3d(z)) {
              throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
            }

            return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
          } else {
            throw new TypeError('Arrays with two or thee dimensional points expected');
          }
        },
        'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
          return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
        },
        'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
          // TODO: output matrix type should match input matrix type
          return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
        }
      });

      function _isNumeric(a) {
        // intersect supports numbers and bignumbers
        return typeof a === 'number' || isBigNumber(a);
      }

      function _2d(x) {
        return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
      }

      function _3d(x) {
        return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
      }

      function _4d(x) {
        return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
      }

      function _intersect2d(p1a, p1b, p2a, p2b) {
        var o1 = p1a;
        var o2 = p2a;
        var d1 = subtract(o1, p1b);
        var d2 = subtract(o2, p2b);
        var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));

        if (smaller(abs(det), config.epsilon)) {
          return null;
        }

        var d20o11 = multiplyScalar(d2[0], o1[1]);
        var d21o10 = multiplyScalar(d2[1], o1[0]);
        var d20o21 = multiplyScalar(d2[0], o2[1]);
        var d21o20 = multiplyScalar(d2[1], o2[0]);
        var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
        return add(multiply(d1, t), o1);
      }

      function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
        // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
        var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
        var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
        var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
        return addScalar(addScalar(add1, add2), add3);
      }

      function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
        var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

        var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

        var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

        var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

        var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

        var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
        var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
        var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
        var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
        var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
        var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
        var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
        var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

        if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
          return [pax, pay, paz];
        } else {
          return null;
        }
      }

      function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
        var x1x = multiplyScalar(x1, x);
        var x2x = multiplyScalar(x2, x);
        var y1y = multiplyScalar(y1, y);
        var y2y = multiplyScalar(y2, y);
        var z1z = multiplyScalar(z1, z);
        var z2z = multiplyScalar(z2, z);
        var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));
        var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
        var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
        var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
        return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
        //       (a) no intersection,
        //       (b) line contained in plane
      }

      return intersect;
    });

    var name$3z = 'sum';
    var dependencies$3A = ['typed', 'config', 'add', '?bignumber', '?fraction'];
    var createSum =
    /* #__PURE__ */
    factory(name$3z, dependencies$3A, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          add = _ref.add,
          bignumber = _ref.bignumber,
          fraction = _ref.fraction;

      /**
       * Compute the sum of a matrix or a list with values.
       * In case of a (multi dimensional) array or matrix, the sum of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.sum(a, b, c, ...)
       *     math.sum(A)
       *
       * Examples:
       *
       *     math.sum(2, 1, 4, 3)               // returns 10
       *     math.sum([2, 1, 4, 3])             // returns 10
       *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
       *
       * See also:
       *
       *    mean, median, min, max, prod, std, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The sum of all values
       */
      return typed(name$3z, {
        // sum([a, b, c, d, ...])
        'Array | Matrix': _sum,
        // sum([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nsumDim,
        // sum(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function sum');
          }

          return _sum(args);
        }
      });
      /**
       * Recursively calculate the sum of an n-dimensional array
       * @param {Array} array
       * @return {number} sum
       * @private
       */

      function _sum(array) {
        var sum;
        deepForEach(array, function (value) {
          try {
            sum = sum === undefined ? value : add(sum, value);
          } catch (err) {
            throw improveErrorMessage(err, 'sum', value);
          }
        });

        if (sum === undefined) {
          switch (config.number) {
            case 'number':
              return 0;

            case 'BigNumber':
              return bignumber ? bignumber(0) : noBignumber();

            case 'Fraction':
              return fraction ? fraction(0) : noFraction();

            default:
              return 0;
          }
        }

        return sum;
      }

      function _nsumDim(array, dim) {
        try {
          var sum = reduce$2(array, dim, add);
          return sum;
        } catch (err) {
          throw improveErrorMessage(err, 'sum');
        }
      }
    });

    var name$3A = 'mean';
    var dependencies$3B = ['typed', 'add', 'divide'];
    var createMean =
    /* #__PURE__ */
    factory(name$3A, dependencies$3B, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          divide = _ref.divide;

      /**
       * Compute the mean value of matrix or a list with values.
       * In case of a multi dimensional array, the mean of the flattened array
       * will be calculated. When `dim` is provided, the maximum over the selected
       * dimension will be calculated. Parameter `dim` is zero-based.
       *
       * Syntax:
       *
       *     math.mean(a, b, c, ...)
       *     math.mean(A)
       *     math.mean(A, dim)
       *
       * Examples:
       *
       *     math.mean(2, 1, 4, 3)                     // returns 2.5
       *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
       *
       *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
       *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
       *
       * See also:
       *
       *     median, min, max, sum, prod, std, variance
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The mean of all values
       */
      return typed(name$3A, {
        // mean([a, b, c, d, ...])
        'Array | Matrix': _mean,
        // mean([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nmeanDim,
        // mean(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function mean');
          }

          return _mean(args);
        }
      });
      /**
       * Calculate the mean value in an n-dimensional array, returning a
       * n-1 dimensional array
       * @param {Array} array
       * @param {number} dim
       * @return {number} mean
       * @private
       */

      function _nmeanDim(array, dim) {
        try {
          var sum = reduce$2(array, dim, add);
          var s = Array.isArray(array) ? arraySize(array) : array.size();
          return divide(sum, s[dim]);
        } catch (err) {
          throw improveErrorMessage(err, 'mean');
        }
      }
      /**
       * Recursively calculate the mean value in an n-dimensional array
       * @param {Array} array
       * @return {number} mean
       * @private
       */


      function _mean(array) {
        var sum;
        var num = 0;
        deepForEach(array, function (value) {
          try {
            sum = sum === undefined ? value : add(sum, value);
            num++;
          } catch (err) {
            throw improveErrorMessage(err, 'mean', value);
          }
        });

        if (num === 0) {
          throw new Error('Cannot calculate the mean of an empty array');
        }

        return divide(sum, num);
      }
    });

    var name$3B = 'median';
    var dependencies$3C = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
    var createMedian =
    /* #__PURE__ */
    factory(name$3B, dependencies$3C, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          divide = _ref.divide,
          compare = _ref.compare,
          partitionSelect = _ref.partitionSelect;

      /**
       * Compute the median of a matrix or a list with values. The values are
       * sorted and the middle value is returned. In case of an even number of
       * values, the average of the two middle values is returned.
       * Supported types of values are: Number, BigNumber, Unit
       *
       * In case of a (multi dimensional) array or matrix, the median of all
       * elements will be calculated.
       *
       * Syntax:
       *
       *     math.median(a, b, c, ...)
       *     math.median(A)
       *
       * Examples:
       *
       *     math.median(5, 2, 7)        // returns 5
       *     math.median([3, -1, 5, 7])  // returns 4
       *
       * See also:
       *
       *     mean, min, max, sum, prod, std, variance, quantileSeq
       *
       * @param {... *} args  A single matrix or or multiple scalar values
       * @return {*} The median
       */
      var median = typed(name$3B, {
        // median([a, b, c, d, ...])
        'Array | Matrix': _median,
        // median([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          // TODO: implement median(A, dim)
          throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
        },
        // median(a, b, c, d, ...)
        '...': function _(args) {
          if (containsCollections(args)) {
            throw new TypeError('Scalar values expected in function median');
          }

          return _median(args);
        }
      });
      /**
       * Recursively calculate the median of an n-dimensional array
       * @param {Array} array
       * @return {Number} median
       * @private
       */

      function _median(array) {
        try {
          array = flatten$2(array.valueOf());
          var num = array.length;

          if (num === 0) {
            throw new Error('Cannot calculate median of an empty array');
          }

          if (num % 2 === 0) {
            // even: return the average of the two middle values
            var mid = num / 2 - 1;
            var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

            var left = array[mid];

            for (var i = 0; i < mid; ++i) {
              if (compare(array[i], left) > 0) {
                left = array[i];
              }
            }

            return middle2(left, right);
          } else {
            // odd: return the middle value
            var m = partitionSelect(array, (num - 1) / 2);
            return middle(m);
          }
        } catch (err) {
          throw improveErrorMessage(err, 'median');
        }
      } // helper function to type check the middle value of the array


      var middle = typed({
        'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
          return value;
        }
      }); // helper function to type check the two middle value of the array

      var middle2 = typed({
        'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
          return divide(add(left, right), 2);
        }
      });
      return median;
    });

    var name$3C = 'mad';
    var dependencies$3D = ['typed', 'abs', 'map', 'median', 'subtract'];
    var createMad =
    /* #__PURE__ */
    factory(name$3C, dependencies$3D, function (_ref) {
      var typed = _ref.typed,
          abs = _ref.abs,
          map = _ref.map,
          median = _ref.median,
          subtract = _ref.subtract;

      /**
       * Compute the median absolute deviation of a matrix or a list with values.
       * The median absolute deviation is defined as the median of the absolute
       * deviations from the median.
       *
       * Syntax:
       *
       *     math.mad(a, b, c, ...)
       *     math.mad(A)
       *
       * Examples:
       *
       *     math.mad(10, 20, 30)             // returns 10
       *     math.mad([1, 2, 3])              // returns 1
       *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
       *
       * See also:
       *
       *     median, mean, std, abs
       *
       * @param {Array | Matrix} array
       *                        A single matrix or multiple scalar values.
       * @return {*} The median absolute deviation.
       */
      return typed(name$3C, {
        // mad([a, b, c, d, ...])
        'Array | Matrix': _mad,
        // mad(a, b, c, d, ...)
        '...': function _(args) {
          return _mad(args);
        }
      });

      function _mad(array) {
        array = flatten$2(array.valueOf());

        if (array.length === 0) {
          throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
        }

        try {
          var med = median(array);
          return median(map(array, function (value) {
            return abs(subtract(value, med));
          }));
        } catch (err) {
          if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
            throw new TypeError(err.message.replace('median', 'mad'));
          } else {
            throw improveErrorMessage(err, 'mad');
          }
        }
      }
    });

    var DEFAULT_NORMALIZATION = 'unbiased';
    var name$3D = 'variance';
    var dependencies$3E = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
    var createVariance =
    /* #__PURE__ */
    factory(name$3D, dependencies$3E, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          divide = _ref.divide,
          apply = _ref.apply,
          isNaN = _ref.isNaN;

      /**
       * Compute the variance of a matrix or a  list with values.
       * In case of a (multi dimensional) array or matrix, the variance over all
       * elements will be calculated.
       *
       * Additionally, it is possible to compute the variance along the rows
       * or columns of a matrix by specifying the dimension as the second argument.
       *
       * Optionally, the type of normalization can be specified as the final
       * parameter. The parameter `normalization` can be one of the following values:
       *
       * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
       * - 'uncorrected'        The sum of squared errors is divided by n
       * - 'biased'             The sum of squared errors is divided by (n + 1)
       *
       *
       * Note that older browser may not like the variable name `var`. In that
       * case, the function can be called as `math['var'](...)` instead of
       * `math.var(...)`.
       *
       * Syntax:
       *
       *     math.variance(a, b, c, ...)
       *     math.variance(A)
       *     math.variance(A, normalization)
       *     math.variance(A, dimension)
       *     math.variance(A, dimension, normalization)
       *
       * Examples:
       *
       *     math.variance(2, 4, 6)                     // returns 4
       *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
       *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
       *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
       *
       *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
       *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
       *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
       *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
       *
       * See also:
       *
       *    mean, median, max, min, prod, std, sum
       *
       * @param {Array | Matrix} array
       *                        A single matrix or or multiple scalar values
       * @param {string} [normalization='unbiased']
       *                        Determines how to normalize the variance.
       *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
       * @param dimension {number | BigNumber}
       *                        Determines the axis to compute the variance for a matrix
       * @return {*} The variance
       */
      return typed(name$3D, {
        // variance([a, b, c, d, ...])
        'Array | Matrix': function ArrayMatrix(array) {
          return _var(array, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _var,
        // variance([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
          return _varDim(array, dim, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _varDim,
        // variance(a, b, c, d, ...)
        '...': function _(args) {
          return _var(args, DEFAULT_NORMALIZATION);
        }
      });
      /**
       * Recursively calculate the variance of an n-dimensional array
       * @param {Array} array
       * @param {string} normalization
       *                        Determines how to normalize the variance:
       *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
       *                        - 'uncorrected' The sum of squared errors is divided by n
       *                        - 'biased'      The sum of squared errors is divided by (n + 1)
       * @return {number | BigNumber} variance
       * @private
       */

      function _var(array, normalization) {
        var sum = 0;
        var num = 0;

        if (array.length === 0) {
          throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
        } // calculate the mean and number of elements


        deepForEach(array, function (value) {
          try {
            sum = add(sum, value);
            num++;
          } catch (err) {
            throw improveErrorMessage(err, 'variance', value);
          }
        });
        if (num === 0) throw new Error('Cannot calculate variance of an empty array');
        var mean = divide(sum, num); // calculate the variance

        sum = 0;
        deepForEach(array, function (value) {
          var diff = subtract(value, mean);
          sum = add(sum, multiply(diff, diff));
        });

        if (isNaN(sum)) {
          return sum;
        }

        switch (normalization) {
          case 'uncorrected':
            return divide(sum, num);

          case 'biased':
            return divide(sum, num + 1);

          case 'unbiased':
            {
              var zero = isBigNumber(sum) ? sum.mul(0) : 0;
              return num === 1 ? zero : divide(sum, num - 1);
            }

          default:
            throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
        }
      }

      function _varDim(array, dim, normalization) {
        try {
          if (array.length === 0) {
            throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
          }

          return apply(array, dim, function (x) {
            return _var(x, normalization);
          });
        } catch (err) {
          throw improveErrorMessage(err, 'variance');
        }
      }
    }); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-09

    var createDeprecatedVar =
    /* #__PURE__ */
    factory('var', ['variance'], function (_ref2) {
      var variance = _ref2.variance;
      return function () {
        warnOnce('Function "var" has been renamed to "variance" in v6.0.0, please use the new function instead.');

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return variance.apply(variance, args);
      };
    });

    var name$3E = 'quantileSeq';
    var dependencies$3F = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
    var createQuantileSeq =
    /* #__PURE__ */
    factory(name$3E, dependencies$3F, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          multiply = _ref.multiply,
          partitionSelect = _ref.partitionSelect,
          compare = _ref.compare;

      /**
       * Compute the prob order quantile of a matrix or a list with values.
       * The sequence is sorted and the middle value is returned.
       * Supported types of sequence values are: Number, BigNumber, Unit
       * Supported types of probability are: Number, BigNumber
       *
       * In case of a (multi dimensional) array or matrix, the prob order quantile
       * of all elements will be calculated.
       *
       * Syntax:
       *
       *     math.quantileSeq(A, prob[, sorted])
       *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
       *     math.quantileSeq(A, N[, sorted])
       *
       * Examples:
       *
       *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
       *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
       *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
       *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
       *
       * See also:
       *
       *     median, mean, min, max, sum, prod, std, variance
       *
       * @param {Array, Matrix} data                A single matrix or Array
       * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
       *                                            the amount of evenly distributed steps of
       *                                            probabilities; only one of these options can
       *                                            be provided
       * @param {Boolean} sorted=false              is data sorted in ascending order
       * @return {Number, BigNumber, Unit, Array}   Quantile(s)
       */
      function quantileSeq(data, probOrN, sorted) {
        var probArr, dataArr, one;

        if (arguments.length < 2 || arguments.length > 3) {
          throw new SyntaxError('Function quantileSeq requires two or three parameters');
        }

        if (isCollection(data)) {
          sorted = sorted || false;

          if (typeof sorted === 'boolean') {
            dataArr = data.valueOf();

            if (isNumber$f(probOrN)) {
              if (probOrN < 0) {
                throw new Error('N/prob must be non-negative');
              }

              if (probOrN <= 1) {
                // quantileSeq([a, b, c, d, ...], prob[,sorted])
                return _quantileSeq(dataArr, probOrN, sorted);
              }

              if (probOrN > 1) {
                // quantileSeq([a, b, c, d, ...], N[,sorted])
                if (!isInteger$1(probOrN)) {
                  throw new Error('N must be a positive integer');
                }

                var nPlusOne = probOrN + 1;
                probArr = new Array(probOrN);

                for (var i = 0; i < probOrN;) {
                  probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
                }

                return probArr;
              }
            }

            if (isBigNumber(probOrN)) {
              var BigNumber = probOrN.constructor;

              if (probOrN.isNegative()) {
                throw new Error('N/prob must be non-negative');
              }

              one = new BigNumber(1);

              if (probOrN.lte(one)) {
                // quantileSeq([a, b, c, d, ...], prob[,sorted])
                return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
              }

              if (probOrN.gt(one)) {
                // quantileSeq([a, b, c, d, ...], N[,sorted])
                if (!probOrN.isInteger()) {
                  throw new Error('N must be a positive integer');
                } // largest possible Array length is 2^32-1
                // 2^32 < 10^15, thus safe conversion guaranteed


                var intN = probOrN.toNumber();

                if (intN > 4294967295) {
                  throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
                }

                var _nPlusOne = new BigNumber(intN + 1);

                probArr = new Array(intN);

                for (var _i = 0; _i < intN;) {
                  probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
                }

                return probArr;
              }
            }

            if (Array.isArray(probOrN)) {
              // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
              probArr = new Array(probOrN.length);

              for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
                var currProb = probOrN[_i2];

                if (isNumber$f(currProb)) {
                  if (currProb < 0 || currProb > 1) {
                    throw new Error('Probability must be between 0 and 1, inclusive');
                  }
                } else if (isBigNumber(currProb)) {
                  one = new currProb.constructor(1);

                  if (currProb.isNegative() || currProb.gt(one)) {
                    throw new Error('Probability must be between 0 and 1, inclusive');
                  }
                } else {
                  throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
                }

                probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
              }

              return probArr;
            }

            throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
          }

          throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }
      /**
       * Calculate the prob order quantile of an n-dimensional array.
       *
       * @param {Array} array
       * @param {Number, BigNumber} prob
       * @param {Boolean} sorted
       * @return {Number, BigNumber, Unit} prob order quantile
       * @private
       */


      function _quantileSeq(array, prob, sorted) {
        var flat = flatten$2(array);
        var len = flat.length;

        if (len === 0) {
          throw new Error('Cannot calculate quantile of an empty sequence');
        }

        if (isNumber$f(prob)) {
          var _index = prob * (len - 1);

          var _fracPart = _index % 1;

          if (_fracPart === 0) {
            var value = sorted ? flat[_index] : partitionSelect(flat, _index);
            validate(value);
            return value;
          }

          var _integerPart = Math.floor(_index);

          var _left;

          var _right;

          if (sorted) {
            _left = flat[_integerPart];
            _right = flat[_integerPart + 1];
          } else {
            _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

            _left = flat[_integerPart];

            for (var i = 0; i < _integerPart; ++i) {
              if (compare(flat[i], _left) > 0) {
                _left = flat[i];
              }
            }
          }

          validate(_left);
          validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

          return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
        } // If prob is a BigNumber


        var index = prob.times(len - 1);

        if (index.isInteger()) {
          index = index.toNumber();

          var _value = sorted ? flat[index] : partitionSelect(flat, index);

          validate(_value);
          return _value;
        }

        var integerPart = index.floor();
        var fracPart = index.minus(integerPart);
        var integerPartNumber = integerPart.toNumber();
        var left;
        var right;

        if (sorted) {
          left = flat[integerPartNumber];
          right = flat[integerPartNumber + 1];
        } else {
          right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

          left = flat[integerPartNumber];

          for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
            if (compare(flat[_i3], left) > 0) {
              left = flat[_i3];
            }
          }
        }

        validate(left);
        validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

        var one = new fracPart.constructor(1);
        return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
      }
      /**
       * Check if array value types are valid, throw error otherwise.
       * @param {number | BigNumber | Unit} x
       * @param {number | BigNumber | Unit} x
       * @private
       */


      var validate = typed({
        'number | BigNumber | Unit': function numberBigNumberUnit(x) {
          return x;
        }
      });
      return quantileSeq;
    });

    var name$3F = 'std';
    var dependencies$3G = ['typed', 'sqrt', 'variance'];
    var createStd =
    /* #__PURE__ */
    factory(name$3F, dependencies$3G, function (_ref) {
      var typed = _ref.typed,
          sqrt = _ref.sqrt,
          variance = _ref.variance;

      /**
       * Compute the standard deviation of a matrix or a  list with values.
       * The standard deviations is defined as the square root of the variance:
       * `std(A) = sqrt(variance(A))`.
       * In case of a (multi dimensional) array or matrix, the standard deviation
       * over all elements will be calculated by default, unless an axis is specified
       * in which case the standard deviation will be computed along that axis.
       *
       * Additionally, it is possible to compute the standard deviation along the rows
       * or columns of a matrix by specifying the dimension as the second argument.
       *
       * Optionally, the type of normalization can be specified as the final
       * parameter. The parameter `normalization` can be one of the following values:
       *
       * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
       * - 'uncorrected'        The sum of squared errors is divided by n
       * - 'biased'             The sum of squared errors is divided by (n + 1)
       *
       *
       * Syntax:
       *
       *     math.std(a, b, c, ...)
       *     math.std(A)
       *     math.std(A, normalization)
       *     math.std(A, dimension)
       *     math.std(A, dimension, normalization)
       *
       * Examples:
       *
       *     math.std(2, 4, 6)                     // returns 2
       *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
       *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
       *     math.std([2, 4, 6, 8], 'biased')      // returns 2
       *
       *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
       *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
       *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
       *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
       *
       * See also:
       *
       *    mean, median, max, min, prod, sum, variance
       *
       * @param {Array | Matrix} array
       *                        A single matrix or or multiple scalar values
       * @param {string} [normalization='unbiased']
       *                        Determines how to normalize the variance.
       *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
       * @param dimension {number | BigNumber}
       *                        Determines the axis to compute the standard deviation for a matrix
       * @return {*} The standard deviation
       */
      return typed(name$3F, {
        // std([a, b, c, d, ...])
        'Array | Matrix': _std,
        // std([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _std,
        // std([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': _std,
        // std([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _std,
        // std(a, b, c, d, ...)
        '...': function _(args) {
          return _std(args);
        }
      });

      function _std(array, normalization) {
        if (array.length === 0) {
          throw new SyntaxError('Function std requires one or more parameters (0 provided)');
        }

        try {
          return sqrt(variance.apply(null, arguments));
        } catch (err) {
          if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
            throw new TypeError(err.message.replace(' variance', ' std'));
          } else {
            throw err;
          }
        }
      }
    });

    var name$3G = 'combinations';
    var dependencies$3H = ['typed'];
    var createCombinations =
    /* #__PURE__ */
    factory(name$3G, dependencies$3H, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the number of ways of picking `k` unordered outcomes from `n`
       * possibilities.
       *
       * Combinations only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *     math.combinations(n, k)
       *
       * Examples:
       *
       *    math.combinations(7, 5) // returns 21
       *
       * See also:
       *
       *    combinationsWithRep, permutations, factorial
       *
       * @param {number | BigNumber} n    Total number of objects in the set
       * @param {number | BigNumber} k    Number of objects in the subset
       * @return {number | BigNumber}     Number of possible combinations.
       */
      return typed(name$3G, {
        'number, number': combinationsNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var BigNumber = n.constructor;
          var result, i;
          var nMinusk = n.minus(k);
          var one = new BigNumber(1);

          if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
            throw new TypeError('Positive integer value expected in function combinations');
          }

          if (k.gt(n)) {
            throw new TypeError('k must be less than n in function combinations');
          }

          result = one;

          if (k.lt(nMinusk)) {
            for (i = one; i.lte(nMinusk); i = i.plus(one)) {
              result = result.times(k.plus(i)).dividedBy(i);
            }
          } else {
            for (i = one; i.lte(k); i = i.plus(one)) {
              result = result.times(nMinusk.plus(i)).dividedBy(i);
            }
          }

          return result;
        } // TODO: implement support for collection in combinations

      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger(n) {
      return n.isInteger() && n.gte(0);
    }

    var name$3H = 'combinationsWithRep';
    var dependencies$3I = ['typed'];
    var createCombinationsWithRep =
    /* #__PURE__ */
    factory(name$3H, dependencies$3I, function (_ref) {
      var typed = _ref.typed;

      /**
       * Compute the number of ways of picking `k` unordered outcomes from `n`
       * possibilities, allowing individual outcomes to be repeated more than once.
       *
       * CombinationsWithRep only takes integer arguments.
       * The following condition must be enforced: k <= n + k -1.
       *
       * Syntax:
       *
       *     math.combinationsWithRep(n, k)
       *
       * Examples:
       *
       *    math.combinationsWithRep(7, 5) // returns 462
       *
       * See also:
       *
       *    combinations, permutations, factorial
       *
       * @param {number | BigNumber} n    Total number of objects in the set
       * @param {number | BigNumber} k    Number of objects in the subset
       * @return {number | BigNumber}     Number of possible combinations with replacement.
       */
      return typed(name$3H, {
        'number, number': function numberNumber(n, k) {
          if (!isInteger$1(n) || n < 0) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (!isInteger$1(k) || k < 0) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (n < 1) {
            throw new TypeError('k must be less than or equal to n + k - 1');
          }

          if (k < n - 1) {
            var _prodrange = product(n, n + k - 1);

            return _prodrange / product(1, k);
          }

          var prodrange = product(k + 1, n + k - 1);
          return prodrange / product(1, n - 1);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var BigNumber = n.constructor;
          var result, i;
          var one = new BigNumber(1);
          var nMinusOne = n.minus(one);

          if (!isPositiveInteger$1(n) || !isPositiveInteger$1(k)) {
            throw new TypeError('Positive integer value expected in function combinationsWithRep');
          }

          if (n.lt(one)) {
            throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
          }

          result = one;

          if (k.lt(nMinusOne)) {
            for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
              result = result.times(k.plus(i)).dividedBy(i);
            }
          } else {
            for (i = one; i.lte(k); i = i.plus(one)) {
              result = result.times(nMinusOne.plus(i)).dividedBy(i);
            }
          }

          return result;
        }
      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger$1(n) {
      return n.isInteger() && n.gte(0);
    }

    var name$3I = 'gamma';
    var dependencies$3J = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
    var createGamma =
    /* #__PURE__ */
    factory(name$3I, dependencies$3J, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          multiplyScalar = _ref.multiplyScalar,
          pow = _ref.pow,
          _BigNumber = _ref.BigNumber,
          _Complex = _ref.Complex;

      /**
       * Compute the gamma function of a value using Lanczos approximation for
       * small values, and an extended Stirling approximation for large values.
       *
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.gamma(n)
       *
       * Examples:
       *
       *    math.gamma(5)       // returns 24
       *    math.gamma(-0.5)    // returns -3.5449077018110335
       *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
       *
       * See also:
       *
       *    combinations, factorial, permutations
       *
       * @param {number | Array | Matrix} n   A real or complex number
       * @return {number | Array | Matrix}    The gamma of `n`
       */
      var gamma = typed(name$3I, {
        number: gammaNumber,
        Complex: function Complex(n) {
          if (n.im === 0) {
            return gamma(n.re);
          }

          n = new _Complex(n.re - 1, n.im);
          var x = new _Complex(gammaP[0], 0);

          for (var i = 1; i < gammaP.length; ++i) {
            var real = n.re + i; // x += p[i]/(n+i)

            var den = real * real + n.im * n.im;

            if (den !== 0) {
              x.re += gammaP[i] * real / den;
              x.im += -(gammaP[i] * n.im) / den;
            } else {
              x.re = gammaP[i] < 0 ? -Infinity : Infinity;
            }
          }

          var t = new _Complex(n.re + gammaG + 0.5, n.im);
          var twoPiSqrt = Math.sqrt(2 * Math.PI);
          n.re += 0.5;
          var result = pow(t, n);

          if (result.im === 0) {
            // sqrt(2*PI)*result
            result.re *= twoPiSqrt;
          } else if (result.re === 0) {
            result.im *= twoPiSqrt;
          } else {
            result.re *= twoPiSqrt;
            result.im *= twoPiSqrt;
          }

          var r = Math.exp(-t.re); // exp(-t)

          t.re = r * Math.cos(-t.im);
          t.im = r * Math.sin(-t.im);
          return multiplyScalar(multiplyScalar(result, t), x);
        },
        BigNumber: function BigNumber(n) {
          if (n.isInteger()) {
            return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
          }

          if (!n.isFinite()) {
            return new _BigNumber(n.isNegative() ? NaN : Infinity);
          }

          throw new Error('Integer BigNumber expected');
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, gamma);
        }
      });
      /**
       * Calculate factorial for a BigNumber
       * @param {BigNumber} n
       * @returns {BigNumber} Returns the factorial of n
       */

      function bigFactorial(n) {
        if (n < 8) {
          return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);
        }

        var precision = config.precision + (Math.log(n.toNumber()) | 0);

        var Big = _BigNumber.clone({
          precision: precision
        });

        if (n % 2 === 1) {
          return n.times(bigFactorial(new _BigNumber(n - 1)));
        }

        var p = n;
        var prod = new Big(n);
        var sum = n.toNumber();

        while (p > 2) {
          p -= 2;
          sum += p;
          prod = prod.times(sum);
        }

        return new _BigNumber(prod.toPrecision(_BigNumber.precision));
      }

      return gamma;
    });

    var name$3J = 'factorial';
    var dependencies$3K = ['typed', 'gamma'];
    var createFactorial =
    /* #__PURE__ */
    factory(name$3J, dependencies$3K, function (_ref) {
      var typed = _ref.typed,
          gamma = _ref.gamma;

      /**
       * Compute the factorial of a value
       *
       * Factorial only supports an integer value as argument.
       * For matrices, the function is evaluated element wise.
       *
       * Syntax:
       *
       *    math.factorial(n)
       *
       * Examples:
       *
       *    math.factorial(5)    // returns 120
       *    math.factorial(3)    // returns 6
       *
       * See also:
       *
       *    combinations, combinationsWithRep, gamma, permutations
       *
       * @param {number | BigNumber | Array | Matrix} n   An integer number
       * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
       */
      var factorial = typed(name$3J, {
        number: function number(n) {
          if (n < 0) {
            throw new Error('Value must be non-negative');
          }

          return gamma(n + 1);
        },
        BigNumber: function BigNumber(n) {
          if (n.isNegative()) {
            throw new Error('Value must be non-negative');
          }

          return gamma(n.plus(1));
        },
        'Array | Matrix': function ArrayMatrix(n) {
          return deepMap(n, factorial);
        }
      });
      return factorial;
    });

    var name$3K = 'kldivergence';
    var dependencies$3L = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
    var createKldivergence =
    /* #__PURE__ */
    factory(name$3K, dependencies$3L, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          divide = _ref.divide,
          sum = _ref.sum,
          multiply = _ref.multiply,
          dotDivide = _ref.dotDivide,
          log = _ref.log,
          isNumeric = _ref.isNumeric;

      /**
         * Calculate the Kullback-Leibler (KL) divergence  between two distributions
         *
         * Syntax:
         *
         *     math.kldivergence(x, y)
         *
         * Examples:
         *
         *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
         *
         *
         * @param  {Array | Matrix} q    First vector
         * @param  {Array | Matrix} p    Second vector
         * @return {number}              Returns distance between q and p
         */
      return typed(name$3K, {
        'Array, Array': function ArrayArray(q, p) {
          return _kldiv(matrix(q), matrix(p));
        },
        'Matrix, Array': function MatrixArray(q, p) {
          return _kldiv(q, matrix(p));
        },
        'Array, Matrix': function ArrayMatrix(q, p) {
          return _kldiv(matrix(q), p);
        },
        'Matrix, Matrix': function MatrixMatrix(q, p) {
          return _kldiv(q, p);
        }
      });

      function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;

        if (plength > 1) {
          throw new Error('first object must be one dimensional');
        }

        if (qlength > 1) {
          throw new Error('second object must be one dimensional');
        }

        if (plength !== qlength) {
          throw new Error('Length of two vectors must be equal');
        } // Before calculation, apply normalization


        var sumq = sum(q);

        if (sumq === 0) {
          throw new Error('Sum of elements in first object must be non zero');
        }

        var sump = sum(p);

        if (sump === 0) {
          throw new Error('Sum of elements in second object must be non zero');
        }

        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));
        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

        if (isNumeric(result)) {
          return result;
        } else {
          return Number.NaN;
        }
      }
    });

    var name$3L = 'multinomial';
    var dependencies$3M = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
    var createMultinomial =
    /* #__PURE__ */
    factory(name$3L, dependencies$3M, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          divide = _ref.divide,
          multiply = _ref.multiply,
          factorial = _ref.factorial,
          isInteger = _ref.isInteger,
          isPositive = _ref.isPositive;

      /**
       * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
       *
       * multinomial takes one array of integers as an argument.
       * The following condition must be enforced: every ai <= 0
       *
       * Syntax:
       *
       *     math.multinomial(a) // a is an array type
       *
       * Examples:
       *
       *    math.multinomial([1,2,1]) // returns 12
       *
       * See also:
       *
       *    combinations, factorial
       *
       * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
       * @return {Number | BigNumber}         Multinomial coefficient.
       */
      return typed(name$3L, {
        'Array | Matrix': function ArrayMatrix(a) {
          var sum = 0;
          var denom = 1;
          deepForEach(a, function (ai) {
            if (!isInteger(ai) || !isPositive(ai)) {
              throw new TypeError('Positive integer value expected in function multinomial');
            }

            sum = add(sum, ai);
            denom = multiply(denom, factorial(ai));
          });
          return divide(factorial(sum), denom);
        }
      });
    });

    var name$3M = 'permutations';
    var dependencies$3N = ['typed', 'factorial'];
    var createPermutations =
    /* #__PURE__ */
    factory(name$3M, dependencies$3N, function (_ref) {
      var typed = _ref.typed,
          factorial = _ref.factorial;

      /**
       * Compute the number of ways of obtaining an ordered subset of `k` elements
       * from a set of `n` elements.
       *
       * Permutations only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *     math.permutations(n)
       *     math.permutations(n, k)
       *
       * Examples:
       *
       *    math.permutations(5)     // 120
       *    math.permutations(5, 3)  // 60
       *
       * See also:
       *
       *    combinations, combinationsWithRep, factorial
       *
       * @param {number | BigNumber} n   The number of objects in total
       * @param {number | BigNumber} [k] The number of objects in the subset
       * @return {number | BigNumber}    The number of permutations
       */
      return typed(name$3M, {
        'number | BigNumber': factorial,
        'number, number': function numberNumber(n, k) {
          if (!isInteger$1(n) || n < 0) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (!isInteger$1(k) || k < 0) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (k > n) {
            throw new TypeError('second argument k must be less than or equal to first argument n');
          } // Permute n objects, k at a time


          return product(n - k + 1, n);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
          var result, i;

          if (!isPositiveInteger$2(n) || !isPositiveInteger$2(k)) {
            throw new TypeError('Positive integer value expected in function permutations');
          }

          if (k.gt(n)) {
            throw new TypeError('second argument k must be less than or equal to first argument n');
          }

          var one = n.mul(0).add(1);
          result = one;

          for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
            result = result.times(i);
          }

          return result;
        } // TODO: implement support for collection in permutations

      });
    });
    /**
     * Test whether BigNumber n is a positive integer
     * @param {BigNumber} n
     * @returns {boolean} isPositiveInteger
     */

    function isPositiveInteger$2(n) {
      return n.isInteger() && n.gte(0);
    }

    var seedRandom = createCommonjsModule(function (module) {

    var width = 256;// each RC4 output is 0 <= x < 256
    var chunks = 6;// at least six RC4 outputs for each double
    var digits = 52;// there are 52 significant digits in a double
    var pool = [];// pool: entropy pool starts empty
    var GLOBAL = typeof commonjsGlobal === 'undefined' ? window : commonjsGlobal;

    //
    // The following constants are related to IEEE 754 limits.
    //
    var startdenom = Math.pow(width, chunks),
        significance = Math.pow(2, digits),
        overflow = significance * 2,
        mask = width - 1;


    var oldRandom = Math.random;

    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    module.exports = function(seed, options) {
      if (options && options.global === true) {
        options.global = false;
        Math.random = module.exports(seed, options);
        options.global = true;
        return Math.random;
      }
      var use_entropy = (options && options.entropy) || false;
      var key = [];

      // Flatten the seed string or build one from local entropy if needed.
      var shortseed = mixkey(flatten(
        use_entropy ? [seed, tostring(pool)] :
        0 in arguments ? seed : autoseed(), 3), key);

      // Use the seed to initialize an ARC4 generator.
      var arc4 = new ARC4(key);

      // Mix the randomness into accumulated entropy.
      mixkey(tostring(arc4.S), pool);

      // Override Math.random

      // This function returns a random double in [0, 1) that contains
      // randomness in every bit of the mantissa of the IEEE 754 value.

      return function() {         // Closure to return a random double:
        var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
            d = startdenom,                 //   and denominator d = 2 ^ 48.
            x = 0;                          //   and no 'extra last byte'.
        while (n < significance) {          // Fill up all significant digits by
          n = (n + x) * width;              //   shifting numerator and
          d *= width;                       //   denominator and generating a
          x = arc4.g(1);                    //   new least-significant-byte.
        }
        while (n >= overflow) {             // To avoid rounding up, before adding
          n /= 2;                           //   last byte, shift everything
          d /= 2;                           //   right using integer Math until
          x >>>= 1;                         //   we have exactly the desired bits.
        }
        return (n + x) / d;                 // Form the number within [0, 1).
      };
    };

    module.exports.resetGlobal = function () {
      Math.random = oldRandom;
    };

    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    /** @constructor */
    function ARC4(key) {
      var t, keylen = key.length,
          me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

      // The empty key [] is treated as [0].
      if (!keylen) { key = [keylen++]; }

      // Set up S using the standard key scheduling algorithm.
      while (i < width) {
        s[i] = i++;
      }
      for (i = 0; i < width; i++) {
        s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
        s[j] = t;
      }

      // The "g" method returns the next (count) outputs as one number.
      (me.g = function(count) {
        // Using instance members instead of closure state nearly doubles speed.
        var t, r = 0,
            i = me.i, j = me.j, s = me.S;
        while (count--) {
          t = s[i = mask & (i + 1)];
          r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
        }
        me.i = i; me.j = j;
        return r;
        // For robust unpredictability discard an initial batch of values.
        // See http://www.rsa.com/rsalabs/node.asp?id=2009
      })(width);
    }

    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
      var result = [], typ = (typeof obj)[0], prop;
      if (depth && typ == 'o') {
        for (prop in obj) {
          try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
        }
      }
      return (result.length ? result : typ == 's' ? obj : obj + '\0');
    }

    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
      var stringseed = seed + '', smear, j = 0;
      while (j < stringseed.length) {
        key[mask & j] =
          mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
      }
      return tostring(key);
    }

    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto if available.
    //
    /** @param {Uint8Array=} seed */
    function autoseed(seed) {
      try {
        GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
        return tostring(seed);
      } catch (e) {
        return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
                GLOBAL.screen, tostring(pool)];
      }
    }

    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
      return String.fromCharCode.apply(0, a);
    }

    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to intefere with determinstic PRNG state later,
    // seedrandom will not call Math.random on its own again after
    // initialization.
    //
    mixkey(Math.random(), pool);
    });
    var seedRandom_1 = seedRandom.resetGlobal;

    // create a random seed here to prevent an infinite loop from seed-random
    var singletonRandom =
    /* #__PURE__ */
    seedRandom();
    function createRng(randomSeed) {
      var random; // create a new random generator with given seed

      function setSeed(seed) {
        random = seed === null ? singletonRandom : seedRandom(String(seed));
      } // initialize a seeded pseudo random number generator with config's random seed


      setSeed(randomSeed); // wrapper function so the rng can be updated via generator

      function rng() {
        return random();
      }

      return rng;
    }

    var name$3N = 'pickRandom';
    var dependencies$3O = ['typed', 'config', '?on'];
    var createPickRandom =
    /* #__PURE__ */
    factory(name$3N, dependencies$3O, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          on = _ref.on;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Random pick one or more values from a one dimensional array.
       * Array elements are picked using a random function with uniform or weighted distribution.
       *
       * Syntax:
       *
       *     math.pickRandom(array)
       *     math.pickRandom(array, number)
       *     math.pickRandom(array, weights)
       *     math.pickRandom(array, number, weights)
       *     math.pickRandom(array, weights, number)
       *
       * Examples:
       *
       *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
       *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
       *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
       *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
       *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
       *
       * See also:
       *
       *     random, randomInt
       *
       * @param {Array | Matrix} array     A one dimensional array
       * @param {Int} number               An int or float
       * @param {Array | Matrix} weights   An array of ints or floats
       * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
       *                                   Returns an array with the configured number of elements when number is > 1.
       */


      return typed({
        'Array | Matrix': function ArrayMatrix(possibles) {
          return _pickRandom(possibles);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
          return _pickRandom(possibles, number, undefined);
        },
        'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {
          return _pickRandom(possibles, undefined, weights);
        },
        'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
          return _pickRandom(possibles, number, weights);
        },
        'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
          return _pickRandom(possibles, number, weights);
        }
      });

      function _pickRandom(possibles, number, weights) {
        var single = typeof number === 'undefined';

        if (single) {
          number = 1;
        }

        possibles = possibles.valueOf(); // get Array

        if (weights) {
          weights = weights.valueOf(); // get Array
        }

        if (arraySize(possibles).length > 1) {
          throw new Error('Only one dimensional vectors supported');
        }

        var totalWeights = 0;

        if (typeof weights !== 'undefined') {
          if (weights.length !== possibles.length) {
            throw new Error('Weights must have the same length as possibles');
          }

          for (var i = 0, len = weights.length; i < len; i++) {
            if (!isNumber$f(weights[i]) || weights[i] < 0) {
              throw new Error('Weights must be an array of positive numbers');
            }

            totalWeights += weights[i];
          }
        }

        var length = possibles.length;

        if (length === 0) {
          return [];
        } else if (number >= length) {
          return number > 1 ? possibles : possibles[0];
        }

        var result = [];
        var pick;

        while (result.length < number) {
          if (typeof weights === 'undefined') {
            pick = possibles[Math.floor(rng() * length)];
          } else {
            var randKey = rng() * totalWeights;

            for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
              randKey -= weights[_i];

              if (randKey < 0) {
                pick = possibles[_i];
                break;
              }
            }
          }

          if (result.indexOf(pick) === -1) {
            result.push(pick);
          }
        }

        return single ? result[0] : result; // TODO: return matrix when input was a matrix
        // TODO: add support for multi dimensional matrices
      }
    });

    /**
     * This is a util function for generating a random matrix recursively.
     * @param {number[]} size
     * @param {function} random
     * @returns {Array}
     */
    function randomMatrix(size, random) {
      var data = [];
      size = size.slice(0);

      if (size.length > 1) {
        for (var i = 0, length = size.shift(); i < length; i++) {
          data.push(randomMatrix(size, random));
        }
      } else {
        for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
          data.push(random());
        }
      }

      return data;
    }

    var name$3O = 'random';
    var dependencies$3P = ['typed', 'config', '?on'];
    var createRandom =
    /* #__PURE__ */
    factory(name$3O, dependencies$3P, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          on = _ref.on;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Return a random number larger or equal to `min` and smaller than `max`
       * using a uniform distribution.
       *
       * Syntax:
       *
       *     math.random()                // generate a random number between 0 and 1
       *     math.random(max)             // generate a random number between 0 and max
       *     math.random(min, max)        // generate a random number between min and max
       *     math.random(size)            // generate a matrix with random numbers between 0 and 1
       *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
       *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
       *
       * Examples:
       *
       *     math.random()       // returns a random number between 0 and 1
       *     math.random(100)    // returns a random number between 0 and 100
       *     math.random(30, 40) // returns a random number between 30 and 40
       *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
       *
       * See also:
       *
       *     randomInt, pickRandom
       *
       * @param {Array | Matrix} [size] If provided, an array or matrix with given
       *                                size and filled with random values is returned
       * @param {number} [min]  Minimum boundary for the random value, included
       * @param {number} [max]  Maximum boundary for the random value, excluded
       * @return {number | Array | Matrix} A random number
       */


      return typed(name$3O, {
        '': function _() {
          return _random(0, 1);
        },
        number: function number(max) {
          return _random(0, max);
        },
        'number, number': function numberNumber(min, max) {
          return _random(min, max);
        },
        'Array | Matrix': function ArrayMatrix(size) {
          return _randomMatrix(size, 0, 1);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
          return _randomMatrix(size, 0, max);
        },
        'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
          return _randomMatrix(size, min, max);
        }
      });

      function _randomMatrix(size, min, max) {
        var res = randomMatrix(size.valueOf(), function () {
          return _random(min, max);
        });
        return isMatrix(size) ? size.create(res) : res;
      }

      function _random(min, max) {
        return min + rng() * (max - min);
      }
    }); // number only implementation of random, no matrix support

    var name$3P = 'randomInt';
    var dependencies$3Q = ['typed', 'config', '?on'];
    var createRandomInt =
    /* #__PURE__ */
    factory(name$3P, dependencies$3Q, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          on = _ref.on;
      // seeded pseudo random number generator
      var rng = createRng(config.randomSeed);

      if (on) {
        on('config', function (curr, prev) {
          if (curr.randomSeed !== prev.randomSeed) {
            rng = createRng(curr.randomSeed);
          }
        });
      }
      /**
       * Return a random integer number larger or equal to `min` and smaller than `max`
       * using a uniform distribution.
       *
       * Syntax:
       *
       *     math.randomInt()                // generate a random integer between 0 and 1
       *     math.randomInt(max)             // generate a random integer between 0 and max
       *     math.randomInt(min, max)        // generate a random integer between min and max
       *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
       *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
       *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
       *
       * Examples:
       *
       *     math.randomInt(100)    // returns a random integer between 0 and 100
       *     math.randomInt(30, 40) // returns a random integer between 30 and 40
       *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
       *
       * See also:
       *
       *     random, pickRandom
       *
       * @param {Array | Matrix} [size] If provided, an array or matrix with given
       *                                size and filled with random values is returned
       * @param {number} [min]  Minimum boundary for the random value, included
       * @param {number} [max]  Maximum boundary for the random value, excluded
       * @return {number | Array | Matrix} A random integer value
       */


      return typed(name$3P, {
        '': function _() {
          return _randomInt(0, 1);
        },
        number: function number(max) {
          return _randomInt(0, max);
        },
        'number, number': function numberNumber(min, max) {
          return _randomInt(min, max);
        },
        'Array | Matrix': function ArrayMatrix(size) {
          return _randomIntMatrix(size, 0, 1);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
          return _randomIntMatrix(size, 0, max);
        },
        'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
          return _randomIntMatrix(size, min, max);
        }
      });

      function _randomIntMatrix(size, min, max) {
        var res = randomMatrix(size.valueOf(), function () {
          return _randomInt(min, max);
        });
        return isMatrix(size) ? size.create(res) : res;
      }

      function _randomInt(min, max) {
        return Math.floor(min + rng() * (max - min));
      }
    });

    var name$3Q = 'stirlingS2';
    var dependencies$3R = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
    var createStirlingS2 =
    /* #__PURE__ */
    factory(name$3Q, dependencies$3R, function (_ref) {
      var typed = _ref.typed,
          addScalar = _ref.addScalar,
          subtract = _ref.subtract,
          multiplyScalar = _ref.multiplyScalar,
          divideScalar = _ref.divideScalar,
          pow = _ref.pow,
          factorial = _ref.factorial,
          combinations = _ref.combinations,
          isNegative = _ref.isNegative,
          isInteger = _ref.isInteger,
          larger = _ref.larger;

      /**
       * The Stirling numbers of the second kind, counts the number of ways to partition
       * a set of n labelled objects into k nonempty unlabelled subsets.
       * stirlingS2 only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       *  If n = k or k = 1, then s(n,k) = 1
       *
       * Syntax:
       *
       *   math.stirlingS2(n, k)
       *
       * Examples:
       *
       *    math.stirlingS2(5, 3) //returns 25
       *
       * See also:
       *
       *    bellNumbers
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @param {Number | BigNumber} k    Number of objects in the subset
       * @return {Number | BigNumber}     S(n,k)
       */
      return typed(name$3Q, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
          if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
            throw new TypeError('Non-negative integer value expected in function stirlingS2');
          } else if (larger(k, n)) {
            throw new TypeError('k must be less than or equal to n in function stirlingS2');
          } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


          var kFactorial = factorial(k);
          var result = 0;

          for (var i = 0; i <= k; i++) {
            var negativeOne = pow(-1, subtract(k, i));
            var kChooseI = combinations(k, i);
            var iPower = pow(i, n);
            result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
          }

          return divideScalar(result, kFactorial);
        }
      });
    });

    var name$3R = 'bellNumbers';
    var dependencies$3S = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
    var createBellNumbers =
    /* #__PURE__ */
    factory(name$3R, dependencies$3S, function (_ref) {
      var typed = _ref.typed,
          addScalar = _ref.addScalar,
          isNegative = _ref.isNegative,
          isInteger = _ref.isInteger,
          stirlingS2 = _ref.stirlingS2;

      /**
       * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
       * bellNumbers only takes integer arguments.
       * The following condition must be enforced: n >= 0
       *
       * Syntax:
       *
       *   math.bellNumbers(n)
       *
       * Examples:
       *
       *    math.bellNumbers(3) // returns 5
       *    math.bellNumbers(8) // returns 4140
       *
       * See also:
       *
       *    stirlingS2
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @return {Number | BigNumber}     B(n)
       */
      return typed(name$3R, {
        'number | BigNumber': function numberBigNumber(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError('Non-negative integer value expected in function bellNumbers');
          } // Sum (k=0, n) S(n,k).


          var result = 0;

          for (var i = 0; i <= n; i++) {
            result = addScalar(result, stirlingS2(n, i));
          }

          return result;
        }
      });
    });

    var name$3S = 'catalan';
    var dependencies$3T = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
    var createCatalan =
    /* #__PURE__ */
    factory(name$3S, dependencies$3T, function (_ref) {
      var typed = _ref.typed,
          addScalar = _ref.addScalar,
          divideScalar = _ref.divideScalar,
          multiplyScalar = _ref.multiplyScalar,
          combinations = _ref.combinations,
          isNegative = _ref.isNegative,
          isInteger = _ref.isInteger;

      /**
       * The Catalan Numbers enumerate combinatorial structures of many different types.
       * catalan only takes integer arguments.
       * The following condition must be enforced: n >= 0
       *
       * Syntax:
       *
       *   math.catalan(n)
       *
       * Examples:
       *
       *    math.catalan(3) // returns 5
       *    math.catalan(8) // returns 1430
       *
       * See also:
       *
       *    bellNumbers
       *
       * @param {Number | BigNumber} n    nth Catalan number
       * @return {Number | BigNumber}     Cn(n)
       */
      return typed(name$3S, {
        'number | BigNumber': function numberBigNumber(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError('Non-negative integer value expected in function catalan');
          }

          return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
        }
      });
    });

    var name$3T = 'composition';
    var dependencies$3U = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
    var createComposition =
    /* #__PURE__ */
    factory(name$3T, dependencies$3U, function (_ref) {
      var typed = _ref.typed,
          addScalar = _ref.addScalar,
          combinations = _ref.combinations,
          isPositive = _ref.isPositive,
          isNegative = _ref.isNegative,
          isInteger = _ref.isInteger,
          larger = _ref.larger;

      /**
       * The composition counts of n into k parts.
       *
       * composition only takes integer arguments.
       * The following condition must be enforced: k <= n.
       *
       * Syntax:
       *
       *   math.composition(n, k)
       *
       * Examples:
       *
       *    math.composition(5, 3) // returns 6
       *
       * See also:
       *
       *    combinations
       *
       * @param {Number | BigNumber} n    Total number of objects in the set
       * @param {Number | BigNumber} k    Number of objects in the subset
       * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
       */
      return typed(name$3T, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
          if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
            throw new TypeError('Positive integer value expected in function composition');
          } else if (larger(k, n)) {
            throw new TypeError('k must be less than or equal to n in function composition');
          }

          return combinations(addScalar(n, -1), addScalar(k, -1));
        }
      });
    });

    var name$3U = 'simplifyUtil';
    var dependencies$3V = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
    var createUtil =
    /* #__PURE__ */
    factory(name$3U, dependencies$3V, function (_ref) {
      var FunctionNode = _ref.FunctionNode,
          OperatorNode = _ref.OperatorNode,
          SymbolNode = _ref.SymbolNode;
      // TODO commutative/associative properties rely on the arguments
      // e.g. multiply is not commutative for matrices
      // The properties should be calculated from an argument to simplify, or possibly something in math.config
      // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
      var commutative = {
        add: true,
        multiply: true
      };
      var associative = {
        add: true,
        multiply: true
      };

      function isCommutative(node, context) {
        if (!isOperatorNode(node)) {
          return true;
        }

        var name = node.fn.toString();

        if (context && hasOwnProperty$1(context, name) && hasOwnProperty$1(context[name], 'commutative')) {
          return context[name].commutative;
        }

        return commutative[name] || false;
      }

      function isAssociative(node, context) {
        if (!isOperatorNode(node)) {
          return false;
        }

        var name = node.fn.toString();

        if (context && hasOwnProperty$1(context, name) && hasOwnProperty$1(context[name], 'associative')) {
          return context[name].associative;
        }

        return associative[name] || false;
      }
      /**
       * Flatten all associative operators in an expression tree.
       * Assumes parentheses have already been removed.
       */


      function flatten(node) {
        if (!node.args || node.args.length === 0) {
          return node;
        }

        node.args = allChildren(node);

        for (var i = 0; i < node.args.length; i++) {
          flatten(node.args[i]);
        }
      }
      /**
       * Get the children of a node as if it has been flattened.
       * TODO implement for FunctionNodes
       */


      function allChildren(node) {
        var op;
        var children = [];

        var findChildren = function findChildren(node) {
          for (var i = 0; i < node.args.length; i++) {
            var child = node.args[i];

            if (isOperatorNode(child) && op === child.op) {
              findChildren(child);
            } else {
              children.push(child);
            }
          }
        };

        if (isAssociative(node)) {
          op = node.op;
          findChildren(node);
          return children;
        } else {
          return node.args;
        }
      }
      /**
       *  Unflatten all flattened operators to a right-heavy binary tree.
       */


      function unflattenr(node) {
        if (!node.args || node.args.length === 0) {
          return;
        }

        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;

        for (var i = 0; i < l; i++) {
          unflattenr(node.args[i]);
        }

        if (l > 2 && isAssociative(node)) {
          var curnode = node.args.pop();

          while (node.args.length > 0) {
            curnode = makeNode([node.args.pop(), curnode]);
          }

          node.args = curnode.args;
        }
      }
      /**
       *  Unflatten all flattened operators to a left-heavy binary tree.
       */


      function unflattenl(node) {
        if (!node.args || node.args.length === 0) {
          return;
        }

        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;

        for (var i = 0; i < l; i++) {
          unflattenl(node.args[i]);
        }

        if (l > 2 && isAssociative(node)) {
          var curnode = node.args.shift();

          while (node.args.length > 0) {
            curnode = makeNode([curnode, node.args.shift()]);
          }

          node.args = curnode.args;
        }
      }

      function createMakeNodeFunction(node) {
        if (isOperatorNode(node)) {
          return function (args) {
            try {
              return new OperatorNode(node.op, node.fn, args, node.implicit);
            } catch (err) {
              console.error(err);
              return [];
            }
          };
        } else {
          return function (args) {
            return new FunctionNode(new SymbolNode(node.name), args);
          };
        }
      }

      return {
        createMakeNodeFunction: createMakeNodeFunction,
        isCommutative: isCommutative,
        isAssociative: isAssociative,
        flatten: flatten,
        allChildren: allChildren,
        unflattenr: unflattenr,
        unflattenl: unflattenl
      };
    });

    var name$3V = 'simplifyCore';
    var dependencies$3W = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
    var createSimplifyCore =
    /* #__PURE__ */
    factory(name$3V, dependencies$3W, function (_ref) {
      var equal = _ref.equal,
          isZero = _ref.isZero,
          add = _ref.add,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          divide = _ref.divide,
          pow = _ref.pow,
          ConstantNode = _ref.ConstantNode,
          OperatorNode = _ref.OperatorNode,
          FunctionNode = _ref.FunctionNode,
          ParenthesisNode = _ref.ParenthesisNode;
      var node0 = new ConstantNode(0);
      var node1 = new ConstantNode(1);
      /**
       * simplifyCore() performs single pass simplification suitable for
       * applications requiring ultimate performance. In contrast, simplify()
       * extends simplifyCore() with additional passes to provide deeper
       * simplification.
       *
       * Syntax:
       *
       *     simplify.simplifyCore(expr)
       *
       * Examples:
       *
       *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
       *     math.simplify.simpifyCore(f)                          // Node {2 * x}
       *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
       *
       * See also:
       *
       *     derivative
       *
       * @param {Node} node
       *     The expression to be simplified
       */

      function simplifyCore(node) {
        if (isOperatorNode(node) && node.isUnary()) {
          var a0 = simplifyCore(node.args[0]);

          if (node.op === '+') {
            // unary plus
            return a0;
          }

          if (node.op === '-') {
            // unary minus
            if (isOperatorNode(a0)) {
              if (a0.isUnary() && a0.op === '-') {
                return a0.args[0];
              } else if (a0.isBinary() && a0.fn === 'subtract') {
                return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
              }
            }

            return new OperatorNode(node.op, node.fn, [a0]);
          }
        } else if (isOperatorNode(node) && node.isBinary()) {
          var _a = simplifyCore(node.args[0]);

          var a1 = simplifyCore(node.args[1]);

          if (node.op === '+') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return a1;
              } else if (isConstantNode(a1)) {
                return new ConstantNode(add(_a.value, a1.value));
              }
            }

            if (isConstantNode(a1) && isZero(a1.value)) {
              return _a;
            }

            if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
              return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
            }

            return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
          } else if (node.op === '-') {
            if (isConstantNode(_a) && a1) {
              if (isConstantNode(a1)) {
                return new ConstantNode(subtract(_a.value, a1.value));
              } else if (isZero(_a.value)) {
                return new OperatorNode('-', 'unaryMinus', [a1]);
              }
            } // if (node.fn === "subtract" && node.args.length === 2) {


            if (node.fn === 'subtract') {
              if (isConstantNode(a1) && isZero(a1.value)) {
                return _a;
              }

              if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
                return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
              }

              return new OperatorNode(node.op, node.fn, [_a, a1]);
            }
          } else if (node.op === '*') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return node0;
              } else if (equal(_a.value, 1)) {
                return a1;
              } else if (isConstantNode(a1)) {
                return new ConstantNode(multiply(_a.value, a1.value));
              }
            }

            if (isConstantNode(a1)) {
              if (isZero(a1.value)) {
                return node0;
              } else if (equal(a1.value, 1)) {
                return _a;
              } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === node.op) {
                var a00 = _a.args[0];

                if (isConstantNode(a00)) {
                  var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
                  return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
                }
              }

              return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
            }

            return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
          } else if (node.op === '/') {
            if (isConstantNode(_a)) {
              if (isZero(_a.value)) {
                return node0;
              } else if (isConstantNode(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
                return new ConstantNode(divide(_a.value, a1.value));
              }
            }

            return new OperatorNode(node.op, node.fn, [_a, a1]);
          } else if (node.op === '^') {
            if (isConstantNode(a1)) {
              if (isZero(a1.value)) {
                return node1;
              } else if (equal(a1.value, 1)) {
                return _a;
              } else {
                if (isConstantNode(_a)) {
                  // fold constant
                  return new ConstantNode(pow(_a.value, a1.value));
                } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
                  var a01 = _a.args[1];

                  if (isConstantNode(a01)) {
                    return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
                  }
                }
              }
            }

            return new OperatorNode(node.op, node.fn, [_a, a1]);
          }
        } else if (isParenthesisNode(node)) {
          var c = simplifyCore(node.content);

          if (isParenthesisNode(c) || isSymbolNode(c) || isConstantNode(c)) {
            return c;
          }

          return new ParenthesisNode(c);
        } else if (isFunctionNode(node)) {
          var args = node.args.map(simplifyCore).map(function (arg) {
            return isParenthesisNode(arg) ? arg.content : arg;
          });
          return new FunctionNode(simplifyCore(node.fn), args);
        }

        return node;
      }

      return simplifyCore;
    });

    // TODO this could be improved by simplifying seperated constants under associative and commutative operators
    var name$3W = 'simplifyConstant';
    var dependencies$3X = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
    var createSimplifyConstant =
    /* #__PURE__ */
    factory(name$3W, dependencies$3X, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          mathWithTransform = _ref.mathWithTransform,
          fraction = _ref.fraction,
          bignumber = _ref.bignumber,
          ConstantNode = _ref.ConstantNode,
          OperatorNode = _ref.OperatorNode,
          FunctionNode = _ref.FunctionNode,
          SymbolNode = _ref.SymbolNode;

      var _createUtil = createUtil({
        FunctionNode: FunctionNode,
        OperatorNode: OperatorNode,
        SymbolNode: SymbolNode
      }),
          isCommutative = _createUtil.isCommutative,
          isAssociative = _createUtil.isAssociative,
          allChildren = _createUtil.allChildren,
          createMakeNodeFunction = _createUtil.createMakeNodeFunction;

      function simplifyConstant(expr, options) {
        var res = foldFraction(expr, options);
        return isNode(res) ? res : _toNode(res);
      }

      function _eval(fnname, args, options) {
        try {
          return _toNumber(mathWithTransform[fnname].apply(null, args), options);
        } catch (ignore) {
          // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
          args = args.map(function (x) {
            if (isFraction(x)) {
              return x.valueOf();
            }

            return x;
          });
          return _toNumber(mathWithTransform[fnname].apply(null, args), options);
        }
      }

      var _toNode = typed({
        Fraction: _fractionToNode,
        number: function number(n) {
          if (n < 0) {
            return unaryMinusNode(new ConstantNode(-n));
          }

          return new ConstantNode(n);
        },
        BigNumber: function BigNumber(n) {
          if (n < 0) {
            return unaryMinusNode(new ConstantNode(-n));
          }

          return new ConstantNode(n); // old parameters: (n.toString(), 'number')
        },
        Complex: function Complex(s) {
          throw new Error('Cannot convert Complex number to Node');
        }
      }); // convert a number to a fraction only if it can be expressed exactly


      function _exactFraction(n, options) {
        var exactFractions = options && options.exactFractions !== false;

        if (exactFractions && isFinite(n) && fraction) {
          var f = fraction(n);

          if (f.valueOf() === n) {
            return f;
          }
        }

        return n;
      } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
      // BigNumbers are left alone


      var _toNumber = typed({
        'string, Object': function stringObject(s, options) {
          if (config.number === 'BigNumber') {
            if (bignumber === undefined) {
              noBignumber();
            }

            return bignumber(s);
          } else if (config.number === 'Fraction') {
            if (fraction === undefined) {
              noFraction();
            }

            return fraction(s);
          } else {
            var n = parseFloat(s);
            return _exactFraction(n, options);
          }
        },
        'Fraction, Object': function FractionObject(s, options) {
          return s;
        },
        // we don't need options here
        'BigNumber, Object': function BigNumberObject(s, options) {
          return s;
        },
        // we don't need options here
        'number, Object': function numberObject(s, options) {
          return _exactFraction(s, options);
        },
        'Complex, Object': function ComplexObject(s, options) {
          if (s.im !== 0) {
            return s;
          }

          return _exactFraction(s.re, options);
        }
      });

      function unaryMinusNode(n) {
        return new OperatorNode('-', 'unaryMinus', [n]);
      }

      function _fractionToNode(f) {
        var n;
        var vn = f.s * f.n;

        if (vn < 0) {
          n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
        } else {
          n = new ConstantNode(vn);
        }

        if (f.d === 1) {
          return n;
        }

        return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
      }
      /*
       * Create a binary tree from a list of Fractions and Nodes.
       * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
       * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
       * @param args - list of Fractions and Nodes
       * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
       * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
       * if args.length is 1, returns args[0]
       * @return - Either a Node representing a binary expression or Fraction
       */


      function foldOp(fn, args, makeNode, options) {
        return args.reduce(function (a, b) {
          if (!isNode(a) && !isNode(b)) {
            try {
              return _eval(fn, [a, b], options);
            } catch (ignoreandcontinue) {}

            a = _toNode(a);
            b = _toNode(b);
          } else if (!isNode(a)) {
            a = _toNode(a);
          } else if (!isNode(b)) {
            b = _toNode(b);
          }

          return makeNode([a, b]);
        });
      } // destroys the original node and returns a folded one


      function foldFraction(node, options) {
        switch (node.type) {
          case 'SymbolNode':
            return node;

          case 'ConstantNode':
            if (typeof node.value === 'number' || !isNaN(node.value)) {
              return _toNumber(node.value, options);
            }

            return node;

          case 'FunctionNode':
            if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
              return node;
            }

            {
              // Process operators as OperatorNode
              var operatorFunctions = ['add', 'multiply'];

              if (operatorFunctions.indexOf(node.name) === -1) {
                var args = node.args.map(function (arg) {
                  return foldFraction(arg, options);
                }); // If all args are numbers

                if (!args.some(isNode)) {
                  try {
                    return _eval(node.name, args, options);
                  } catch (ignoreandcontine) {}
                } // Convert all args to nodes and construct a symbolic function call


                args = args.map(function (arg) {
                  return isNode(arg) ? arg : _toNode(arg);
                });
                return new FunctionNode(node.name, args);
              }
            }

          /* falls through */

          case 'OperatorNode':
            {
              var fn = node.fn.toString();

              var _args;

              var res;
              var makeNode = createMakeNodeFunction(node);

              if (isOperatorNode(node) && node.isUnary()) {
                _args = [foldFraction(node.args[0], options)];

                if (!isNode(_args[0])) {
                  res = _eval(fn, _args, options);
                } else {
                  res = makeNode(_args);
                }
              } else if (isAssociative(node)) {
                _args = allChildren(node);
                _args = _args.map(function (arg) {
                  return foldFraction(arg, options);
                });

                if (isCommutative(fn)) {
                  // commutative binary operator
                  var consts = [];
                  var vars = [];

                  for (var i = 0; i < _args.length; i++) {
                    if (!isNode(_args[i])) {
                      consts.push(_args[i]);
                    } else {
                      vars.push(_args[i]);
                    }
                  }

                  if (consts.length > 1) {
                    res = foldOp(fn, consts, makeNode, options);
                    vars.unshift(res);
                    res = foldOp(fn, vars, makeNode, options);
                  } else {
                    // we won't change the children order since it's not neccessary
                    res = foldOp(fn, _args, makeNode, options);
                  }
                } else {
                  // non-commutative binary operator
                  res = foldOp(fn, _args, makeNode, options);
                }
              } else {
                // non-associative binary operator
                _args = node.args.map(function (arg) {
                  return foldFraction(arg, options);
                });
                res = foldOp(fn, _args, makeNode, options);
              }

              return res;
            }

          case 'ParenthesisNode':
            // remove the uneccessary parenthesis
            return foldFraction(node.content, options);

          case 'AccessorNode':
          /* falls through */

          case 'ArrayNode':
          /* falls through */

          case 'AssignmentNode':
          /* falls through */

          case 'BlockNode':
          /* falls through */

          case 'FunctionAssignmentNode':
          /* falls through */

          case 'IndexNode':
          /* falls through */

          case 'ObjectNode':
          /* falls through */

          case 'RangeNode':
          /* falls through */

          case 'ConditionalNode':
          /* falls through */

          default:
            throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
        }
      }

      return simplifyConstant;
    });

    var name$3X = 'resolve';
    var dependencies$3Y = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
    var createResolve =
    /* #__PURE__ */
    factory(name$3X, dependencies$3Y, function (_ref) {
      var parse = _ref.parse,
          FunctionNode = _ref.FunctionNode,
          OperatorNode = _ref.OperatorNode,
          ParenthesisNode = _ref.ParenthesisNode;

      /**
       * resolve(expr, scope) replaces variable nodes with their scoped values
       *
       * Syntax:
       *
       *     simplify.resolve(expr, scope)
       *
       * Examples:
       *
       *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
       *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
       *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
       *
       * @param {Node} node
       *     The expression tree to be simplified
       * @param {Object} scope with variables to be resolved
       */
      function resolve(node, scope) {
        if (!scope) {
          return node;
        }

        if (isSymbolNode(node)) {
          var value = scope[node.name];

          if (isNode(value)) {
            return resolve(value, scope);
          } else if (typeof value === 'number') {
            return parse(String(value));
          }
        } else if (isOperatorNode(node)) {
          var args = node.args.map(function (arg) {
            return resolve(arg, scope);
          });
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } else if (isParenthesisNode(node)) {
          return new ParenthesisNode(resolve(node.content, scope));
        } else if (isFunctionNode(node)) {
          var _args = node.args.map(function (arg) {
            return resolve(arg, scope);
          });

          return new FunctionNode(node.name, _args);
        }

        return node;
      }

      return resolve;
    });

    function _typeof$c(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$c = function _typeof(obj) { return typeof obj; }; } else { _typeof$c = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$c(obj); }
    var name$3Y = 'simplify';
    var dependencies$3Z = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
    var createSimplify =
    /* #__PURE__ */
    factory(name$3Y, dependencies$3Z, function (_ref) {
      var config = _ref.config,
          typed = _ref.typed,
          parse = _ref.parse,
          add = _ref.add,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          divide = _ref.divide,
          pow = _ref.pow,
          isZero = _ref.isZero,
          equal = _ref.equal,
          fraction = _ref.fraction,
          bignumber = _ref.bignumber,
          mathWithTransform = _ref.mathWithTransform,
          ConstantNode = _ref.ConstantNode,
          FunctionNode = _ref.FunctionNode,
          OperatorNode = _ref.OperatorNode,
          ParenthesisNode = _ref.ParenthesisNode,
          SymbolNode = _ref.SymbolNode;
      var simplifyConstant = createSimplifyConstant({
        typed: typed,
        config: config,
        mathWithTransform: mathWithTransform,
        fraction: fraction,
        bignumber: bignumber,
        ConstantNode: ConstantNode,
        OperatorNode: OperatorNode,
        FunctionNode: FunctionNode,
        SymbolNode: SymbolNode
      });
      var simplifyCore = createSimplifyCore({
        equal: equal,
        isZero: isZero,
        add: add,
        subtract: subtract,
        multiply: multiply,
        divide: divide,
        pow: pow,
        ConstantNode: ConstantNode,
        OperatorNode: OperatorNode,
        FunctionNode: FunctionNode,
        ParenthesisNode: ParenthesisNode
      });
      var resolve = createResolve({
        parse: parse,
        FunctionNode: FunctionNode,
        OperatorNode: OperatorNode,
        ParenthesisNode: ParenthesisNode
      });

      var _createUtil = createUtil({
        FunctionNode: FunctionNode,
        OperatorNode: OperatorNode,
        SymbolNode: SymbolNode
      }),
          isCommutative = _createUtil.isCommutative,
          isAssociative = _createUtil.isAssociative,
          flatten = _createUtil.flatten,
          unflattenr = _createUtil.unflattenr,
          unflattenl = _createUtil.unflattenl,
          createMakeNodeFunction = _createUtil.createMakeNodeFunction;
      /**
       * Simplify an expression tree.
       *
       * A list of rules are applied to an expression, repeating over the list until
       * no further changes are made.
       * It's possible to pass a custom set of rules to the function as second
       * argument. A rule can be specified as an object, string, or function:
       *
       *     const rules = [
       *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
       *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
       *       function (node) {
       *         // ... return a new node or return the node unchanged
       *         return node
       *       }
       *     ]
       *
       * String and object rules consist of a left and right pattern. The left is
       * used to match against the expression and the right determines what matches
       * are replaced with. The main difference between a pattern and a normal
       * expression is that variables starting with the following characters are
       * interpreted as wildcards:
       *
       * - 'n' - matches any Node
       * - 'c' - matches any ConstantNode
       * - 'v' - matches any Node that is not a ConstantNode
       *
       * The default list of rules is exposed on the function as `simplify.rules`
       * and can be used as a basis to built a set of custom rules.
       *
       * For more details on the theory, see:
       *
       * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
       * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
       *
       *  An optional `options` argument can be passed as last argument of `simplify`.
       *  There is currently one option available: `exactFractions`, a boolean which
       *  is `true` by default.
       *
       * Syntax:
       *
       *     simplify(expr)
       *     simplify(expr, rules)
       *     simplify(expr, rules)
       *     simplify(expr, rules, scope)
       *     simplify(expr, rules, scope, options)
       *     simplify(expr, scope)
       *     simplify(expr, scope, options)
       *
       * Examples:
       *
       *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
       *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
       *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
       *     math.simplify(f)                          // Node "2 * x"
       *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
       *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
       *
       * See also:
       *
       *     derivative, parse, evaluate, rationalize
       *
       * @param {Node | string} expr
       *            The expression to be simplified
       * @param {Array<{l:string, r: string} | string | function>} [rules]
       *            Optional list with custom rules
       * @return {Node} Returns the simplified form of `expr`
       */


      var simplify = typed('simplify', {
        string: function string(expr) {
          return simplify(parse(expr), simplify.rules, {}, {});
        },
        'string, Object': function stringObject(expr, scope) {
          return simplify(parse(expr), simplify.rules, scope, {});
        },
        'string, Object, Object': function stringObjectObject(expr, scope, options) {
          return simplify(parse(expr), simplify.rules, scope, options);
        },
        'string, Array': function stringArray(expr, rules) {
          return simplify(parse(expr), rules, {}, {});
        },
        'string, Array, Object': function stringArrayObject(expr, rules, scope) {
          return simplify(parse(expr), rules, scope, {});
        },
        'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {
          return simplify(parse(expr), rules, scope, options);
        },
        'Node, Object': function NodeObject(expr, scope) {
          return simplify(expr, simplify.rules, scope, {});
        },
        'Node, Object, Object': function NodeObjectObject(expr, scope, options) {
          return simplify(expr, simplify.rules, scope, options);
        },
        Node: function Node(expr) {
          return simplify(expr, simplify.rules, {}, {});
        },
        'Node, Array': function NodeArray(expr, rules) {
          return simplify(expr, rules, {}, {});
        },
        'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
          return simplify(expr, rules, scope, {});
        },
        'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
          rules = _buildRules(rules);
          var res = resolve(expr, scope);
          res = removeParens(res);
          var visited = {};
          var str = res.toString({
            parenthesis: 'all'
          });

          while (!visited[str]) {
            visited[str] = true;
            _lastsym = 0; // counter for placeholder symbols

            for (var i = 0; i < rules.length; i++) {
              if (typeof rules[i] === 'function') {
                res = rules[i](res, options);
              } else {
                flatten(res);
                res = applyRule(res, rules[i]);
              }

              unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
            }

            str = res.toString({
              parenthesis: 'all'
            });
          }

          return res;
        }
      });
      simplify.simplifyCore = simplifyCore;
      simplify.resolve = resolve;

      function removeParens(node) {
        return node.transform(function (node, path, parent) {
          return isParenthesisNode(node) ? removeParens(node.content) : node;
        });
      } // All constants that are allowed in rules


      var SUPPORTED_CONSTANTS = {
        "true": true,
        "false": true,
        e: true,
        i: true,
        Infinity: true,
        LN2: true,
        LN10: true,
        LOG2E: true,
        LOG10E: true,
        NaN: true,
        phi: true,
        pi: true,
        SQRT1_2: true,
        SQRT2: true,
        tau: true // null: false,
        // undefined: false,
        // version: false,

      }; // Array of strings, used to build the ruleSet.
      // Each l (left side) and r (right side) are parsed by
      // the expression parser into a node tree.
      // Left hand sides are matched to subtrees within the
      // expression to be parsed and replaced with the right
      // hand side.
      // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
      // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
      // It is possible to get into an infinite loop with conflicting rules

      simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
      // { l: 'n^0', r: '1' },     // simplifyCore
      // { l: '0*n', r: '0' },     // simplifyCore
      // { l: 'n/n', r: '1'},      // simplifyCore
      // { l: 'n^1', r: 'n' },     // simplifyCore
      // { l: '+n1', r:'n1' },     // simplifyCore
      // { l: 'n--n1', r:'n+n1' }, // simplifyCore
      {
        l: 'log(e)',
        r: '1'
      }, // temporary rules
      {
        l: 'n-n1',
        r: 'n+-n1'
      }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
      {
        l: '-(c*v)',
        r: '(-c) * v'
      }, // make non-constant terms positive
      {
        l: '-v',
        r: '(-1) * v'
      }, {
        l: 'n/n1^n2',
        r: 'n*n1^-n2'
      }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
      {
        l: 'n/n1',
        r: 'n*n1^-1'
      }, // expand nested exponentiation
      {
        l: '(n ^ n1) ^ n2',
        r: 'n ^ (n1 * n2)'
      }, // collect like factors
      {
        l: 'n*n',
        r: 'n^2'
      }, {
        l: 'n * n^n1',
        r: 'n^(n1+1)'
      }, {
        l: 'n^n1 * n^n2',
        r: 'n^(n1+n2)'
      }, // collect like terms
      {
        l: 'n+n',
        r: '2*n'
      }, {
        l: 'n+-n',
        r: '0'
      }, {
        l: 'n1*n2 + n2',
        r: '(n1+1)*n2'
      }, {
        l: 'n1*n3 + n2*n3',
        r: '(n1+n2)*n3'
      }, // remove parenthesis in the case of negating a quantitiy
      {
        l: 'n1 + -1 * (n2 + n3)',
        r: 'n1 + -1 * n2 + -1 * n3'
      }, simplifyConstant, {
        l: '(-n)*n1',
        r: '-(n*n1)'
      }, // make factors positive (and undo 'make non-constant terms positive')
      // ordering of constants
      {
        l: 'c+v',
        r: 'v+c',
        context: {
          add: {
            commutative: false
          }
        }
      }, {
        l: 'v*c',
        r: 'c*v',
        context: {
          multiply: {
            commutative: false
          }
        }
      }, // undo temporary rules
      // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
      {
        l: 'n+-n1',
        r: 'n-n1'
      }, // undo replace 'subtract'
      {
        l: 'n*(n1^-1)',
        r: 'n/n1'
      }, // undo replace 'divide'
      {
        l: 'n*n1^-n2',
        r: 'n/n1^n2'
      }, {
        l: 'n1^-1',
        r: '1/n1'
      }, {
        l: 'n*(n1/n2)',
        r: '(n*n1)/n2'
      }, // '*' before '/'
      {
        l: 'n-(n1+n2)',
        r: 'n-n1-n2'
      }, // '-' before '+'
      // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
      // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
      {
        l: '1*n',
        r: 'n'
      } // this pattern can be produced by simplifyConstant
      ];
      /**
       * Parse the string array of rules into nodes
       *
       * Example syntax for rules:
       *
       * Position constants to the left in a product:
       * { l: 'n1 * c1', r: 'c1 * n1' }
       * n1 is any Node, and c1 is a ConstantNode.
       *
       * Apply difference of squares formula:
       * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
       * n1, n2 mean any Node.
       *
       * Short hand notation:
       * 'n1 * c1 -> c1 * n1'
       */

      function _buildRules(rules) {
        // Array of rules to be used to simplify expressions
        var ruleSet = [];

        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i];
          var newRule = void 0;

          var ruleType = _typeof$c(rule);

          switch (ruleType) {
            case 'string':
              {
                var lr = rule.split('->');

                if (lr.length === 2) {
                  rule = {
                    l: lr[0],
                    r: lr[1]
                  };
                } else {
                  throw SyntaxError('Could not parse rule: ' + rule);
                }
              }

            /* falls through */

            case 'object':
              newRule = {
                l: removeParens(parse(rule.l)),
                r: removeParens(parse(rule.r))
              };

              if (rule.context) {
                newRule.evaluate = rule.context;
              }

              if (rule.evaluate) {
                newRule.evaluate = parse(rule.evaluate);
              }

              if (isAssociative(newRule.l)) {
                var makeNode = createMakeNodeFunction(newRule.l);

                var expandsym = _getExpandPlaceholderSymbol();

                newRule.expanded = {};
                newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
                // This helps to match the newRule against nodes returned from getSplits() later on.

                flatten(newRule.expanded.l);
                unflattenr(newRule.expanded.l);
                newRule.expanded.r = makeNode([newRule.r, expandsym]);
              }

              break;

            case 'function':
              newRule = rule;
              break;

            default:
              throw TypeError('Unsupported type of rule: ' + ruleType);
          } // console.log('Adding rule: ' + rules[i])
          // console.log(newRule)


          ruleSet.push(newRule);
        }

        return ruleSet;
      }

      var _lastsym = 0;

      function _getExpandPlaceholderSymbol() {
        return new SymbolNode('_p' + _lastsym++);
      }
      /**
       * Returns a simplfied form of node, or the original node if no simplification was possible.
       *
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
       */


      var applyRule = typed('applyRule', {
        'Node, Object': function NodeObject(node, rule) {
          // console.log('Entering applyRule(' + node.toString() + ')')
          // Do not clone node unless we find a match
          var res = node; // First replace our child nodes with their simplified versions
          // If a child could not be simplified, the assignments will have
          // no effect since the node is returned unchanged

          if (res instanceof OperatorNode || res instanceof FunctionNode) {
            if (res.args) {
              for (var i = 0; i < res.args.length; i++) {
                res.args[i] = applyRule(res.args[i], rule);
              }
            }
          } else if (res instanceof ParenthesisNode) {
            if (res.content) {
              res.content = applyRule(res.content, rule);
            }
          } // Try to match a rule against this node


          var repl = rule.r;

          var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
          // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


          if (!matches && rule.expanded) {
            repl = rule.expanded.r;
            matches = _ruleMatch(rule.expanded.l, res)[0];
          }

          if (matches) {
            // const before = res.toString({parenthesis: 'all'})
            // Create a new node by cloning the rhs of the matched rule
            // we keep any implicit multiplication state if relevant
            var implicit = res.implicit;
            res = repl.clone();

            if (implicit && 'implicit' in repl) {
              res.implicit = true;
            } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


            res = res.transform(function (node) {
              if (node.isSymbolNode && hasOwnProperty$1(matches.placeholders, node.name)) {
                return matches.placeholders[node.name].clone();
              } else {
                return node;
              }
            }); // const after = res.toString({parenthesis: 'all'})
            // console.log('Simplified ' + before + ' to ' + after)
          }

          return res;
        }
      });
      /**
       * Get (binary) combinations of a flattened binary node
       * e.g. +(node1, node2, node3) -> [
       *        +(node1,  +(node2, node3)),
       *        +(node2,  +(node1, node3)),
       *        +(node3,  +(node1, node2))]
       *
       */

      function getSplits(node, context) {
        var res = [];
        var right, rightArgs;
        var makeNode = createMakeNodeFunction(node);

        if (isCommutative(node, context)) {
          for (var i = 0; i < node.args.length; i++) {
            rightArgs = node.args.slice(0);
            rightArgs.splice(i, 1);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([node.args[i], right]));
          }
        } else {
          rightArgs = node.args.slice(1);
          right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
          res.push(makeNode([node.args[0], right]));
        }

        return res;
      }
      /**
       * Returns the set union of two match-placeholders or null if there is a conflict.
       */


      function mergeMatch(match1, match2) {
        var res = {
          placeholders: {}
        }; // Some matches may not have placeholders; this is OK

        if (!match1.placeholders && !match2.placeholders) {
          return res;
        } else if (!match1.placeholders) {
          return match2;
        } else if (!match2.placeholders) {
          return match1;
        } // Placeholders with the same key must match exactly


        for (var key in match1.placeholders) {
          res.placeholders[key] = match1.placeholders[key];

          if (hasOwnProperty$1(match2.placeholders, key)) {
            if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
              return null;
            }
          }
        }

        for (var _key in match2.placeholders) {
          res.placeholders[_key] = match2.placeholders[_key];
        }

        return res;
      }
      /**
       * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
       * Each list represents matches found in one child of a node.
       */


      function combineChildMatches(list1, list2) {
        var res = [];

        if (list1.length === 0 || list2.length === 0) {
          return res;
        }

        var merged;

        for (var i1 = 0; i1 < list1.length; i1++) {
          for (var i2 = 0; i2 < list2.length; i2++) {
            merged = mergeMatch(list1[i1], list2[i2]);

            if (merged) {
              res.push(merged);
            }
          }
        }

        return res;
      }
      /**
       * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
       * Each list represents matches found in one child of a node.
       * Returns a list of unique matches.
       */


      function mergeChildMatches(childMatches) {
        if (childMatches.length === 0) {
          return childMatches;
        }

        var sets = childMatches.reduce(combineChildMatches);
        var uniqueSets = [];
        var unique = {};

        for (var i = 0; i < sets.length; i++) {
          var s = JSON.stringify(sets[i]);

          if (!unique[s]) {
            unique[s] = true;
            uniqueSets.push(sets[i]);
          }
        }

        return uniqueSets;
      }
      /**
       * Determines whether node matches rule.
       *
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @return {Object} Information about the match, if it exists.
       */


      function _ruleMatch(rule, node, isSplit) {
        //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
        //    console.log('rule = ' + rule)
        //    console.log('node = ' + node)
        //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
        var res = [{
          placeholders: {}
        }];

        if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
          // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
          if (rule instanceof OperatorNode) {
            if (rule.op !== node.op || rule.fn !== node.fn) {
              return [];
            }
          } else if (rule instanceof FunctionNode) {
            if (rule.name !== node.name) {
              return [];
            }
          } // rule and node match. Search the children of rule and node.


          if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
            // Expect non-associative operators to match exactly
            var childMatches = [];

            for (var i = 0; i < rule.args.length; i++) {
              var childMatch = _ruleMatch(rule.args[i], node.args[i]);

              if (childMatch.length === 0) {
                // Child did not match, so stop searching immediately
                return [];
              } // The child matched, so add the information returned from the child to our result


              childMatches.push(childMatch);
            }

            res = mergeChildMatches(childMatches);
          } else if (node.args.length >= 2 && rule.args.length === 2) {
            // node is flattened, rule is not
            // Associative operators/functions can be split in different ways so we check if the rule matches each
            // them and return their union.
            var splits = getSplits(node, rule.context);
            var splitMatches = [];

            for (var _i = 0; _i < splits.length; _i++) {
              var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here


              splitMatches = splitMatches.concat(matchSet);
            }

            return splitMatches;
          } else if (rule.args.length > 2) {
            throw Error('Unexpected non-binary associative function: ' + rule.toString());
          } else {
            // Incorrect number of arguments in rule and node, so no match
            return [];
          }
        } else if (rule instanceof SymbolNode) {
          // If the rule is a SymbolNode, then it carries a special meaning
          // according to the first character of the symbol node name.
          // c.* matches a ConstantNode
          // n.* matches any node
          if (rule.name.length === 0) {
            throw new Error('Symbol in rule has 0 length...!?');
          }

          if (SUPPORTED_CONSTANTS[rule.name]) {
            // built-in constant must match exactly
            if (rule.name !== node.name) {
              return [];
            }
          } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
            // rule matches _anything_, so assign this node to the rule.name placeholder
            // Assign node to the rule.name placeholder.
            // Our parent will check for matches among placeholders.
            res[0].placeholders[rule.name] = node;
          } else if (rule.name[0] === 'v') {
            // rule matches any variable thing (not a ConstantNode)
            if (!isConstantNode(node)) {
              res[0].placeholders[rule.name] = node;
            } else {
              // Mis-match: rule was expecting something other than a ConstantNode
              return [];
            }
          } else if (rule.name[0] === 'c') {
            // rule matches any ConstantNode
            if (node instanceof ConstantNode) {
              res[0].placeholders[rule.name] = node;
            } else {
              // Mis-match: rule was expecting a ConstantNode
              return [];
            }
          } else {
            throw new Error('Invalid symbol in rule: ' + rule.name);
          }
        } else if (rule instanceof ConstantNode) {
          // Literal constant must match exactly
          if (!equal(rule.value, node.value)) {
            return [];
          }
        } else {
          // Some other node was encountered which we aren't prepared for, so no match
          return [];
        } // It's a match!
        // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


        return res;
      }
      /**
       * Determines whether p and q (and all their children nodes) are identical.
       *
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
       * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
       * @return {Object} Information about the match, if it exists.
       */


      function _exactMatch(p, q) {
        if (p instanceof ConstantNode && q instanceof ConstantNode) {
          if (!equal(p.value, q.value)) {
            return false;
          }
        } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
          if (p.name !== q.name) {
            return false;
          }
        } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
          if (p instanceof OperatorNode) {
            if (p.op !== q.op || p.fn !== q.fn) {
              return false;
            }
          } else if (p instanceof FunctionNode) {
            if (p.name !== q.name) {
              return false;
            }
          }

          if (p.args.length !== q.args.length) {
            return false;
          }

          for (var i = 0; i < p.args.length; i++) {
            if (!_exactMatch(p.args[i], q.args[i])) {
              return false;
            }
          }
        } else {
          return false;
        }

        return true;
      }

      return simplify;
    });

    var name$3Z = 'derivative';
    var dependencies$3_ = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
    var createDerivative =
    /* #__PURE__ */
    factory(name$3Z, dependencies$3_, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          parse = _ref.parse,
          simplify = _ref.simplify,
          equal = _ref.equal,
          isZero = _ref.isZero,
          numeric = _ref.numeric,
          ConstantNode = _ref.ConstantNode,
          FunctionNode = _ref.FunctionNode,
          OperatorNode = _ref.OperatorNode,
          ParenthesisNode = _ref.ParenthesisNode,
          SymbolNode = _ref.SymbolNode;

      /**
       * Takes the derivative of an expression expressed in parser Nodes.
       * The derivative will be taken over the supplied variable in the
       * second parameter. If there are multiple variables in the expression,
       * it will return a partial derivative.
       *
       * This uses rules of differentiation which can be found here:
       *
       * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
       *
       * Syntax:
       *
       *     derivative(expr, variable)
       *     derivative(expr, variable, options)
       *
       * Examples:
       *
       *     math.derivative('x^2', 'x')                     // Node {2 * x}
       *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
       *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
       *     math.derivative('2*x', 'x').evaluate()          // number 2
       *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
       *     const f = math.parse('x^2')
       *     const x = math.parse('x')
       *     math.derivative(f, x)                           // Node {2 * x}
       *
       * See also:
       *
       *     simplify, parse, evaluate
       *
       * @param  {Node | string} expr           The expression to differentiate
       * @param  {SymbolNode | string} variable The variable over which to differentiate
       * @param  {{simplify: boolean}} [options]
       *                         There is one option available, `simplify`, which
       *                         is true by default. When false, output will not
       *                         be simplified.
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
       */
      var derivative = typed('derivative', {
        'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
          var constNodes = {};
          constTag(constNodes, expr, variable.name);

          var res = _derivative(expr, constNodes);

          return options.simplify ? simplify(res) : res;
        },
        'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
          return derivative(expr, variable, {
            simplify: true
          });
        },
        'string, SymbolNode': function stringSymbolNode(expr, variable) {
          return derivative(parse(expr), variable);
        },
        'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
          return derivative(parse(expr), variable, options);
        },
        'string, string': function stringString(expr, variable) {
          return derivative(parse(expr), parse(variable));
        },
        'string, string, Object': function stringStringObject(expr, variable, options) {
          return derivative(parse(expr), parse(variable), options);
        },
        'Node, string': function NodeString(expr, variable) {
          return derivative(expr, parse(variable));
        },
        'Node, string, Object': function NodeStringObject(expr, variable, options) {
          return derivative(expr, parse(variable), options);
        } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

        /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
        'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
          let res = expr
          for (let i = 0; i < order; i++) {
            let constNodes = {}
            constTag(constNodes, expr, variable.name)
            res = _derivative(res, constNodes)
          }
          return res
        }
        */

      });
      derivative._simplify = true;

      derivative.toTex = function (deriv) {
        return _derivTex.apply(null, deriv.args);
      }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
      // NOTE: the optional "order" parameter here is currently unused


      var _derivTex = typed('_derivTex', {
        'Node, SymbolNode': function NodeSymbolNode(expr, x) {
          if (isConstantNode(expr) && typeOf(expr.value) === 'string') {
            return _derivTex(parse(expr.value).toString(), x.toString(), 1);
          } else {
            return _derivTex(expr.toString(), x.toString(), 1);
          }
        },
        'Node, ConstantNode': function NodeConstantNode(expr, x) {
          if (typeOf(x.value) === 'string') {
            return _derivTex(expr, parse(x.value));
          } else {
            throw new Error("The second parameter to 'derivative' is a non-string constant");
          }
        },
        'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
          return _derivTex(expr.toString(), x.name, order.value);
        },
        'string, string, number': function stringStringNumber(expr, x, order) {
          var d;

          if (order === 1) {
            d = '{d\\over d' + x + '}';
          } else {
            d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
          }

          return d + "\\left[".concat(expr, "\\right]");
        }
      });
      /**
       * Does a depth-first search on the expression tree to identify what Nodes
       * are constants (e.g. 2 + 2), and stores the ones that are constants in
       * constNodes. Classification is done as follows:
       *
       *   1. ConstantNodes are constants.
       *   2. If there exists a SymbolNode, of which we are differentiating over,
       *      in the subtree it is not constant.
       *
       * @param  {Object} constNodes  Holds the nodes that are constant
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param  {string} varName     Variable that we are differentiating
       * @return {boolean}  if node is constant
       */
      // TODO: can we rewrite constTag into a pure function?


      var constTag = typed('constTag', {
        'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
          constNodes[node] = true;
          return true;
        },
        'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
          // Treat other variables like constants. For reasoning, see:
          //   https://en.wikipedia.org/wiki/Partial_derivative
          if (node.name !== varName) {
            constNodes[node] = true;
            return true;
          }

          return false;
        },
        'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
          return constTag(constNodes, node.content, varName);
        },
        'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
          if (node.params.indexOf(varName) === -1) {
            constNodes[node] = true;
            return true;
          }

          return constTag(constNodes, node.expr, varName);
        },
        'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
          if (node.args.length > 0) {
            var isConst = constTag(constNodes, node.args[0], varName);

            for (var i = 1; i < node.args.length; ++i) {
              isConst = constTag(constNodes, node.args[i], varName) && isConst;
            }

            if (isConst) {
              constNodes[node] = true;
              return true;
            }
          }

          return false;
        }
      });
      /**
       * Applies differentiation rules.
       *
       * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
       * @param  {Object} constNodes  Holds the nodes that are constant
       * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
       */

      var _derivative = typed('_derivative', {
        'ConstantNode, Object': function ConstantNodeObject(node) {
          return createConstantNode(0);
        },
        'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          return createConstantNode(1);
        },
        'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
          return new ParenthesisNode(_derivative(node.content, constNodes));
        },
        'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          return _derivative(node.expr, constNodes);
        },
        'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
          if (node.args.length !== 1) {
            funcArgsCheck(node);
          }

          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          var arg0 = node.args[0];
          var arg1;
          var div = false; // is output a fraction?

          var negative = false; // is output negative?

          var funcDerivative;

          switch (node.name) {
            case 'cbrt':
              // d/dx(cbrt(x)) = 1 / (3x^(2/3))
              div = true;
              funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
              break;

            case 'sqrt':
            case 'nthRoot':
              // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
              if (node.args.length === 1) {
                div = true;
                funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
              } else if (node.args.length === 2) {
                // Rearrange from nthRoot(x, a) -> x^(1/a)
                arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

                constNodes[arg1] = constNodes[node.args[1]];
                return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
              }

              break;

            case 'log10':
              arg1 = createConstantNode(10);

            /* fall through! */

            case 'log':
              if (!arg1 && node.args.length === 1) {
                // d/dx(log(x)) = 1 / x
                funcDerivative = arg0.clone();
                div = true;
              } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
                // d/dx(log(x, c)) = 1 / (x*ln(c))
                funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
                div = true;
              } else if (node.args.length === 2) {
                // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
                return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
              }

              break;

            case 'pow':
              constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

              return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

            case 'exp':
              // d/dx(e^x) = e^x
              funcDerivative = new FunctionNode('exp', [arg0.clone()]);
              break;

            case 'sin':
              // d/dx(sin(x)) = cos(x)
              funcDerivative = new FunctionNode('cos', [arg0.clone()]);
              break;

            case 'cos':
              // d/dx(cos(x)) = -sin(x)
              funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
              break;

            case 'tan':
              // d/dx(tan(x)) = sec(x)^2
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'sec':
              // d/dx(sec(x)) = sec(x)tan(x)
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
              break;

            case 'csc':
              // d/dx(csc(x)) = -csc(x)cot(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
              break;

            case 'cot':
              // d/dx(cot(x)) = -csc(x)^2
              negative = true;
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'asin':
              // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
              break;

            case 'acos':
              // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
              div = true;
              negative = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
              break;

            case 'atan':
              // d/dx(atan(x)) = 1 / (x^2 + 1)
              div = true;
              funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
              break;

            case 'asec':
              // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
              div = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acsc':
              // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acot':
              // d/dx(acot(x)) = -1 / (x^2 + 1)
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
              break;

            case 'sinh':
              // d/dx(sinh(x)) = cosh(x)
              funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
              break;

            case 'cosh':
              // d/dx(cosh(x)) = sinh(x)
              funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
              break;

            case 'tanh':
              // d/dx(tanh(x)) = sech(x)^2
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'sech':
              // d/dx(sech(x)) = -sech(x)tanh(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
              break;

            case 'csch':
              // d/dx(csch(x)) = -csch(x)coth(x)
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
              break;

            case 'coth':
              // d/dx(coth(x)) = -csch(x)^2
              negative = true;
              funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
              break;

            case 'asinh':
              // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
              break;

            case 'acosh':
              // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
              div = true;
              funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
              break;

            case 'atanh':
              // d/dx(atanh(x)) = 1 / (1 - x^2)
              div = true;
              funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
              break;

            case 'asech':
              // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
              break;

            case 'acsch':
              // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
              break;

            case 'acoth':
              // d/dx(acoth(x)) = -1 / (1 - x^2)
              div = true;
              negative = true;
              funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
              break;

            case 'abs':
              // d/dx(abs(x)) = abs(x)/x
              funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
              break;

            case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

            default:
              throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
          }

          var op, func;

          if (div) {
            op = '/';
            func = 'divide';
          } else {
            op = '*';
            func = 'multiply';
          }
          /* Apply chain rule to all functions:
             F(x)  = f(g(x))
             F'(x) = g'(x)*f'(g(x)) */


          var chainDerivative = _derivative(arg0, constNodes);

          if (negative) {
            chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
          }

          return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
        },
        'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
          if (constNodes[node] !== undefined) {
            return createConstantNode(0);
          }

          if (node.op === '+') {
            // d/dx(sum(f(x)) = sum(f'(x))
            return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
              return _derivative(arg, constNodes);
            }));
          }

          if (node.op === '-') {
            // d/dx(+/-f(x)) = +/-f'(x)
            if (node.isUnary()) {
              return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
            } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


            if (node.isBinary()) {
              return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
            }
          }

          if (node.op === '*') {
            // d/dx(c*f(x)) = c*f'(x)
            var constantTerms = node.args.filter(function (arg) {
              return constNodes[arg] !== undefined;
            });

            if (constantTerms.length > 0) {
              var nonConstantTerms = node.args.filter(function (arg) {
                return constNodes[arg] === undefined;
              });
              var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
              var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
              return new OperatorNode('*', 'multiply', newArgs);
            } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


            return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
              return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
                return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
              }));
            }));
          }

          if (node.op === '/' && node.isBinary()) {
            var arg0 = node.args[0];
            var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

            if (constNodes[arg1] !== undefined) {
              return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
            } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


            if (constNodes[arg0] !== undefined) {
              return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
            } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


            return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
          }

          if (node.op === '^' && node.isBinary()) {
            var _arg = node.args[0];
            var _arg2 = node.args[1];

            if (constNodes[_arg] !== undefined) {
              // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
              if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
                return createConstantNode(0);
              } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


              return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
            }

            if (constNodes[_arg2] !== undefined) {
              if (isConstantNode(_arg2)) {
                // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
                if (isZero(_arg2.value)) {
                  return createConstantNode(0);
                } // Ignore exponent; f(x)^1 = f(x)


                if (equal(_arg2.value, 1)) {
                  return _derivative(_arg, constNodes);
                }
              } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


              var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
              return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
            } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


            return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
          }

          throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
        }
      });
      /**
       * Ensures the number of arguments for a function are correct,
       * and will throw an error otherwise.
       *
       * @param {FunctionNode} node
       */


      function funcArgsCheck(node) {
        // TODO add min, max etc
        if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
          return;
        } // There should be an incorrect number of arguments if we reach here
        // Change all args to constants to avoid unidentified
        // symbol error when compiling function


        for (var i = 0; i < node.args.length; ++i) {
          node.args[i] = createConstantNode(0);
        }

        node.compile().evaluate();
        throw new Error('Expected TypeError, but none found');
      }
      /**
       * Helper function to create a constant node with a specific type
       * (number, BigNumber, Fraction)
       * @param {number} value
       * @param {string} [valueType]
       * @return {ConstantNode}
       */


      function createConstantNode(value, valueType) {
        return new ConstantNode(numeric(value, valueType || config.number));
      }

      return derivative;
    });

    var name$3_ = 'rationalize';
    var dependencies$3$ = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
    var createRationalize =
    /* #__PURE__ */
    factory(name$3_, dependencies$3$, function (_ref) {
      var config = _ref.config,
          typed = _ref.typed,
          equal = _ref.equal,
          isZero = _ref.isZero,
          add = _ref.add,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          divide = _ref.divide,
          pow = _ref.pow,
          parse = _ref.parse,
          simplify = _ref.simplify,
          fraction = _ref.fraction,
          bignumber = _ref.bignumber,
          mathWithTransform = _ref.mathWithTransform,
          ConstantNode = _ref.ConstantNode,
          OperatorNode = _ref.OperatorNode,
          FunctionNode = _ref.FunctionNode,
          SymbolNode = _ref.SymbolNode,
          ParenthesisNode = _ref.ParenthesisNode;
      var simplifyConstant = createSimplifyConstant({
        typed: typed,
        config: config,
        mathWithTransform: mathWithTransform,
        fraction: fraction,
        bignumber: bignumber,
        ConstantNode: ConstantNode,
        OperatorNode: OperatorNode,
        FunctionNode: FunctionNode,
        SymbolNode: SymbolNode
      });
      var simplifyCore = createSimplifyCore({
        equal: equal,
        isZero: isZero,
        add: add,
        subtract: subtract,
        multiply: multiply,
        divide: divide,
        pow: pow,
        ConstantNode: ConstantNode,
        OperatorNode: OperatorNode,
        FunctionNode: FunctionNode,
        ParenthesisNode: ParenthesisNode
      });
      /**
       * Transform a rationalizable expression in a rational fraction.
       * If rational fraction is one variable polynomial then converts
       * the numerator and denominator in canonical form, with decreasing
       * exponents, returning the coefficients of numerator.
       *
       * Syntax:
       *
       *     rationalize(expr)
       *     rationalize(expr, detailed)
       *     rationalize(expr, scope)
       *     rationalize(expr, scope, detailed)
       *
       * Examples:
       *
       *     math.rationalize('sin(x)+y')
       *                   //  Error: There is an unsolved function call
       *     math.rationalize('2x/y - y/(x+1)')
       *                   // (2*x^2-y^2+2*x)/(x*y+y)
       *     math.rationalize('(2x+1)^6')
       *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
       *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
       *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
       *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
       *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
       *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
       *
       *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
       *     math.rationalize('x+x+x+y',{})    // 3*x+y
       *
       *     const ret = math.rationalize('x+x+x+y',{},true)
       *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
       *     const ret = math.rationalize('-2+5x^2',{},true)
       *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
       *
       * See also:
       *
       *     simplify
       *
       * @param  {Node|string} expr    The expression to check if is a polynomial expression
       * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
       * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
       *
       * @return {Object | Node}    The rational polynomial of `expr` or na object
       *            {Object}
       *              {Expression Node} expression: node simplified expression
       *              {Expression Node} numerator: simplified numerator of expression
       *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
       *              {Array}           variables:  variable names
       *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
       *           {Expression Node}  node simplified expression
       *
       */

      var rationalize = typed(name$3_, {
        string: function string(expr) {
          return rationalize(parse(expr), {}, false);
        },
        'string, boolean': function stringBoolean(expr, detailed) {
          return rationalize(parse(expr), {}, detailed);
        },
        'string, Object': function stringObject(expr, scope) {
          return rationalize(parse(expr), scope, false);
        },
        'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
          return rationalize(parse(expr), scope, detailed);
        },
        Node: function Node(expr) {
          return rationalize(expr, {}, false);
        },
        'Node, boolean': function NodeBoolean(expr, detailed) {
          return rationalize(expr, {}, detailed);
        },
        'Node, Object': function NodeObject(expr, scope) {
          return rationalize(expr, scope, false);
        },
        'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
          var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

          var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

          var nVars = polyRet.variables.length;
          expr = polyRet.expression;

          if (nVars >= 1) {
            // If expression in not a constant
            expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

            var sBefore; // Previous expression

            var rules;
            var eDistrDiv = true;
            var redoInic = false;
            expr = simplify(expr, setRules.firstRules, {}, {
              exactFractions: false
            }); // Apply the initial rules, including succ div rules

            var s;

            while (true) {
              // Apply alternately  successive division rules and distr.div.rules
              rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
              expr = simplify(expr, rules); // until no more changes

              eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

              s = expr.toString();

              if (s === sBefore) {
                break; // No changes : end of the loop
              }

              redoInic = true;
              sBefore = s;
            }

            if (redoInic) {
              // Apply first rules again without succ div rules (if there are changes)
              expr = simplify(expr, setRules.firstRulesAgain, {}, {
                exactFractions: false
              });
            }

            expr = simplify(expr, setRules.finalRules, {}, {
              exactFractions: false
            }); // Apply final rules
          } // NVars >= 1


          var coefficients = [];
          var retRationalize = {};

          if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
            // Separate numerator from denominator
            if (nVars === 1) {
              expr.args[0] = polyToCanonical(expr.args[0], coefficients);
              expr.args[1] = polyToCanonical(expr.args[1]);
            }

            if (detailed) {
              retRationalize.numerator = expr.args[0];
              retRationalize.denominator = expr.args[1];
            }
          } else {
            if (nVars === 1) {
              expr = polyToCanonical(expr, coefficients);
            }

            if (detailed) {
              retRationalize.numerator = expr;
              retRationalize.denominator = null;
            }
          } // nVars


          if (!detailed) return expr;
          retRationalize.coefficients = coefficients;
          retRationalize.variables = polyRet.variables;
          retRationalize.expression = expr;
          return retRationalize;
        } // ^^^^^^^ end of rationalize ^^^^^^^^

      }); // end of typed rationalize

      /**
       *  Function to simplify an expression using an optional scope and
       *  return it if the expression is a polynomial expression, i.e.
       *  an expression with one or more variables and the operators
       *  +, -, *, and ^, where the exponent can only be a positive integer.
       *
       * Syntax:
       *
       *     polynomial(expr,scope,extended, rules)
       *
       * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
       * @param  {object} scope           Optional scope for expression simplification
       * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
       * @param  {array}  rules           Optional. Default is no rule.
       *
       *
       * @return {Object}
       *            {Object} node:   node simplified expression
       *            {Array}  variables:  variable names
       */

      function polynomial(expr, scope, extended, rules) {
        var variables = [];
        var node = simplify(expr, rules, scope, {
          exactFractions: false
        }); // Resolves any variables and functions with all defined parameters

        extended = !!extended;
        var oper = '+-*' + (extended ? '/' : '');
        recPoly(node);
        var retFunc = {};
        retFunc.expression = node;
        retFunc.variables = variables;
        return retFunc; // -------------------------------------------------------------------------------------------------------

        /**
         *  Function to simplify an expression using an optional scope and
         *  return it if the expression is a polynomial expression, i.e.
         *  an expression with one or more variables and the operators
         *  +, -, *, and ^, where the exponent can only be a positive integer.
         *
         * Syntax:
         *
         *     recPoly(node)
         *
         *
         * @param  {Node} node               The current sub tree expression in recursion
         *
         * @return                           nothing, throw an exception if error
         */

        function recPoly(node) {
          var tp = node.type; // node type

          if (tp === 'FunctionNode') {
            // No function call in polynomial expression
            throw new Error('There is an unsolved function call');
          } else if (tp === 'OperatorNode') {
            if (node.op === '^') {
              if (node.args[1].fn === 'unaryMinus') {
                node = node.args[0];
              }

              if (node.args[1].type !== 'ConstantNode' || !isInteger$1(parseFloat(node.args[1].value))) {
                throw new Error('There is a non-integer exponent');
              } else {
                recPoly(node.args[0]);
              }
            } else {
              if (oper.indexOf(node.op) === -1) {
                throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
              }

              for (var i = 0; i < node.args.length; i++) {
                recPoly(node.args[i]);
              }
            } // type of operator

          } else if (tp === 'SymbolNode') {
            var _name = node.name; // variable name

            var pos = variables.indexOf(_name);

            if (pos === -1) {
              // new variable in expression
              variables.push(_name);
            }
          } else if (tp === 'ParenthesisNode') {
            recPoly(node.content);
          } else if (tp !== 'ConstantNode') {
            throw new Error('type ' + tp + ' is not allowed in polynomial expression');
          }
        } // end of recPoly

      } // end of polynomial
      // ---------------------------------------------------------------------------------------

      /**
       * Return a rule set to rationalize an polynomial expression in rationalize
       *
       * Syntax:
       *
       *     rulesRationalize()
       *
       * @return {array}        rule set to rationalize an polynomial expression
       */


      function rulesRationalize() {
        var oldRules = [simplifyCore, // sCore
        {
          l: 'n+n',
          r: '2*n'
        }, {
          l: 'n+-n',
          r: '0'
        }, simplifyConstant, // sConstant
        {
          l: 'n*(n1^-1)',
          r: 'n/n1'
        }, {
          l: 'n*n1^-n2',
          r: 'n/n1^n2'
        }, {
          l: 'n1^-1',
          r: '1/n1'
        }, {
          l: 'n*(n1/n2)',
          r: '(n*n1)/n2'
        }, {
          l: '1*n',
          r: 'n'
        }];
        var rulesFirst = [{
          l: '(-n1)/(-n2)',
          r: 'n1/n2'
        }, // Unary division
        {
          l: '(-n1)*(-n2)',
          r: 'n1*n2'
        }, // Unary multiplication
        {
          l: 'n1--n2',
          r: 'n1+n2'
        }, // '--' elimination
        {
          l: 'n1-n2',
          r: 'n1+(-n2)'
        }, // Subtraction turn into add with un�ry minus
        {
          l: '(n1+n2)*n3',
          r: '(n1*n3 + n2*n3)'
        }, // Distributive 1
        {
          l: 'n1*(n2+n3)',
          r: '(n1*n2+n1*n3)'
        }, // Distributive 2
        {
          l: 'c1*n + c2*n',
          r: '(c1+c2)*n'
        }, // Joining constants
        {
          l: 'c1*n + n',
          r: '(c1+1)*n'
        }, // Joining constants
        {
          l: 'c1*n - c2*n',
          r: '(c1-c2)*n'
        }, // Joining constants
        {
          l: 'c1*n - n',
          r: '(c1-1)*n'
        }, // Joining constants
        {
          l: 'v/c',
          r: '(1/c)*v'
        }, // variable/constant (new!)
        {
          l: 'v/-c',
          r: '-(1/c)*v'
        }, // variable/constant (new!)
        {
          l: '-v*-c',
          r: 'c*v'
        }, // Inversion constant and variable 1
        {
          l: '-v*c',
          r: '-c*v'
        }, // Inversion constant and variable 2
        {
          l: 'v*-c',
          r: '-c*v'
        }, // Inversion constant and variable 3
        {
          l: 'v*c',
          r: 'c*v'
        }, // Inversion constant and variable 4
        {
          l: '-(-n1*n2)',
          r: '(n1*n2)'
        }, // Unary propagation
        {
          l: '-(n1*n2)',
          r: '(-n1*n2)'
        }, // Unary propagation
        {
          l: '-(-n1+n2)',
          r: '(n1-n2)'
        }, // Unary propagation
        {
          l: '-(n1+n2)',
          r: '(-n1-n2)'
        }, // Unary propagation
        {
          l: '(n1^n2)^n3',
          r: '(n1^(n2*n3))'
        }, // Power to Power
        {
          l: '-(-n1/n2)',
          r: '(n1/n2)'
        }, // Division and Unary
        {
          l: '-(n1/n2)',
          r: '(-n1/n2)'
        }]; // Divisao and Unary

        var rulesDistrDiv = [{
          l: '(n1/n2 + n3/n4)',
          r: '((n1*n4 + n3*n2)/(n2*n4))'
        }, // Sum of fractions
        {
          l: '(n1/n2 + n3)',
          r: '((n1 + n3*n2)/n2)'
        }, // Sum fraction with number 1
        {
          l: '(n1 + n2/n3)',
          r: '((n1*n3 + n2)/n3)'
        }]; // Sum fraction with number 1

        var rulesSucDiv = [{
          l: '(n1/(n2/n3))',
          r: '((n1*n3)/n2)'
        }, // Division simplification
        {
          l: '(n1/n2/n3)',
          r: '(n1/(n2*n3))'
        }];
        var setRules = {}; // rules set in 4 steps.
        // All rules => infinite loop
        // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

        setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

        setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

        setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

        setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
        // Division simplification
        // Second rule set.
        // There is no aggregate expression with parentesis, but the only variable can be scattered.

        setRules.finalRules = [simplifyCore, // simplify.rules[0]
        {
          l: 'n*-n',
          r: '-n^2'
        }, // Joining multiply with power 1
        {
          l: 'n*n',
          r: 'n^2'
        }, // Joining multiply with power 2
        simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
        {
          l: 'n*-n^n1',
          r: '-n^(n1+1)'
        }, // Joining multiply with power 3
        {
          l: 'n*n^n1',
          r: 'n^(n1+1)'
        }, // Joining multiply with power 4
        {
          l: 'n^n1*-n^n2',
          r: '-n^(n1+n2)'
        }, // Joining multiply with power 5
        {
          l: 'n^n1*n^n2',
          r: 'n^(n1+n2)'
        }, // Joining multiply with power 6
        {
          l: 'n^n1*-n',
          r: '-n^(n1+1)'
        }, // Joining multiply with power 7
        {
          l: 'n^n1*n',
          r: 'n^(n1+1)'
        }, // Joining multiply with power 8
        {
          l: 'n^n1/-n',
          r: '-n^(n1-1)'
        }, // Joining multiply with power 8
        {
          l: 'n^n1/n',
          r: 'n^(n1-1)'
        }, // Joining division with power 1
        {
          l: 'n/-n^n1',
          r: '-n^(1-n1)'
        }, // Joining division with power 2
        {
          l: 'n/n^n1',
          r: 'n^(1-n1)'
        }, // Joining division with power 3
        {
          l: 'n^n1/-n^n2',
          r: 'n^(n1-n2)'
        }, // Joining division with power 4
        {
          l: 'n^n1/n^n2',
          r: 'n^(n1-n2)'
        }, // Joining division with power 5
        {
          l: 'n1+(-n2*n3)',
          r: 'n1-n2*n3'
        }, // Solving useless parenthesis 1
        {
          l: 'v*(-c)',
          r: '-c*v'
        }, // Solving useless unary 2
        {
          l: 'n1+-n2',
          r: 'n1-n2'
        }, // Solving +- together (new!)
        {
          l: 'v*c',
          r: 'c*v'
        }, // inversion constant with variable
        {
          l: '(n1^n2)^n3',
          r: '(n1^(n2*n3))'
        } // Power to Power
        ];
        return setRules;
      } // End rulesRationalize
      // ---------------------------------------------------------------------------------------

      /**
       *  Expand recursively a tree node for handling with expressions with exponents
       *  (it's not for constants, symbols or functions with exponents)
       *  PS: The other parameters are internal for recursion
       *
       * Syntax:
       *
       *     expandPower(node)
       *
       * @param  {Node} node         Current expression node
       * @param  {node} parent       Parent current node inside the recursion
       * @param  (int}               Parent number of chid inside the rercursion
       *
       * @return {node}        node expression with all powers expanded.
       */


      function expandPower(node, parent, indParent) {
        var tp = node.type;
        var internal = arguments.length > 1; // TRUE in internal calls

        if (tp === 'OperatorNode' && node.isBinary()) {
          var does = false;
          var val;

          if (node.op === '^') {
            // First operator: Parenthesis or UnaryMinus
            if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
              // Second operator: Constant
              val = parseFloat(node.args[1].value);
              does = val >= 2 && isInteger$1(val);
            }
          }

          if (does) {
            // Exponent >= 2
            // Before:
            //            operator A --> Subtree
            // parent pow
            //            constant
            //
            if (val > 2) {
              // Exponent > 2,
              // AFTER:  (exponent > 2)
              //             operator A --> Subtree
              // parent  *
              //                 deep clone (operator A --> Subtree
              //             pow
              //                 constant - 1
              //
              var nEsqTopo = node.args[0];
              var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
              node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
            } else {
              // Expo = 2 - no power
              // AFTER:  (exponent =  2)
              //             operator A --> Subtree
              // parent   oper
              //            deep clone (operator A --> Subtree)
              //
              node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
            }

            if (internal) {
              // Change parent references in internal recursive calls
              if (indParent === 'content') {
                parent.content = node;
              } else {
                parent.args[indParent] = node;
              }
            }
          } // does

        } // binary OperatorNode


        if (tp === 'ParenthesisNode') {
          // Recursion
          expandPower(node.content, node, 'content');
        } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
          for (var i = 0; i < node.args.length; i++) {
            expandPower(node.args[i], node, i);
          }
        }

        if (!internal) {
          // return the root node
          return node;
        }
      } // End expandPower
      // ---------------------------------------------------------------------------------------

      /**
       * Auxilary function for rationalize
       * Convert near canonical polynomial in one variable in a canonical polynomial
       * with one term for each exponent in decreasing order
       *
       * Syntax:
       *
       *     polyToCanonical(node [, coefficients])
       *
       * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
       *
       *        The string or tree expression needs to be at below syntax, with free spaces:
       *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
       *       Where 'var' is one variable with any valid name
       *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
       *             'expo' are integers greater than 0. It can be omitted if equal than 1.
       *
       * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
       *
       *
       * @return {node}        new node tree with one variable polynomial or string error.
       */


      function polyToCanonical(node, coefficients) {
        if (coefficients === undefined) {
          coefficients = [];
        } // coefficients.


        coefficients[0] = 0; // index is the exponent

        var o = {};
        o.cte = 1;
        o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
        //       It is used to deduce the exponent: 1 for *, 0 for "".

        o.fire = '';
        var maxExpo = 0; // maximum exponent

        var varname = ''; // variable name

        recurPol(node, null, o);
        maxExpo = coefficients.length - 1;
        var first = true;
        var no;

        for (var i = maxExpo; i >= 0; i--) {
          if (coefficients[i] === 0) continue;
          var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
          var op = coefficients[i] < 0 ? '-' : '+';

          if (i > 0) {
            // Is not a constant without variable
            var n2 = new SymbolNode(varname);

            if (i > 1) {
              var n3 = new ConstantNode(i);
              n2 = new OperatorNode('^', 'pow', [n2, n3]);
            }

            if (coefficients[i] === -1 && first) {
              n1 = new OperatorNode('-', 'unaryMinus', [n2]);
            } else if (Math.abs(coefficients[i]) === 1) {
              n1 = n2;
            } else {
              n1 = new OperatorNode('*', 'multiply', [n1, n2]);
            }
          }

          if (first) {
            no = n1;
          } else if (op === '+') {
            no = new OperatorNode('+', 'add', [no, n1]);
          } else {
            no = new OperatorNode('-', 'subtract', [no, n1]);
          }

          first = false;
        } // for


        if (first) {
          return new ConstantNode(0);
        } else {
          return no;
        }
        /**
         * Recursive auxilary function inside polyToCanonical for
         * converting expression in canonical form
         *
         * Syntax:
         *
         *     recurPol(node, noPai, obj)
         *
         * @param  {Node} node        The current subpolynomial expression
         * @param  {Node | Null}  noPai   The current parent node
         * @param  {object}    obj        Object with many internal flags
         *
         * @return {}                    No return. If error, throws an exception
         */


        function recurPol(node, noPai, o) {
          var tp = node.type;

          if (tp === 'FunctionNode') {
            // ***** FunctionName *****
            // No function call in polynomial expression
            throw new Error('There is an unsolved function call');
          } else if (tp === 'OperatorNode') {
            // ***** OperatorName *****
            if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

            if (noPai !== null) {
              // -(unary),^  : children of *,+,-
              if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
                throw new Error('Invalid ' + node.op + ' placing');
              } // -,+,* : children of +,-


              if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
                throw new Error('Invalid ' + node.op + ' placing');
              } // -,+ : first child


              if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
                throw new Error('Invalid ' + node.op + ' placing');
              }
            } // Has parent
            // Firers: ^,*       Old:   ^,&,-(unary): firers


            if (node.op === '^' || node.op === '*') {
              o.fire = node.op;
            }

            for (var _i = 0; _i < node.args.length; _i++) {
              // +,-: reset fire
              if (node.fn === 'unaryMinus') o.oper = '-';

              if (node.op === '+' || node.fn === 'subtract') {
                o.fire = '';
                o.cte = 1; // default if there is no constant

                o.oper = _i === 0 ? '+' : node.op;
              }

              o.noFil = _i; // number of son

              recurPol(node.args[_i], node, o);
            } // for in children

          } else if (tp === 'SymbolNode') {
            // ***** SymbolName *****
            if (node.name !== varname && varname !== '') {
              throw new Error('There is more than one variable');
            }

            varname = node.name;

            if (noPai === null) {
              coefficients[1] = 1;
              return;
            } // ^: Symbol is First child


            if (noPai.op === '^' && o.noFil !== 0) {
              throw new Error('In power the variable should be the first parameter');
            } // *: Symbol is Second child


            if (noPai.op === '*' && o.noFil !== 1) {
              throw new Error('In multiply the variable should be the second parameter');
            } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


            if (o.fire === '' || o.fire === '*') {
              if (maxExpo < 1) coefficients[1] = 0;
              coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
              maxExpo = Math.max(1, maxExpo);
            }
          } else if (tp === 'ConstantNode') {
            var valor = parseFloat(node.value);

            if (noPai === null) {
              coefficients[0] = valor;
              return;
            }

            if (noPai.op === '^') {
              // cte: second  child of power
              if (o.noFil !== 1) throw new Error('Constant cannot be powered');

              if (!isInteger$1(valor) || valor <= 0) {
                throw new Error('Non-integer exponent is not allowed');
              }

              for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
                coefficients[_i2] = 0;
              }

              if (valor > maxExpo) coefficients[valor] = 0;
              coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
              maxExpo = Math.max(valor, maxExpo);
              return;
            }

            o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

            if (o.fire === '') {
              coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
            }
          } else {
            throw new Error('Type ' + tp + ' is not allowed');
          }
        } // End of recurPol

      } // End of polyToCanonical


      return rationalize;
    });

    var name$3$ = 'reviver';
    var dependencies$40 = ['classes'];
    var createReviver =
    /* #__PURE__ */
    factory(name$3$, dependencies$40, function (_ref) {
      var classes = _ref.classes;

      /**
       * Instantiate mathjs data types from their JSON representation
       * @param {string} key
       * @param {*} value
       * @returns {*} Returns the revived object
       */
      return function reviver(key, value) {
        var constructor = classes[value && value.mathjs];

        if (constructor && typeof constructor.fromJSON === 'function') {
          return constructor.fromJSON(value);
        }

        return value;
      };
    });

    var version = '6.6.0'; // Note: This file is automatically generated when building math.js.
    // Changes made in this file will be overwritten.

    var createTrue =
    /* #__PURE__ */
    factory('true', [], function () {
      return true;
    });
    var createFalse =
    /* #__PURE__ */
    factory('false', [], function () {
      return false;
    });
    var createNull =
    /* #__PURE__ */
    factory('null', [], function () {
      return null;
    });
    var createInfinity =
    /* #__PURE__ */
    recreateFactory('Infinity', ['config', '?BigNumber'], function (_ref) {
      var config = _ref.config,
          BigNumber = _ref.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
    });
    var createNaN =
    /* #__PURE__ */
    recreateFactory('NaN', ['config', '?BigNumber'], function (_ref2) {
      var config = _ref2.config,
          BigNumber = _ref2.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
    });
    var createPi =
    /* #__PURE__ */
    recreateFactory('pi', ['config', '?BigNumber'], function (_ref3) {
      var config = _ref3.config,
          BigNumber = _ref3.BigNumber;
      return config.number === 'BigNumber' ? createBigNumberPi(BigNumber) : pi;
    });
    var createTau =
    /* #__PURE__ */
    recreateFactory('tau', ['config', '?BigNumber'], function (_ref4) {
      var config = _ref4.config,
          BigNumber = _ref4.BigNumber;
      return config.number === 'BigNumber' ? createBigNumberTau(BigNumber) : tau;
    });
    var createE =
    /* #__PURE__ */
    recreateFactory('e', ['config', '?BigNumber'], function (_ref5) {
      var config = _ref5.config,
          BigNumber = _ref5.BigNumber;
      return config.number === 'BigNumber' ? createBigNumberE(BigNumber) : e;
    }); // golden ratio, (1+sqrt(5))/2

    var createPhi =
    /* #__PURE__ */
    recreateFactory('phi', ['config', '?BigNumber'], function (_ref6) {
      var config = _ref6.config,
          BigNumber = _ref6.BigNumber;
      return config.number === 'BigNumber' ? createBigNumberPhi(BigNumber) : phi;
    });
    var createLN2 =
    /* #__PURE__ */
    recreateFactory('LN2', ['config', '?BigNumber'], function (_ref7) {
      var config = _ref7.config,
          BigNumber = _ref7.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
    });
    var createLN10 =
    /* #__PURE__ */
    recreateFactory('LN10', ['config', '?BigNumber'], function (_ref8) {
      var config = _ref8.config,
          BigNumber = _ref8.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
    });
    var createLOG2E =
    /* #__PURE__ */
    recreateFactory('LOG2E', ['config', '?BigNumber'], function (_ref9) {
      var config = _ref9.config,
          BigNumber = _ref9.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
    });
    var createLOG10E =
    /* #__PURE__ */
    recreateFactory('LOG10E', ['config', '?BigNumber'], function (_ref10) {
      var config = _ref10.config,
          BigNumber = _ref10.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
    });
    var createSQRT1_2 =
    /* #__PURE__ */
    recreateFactory( // eslint-disable-line camelcase
    'SQRT1_2', ['config', '?BigNumber'], function (_ref11) {
      var config = _ref11.config,
          BigNumber = _ref11.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
    });
    var createSQRT2 =
    /* #__PURE__ */
    recreateFactory('SQRT2', ['config', '?BigNumber'], function (_ref12) {
      var config = _ref12.config,
          BigNumber = _ref12.BigNumber;
      return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
    });
    var createI =
    /* #__PURE__ */
    recreateFactory('i', ['Complex'], function (_ref13) {
      var Complex = _ref13.Complex;
      return Complex.I;
    }); // for backward compatibility with v5

    var createUppercasePi =
    /* #__PURE__ */
    factory('PI', ['pi'], function (_ref14) {
      var pi = _ref14.pi;
      return pi;
    });
    var createUppercaseE =
    /* #__PURE__ */
    factory('E', ['e'], function (_ref15) {
      var e = _ref15.e;
      return e;
    });
    var createVersion =
    /* #__PURE__ */
    factory('version', [], function () {
      return version;
    }); // helper function to create a factory with a flag recreateOnConfigChange
    // idea: allow passing optional properties to be attached to the factory function as 4th argument?

    function recreateFactory(name, dependencies, create) {
      return factory(name, dependencies, create, {
        recreateOnConfigChange: true
      });
    }

    // Universal constants

    var createSpeedOfLight =
    /* #__PURE__ */
    unitFactory('speedOfLight', '299792458', 'm s^-1');
    var createGravitationConstant =
    /* #__PURE__ */
    unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
    var createPlanckConstant =
    /* #__PURE__ */
    unitFactory('planckConstant', '6.62607015e-34', 'J s');
    var createReducedPlanckConstant =
    /* #__PURE__ */
    unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

    var createMagneticConstant =
    /* #__PURE__ */
    unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
    var createElectricConstant =
    /* #__PURE__ */
    unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
    var createVacuumImpedance =
    /* #__PURE__ */
    unitFactory('vacuumImpedance', '376.730313667', 'ohm');
    var createCoulomb =
    /* #__PURE__ */
    unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
    var createElementaryCharge =
    /* #__PURE__ */
    unitFactory('elementaryCharge', '1.602176634e-19', 'C');
    var createBohrMagneton =
    /* #__PURE__ */
    unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
    var createConductanceQuantum =
    /* #__PURE__ */
    unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
    var createInverseConductanceQuantum =
    /* #__PURE__ */
    unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
    var createMagneticFluxQuantum =
    /* #__PURE__ */
    unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
    var createNuclearMagneton =
    /* #__PURE__ */
    unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
    var createKlitzing =
    /* #__PURE__ */
    unitFactory('klitzing', '25812.807459304513', 'ohm');
    // Atomic and nuclear constants

    var createBohrRadius =
    /* #__PURE__ */
    unitFactory('bohrRadius', '5.29177210903e-11', 'm');
    var createClassicalElectronRadius =
    /* #__PURE__ */
    unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
    var createElectronMass =
    /* #__PURE__ */
    unitFactory('electronMass', '9.1093837015e-31', 'kg');
    var createFermiCoupling =
    /* #__PURE__ */
    unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
    var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
    var createHartreeEnergy =
    /* #__PURE__ */
    unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
    var createProtonMass =
    /* #__PURE__ */
    unitFactory('protonMass', '1.67262192369e-27', 'kg');
    var createDeuteronMass =
    /* #__PURE__ */
    unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
    var createNeutronMass =
    /* #__PURE__ */
    unitFactory('neutronMass', '1.6749271613e-27', 'kg');
    var createQuantumOfCirculation =
    /* #__PURE__ */
    unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
    var createRydberg =
    /* #__PURE__ */
    unitFactory('rydberg', '10973731.568160', 'm^-1');
    var createThomsonCrossSection =
    /* #__PURE__ */
    unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
    var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
    var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

    var createAtomicMass =
    /* #__PURE__ */
    unitFactory('atomicMass', '1.66053906660e-27', 'kg');
    var createAvogadro =
    /* #__PURE__ */
    unitFactory('avogadro', '6.02214076e23', 'mol^-1');
    var createBoltzmann =
    /* #__PURE__ */
    unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
    var createFaraday =
    /* #__PURE__ */
    unitFactory('faraday', '96485.33212331001', 'C mol^-1');
    var createFirstRadiation =
    /* #__PURE__ */
    unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance

    var createLoschmidt =
    /* #__PURE__ */
    unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
    var createGasConstant =
    /* #__PURE__ */
    unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
    var createMolarPlanckConstant =
    /* #__PURE__ */
    unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
    var createMolarVolume =
    /* #__PURE__ */
    unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
    var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
    var createSecondRadiation =
    /* #__PURE__ */
    unitFactory('secondRadiation', '0.014387768775039337', 'm K');
    var createStefanBoltzmann =
    /* #__PURE__ */
    unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
    var createWienDisplacement =
    /* #__PURE__ */
    unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

    var createMolarMass =
    /* #__PURE__ */
    unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
    var createMolarMassC12 =
    /* #__PURE__ */
    unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
    var createGravity =
    /* #__PURE__ */
    unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
    // Natural units

    var createPlanckLength =
    /* #__PURE__ */
    unitFactory('planckLength', '1.616255e-35', 'm');
    var createPlanckMass =
    /* #__PURE__ */
    unitFactory('planckMass', '2.176435e-8', 'kg');
    var createPlanckTime =
    /* #__PURE__ */
    unitFactory('planckTime', '5.391245e-44', 's');
    var createPlanckCharge =
    /* #__PURE__ */
    unitFactory('planckCharge', '1.87554603778e-18', 'C');
    var createPlanckTemperature =
    /* #__PURE__ */
    unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
    // a Unit with either a number value or a BigNumber value depending on the configuration

    function unitFactory(name, valueStr, unitStr) {
      var dependencies = ['config', 'Unit', 'BigNumber'];
      return factory(name, dependencies, function (_ref) {
        var config = _ref.config,
            Unit = _ref.Unit,
            BigNumber = _ref.BigNumber;
        // Note that we can parse into number or BigNumber.
        // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
        // Therefore we dont use Unit.parse()
        var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
        var unit = new Unit(value, unitStr);
        unit.fixPrefix = true;
        return unit;
      });
    } // helper function to create a factory function which creates a numeric constant,
    // either a number or BigNumber depending on the configuration


    function numberFactory(name, value) {
      var dependencies = ['config', 'BigNumber'];
      return factory(name, dependencies, function (_ref2) {
        var config = _ref2.config,
            BigNumber = _ref2.BigNumber;
        return config.number === 'BigNumber' ? new BigNumber(value) : value;
      });
    }

    var name$40 = 'apply';
    var dependencies$41 = ['typed', 'isInteger'];
    /**
     * Attach a transform function to math.apply
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `dim` parameter of function apply
     * from one-based to zero based
     */

    var createApplyTransform =
    /* #__PURE__ */
    factory(name$40, dependencies$41, function (_ref) {
      var typed = _ref.typed,
          isInteger = _ref.isInteger;
      var apply = createApply({
        typed: typed,
        isInteger: isInteger
      }); // @see: comment of concat itself

      return typed('apply', {
        '...any': function any(args) {
          // change dim from one-based to zero-based
          var dim = args[1];

          if (isNumber$f(dim)) {
            args[1] = dim - 1;
          } else if (isBigNumber(dim)) {
            args[1] = dim.minus(1);
          }

          try {
            return apply.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$41 = 'column';
    var dependencies$42 = ['typed', 'Index', 'matrix', 'range'];
    /**
     * Attach a transform function to matrix.column
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `index` parameter of function column
     * from zero-based to one-based
     */

    var createColumnTransform =
    /* #__PURE__ */
    factory(name$41, dependencies$42, function (_ref) {
      var typed = _ref.typed,
          Index = _ref.Index,
          matrix = _ref.matrix,
          range = _ref.range;
      var column = createColumn({
        typed: typed,
        Index: Index,
        matrix: matrix,
        range: range
      }); // @see: comment of column itself

      return typed('column', {
        '...any': function any(args) {
          // change last argument from zero-based to one-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber$f(last)) {
            args[lastIndex] = last - 1;
          }

          try {
            return column.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * Compile an inline expression like "x > 0"
     * @param {Node} expression
     * @param {Object} math
     * @param {Object} scope
     * @return {function} Returns a function with one argument which fills in the
     *                    undefined variable (like "x") and evaluates the expression
     */

    function compileInlineExpression(expression, math, scope) {
      // find an undefined symbol
      var symbol = expression.filter(function (node) {
        return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);
      })[0];

      if (!symbol) {
        throw new Error('No undefined variable found in inline expression "' + expression + '"');
      } // create a test function for this equation


      var name = symbol.name; // variable name

      var subScope = Object.create(scope);
      var eq = expression.compile();
      return function inlineExpression(x) {
        subScope[name] = x;
        return eq.evaluate(subScope);
      };
    }

    var name$42 = 'filter';
    var dependencies$43 = ['typed'];
    var createFilterTransform =
    /* #__PURE__ */
    factory(name$42, dependencies$43, function (_ref) {
      var typed = _ref.typed;

      /**
       * Attach a transform function to math.filter
       * Adds a property transform containing the transform function.
       *
       * This transform adds support for equations as test function for math.filter,
       * so you can do something like 'filter([3, -2, 5], x > 0)'.
       */
      function filterTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like filter([3, -2, 5], x > 0)
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return filter(x, callback);
      }

      filterTransform.rawArgs = true; // one based version of function filter

      var filter = typed('filter', {
        'Array, function': _filter,
        'Matrix, function': function MatrixFunction(x, test) {
          return x.create(_filter(x.toArray(), test));
        },
        'Array, RegExp': filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
          return x.create(filterRegExp(x.toArray(), test));
        }
      });
      return filterTransform;
    }, {
      isTransformFunction: true
    });
    /**
     * Filter values in a callback given a callback function
     *
     * !!! Passes a one-based index !!!
     *
     * @param {Array} x
     * @param {Function} callback
     * @return {Array} Returns the filtered array
     * @private
     */

    function _filter(x, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);
      return filter$3(x, function (value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) {
          return callback(value);
        } else if (args === 2) {
          return callback(value, [index + 1]);
        } else {
          // 3 or -1
          return callback(value, [index + 1], array);
        }
      });
    }

    var name$43 = 'forEach';
    var dependencies$44 = ['typed'];
    var createForEachTransform =
    /* #__PURE__ */
    factory(name$43, dependencies$44, function (_ref) {
      var typed = _ref.typed;

      /**
       * Attach a transform function to math.forEach
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      function forEachTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like forEach([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return _forEach(x, callback);
      }

      forEachTransform.rawArgs = true; // one-based version of forEach

      var _forEach = typed('forEach', {
        'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
          // figure out what number of arguments the callback function expects
          var args = maxArgumentCount(callback);

          var recurse = function recurse(value, index) {
            if (Array.isArray(value)) {
              forEach$3(value, function (child, i) {
                // we create a copy of the index array and append the new index value
                recurse(child, index.concat(i + 1)); // one based index, hence i+1
              });
            } else {
              // invoke the callback function with the right number of arguments
              if (args === 1) {
                callback(value);
              } else if (args === 2) {
                callback(value, index);
              } else {
                // 3 or -1
                callback(value, index, array);
              }
            }
          };

          recurse(array.valueOf(), []); // pass Array
        }
      });

      return forEachTransform;
    }, {
      isTransformFunction: true
    });

    var name$44 = 'index';
    var dependencies$45 = ['Index'];
    var createIndexTransform =
    /* #__PURE__ */
    factory(name$44, dependencies$45, function (_ref) {
      var Index = _ref.Index;

      /**
       * Attach a transform function to math.index
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      return function indexTransform() {
        var args = [];

        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

          if (isRange(arg)) {
            arg.start--;
            arg.end -= arg.step > 0 ? 0 : 2;
          } else if (arg && arg.isSet === true) {
            arg = arg.map(function (v) {
              return v - 1;
            });
          } else if (isArray$i(arg) || isMatrix(arg)) {
            arg = arg.map(function (v) {
              return v - 1;
            });
          } else if (isNumber$f(arg)) {
            arg--;
          } else if (isBigNumber(arg)) {
            arg = arg.toNumber() - 1;
          } else if (typeof arg === 'string') ; else {
            throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
          }

          args[i] = arg;
        }

        var res = new Index();
        Index.apply(res, args);
        return res;
      };
    }, {
      isTransformFunction: true
    });

    var name$45 = 'map';
    var dependencies$46 = ['typed'];
    var createMapTransform =
    /* #__PURE__ */
    factory(name$45, dependencies$46, function (_ref) {
      var typed = _ref.typed;

      /**
       * Attach a transform function to math.map
       * Adds a property transform containing the transform function.
       *
       * This transform creates a one-based index instead of a zero-based index
       */
      function mapTransform(args, math, scope) {
        var x, callback;

        if (args[0]) {
          x = args[0].compile().evaluate(scope);
        }

        if (args[1]) {
          if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
            // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
          } else {
            // an expression like filter([3, -2, 5], x > 0)
            callback = compileInlineExpression(args[1], math, scope);
          }
        }

        return map(x, callback);
      }

      mapTransform.rawArgs = true; // one-based version of map function

      var map = typed('map', {
        'Array, function': function ArrayFunction(x, callback) {
          return _map$1(x, callback, x);
        },
        'Matrix, function': function MatrixFunction(x, callback) {
          return x.create(_map$1(x.valueOf(), callback, x));
        }
      });
      return mapTransform;
    }, {
      isTransformFunction: true
    });
    /**
     * Map for a multi dimensional array. One-based indexes
     * @param {Array} array
     * @param {function} callback
     * @param {Array} orig
     * @return {Array}
     * @private
     */

    function _map$1(array, callback, orig) {
      // figure out what number of arguments the callback function expects
      var argsCount = maxArgumentCount(callback);

      function recurse(value, index) {
        if (Array.isArray(value)) {
          return map$4(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
          });
        } else {
          // invoke the (typed) callback function with the right number of arguments
          if (argsCount === 1) {
            return callback(value);
          } else if (argsCount === 2) {
            return callback(value, index);
          } else {
            // 3 or -1
            return callback(value, index, orig);
          }
        }
      }

      return recurse(array, []);
    }

    var name$46 = 'max';
    var dependencies$47 = ['typed', 'larger'];
    var createMaxTransform =
    /* #__PURE__ */
    factory(name$46, dependencies$47, function (_ref) {
      var typed = _ref.typed,
          larger = _ref.larger;
      var max = createMax({
        typed: typed,
        larger: larger
      });
      /**
       * Attach a transform function to math.max
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function max
       * from one-based to zero based
       */

      return typed('max', {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length === 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return max.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$47 = 'mean';
    var dependencies$48 = ['typed', 'add', 'divide'];
    var createMeanTransform =
    /* #__PURE__ */
    factory(name$47, dependencies$48, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          divide = _ref.divide;
      var mean = createMean({
        typed: typed,
        add: add,
        divide: divide
      });
      /**
       * Attach a transform function to math.mean
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function mean
       * from one-based to zero based
       */

      return typed('mean', {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length === 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return mean.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$48 = 'min';
    var dependencies$49 = ['typed', 'smaller'];
    var createMinTransform =
    /* #__PURE__ */
    factory(name$48, dependencies$49, function (_ref) {
      var typed = _ref.typed,
          smaller = _ref.smaller;
      var min = createMin({
        typed: typed,
        smaller: smaller
      });
      /**
       * Attach a transform function to math.min
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function min
       * from one-based to zero based
       */

      return typed('min', {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length === 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return min.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$49 = 'range';
    var dependencies$4a = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
    var createRangeTransform =
    /* #__PURE__ */
    factory(name$49, dependencies$4a, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          matrix = _ref.matrix,
          bignumber = _ref.bignumber,
          smaller = _ref.smaller,
          smallerEq = _ref.smallerEq,
          larger = _ref.larger,
          largerEq = _ref.largerEq;
      var range = createRange({
        typed: typed,
        config: config,
        matrix: matrix,
        bignumber: bignumber,
        smaller: smaller,
        smallerEq: smallerEq,
        larger: larger,
        largerEq: largerEq
      });
      /**
       * Attach a transform function to math.range
       * Adds a property transform containing the transform function.
       *
       * This transform creates a range which includes the end value
       */

      return typed('range', {
        '...any': function any(args) {
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (typeof last !== 'boolean') {
            // append a parameter includeEnd=true
            args.push(true);
          }

          return range.apply(null, args);
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4a = 'row';
    var dependencies$4b = ['typed', 'Index', 'matrix', 'range'];
    /**
     * Attach a transform function to matrix.column
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `index` parameter of function column
     * from zero-based to one-based
     */

    var createRowTransform =
    /* #__PURE__ */
    factory(name$4a, dependencies$4b, function (_ref) {
      var typed = _ref.typed,
          Index = _ref.Index,
          matrix = _ref.matrix,
          range = _ref.range;
      var row = createRow({
        typed: typed,
        Index: Index,
        matrix: matrix,
        range: range
      }); // @see: comment of row itself

      return typed('row', {
        '...any': function any(args) {
          // change last argument from zero-based to one-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber$f(last)) {
            args[lastIndex] = last - 1;
          }

          try {
            return row.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4b = 'subset';
    var dependencies$4c = ['typed', 'matrix'];
    var createSubsetTransform =
    /* #__PURE__ */
    factory(name$4b, dependencies$4c, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix;
      var subset = createSubset({
        typed: typed,
        matrix: matrix
      });
      /**
       * Attach a transform function to math.subset
       * Adds a property transform containing the transform function.
       *
       * This transform creates a range which includes the end value
       */

      return typed('subset', {
        '...any': function any(args) {
          try {
            return subset.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4c = 'concat';
    var dependencies$4d = ['typed', 'matrix', 'isInteger'];
    var createConcatTransform =
    /* #__PURE__ */
    factory(name$4c, dependencies$4d, function (_ref) {
      var typed = _ref.typed,
          matrix = _ref.matrix,
          isInteger = _ref.isInteger;
      var concat = createConcat({
        typed: typed,
        matrix: matrix,
        isInteger: isInteger
      });
      /**
       * Attach a transform function to math.range
       * Adds a property transform containing the transform function.
       *
       * This transform changed the last `dim` parameter of function concat
       * from one-based to zero based
       */

      return typed('concat', {
        '...any': function any(args) {
          // change last argument from one-based to zero-based
          var lastIndex = args.length - 1;
          var last = args[lastIndex];

          if (isNumber$f(last)) {
            args[lastIndex] = last - 1;
          } else if (isBigNumber(last)) {
            args[lastIndex] = last.minus(1);
          }

          try {
            return concat.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4d = 'std';
    var dependencies$4e = ['typed', 'sqrt', 'variance'];
    /**
     * Attach a transform function to math.std
     * Adds a property transform containing the transform function.
     *
     * This transform changed the `dim` parameter of function std
     * from one-based to zero based
     */

    var createStdTransform =
    /* #__PURE__ */
    factory(name$4d, dependencies$4e, function (_ref) {
      var typed = _ref.typed,
          sqrt = _ref.sqrt,
          variance = _ref.variance;
      var std = createStd({
        typed: typed,
        sqrt: sqrt,
        variance: variance
      });
      return typed('std', {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length >= 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return std.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    /**
     * Attach a transform function to math.sum
     * Adds a property transform containing the transform function.
     *
     * This transform changed the last `dim` parameter of function mean
     * from one-based to zero based
     */

    var name$4e = 'sum';
    var dependencies$4f = ['typed', 'config', 'add', '?bignumber', '?fraction'];
    var createSumTransform =
    /* #__PURE__ */
    factory(name$4e, dependencies$4f, function (_ref) {
      var typed = _ref.typed,
          config = _ref.config,
          add = _ref.add,
          bignumber = _ref.bignumber,
          fraction = _ref.fraction;
      var sum = createSum({
        typed: typed,
        config: config,
        add: add,
        bignumber: bignumber,
        fraction: fraction
      });
      return typed(name$4e, {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length === 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return sum.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });

    var name$4f = 'variance';
    var dependencies$4g = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
    /**
     * Attach a transform function to math.var
     * Adds a property transform containing the transform function.
     *
     * This transform changed the `dim` parameter of function var
     * from one-based to zero based
     */

    var createVarianceTransform =
    /* #__PURE__ */
    factory(name$4f, dependencies$4g, function (_ref) {
      var typed = _ref.typed,
          add = _ref.add,
          subtract = _ref.subtract,
          multiply = _ref.multiply,
          divide = _ref.divide,
          apply = _ref.apply,
          isNaN = _ref.isNaN;
      var variance = createVariance({
        typed: typed,
        add: add,
        subtract: subtract,
        multiply: multiply,
        divide: divide,
        apply: apply,
        isNaN: isNaN
      });
      return typed(name$4f, {
        '...any': function any(args) {
          // change last argument dim from one-based to zero-based
          if (args.length >= 2 && isCollection(args[0])) {
            var dim = args[1];

            if (isNumber$f(dim)) {
              args[1] = dim - 1;
            } else if (isBigNumber(dim)) {
              args[1] = dim.minus(1);
            }
          }

          try {
            return variance.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }, {
      isTransformFunction: true
    });



    var allFactories = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createTyped: createTyped,
        createResultSet: createResultSet,
        createBigNumberClass: createBigNumberClass,
        createComplexClass: createComplexClass,
        createFractionClass: createFractionClass,
        createRangeClass: createRangeClass,
        createMatrixClass: createMatrixClass,
        createDenseMatrixClass: createDenseMatrixClass,
        createClone: createClone,
        createIsInteger: createIsInteger,
        createIsNegative: createIsNegative,
        createIsNumeric: createIsNumeric,
        createHasNumericValue: createHasNumericValue,
        createIsPositive: createIsPositive,
        createIsZero: createIsZero,
        createIsNaN: createIsNaN,
        createTypeOf: createTypeOf,
        createDeprecatedTypeof: createDeprecatedTypeof,
        createEqualScalar: createEqualScalar,
        createSparseMatrixClass: createSparseMatrixClass,
        createNumber: createNumber,
        createString: createString,
        createBoolean: createBoolean,
        createBignumber: createBignumber,
        createComplex: createComplex,
        createFraction: createFraction,
        createMatrix: createMatrix,
        createSplitUnit: createSplitUnit,
        createUnaryMinus: createUnaryMinus,
        createUnaryPlus: createUnaryPlus,
        createAbs: createAbs,
        createApply: createApply,
        createAddScalar: createAddScalar,
        createCbrt: createCbrt,
        createCeil: createCeil,
        createCube: createCube,
        createExp: createExp,
        createExpm1: createExpm1,
        createFix: createFix,
        createFloor: createFloor,
        createGcd: createGcd,
        createLcm: createLcm,
        createLog10: createLog10,
        createLog2: createLog2,
        createMod: createMod,
        createMultiplyScalar: createMultiplyScalar,
        createMultiply: createMultiply,
        createNthRoot: createNthRoot,
        createSign: createSign,
        createSqrt: createSqrt,
        createSquare: createSquare,
        createSubtract: createSubtract,
        createXgcd: createXgcd,
        createDotMultiply: createDotMultiply,
        createBitAnd: createBitAnd,
        createBitNot: createBitNot,
        createBitOr: createBitOr,
        createBitXor: createBitXor,
        createArg: createArg,
        createConj: createConj,
        createIm: createIm,
        createRe: createRe,
        createNot: createNot,
        createOr: createOr,
        createXor: createXor,
        createConcat: createConcat,
        createColumn: createColumn,
        createCross: createCross,
        createDiag: createDiag,
        createEye: createEye,
        createFilter: createFilter,
        createFlatten: createFlatten,
        createForEach: createForEach,
        createGetMatrixDataType: createGetMatrixDataType,
        createIdentity: createIdentity,
        createKron: createKron,
        createMap: createMap,
        createOnes: createOnes,
        createRange: createRange,
        createReshape: createReshape,
        createResize: createResize,
        createRow: createRow,
        createSize: createSize,
        createSqueeze: createSqueeze,
        createSubset: createSubset,
        createTranspose: createTranspose,
        createCtranspose: createCtranspose,
        createZeros: createZeros,
        createErf: createErf,
        createMode: createMode,
        createProd: createProd,
        createFormat: createFormat,
        createPrint: createPrint,
        createTo: createTo,
        createIsPrime: createIsPrime,
        createNumeric: createNumeric,
        createDivideScalar: createDivideScalar,
        createPow: createPow,
        createRound: createRound,
        createLog: createLog,
        createLog1p: createLog1p,
        createNthRoots: createNthRoots,
        createDotPow: createDotPow,
        createDotDivide: createDotDivide,
        createLsolve: createLsolve,
        createUsolve: createUsolve,
        createLeftShift: createLeftShift,
        createRightArithShift: createRightArithShift,
        createRightLogShift: createRightLogShift,
        createAnd: createAnd,
        createCompare: createCompare,
        createCompareNatural: createCompareNatural,
        createCompareText: createCompareText,
        createEqual: createEqual,
        createEqualText: createEqualText,
        createSmaller: createSmaller,
        createSmallerEq: createSmallerEq,
        createLarger: createLarger,
        createLargerEq: createLargerEq,
        createDeepEqual: createDeepEqual,
        createUnequal: createUnequal,
        createPartitionSelect: createPartitionSelect,
        createSort: createSort,
        createMax: createMax,
        createMin: createMin,
        createImmutableDenseMatrixClass: createImmutableDenseMatrixClass,
        createIndexClass: createIndexClass,
        createFibonacciHeapClass: createFibonacciHeapClass,
        createSpaClass: createSpaClass,
        createUnitClass: createUnitClass,
        createUnitFunction: createUnitFunction,
        createSparse: createSparse,
        createCreateUnit: createCreateUnit,
        createAcos: createAcos,
        createAcosh: createAcosh,
        createAcot: createAcot,
        createAcoth: createAcoth,
        createAcsc: createAcsc,
        createAcsch: createAcsch,
        createAsec: createAsec,
        createAsech: createAsech,
        createAsin: createAsin,
        createAsinh: createAsinh,
        createAtan: createAtan,
        createAtan2: createAtan2,
        createAtanh: createAtanh,
        createCos: createCos,
        createCosh: createCosh,
        createCot: createCot,
        createCoth: createCoth,
        createCsc: createCsc,
        createCsch: createCsch,
        createSec: createSec,
        createSech: createSech,
        createSin: createSin,
        createSinh: createSinh,
        createTan: createTan,
        createTanh: createTanh,
        createSetCartesian: createSetCartesian,
        createSetDifference: createSetDifference,
        createSetDistinct: createSetDistinct,
        createSetIntersect: createSetIntersect,
        createSetIsSubset: createSetIsSubset,
        createSetMultiplicity: createSetMultiplicity,
        createSetPowerset: createSetPowerset,
        createSetSize: createSetSize,
        createSetSymDifference: createSetSymDifference,
        createSetUnion: createSetUnion,
        createAdd: createAdd,
        createHypot: createHypot,
        createNorm: createNorm,
        createDot: createDot,
        createTrace: createTrace,
        createIndex: createIndex,
        createNode: createNode,
        createAccessorNode: createAccessorNode,
        createArrayNode: createArrayNode,
        createAssignmentNode: createAssignmentNode,
        createBlockNode: createBlockNode,
        createConditionalNode: createConditionalNode,
        createConstantNode: createConstantNode,
        createFunctionAssignmentNode: createFunctionAssignmentNode,
        createIndexNode: createIndexNode,
        createObjectNode: createObjectNode,
        createOperatorNode: createOperatorNode,
        createParenthesisNode: createParenthesisNode,
        createRangeNode: createRangeNode,
        createRelationalNode: createRelationalNode,
        createSymbolNode: createSymbolNode,
        createFunctionNode: createFunctionNode,
        createParse: createParse,
        createCompile: createCompile,
        createEvaluate: createEvaluate,
        createDeprecatedEval: createDeprecatedEval,
        createParserClass: createParserClass,
        createParser: createParser,
        createLup: createLup,
        createQr: createQr,
        createSlu: createSlu,
        createLusolve: createLusolve,
        createHelpClass: createHelpClass,
        createChainClass: createChainClass,
        createHelp: createHelp,
        createChain: createChain,
        createDet: createDet,
        createInv: createInv,
        createEigs: createEigs,
        createExpm: createExpm,
        createSqrtm: createSqrtm,
        createDivide: createDivide,
        createDistance: createDistance,
        createIntersect: createIntersect,
        createSum: createSum,
        createMean: createMean,
        createMedian: createMedian,
        createMad: createMad,
        createVariance: createVariance,
        createDeprecatedVar: createDeprecatedVar,
        createQuantileSeq: createQuantileSeq,
        createStd: createStd,
        createCombinations: createCombinations,
        createCombinationsWithRep: createCombinationsWithRep,
        createGamma: createGamma,
        createFactorial: createFactorial,
        createKldivergence: createKldivergence,
        createMultinomial: createMultinomial,
        createPermutations: createPermutations,
        createPickRandom: createPickRandom,
        createRandom: createRandom,
        createRandomInt: createRandomInt,
        createStirlingS2: createStirlingS2,
        createBellNumbers: createBellNumbers,
        createCatalan: createCatalan,
        createComposition: createComposition,
        createSimplify: createSimplify,
        createDerivative: createDerivative,
        createRationalize: createRationalize,
        createReviver: createReviver,
        createE: createE,
        createUppercaseE: createUppercaseE,
        createFalse: createFalse,
        createI: createI,
        createInfinity: createInfinity,
        createLN10: createLN10,
        createLN2: createLN2,
        createLOG10E: createLOG10E,
        createLOG2E: createLOG2E,
        createNaN: createNaN,
        createNull: createNull,
        createPhi: createPhi,
        createPi: createPi,
        createUppercasePi: createUppercasePi,
        createSQRT1_2: createSQRT1_2,
        createSQRT2: createSQRT2,
        createTau: createTau,
        createTrue: createTrue,
        createVersion: createVersion,
        createAtomicMass: createAtomicMass,
        createAvogadro: createAvogadro,
        createBohrMagneton: createBohrMagneton,
        createBohrRadius: createBohrRadius,
        createBoltzmann: createBoltzmann,
        createClassicalElectronRadius: createClassicalElectronRadius,
        createConductanceQuantum: createConductanceQuantum,
        createCoulomb: createCoulomb,
        createDeuteronMass: createDeuteronMass,
        createEfimovFactor: createEfimovFactor,
        createElectricConstant: createElectricConstant,
        createElectronMass: createElectronMass,
        createElementaryCharge: createElementaryCharge,
        createFaraday: createFaraday,
        createFermiCoupling: createFermiCoupling,
        createFineStructure: createFineStructure,
        createFirstRadiation: createFirstRadiation,
        createGasConstant: createGasConstant,
        createGravitationConstant: createGravitationConstant,
        createGravity: createGravity,
        createHartreeEnergy: createHartreeEnergy,
        createInverseConductanceQuantum: createInverseConductanceQuantum,
        createKlitzing: createKlitzing,
        createLoschmidt: createLoschmidt,
        createMagneticConstant: createMagneticConstant,
        createMagneticFluxQuantum: createMagneticFluxQuantum,
        createMolarMass: createMolarMass,
        createMolarMassC12: createMolarMassC12,
        createMolarPlanckConstant: createMolarPlanckConstant,
        createMolarVolume: createMolarVolume,
        createNeutronMass: createNeutronMass,
        createNuclearMagneton: createNuclearMagneton,
        createPlanckCharge: createPlanckCharge,
        createPlanckConstant: createPlanckConstant,
        createPlanckLength: createPlanckLength,
        createPlanckMass: createPlanckMass,
        createPlanckTemperature: createPlanckTemperature,
        createPlanckTime: createPlanckTime,
        createProtonMass: createProtonMass,
        createQuantumOfCirculation: createQuantumOfCirculation,
        createReducedPlanckConstant: createReducedPlanckConstant,
        createRydberg: createRydberg,
        createSackurTetrode: createSackurTetrode,
        createSecondRadiation: createSecondRadiation,
        createSpeedOfLight: createSpeedOfLight,
        createStefanBoltzmann: createStefanBoltzmann,
        createThomsonCrossSection: createThomsonCrossSection,
        createVacuumImpedance: createVacuumImpedance,
        createWeakMixingAngle: createWeakMixingAngle,
        createWienDisplacement: createWienDisplacement,
        createApplyTransform: createApplyTransform,
        createColumnTransform: createColumnTransform,
        createFilterTransform: createFilterTransform,
        createForEachTransform: createForEachTransform,
        createIndexTransform: createIndexTransform,
        createMapTransform: createMapTransform,
        createMaxTransform: createMaxTransform,
        createMeanTransform: createMeanTransform,
        createMinTransform: createMinTransform,
        createRangeTransform: createRangeTransform,
        createRowTransform: createRowTransform,
        createSubsetTransform: createSubsetTransform,
        createConcatTransform: createConcatTransform,
        createStdTransform: createStdTransform,
        createSumTransform: createSumTransform,
        createVarianceTransform: createVarianceTransform
    });

    // creating all factories here in a separate file is needed to get tree-shaking working
    var all = allFactories;

    function E () {
      // Keep this empty so it's easier to inherit from
      // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
    }

    E.prototype = {
      on: function (name, callback, ctx) {
        var e = this.e || (this.e = {});

        (e[name] || (e[name] = [])).push({
          fn: callback,
          ctx: ctx
        });

        return this;
      },

      once: function (name, callback, ctx) {
        var self = this;
        function listener () {
          self.off(name, listener);
          callback.apply(ctx, arguments);
        }
        listener._ = callback;
        return this.on(name, listener, ctx);
      },

      emit: function (name) {
        var data = [].slice.call(arguments, 1);
        var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
        var i = 0;
        var len = evtArr.length;

        for (i; i < len; i++) {
          evtArr[i].fn.apply(evtArr[i].ctx, data);
        }

        return this;
      },

      off: function (name, callback) {
        var e = this.e || (this.e = {});
        var evts = e[name];
        var liveEvents = [];

        if (evts && callback) {
          for (var i = 0, len = evts.length; i < len; i++) {
            if (evts[i].fn !== callback && evts[i].fn._ !== callback)
              liveEvents.push(evts[i]);
          }
        }

        // Remove event from queue to prevent memory leak
        // Suggested by https://github.com/lazd
        // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

        (liveEvents.length)
          ? e[name] = liveEvents
          : delete e[name];

        return this;
      }
    };

    var tinyEmitter = E;
    var TinyEmitter = E;
    tinyEmitter.TinyEmitter = TinyEmitter;

    /**
     * Extend given object with emitter functions `on`, `off`, `once`, `emit`
     * @param {Object} obj
     * @return {Object} obj
     */

    function mixin(obj) {
      // create event emitter
      var emitter = new tinyEmitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)

      obj.on = emitter.on.bind(emitter);
      obj.off = emitter.off.bind(emitter);
      obj.once = emitter.once.bind(emitter);
      obj.emit = emitter.emit.bind(emitter);
      return obj;
    }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _typeof$d(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$d = function _typeof(obj) { return typeof obj; }; } else { _typeof$d = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$d(obj); }
    function importFactory(typed, load, math, importedFactories) {
      /**
       * Import functions from an object or a module.
       *
       * This function is only available on a mathjs instance created using `create`.
       *
       * Syntax:
       *
       *    math.import(functions)
       *    math.import(functions, options)
       *
       * Where:
       *
       * - `functions: Object`
       *   An object with functions or factories to be imported.
       * - `options: Object` An object with import options. Available options:
       *   - `override: boolean`
       *     If true, existing functions will be overwritten. False by default.
       *   - `silent: boolean`
       *     If true, the function will not throw errors on duplicates or invalid
       *     types. False by default.
       *   - `wrap: boolean`
       *     If true, the functions will be wrapped in a wrapper function
       *     which converts data types like Matrix to primitive data types like Array.
       *     The wrapper is needed when extending math.js with libraries which do not
       *     support these data type. False by default.
       *
       * Examples:
       *
       *    import { create, all } from 'mathjs'
       *    import * as numbers from 'numbers'
       *
       *    // create a mathjs instance
       *    const math = create(all)
       *
       *    // define new functions and variables
       *    math.import({
       *      myvalue: 42,
       *      hello: function (name) {
       *        return 'hello, ' + name + '!'
       *      }
       *    })
       *
       *    // use the imported function and variable
       *    math.myvalue * 2               // 84
       *    math.hello('user')             // 'hello, user!'
       *
       *    // import the npm module 'numbers'
       *    // (must be installed first with `npm install numbers`)
       *    math.import(numbers, {wrap: true})
       *
       *    math.fibonacci(7) // returns 13
       *
       * @param {Object | Array} functions  Object with functions to be imported.
       * @param {Object} [options]          Import options.
       */
      function mathImport(functions, options) {
        var num = arguments.length;

        if (num !== 1 && num !== 2) {
          throw new ArgumentsError('import', num, 1, 2);
        }

        if (!options) {
          options = {};
        }

        function flattenImports(flatValues, value, name) {
          if (isLegacyFactory(value)) {
            // legacy factories don't always have a name,
            // let's not handle them via the new flatValues
            _importLegacyFactory(value, options);
          } else if (Array.isArray(value)) {
            value.forEach(function (item) {
              return flattenImports(flatValues, item);
            });
          } else if (_typeof$d(value) === 'object') {
            for (var _name in value) {
              if (hasOwnProperty$1(value, _name)) {
                flattenImports(flatValues, value[_name], _name);
              }
            }
          } else if (isFactory(value) || name !== undefined) {
            var flatName = isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : // TODO: this is ugly
            value.fn : name; // we allow importing the same function twice if it points to the same implementation

            if (hasOwnProperty$1(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {
              throw new Error('Cannot import "' + flatName + '" twice');
            }

            flatValues[flatName] = value;
          } else {
            if (!options.silent) {
              throw new TypeError('Factory, Object, or Array expected');
            }
          }
        }

        var flatValues = {};
        flattenImports(flatValues, functions);

        for (var name in flatValues) {
          if (hasOwnProperty$1(flatValues, name)) {
            // console.log('import', name)
            var value = flatValues[name];

            if (isFactory(value)) {
              // we ignore name here and enforce the name of the factory
              // maybe at some point we do want to allow overriding it
              // in that case we can implement an option overrideFactoryNames: true
              _importFactory(value, options);
            } else if (isSupportedType(value)) {
              _import(name, value, options);
            } else {
              if (!options.silent) {
                throw new TypeError('Factory, Object, or Array expected');
              }
            }
          }
        }
      }
      /**
       * Add a property to the math namespace
       * @param {string} name
       * @param {*} value
       * @param {Object} options  See import for a description of the options
       * @private
       */


      function _import(name, value, options) {
        // TODO: refactor this function, it's to complicated and contains duplicate code
        if (options.wrap && typeof value === 'function') {
          // create a wrapper around the function
          value = _wrap(value);
        } // turn a plain function with a typed-function signature into a typed-function


        if (hasTypedFunctionSignature(value)) {
          value = typed(name, _defineProperty$1({}, value.signature, value));
        }

        if (isTypedFunction(math[name]) && isTypedFunction(value)) {
          if (options.override) {
            // give the typed function the right name
            value = typed(name, value.signatures);
          } else {
            // merge the existing and typed function
            value = typed(math[name], value);
          }

          math[name] = value;
          delete importedFactories[name];

          _importTransform(name, value);

          math.emit('import', name, function resolver() {
            return value;
          });
          return;
        }

        if (math[name] === undefined || options.override) {
          math[name] = value;
          delete importedFactories[name];

          _importTransform(name, value);

          math.emit('import', name, function resolver() {
            return value;
          });
          return;
        }

        if (!options.silent) {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      }

      function _importTransform(name, value) {
        if (value && typeof value.transform === 'function') {
          math.expression.transform[name] = value.transform;

          if (allowedInExpressions(name)) {
            math.expression.mathWithTransform[name] = value.transform;
          }
        } else {
          // remove existing transform
          delete math.expression.transform[name];

          if (allowedInExpressions(name)) {
            math.expression.mathWithTransform[name] = value;
          }
        }
      }

      function _deleteTransform(name) {
        delete math.expression.transform[name];

        if (allowedInExpressions(name)) {
          math.expression.mathWithTransform[name] = math[name];
        } else {
          delete math.expression.mathWithTransform[name];
        }
      }
      /**
       * Create a wrapper a round an function which converts the arguments
       * to their primitive values (like convert a Matrix to Array)
       * @param {Function} fn
       * @return {Function} Returns the wrapped function
       * @private
       */


      function _wrap(fn) {
        var wrapper = function wrapper() {
          var args = [];

          for (var i = 0, len = arguments.length; i < len; i++) {
            var arg = arguments[i];
            args[i] = arg && arg.valueOf();
          }

          return fn.apply(math, args);
        };

        if (fn.transform) {
          wrapper.transform = fn.transform;
        }

        return wrapper;
      }
      /**
       * Import an instance of a factory into math.js
       * @param {{factory: Function, name: string, path: string, math: boolean}} factory
       * @param {Object} options  See import for a description of the options
       * @private
       */
      // TODO: _importLegacyFactory is deprecated since v6.0.0, clean up some day


      function _importLegacyFactory(factory, options) {
        warnOnce('Factories of type { name, factory } are deprecated since v6. ' + 'Please create your factory functions using the math.factory function.');

        if (typeof factory.name === 'string') {
          var name = factory.name;
          var existingTransform = name in math.expression.transform;
          var namespace = factory.path ? traverse(math, factory.path) : math;
          var existing = hasOwnProperty$1(namespace, name) ? namespace[name] : undefined;

          var resolver = function resolver() {
            var instance = load(factory);

            if (instance && typeof instance.transform === 'function') {
              throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
            }

            if (isTypedFunction(existing) && isTypedFunction(instance)) {
              if (options.override) ; else {
                // merge the existing and new typed function
                instance = typed(existing, instance);
              }

              return instance;
            }

            if (existing === undefined || options.override) {
              return instance;
            }

            if (options.silent) {
              return existing;
            } else {
              throw new Error('Cannot import "' + name + '": already exists');
            }
          };

          if (factory.lazy !== false) {
            lazy$1(namespace, name, resolver);

            if (existingTransform) {
              _deleteTransform(name);
            } else {
              if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
                lazy$1(math.expression.mathWithTransform, name, resolver);
              }
            }
          } else {
            namespace[name] = resolver();

            if (existingTransform) {
              _deleteTransform(name);
            } else {
              if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
                math.expression.mathWithTransform[name] = resolver();
              }
            }
          }

          var key = factory.path ? factory.path + '.' + factory.name : factory.name;
          importedFactories[key] = factory;
          math.emit('import', name, resolver, factory.path);
        } else {
          // unnamed factory.
          // no lazy loading
          load(factory);
        }
      }
      /**
       * Import an instance of a factory into math.js
       * @param {function(scope: object)} factory
       * @param {Object} options  See import for a description of the options
       * @param {string} [name=factory.name] Optional custom name
       * @private
       */


      function _importFactory(factory, options) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;

        if (contains$1(name, '.')) {
          throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));
        }

        var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
        var existingTransform = name in math.expression.transform;
        var existing = hasOwnProperty$1(namespace, name) ? namespace[name] : undefined;

        var resolver = function resolver() {
          // collect all dependencies, handle finding both functions and classes and other special cases
          var dependencies = {};
          factory.dependencies.map(stripOptionalNotation).forEach(function (dependency) {
            if (contains$1(dependency, '.')) {
              throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));
            }

            if (dependency === 'math') {
              dependencies.math = math;
            } else if (dependency === 'mathWithTransform') {
              dependencies.mathWithTransform = math.expression.mathWithTransform;
            } else if (dependency === 'classes') {
              // special case for json reviver
              dependencies.classes = math;
            } else {
              dependencies[dependency] = math[dependency];
            }
          });
          var instance =
          /* #__PURE__ */
          factory(dependencies);

          if (instance && typeof instance.transform === 'function') {
            throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
          }

          if (existing === undefined || options.override) {
            return instance;
          }

          if (isTypedFunction(existing) && isTypedFunction(instance)) {
            // merge the existing and new typed function
            return typed(existing, instance);
          }

          if (options.silent) {
            // keep existing, ignore imported function
            return existing;
          } else {
            throw new Error('Cannot import "' + name + '": already exists');
          }
        }; // TODO: add unit test with non-lazy factory


        if (!factory.meta || factory.meta.lazy !== false) {
          lazy$1(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

          if (existing && existingTransform) {
            _deleteTransform(name);
          } else {
            if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
              lazy$1(math.expression.mathWithTransform, name, function () {
                return namespace[name];
              });
            }
          }
        } else {
          namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

          if (existing && existingTransform) {
            _deleteTransform(name);
          } else {
            if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
              lazy$1(math.expression.mathWithTransform, name, function () {
                return namespace[name];
              });
            }
          }
        } // TODO: improve factories, store a list with imports instead which can be re-played


        importedFactories[name] = factory;
        math.emit('import', name, resolver);
      }
      /**
       * Check whether given object is a type which can be imported
       * @param {Function | number | string | boolean | null | Unit | Complex} object
       * @return {boolean}
       * @private
       */


      function isSupportedType(object) {
        return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || isUnit(object) || isComplex(object) || isBigNumber(object) || isFraction(object) || isMatrix(object) || Array.isArray(object);
      }
      /**
       * Test whether a given thing is a typed-function
       * @param {*} fn
       * @return {boolean} Returns true when `fn` is a typed-function
       */


      function isTypedFunction(fn) {
        return typeof fn === 'function' && _typeof$d(fn.signatures) === 'object';
      }

      function hasTypedFunctionSignature(fn) {
        return typeof fn === 'function' && typeof fn.signature === 'string';
      }

      function allowedInExpressions(name) {
        return !hasOwnProperty$1(unsafe, name);
      }

      function legacyFactoryAllowedInExpressions(factory) {
        return factory.path === undefined && !hasOwnProperty$1(unsafe, factory.name);
      }

      function factoryAllowedInExpressions(factory) {
        return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead
        !hasOwnProperty$1(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);
      }

      function isTransformFunctionFactory(factory) {
        return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
      } // namespaces and functions not available in the parser for safety reasons


      var unsafe = {
        expression: true,
        type: true,
        docs: true,
        error: true,
        json: true,
        chain: true // chain method not supported. Note that there is a unit chain too.

      };
      return mathImport;
    }

    function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }
    /**
     * Create a mathjs instance from given factory functions and optionally config
     *
     * Usage:
     *
     *     const mathjs1 = create({ createAdd, createMultiply, ...})
     *     const config = { number: 'BigNumber' }
     *     const mathjs2 = create(all, config)
     *
     * @param {Object} [factories] An object with factory functions
     *                             The object can contain nested objects,
     *                             all nested objects will be flattened.
     * @param {Object} [config]    Available options:
     *                            {number} epsilon
     *                              Minimum relative difference between two
     *                              compared values, used by all comparison functions.
     *                            {string} matrix
     *                              A string 'Matrix' (default) or 'Array'.
     *                            {string} number
     *                              A string 'number' (default), 'BigNumber', or 'Fraction'
     *                            {number} precision
     *                              The number of significant digits for BigNumbers.
     *                              Not applicable for Numbers.
     *                            {boolean} predictable
     *                              Predictable output type of functions. When true,
     *                              output type depends only on the input types. When
     *                              false (default), output type can vary depending
     *                              on input values. For example `math.sqrt(-4)`
     *                              returns `complex('2i')` when predictable is false, and
     *                              returns `NaN` when true.
     *                            {string} randomSeed
     *                              Random seed for seeded pseudo random number generator.
     *                              Set to null to randomly seed.
     * @returns {Object} Returns a bare-bone math.js instance containing
     *                   functions:
     *                   - `import` to add new functions
     *                   - `config` to change configuration
     *                   - `on`, `off`, `once`, `emit` for events
     */

    function create$2(factories, config) {
      var configInternal = _extends$5({}, DEFAULT_CONFIG, config); // simple test for ES5 support


      if (typeof Object.create !== 'function') {
        throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
      } // create the mathjs instance


      var math = mixin({
        // only here for backward compatibility for legacy factory functions
        isNumber: isNumber$f,
        isComplex: isComplex,
        isBigNumber: isBigNumber,
        isFraction: isFraction,
        isUnit: isUnit,
        isString: isString$m,
        isArray: isArray$i,
        isMatrix: isMatrix,
        isCollection: isCollection,
        isDenseMatrix: isDenseMatrix,
        isSparseMatrix: isSparseMatrix,
        isRange: isRange,
        isIndex: isIndex,
        isBoolean: isBoolean$7,
        isResultSet: isResultSet,
        isHelp: isHelp,
        isFunction: isFunction$f,
        isDate: isDate$c,
        isRegExp: isRegExp$9,
        isObject: isObject$1,
        isNull: isNull,
        isUndefined: isUndefined$1,
        isAccessorNode: isAccessorNode,
        isArrayNode: isArrayNode,
        isAssignmentNode: isAssignmentNode,
        isBlockNode: isBlockNode,
        isConditionalNode: isConditionalNode,
        isConstantNode: isConstantNode,
        isFunctionAssignmentNode: isFunctionAssignmentNode,
        isFunctionNode: isFunctionNode,
        isIndexNode: isIndexNode,
        isNode: isNode,
        isObjectNode: isObjectNode,
        isOperatorNode: isOperatorNode,
        isParenthesisNode: isParenthesisNode,
        isRangeNode: isRangeNode,
        isSymbolNode: isSymbolNode,
        isChain: isChain
      }); // load config function and apply provided config

      math.config = configFactory(configInternal, math.emit);
      math.expression = {
        transform: {},
        mathWithTransform: {
          config: math.config
        }
      }; // cached factories and instances used by function load

      var legacyFactories = [];
      var legacyInstances = [];
      /**
       * Load a function or data type from a factory.
       * If the function or data type already exists, the existing instance is
       * returned.
       * @param {Function} factory
       * @returns {*}
       */

      function load(factory) {
        if (isFactory(factory)) {
          return factory(math);
        }

        var firstProperty = factory[Object.keys(factory)[0]];

        if (isFactory(firstProperty)) {
          return firstProperty(math);
        }

        if (!isLegacyFactory(factory)) {
          console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
          throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
        }

        var index = legacyFactories.indexOf(factory);
        var instance;

        if (index === -1) {
          // doesn't yet exist
          if (factory.math === true) {
            // pass with math namespace
            instance = factory.factory(math.type, configInternal, load, math.typed, math);
          } else {
            instance = factory.factory(math.type, configInternal, load, math.typed);
          } // append to the cache


          legacyFactories.push(factory);
          legacyInstances.push(instance);
        } else {
          // already existing function, return the cached instance
          instance = legacyInstances[index];
        }

        return instance;
      }

      var importedFactories = {}; // load the import function

      function lazyTyped() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return math.typed.apply(math.typed, args);
      }

      var internalImport = importFactory(lazyTyped, load, math, importedFactories);
      math["import"] = internalImport; // listen for changes in config, import all functions again when changed
      // TODO: move this listener into the import function?

      math.on('config', function () {
        values$1(importedFactories).forEach(function (factory) {
          if (factory && factory.meta && factory.meta.recreateOnConfigChange) {
            // FIXME: only re-create when the current instance is the same as was initially created
            // FIXME: delete the functions/constants before importing them again?
            internalImport(factory, {
              override: true
            });
          }
        });
      }); // the create function exposed on the mathjs instance is bound to
      // the factory functions passed before

      math.create = create$2.bind(null, factories); // export factory function

      math.factory = factory; // import the factory functions like createAdd as an array instead of object,
      // else they will get a different naming (`createAdd` instead of `add`).

      math["import"](values$1(deepFlatten(factories))); // TODO: deprecated since v6.0.0. Clean up some day

      var movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];
      movedNames.forEach(function (fullName) {
        var parts = fullName.split('.');
        var path = initial(parts);
        var name = last$2(parts);
        var obj = traverse(math, path);
        lazy$1(obj, name, function () {
          warnOnce("math.".concat(fullName, " is moved to math.").concat(name, " in v6.0.0. ") + 'Please use the new location instead.');
          return math[name];
        });
      });
      lazy$1(math.expression, 'docs', function () {
        throw new Error('math.expression.docs has been moved. ' + 'Please import via "import { docs } from \'mathjs\'"');
      });
      math.ArgumentsError = ArgumentsError;
      math.DimensionError = DimensionError;
      math.IndexError = IndexError;
      return math;
    }

    /* src\components\common\IconIndicator.svelte generated by Svelte v3.18.2 */
    const file$g = "src\\components\\common\\IconIndicator.svelte";

    // (21:4) <div slot="target">
    function create_target_slot$1(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "slot", "target");
    			attr_dev(div, "class", "svelte-m2cubw");
    			add_location(div, file$g, 20, 4, 478);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_target_slot$1.name,
    		type: "slot",
    		source: "(21:4) <div slot=\\\"target\\\">",
    		ctx
    	});

    	return block;
    }

    // (22:4) <div slot="content" class="content">
    function create_content_slot$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "slot", "content");
    			attr_dev(div, "class", "content svelte-m2cubw");
    			add_location(div, file$g, 21, 4, 521);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = /*popoverText*/ ctx[0];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*popoverText*/ 1) div.innerHTML = /*popoverText*/ ctx[0];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$1.name,
    		type: "slot",
    		source: "(22:4) <div slot=\\\"content\\\" class=\\\"content\\\">",
    		ctx
    	});

    	return block;
    }

    // (20:2) <Popover arrowColor="#fff" action="hover" placement="bottom-center" overlayColor="transparent" arrow={false}>
    function create_default_slot$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(20:2) <Popover arrowColor=\\\"#fff\\\" action=\\\"hover\\\" placement=\\\"bottom-center\\\" overlayColor=\\\"transparent\\\" arrow={false}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let current;

    	const popover = new Popover({
    			props: {
    				arrowColor: "#fff",
    				action: "hover",
    				placement: "bottom-center",
    				overlayColor: "transparent",
    				arrow: false,
    				$$slots: {
    					default: [create_default_slot$6],
    					content: [create_content_slot$1],
    					target: [create_target_slot$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(popover.$$.fragment);
    			attr_dev(div, "class", "svelte-m2cubw");
    			add_location(div, file$g, 18, 0, 356);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(popover, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const popover_changes = {};

    			if (dirty & /*$$scope, popoverText*/ 9) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			popover.$set(popover_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(popover);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	var dispatch;
    	let { popoverText } = $$props;
    	dispatch = createEventDispatcher();
    	const writable_props = ["popoverText"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IconIndicator> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("popoverText" in $$props) $$invalidate(0, popoverText = $$props.popoverText);
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return { dispatch, popoverText };
    	};

    	$$self.$inject_state = $$props => {
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("popoverText" in $$props) $$invalidate(0, popoverText = $$props.popoverText);
    	};

    	return [popoverText, dispatch, $$slots, $$scope];
    }

    class IconIndicator extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { popoverText: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconIndicator",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*popoverText*/ ctx[0] === undefined && !("popoverText" in props)) {
    			console.warn("<IconIndicator> was created without expected prop 'popoverText'");
    		}
    	}

    	get popoverText() {
    		throw new Error("<IconIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set popoverText(value) {
    		throw new Error("<IconIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\__Expression.svelte generated by Svelte v3.18.2 */
    const file$h = "src\\pages\\list\\items\\__Expression.svelte";

    // (105:2) {#if info() != null}
    function create_if_block$7(ctx) {
    	let current;

    	const iconindicator = new IconIndicator({
    			props: {
    				popoverText: /*info*/ ctx[0](),
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconindicator.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconindicator, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconindicator_changes = {};
    			if (dirty & /*info*/ 1) iconindicator_changes.popoverText = /*info*/ ctx[0]();

    			if (dirty & /*$$scope*/ 128) {
    				iconindicator_changes.$$scope = { dirty, ctx };
    			}

    			iconindicator.$set(iconindicator_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconindicator.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconindicator.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconindicator, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(105:2) {#if info() != null}",
    		ctx
    	});

    	return block;
    }

    // (106:4) <IconIndicator popoverText={info()}>
    function create_default_slot$7(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$h, 106, 89, 2567);
    			attr_dev(path1, "d", "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z");
    			add_location(path1, file$h, 106, 128, 2606);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "18");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$h, 106, 6, 2484);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(106:4) <IconIndicator popoverText={info()}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let label;
    	let t0;
    	let label_class_value;
    	let t1;
    	let span;
    	let t2;
    	let t3;
    	let show_if = /*info*/ ctx[0]() != null;
    	let current;
    	let if_block = show_if && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			t0 = text(/*type*/ ctx[1]);
    			t1 = space();
    			span = element("span");
    			t2 = text(/*displayResult*/ ctx[2]);
    			t3 = space();
    			if (if_block) if_block.c();
    			attr_dev(label, "class", label_class_value = "" + (null_to_empty(/*type*/ ctx[1]) + " svelte-n4bx7p"));
    			add_location(label, file$h, 102, 2, 2348);
    			add_location(span, file$h, 103, 2, 2385);
    			add_location(div, file$h, 101, 0, 2340);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t0);
    			append_dev(div, t1);
    			append_dev(div, span);
    			append_dev(span, t2);
    			append_dev(div, t3);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*type*/ 2) set_data_dev(t0, /*type*/ ctx[1]);

    			if (!current || dirty & /*type*/ 2 && label_class_value !== (label_class_value = "" + (null_to_empty(/*type*/ ctx[1]) + " svelte-n4bx7p"))) {
    				attr_dev(label, "class", label_class_value);
    			}

    			if (!current || dirty & /*displayResult*/ 4) set_data_dev(t2, /*displayResult*/ ctx[2]);
    			if (dirty & /*info*/ 1) show_if = /*info*/ ctx[0]() != null;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { expression } = $$props;
    	var info, math, parser, result, type;
    	math = create$2(all, { number: "number" });
    	type = "Math";
    	parser = math.parser();

    	result = function (expr) {
    		var dateattempt, output;
    		output = "";

    		try {
    			output = math.format(parser.evaluate((expr || "").trim()), { precision: 14 });
    			return $$invalidate(1, type = math.typeOf(parser.evaluate(expr || "")).titleize());
    		} catch(error) {

    			try {
    				// console.log "Math error:"
    				// console.log mathErr
    				dateattempt = Date.create(expr);

    				if (dateattempt.isValid()) {
    					$$invalidate(1, type = "Date");
    					return output = dateattempt;
    				} else {
    					return $$invalidate(1, type = "Unknown");
    				}
    			} catch(error) {
    			}
    		} finally {
    			// console.log "Date error:"
    			// console.log dateErr
    			if (output === "undefined") {
    				output = "";
    				$$invalidate(1, type = "Unknown");
    			}

    			return output || "";
    		}
    	};

    	info = function () {
    		var output;
    		output = null;

    		try {
    			if (math.format(parser.evaluate((expression || "").trim())).length - math.format(parser.evaluate((expression || "").trim()), { precision: 14 }).length > 4) {
    				return output = `This floating point result contains a round-off error. The raw result is: ${math.format(parser.evaluate((expression || "").trim()))}`;
    			}
    		} catch(error) {
    		} finally {
    			// console.log err
    			return output;
    		}
    	};

    	const writable_props = ["expression"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<_Expression> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("expression" in $$props) $$invalidate(3, expression = $$props.expression);
    	};

    	$$self.$capture_state = () => {
    		return {
    			expression,
    			info,
    			math,
    			parser,
    			result,
    			type,
    			displayResult
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("expression" in $$props) $$invalidate(3, expression = $$props.expression);
    		if ("info" in $$props) $$invalidate(0, info = $$props.info);
    		if ("math" in $$props) math = $$props.math;
    		if ("parser" in $$props) parser = $$props.parser;
    		if ("result" in $$props) $$invalidate(6, result = $$props.result);
    		if ("type" in $$props) $$invalidate(1, type = $$props.type);
    		if ("displayResult" in $$props) $$invalidate(2, displayResult = $$props.displayResult);
    	};

    	let displayResult;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*result, expression*/ 72) {
    			 $$invalidate(2, displayResult = result(expression));
    		}
    	};

    	return [info, type, displayResult, expression];
    }

    class _Expression extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { expression: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "_Expression",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*expression*/ ctx[3] === undefined && !("expression" in props)) {
    			console.warn("<_Expression> was created without expected prop 'expression'");
    		}
    	}

    	get expression() {
    		throw new Error("<_Expression>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expression(value) {
    		throw new Error("<_Expression>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\_Solver.svelte generated by Svelte v3.18.2 */
    const file$i = "src\\pages\\list\\items\\_Solver.svelte";

    // (116:4) <IconButton on:clicked={deleteLine}>
    function create_default_slot_1$1(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$i, 116, 89, 2597);
    			attr_dev(path1, "d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z");
    			add_location(path1, file$i, 116, 128, 2636);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$i, 116, 6, 2514);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(116:4) <IconButton on:clicked={deleteLine}>",
    		ctx
    	});

    	return block;
    }

    // (119:4) <IconButton on:clicked={copy}>
    function create_default_slot$8(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$i, 119, 89, 2906);
    			attr_dev(path1, "d", "M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4H8c-1.1 0-1.99.9-1.99 2L6 21c0 1.1.89 2 1.99 2H19c1.1 0 2-.9 2-2V11l-6-6zM8 21V7h6v5h5v9H8z");
    			add_location(path1, file$i, 119, 128, 2945);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$i, 119, 6, 2823);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(119:4) <IconButton on:clicked={copy}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let section;
    	let div0;
    	let t0;
    	let div2;
    	let t1;
    	let div1;
    	let t2;
    	let div3;
    	let t3;
    	let current;

    	const inlineinput = new InlineInput({
    			props: { value: /*item*/ ctx[0].expression },
    			$$inline: true
    		});

    	inlineinput.$on("update", function () {
    		if (is_function(/*expressionChange*/ ctx[3])) /*expressionChange*/ ctx[3].apply(this, arguments);
    	});

    	inlineinput.$on("keyup", function () {
    		if (is_function(/*expressionKeyup*/ ctx[4])) /*expressionKeyup*/ ctx[4].apply(this, arguments);
    	});

    	const expression = new _Expression({
    			props: { expression: /*item*/ ctx[0].expression },
    			$$inline: true
    		});

    	const iconbutton0 = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton0.$on("clicked", function () {
    		if (is_function(/*deleteLine*/ ctx[2])) /*deleteLine*/ ctx[2].apply(this, arguments);
    	});

    	const iconbutton1 = new IconButton({
    			props: {
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	iconbutton1.$on("clicked", function () {
    		if (is_function(/*copy*/ ctx[1])) /*copy*/ ctx[1].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			create_component(inlineinput.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			create_component(expression.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			div3 = element("div");
    			create_component(iconbutton0.$$.fragment);
    			t3 = space();
    			create_component(iconbutton1.$$.fragment);
    			attr_dev(div0, "flex", "40");
    			attr_dev(div0, "class", "svelte-p45rvm");
    			add_location(div0, file$i, 105, 2, 2229);
    			attr_dev(div1, "class", "svelte-p45rvm");
    			add_location(div1, file$i, 110, 4, 2417);
    			attr_dev(div2, "flex", "");
    			attr_dev(div2, "class", "svelte-p45rvm");
    			add_location(div2, file$i, 108, 2, 2355);
    			attr_dev(div3, "flex", "initial");
    			attr_dev(div3, "class", "svelte-p45rvm");
    			add_location(div3, file$i, 114, 2, 2446);
    			attr_dev(section, "layout", "row");
    			attr_dev(section, "class", "svelte-p45rvm");
    			add_location(section, file$i, 104, 0, 2204);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			mount_component(inlineinput, div0, null);
    			append_dev(section, t0);
    			append_dev(section, div2);
    			mount_component(expression, div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(section, t2);
    			append_dev(section, div3);
    			mount_component(iconbutton0, div3, null);
    			append_dev(div3, t3);
    			mount_component(iconbutton1, div3, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const inlineinput_changes = {};
    			if (dirty & /*item*/ 1) inlineinput_changes.value = /*item*/ ctx[0].expression;
    			inlineinput.$set(inlineinput_changes);
    			const expression_changes = {};
    			if (dirty & /*item*/ 1) expression_changes.expression = /*item*/ ctx[0].expression;
    			expression.$set(expression_changes);
    			const iconbutton0_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				iconbutton0_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton0.$set(iconbutton0_changes);
    			const iconbutton1_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				iconbutton1_changes.$$scope = { dirty, ctx };
    			}

    			iconbutton1.$set(iconbutton1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inlineinput.$$.fragment, local);
    			transition_in(expression.$$.fragment, local);
    			transition_in(iconbutton0.$$.fragment, local);
    			transition_in(iconbutton1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inlineinput.$$.fragment, local);
    			transition_out(expression.$$.fragment, local);
    			transition_out(iconbutton0.$$.fragment, local);
    			transition_out(iconbutton1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(inlineinput);
    			destroy_component(expression);
    			destroy_component(iconbutton0);
    			destroy_component(iconbutton1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	var copy,
    		deleteLine,
    		dispatch,
    		evaluateExpression,
    		expressionChange,
    		expressionKeyup,
    		math,
    		result;

    	math = create$2(all, { number: "number" });
    	dispatch = createEventDispatcher();
    	let { item } = $$props;
    	let { index } = $$props;
    	result = null;

    	expressionKeyup = function (e) {
    		return $$invalidate(0, item.expression = e.detail, item);
    	};

    	expressionChange = function (e) {
    		dispatch("changeExpression", { id: item.id, expression: e.detail });
    		return $$invalidate(0, item.expression = e.detail, item);
    	};

    	deleteLine = function (e) {
    		return dispatch("delete", item.id);
    	};

    	copy = function (e) {
    		var dummy;
    		dummy = document.createElement("input");
    		document.body.appendChild(dummy);
    		dummy.setAttribute("id", `clipboard-${item.id}`);
    		document.getElementById(`clipboard-${item.id}`).value = evaluateExpression(item.expression);
    		dummy.select();
    		document.execCommand("copy");
    		return document.body.removeChild(dummy);
    	};

    	evaluateExpression = function (expression) {
    		var dateattempt, invalidExpression;
    		invalidExpression = "";

    		if (expression != null) {
    			if (expression.trim().length > 0) {
    				try {
    					return math.evaluate(expression);
    				} catch(error) {

    					try {
    						//console.log e
    						dateattempt = Date.create(expression);

    						if (dateattempt.isValid()) {
    							return dateattempt;
    						} else {
    							return invalidExpression;
    						}
    					} catch(error) {

    						//console.log e2
    						return invalidExpression;
    					}
    				}
    			} else {
    				return "";
    			}
    		} else {
    			return "";
    		}
    	};

    	const writable_props = ["item", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Solver> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("index" in $$props) $$invalidate(5, index = $$props.index);
    	};

    	$$self.$capture_state = () => {
    		return {
    			copy,
    			deleteLine,
    			dispatch,
    			evaluateExpression,
    			expressionChange,
    			expressionKeyup,
    			math,
    			result,
    			item,
    			index
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("copy" in $$props) $$invalidate(1, copy = $$props.copy);
    		if ("deleteLine" in $$props) $$invalidate(2, deleteLine = $$props.deleteLine);
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("evaluateExpression" in $$props) evaluateExpression = $$props.evaluateExpression;
    		if ("expressionChange" in $$props) $$invalidate(3, expressionChange = $$props.expressionChange);
    		if ("expressionKeyup" in $$props) $$invalidate(4, expressionKeyup = $$props.expressionKeyup);
    		if ("math" in $$props) math = $$props.math;
    		if ("result" in $$props) result = $$props.result;
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("index" in $$props) $$invalidate(5, index = $$props.index);
    	};

    	return [item, copy, deleteLine, expressionChange, expressionKeyup, index];
    }

    class Solver$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { item: 0, index: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Solver",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console.warn("<Solver> was created without expected prop 'item'");
    		}

    		if (/*index*/ ctx[5] === undefined && !("index" in props)) {
    			console.warn("<Solver> was created without expected prop 'index'");
    		}
    	}

    	get item() {
    		throw new Error("<Solver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Solver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Solver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Solver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\Solver.svelte generated by Svelte v3.18.2 */
    const file$j = "src\\pages\\list\\items\\Solver.svelte";

    // (118:4) {#if mounted}
    function create_if_block$8(ctx) {
    	let current;

    	const draggablelist = new DraggableList({
    			props: {
    				list: /*item*/ ctx[0].data.lines,
    				key: "id",
    				$$slots: {
    					default: [
    						create_default_slot$9,
    						({ item, index }) => ({ 0: item, 14: index }),
    						({ item, index }) => (item ? 1 : 0) | (index ? 16384 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	draggablelist.$on("sort", function () {
    		if (is_function(/*reorder*/ ctx[7])) /*reorder*/ ctx[7].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(draggablelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(draggablelist, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const draggablelist_changes = {};
    			if (dirty & /*item*/ 1) draggablelist_changes.list = /*item*/ ctx[0].data.lines;

    			if (dirty & /*$$scope, item, index, changeExpression, deleteLine*/ 49163) {
    				draggablelist_changes.$$scope = { dirty, ctx };
    			}

    			draggablelist.$set(draggablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(draggablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(draggablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(draggablelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(118:4) {#if mounted}",
    		ctx
    	});

    	return block;
    }

    // (119:4) <DraggableList         list={item.data.lines}         key="id"         on:sort={reorder}         let:item       let:index     >
    function create_default_slot$9(ctx) {
    	let current;

    	const solver = new Solver$2({
    			props: {
    				item: /*item*/ ctx[0],
    				index: /*index*/ ctx[14]
    			},
    			$$inline: true
    		});

    	solver.$on("changeExpression", function () {
    		if (is_function(/*changeExpression*/ ctx[1])) /*changeExpression*/ ctx[1].apply(this, arguments);
    	});

    	solver.$on("delete", function () {
    		if (is_function(/*deleteLine*/ ctx[3])) /*deleteLine*/ ctx[3].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(solver.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(solver, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const solver_changes = {};
    			if (dirty & /*item*/ 1) solver_changes.item = /*item*/ ctx[0];
    			if (dirty & /*index*/ 16384) solver_changes.index = /*index*/ ctx[14];
    			solver.$set(solver_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(solver.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(solver.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(solver, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(119:4) <DraggableList         list={item.data.lines}         key=\\\"id\\\"         on:sort={reorder}         let:item       let:index     >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let section;
    	let t0;
    	let footer;
    	let div0;
    	let input;
    	let t1;
    	let div1;
    	let current;
    	let dispose;
    	let if_block = /*mounted*/ ctx[5] && create_if_block$8(ctx);

    	const expression = new _Expression({
    			props: {
    				expression: /*newItem*/ ctx[6].expression
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block) if_block.c();
    			t0 = space();
    			footer = element("footer");
    			div0 = element("div");
    			input = element("input");
    			t1 = space();
    			div1 = element("div");
    			create_component(expression.$$.fragment);
    			add_location(section, file$j, 116, 0, 2208);
    			attr_dev(input, "id", /*expressionElementId*/ ctx[4]);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Type in a math, unit conversion or relative date expression here.");
    			attr_dev(input, "class", "svelte-1ti1eew");
    			add_location(input, file$j, 133, 4, 2551);
    			attr_dev(div0, "flex", "40");
    			attr_dev(div0, "class", "svelte-1ti1eew");
    			add_location(div0, file$j, 132, 2, 2531);
    			attr_dev(div1, "flex", "60");
    			attr_dev(div1, "class", "svelte-1ti1eew");
    			add_location(div1, file$j, 135, 2, 2741);
    			attr_dev(footer, "layout", "row");
    			attr_dev(footer, "class", "svelte-1ti1eew");
    			add_location(footer, file$j, 131, 0, 2507);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block) if_block.m(section, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*newItem*/ ctx[6].expression);
    			append_dev(footer, t1);
    			append_dev(footer, div1);
    			mount_component(expression, div1, null);
    			current = true;

    			dispose = [
    				listen_dev(input, "input", /*input_input_handler*/ ctx[13]),
    				listen_dev(
    					input,
    					"keyup",
    					function () {
    						if (is_function(/*checkKeys*/ ctx[2])) /*checkKeys*/ ctx[2].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (/*mounted*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*expressionElementId*/ 16) {
    				attr_dev(input, "id", /*expressionElementId*/ ctx[4]);
    			}

    			if (dirty & /*newItem*/ 64 && input.value !== /*newItem*/ ctx[6].expression) {
    				set_input_value(input, /*newItem*/ ctx[6].expression);
    			}

    			const expression_changes = {};
    			if (dirty & /*newItem*/ 64) expression_changes.expression = /*newItem*/ ctx[6].expression;
    			expression.$set(expression_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(expression.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(expression.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(footer);
    			destroy_component(expression);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var add,
    		changeExpression,
    		checkKeys,
    		deleteLine,
    		expressionElementId,
    		mounted,
    		newItem,
    		reindex,
    		reorder,
    		reset,
    		saveCb,
    		update;

    	mounted = false;

    	onMount(function () {
    		return $$invalidate(5, mounted = true);
    	});

    	expressionElementId = `new-solver-${item.id}`;
    	newItem = null;

    	saveCb = function (r) {
    		return reset(true);
    	};

    	update = function () {
    		reindex();

    		return collection.save(
    			{
    				id: item.id,
    				data: { lines: item.data.lines }
    			},
    			saveCb
    		);
    	};

    	add = function () {
    		// set ordinal to max + 1
    		$$invalidate(6, newItem.created_at = Date.create(), newItem);

    		$$invalidate(6, newItem.modified_at = newItem.created_at, newItem);
    		item.data.lines.push(newItem);
    		return update();
    	};

    	reset = function (saved) {
    		return $$invalidate(6, newItem = {
    			id: uuid_1(),
    			ordinal: item.data.lines.length,
    			expression: "",
    			created_at: null,
    			modified_at: null
    		});
    	};

    	reset();

    	changeExpression = function (e) {
    		var itemToChangeIndex;

    		itemToChangeIndex = item.data.lines.findIndex(function (o) {
    			return o.id === e.detail.id;
    		});

    		$$invalidate(0, item.data.lines[itemToChangeIndex].expression = e.detail.expression, item);
    		return update();
    	};

    	reindex = function () {
    		return item.data.lines.forEach(function (item, index) {
    			return item.ordinal = index;
    		});
    	};

    	reorder = function (ev) {
    		$$invalidate(0, item.data.lines = ev.detail, item);
    		return update();
    	};

    	deleteLine = function (e) {
    		item.data.lines.remove(function (o) {
    			return o.id === e.detail;
    		});

    		// todo: reindex ordinals
    		return update();
    	};

    	checkKeys = function (e) {
    		if (e.code === "NumpadEnter" || e.code === "Enter" && !e.shiftKey) {
    			if (newItem.expression.length > 0) {
    				return add();
    			}
    		}
    	};

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Solver> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		newItem.expression = this.value;
    		$$invalidate(6, newItem);
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			add,
    			changeExpression,
    			checkKeys,
    			deleteLine,
    			expressionElementId,
    			mounted,
    			newItem,
    			reindex,
    			reorder,
    			reset,
    			saveCb,
    			update
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("add" in $$props) add = $$props.add;
    		if ("changeExpression" in $$props) $$invalidate(1, changeExpression = $$props.changeExpression);
    		if ("checkKeys" in $$props) $$invalidate(2, checkKeys = $$props.checkKeys);
    		if ("deleteLine" in $$props) $$invalidate(3, deleteLine = $$props.deleteLine);
    		if ("expressionElementId" in $$props) $$invalidate(4, expressionElementId = $$props.expressionElementId);
    		if ("mounted" in $$props) $$invalidate(5, mounted = $$props.mounted);
    		if ("newItem" in $$props) $$invalidate(6, newItem = $$props.newItem);
    		if ("reindex" in $$props) reindex = $$props.reindex;
    		if ("reorder" in $$props) $$invalidate(7, reorder = $$props.reorder);
    		if ("reset" in $$props) reset = $$props.reset;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("update" in $$props) update = $$props.update;
    	};

    	return [
    		item,
    		changeExpression,
    		checkKeys,
    		deleteLine,
    		expressionElementId,
    		mounted,
    		newItem,
    		reorder,
    		add,
    		reindex,
    		reset,
    		saveCb,
    		update,
    		input_input_handler
    	];
    }

    class Solver_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Solver_1",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console.warn("<Solver> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Solver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Solver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\items\Code.svelte generated by Svelte v3.18.2 */

    const { console: console_1$4 } = globals;
    const file$k = "src\\pages\\list\\items\\Code.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (151:2) {#each modes.modes as mode}
    function create_each_block$1(ctx) {
    	let option;
    	let t_value = /*mode*/ ctx[17].name + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*mode*/ ctx[17].mode;
    			option.value = option.__value;
    			add_location(option, file$k, 151, 4, 3597);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(151:2) {#each modes.modes as mode}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let select;
    	let t;
    	let textarea;
    	let dispose;
    	let each_value = modes.modes;
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			textarea = element("textarea");
    			if (/*item*/ ctx[0].data.mode === void 0) add_render_callback(() => /*select_change_handler*/ ctx[15].call(select));
    			add_location(select, file$k, 149, 0, 3501);
    			attr_dev(textarea, "id", /*thisUuid*/ ctx[1]);
    			add_location(textarea, file$k, 155, 0, 3669);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*item*/ ctx[0].data.mode);
    			insert_dev(target, t, anchor);
    			insert_dev(target, textarea, anchor);
    			set_input_value(textarea, /*textAreaContents*/ ctx[3]);

    			dispose = [
    				listen_dev(select, "change", /*select_change_handler*/ ctx[15]),
    				listen_dev(
    					select,
    					"change",
    					function () {
    						if (is_function(/*update*/ ctx[2]())) /*update*/ ctx[2]().apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[16])
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*modes*/ 0) {
    				each_value = modes.modes;
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*item*/ 1) {
    				select_option(select, /*item*/ ctx[0].data.mode);
    			}

    			if (dirty & /*thisUuid*/ 2) {
    				attr_dev(textarea, "id", /*thisUuid*/ ctx[1]);
    			}

    			if (dirty & /*textAreaContents*/ 8) {
    				set_input_value(textarea, /*textAreaContents*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(textarea);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var checkRefreshFlag,
    		codeEditor,
    		currentItemId,
    		debouncedUpdate,
    		forceRefresh,
    		html,
    		inlineEdit,
    		isMounted,
    		lastItemId,
    		saveCb,
    		showEditor,
    		thisUuid,
    		update;

    	thisUuid = `codemirror-${uuid_1()}`;
    	inlineEdit = null;
    	codeEditor = null;
    	html = item.data.contents;

    	saveCb = function (r) {
    		
    	};

    	//console.log "[#{r.id}] saved -- #{r.data.contents}"
    	//console.log r.data
    	// cm is a codemirror reference
    	// because of the dom shifting, it needs to be passed to ensure the correct value
    	update = function (cm) {
    		console.log(typeof cm);
    		modes.load(item.data.mode);

    		if (codeEditor != null) {
    			codeEditor.setOption("mode", item.data.mode);
    		}

    		if (cm != null) {
    			// save only on change
    			console.log(cm);

    			if (item.data.contents !== cm.getValue()) {
    				$$invalidate(0, item.data.contents = cm.getValue(), item);

    				return collection.save(
    					{
    						id: item.id,
    						data: {
    							mode: item.data.mode,
    							contents: cm.getValue()
    						}
    					},
    					saveCb
    				); // mode only
    			}
    		} else {
    			return collection.save(
    				{
    					id: item.id,
    					data: {
    						mode: item.data.mode,
    						contents: codeEditor.getValue()
    					}
    				},
    				saveCb
    			);
    		}
    	};

    	debouncedUpdate = update.debounce(500);
    	forceRefresh = false;
    	codeEditor = null;

    	showEditor = function (item) {
    		var domElement, elementId;
    		elementId = `${item.id}-editor`;
    		domElement = document.getElementById(thisUuid);

    		if (codeEditor != null) {
    			codeEditor.toTextArea();
    		}

    		$$invalidate(5, codeEditor = CodeMirror.fromTextArea(domElement, {
    			lineNumbers: true,
    			mode: "javascript",
    			readOnly: item.is_locked
    		}));

    		codeEditor.setOption("value", item.data.contents);

    		codeEditor.on("blur", function (cm) {
    			return update(cm);
    		});

    		return codeEditor.on("change", function (cm) {
    			return debouncedUpdate(cm);
    		});
    	};

    	isMounted = false;

    	onMount(function () {
    		$$invalidate(11, isMounted = true);
    		showEditor(item);
    		return modes.load(item.data.mode);
    	});

    	
    	lastItemId = null;
    	currentItemId = null;

    	// codemirror has issues on refresh, need to force
    	// the uuids are not mapped to the item, which is why the uuids change
    	checkRefreshFlag = function (item) {

    		if (item.id !== currentItemId) {
    			lastItemId = currentItemId;
    			currentItemId = item.id;

    			if (lastItemId != null) {
    				// rebuild the editor with the latest item
    				showEditor(item);

    				return modes.load(item.data.mode); // when null it is the first load
    			}
    		}
    	};

    	onDestroy(function () {
    		if (codeEditor != null) {
    			// this is required because it will not auto destroy and attach itself to another item in the list
    			// what a fucking piece of bullshit
    			return codeEditor.toTextArea();
    		}
    	});

    	const writable_props = ["item"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn(`<Code> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		item.data.mode = select_value(this);
    		$$invalidate(0, item);
    	}

    	function textarea_input_handler() {
    		textAreaContents = this.value;
    		($$invalidate(3, textAreaContents), $$invalidate(0, item));
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			checkRefreshFlag,
    			codeEditor,
    			currentItemId,
    			debouncedUpdate,
    			forceRefresh,
    			html,
    			inlineEdit,
    			isMounted,
    			lastItemId,
    			saveCb,
    			showEditor,
    			thisUuid,
    			update,
    			textAreaContents
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("checkRefreshFlag" in $$props) $$invalidate(4, checkRefreshFlag = $$props.checkRefreshFlag);
    		if ("codeEditor" in $$props) $$invalidate(5, codeEditor = $$props.codeEditor);
    		if ("currentItemId" in $$props) currentItemId = $$props.currentItemId;
    		if ("debouncedUpdate" in $$props) debouncedUpdate = $$props.debouncedUpdate;
    		if ("forceRefresh" in $$props) forceRefresh = $$props.forceRefresh;
    		if ("html" in $$props) html = $$props.html;
    		if ("inlineEdit" in $$props) inlineEdit = $$props.inlineEdit;
    		if ("isMounted" in $$props) $$invalidate(11, isMounted = $$props.isMounted);
    		if ("lastItemId" in $$props) lastItemId = $$props.lastItemId;
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("showEditor" in $$props) showEditor = $$props.showEditor;
    		if ("thisUuid" in $$props) $$invalidate(1, thisUuid = $$props.thisUuid);
    		if ("update" in $$props) $$invalidate(2, update = $$props.update);
    		if ("textAreaContents" in $$props) $$invalidate(3, textAreaContents = $$props.textAreaContents);
    	};

    	let textAreaContents;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isMounted, codeEditor, item*/ 2081) {
    			// handle property change from parent
    			 {
    				if (isMounted) {
    					codeEditor.setOption("readOnly", item.is_locked);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*checkRefreshFlag, item*/ 17) {
    			 checkRefreshFlag(item);
    		}

    		if ($$self.$$.dirty & /*item*/ 1) {
    			 $$invalidate(3, textAreaContents = item.data.contents);
    		}
    	};

    	return [
    		item,
    		thisUuid,
    		update,
    		textAreaContents,
    		checkRefreshFlag,
    		codeEditor,
    		currentItemId,
    		debouncedUpdate,
    		forceRefresh,
    		html,
    		inlineEdit,
    		isMounted,
    		lastItemId,
    		saveCb,
    		showEditor,
    		select_change_handler,
    		textarea_input_handler
    	];
    }

    class Code$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Code",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console_1$4.warn("<Code> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<Code>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Code>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\ModalGeneric.svelte generated by Svelte v3.18.2 */
    const file$l = "src\\components\\common\\ModalGeneric.svelte";
    const get_footer_slot_changes = dirty => ({});
    const get_footer_slot_context = ctx => ({});
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({});

    function create_fragment$m(ctx) {
    	let modal_background;
    	let t0;
    	let modal_1;
    	let modal_header;
    	let t1;
    	let modal_body;
    	let t2;
    	let modal_footer;
    	let current;
    	let dispose;
    	const header_slot_template = /*$$slots*/ ctx[4].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[3], get_header_slot_context);
    	const default_slot_template = /*$$slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
    	const footer_slot_template = /*$$slots*/ ctx[4].footer;
    	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[3], get_footer_slot_context);

    	const block = {
    		c: function create() {
    			modal_background = element("modal-background");
    			t0 = space();
    			modal_1 = element("modal");
    			modal_header = element("modal-header");
    			if (header_slot) header_slot.c();
    			t1 = space();
    			modal_body = element("modal-body");
    			if (default_slot) default_slot.c();
    			t2 = space();
    			modal_footer = element("modal-footer");
    			if (footer_slot) footer_slot.c();
    			set_custom_element_data(modal_background, "class", "svelte-166tkt");
    			add_location(modal_background, file$l, 89, 0, 1886);
    			set_custom_element_data(modal_header, "class", "svelte-166tkt");
    			add_location(modal_header, file$l, 91, 4, 1988);
    			set_custom_element_data(modal_body, "class", "svelte-166tkt");
    			add_location(modal_body, file$l, 94, 4, 2066);
    			set_custom_element_data(modal_footer, "class", "svelte-166tkt");
    			add_location(modal_footer, file$l, 97, 4, 2126);
    			attr_dev(modal_1, "role", "dialog");
    			attr_dev(modal_1, "aria-modal", "true");
    			attr_dev(modal_1, "class", "svelte-166tkt");
    			add_location(modal_1, file$l, 90, 0, 1925);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, modal_background, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, modal_1, anchor);
    			append_dev(modal_1, modal_header);

    			if (header_slot) {
    				header_slot.m(modal_header, null);
    			}

    			append_dev(modal_1, t1);
    			append_dev(modal_1, modal_body);

    			if (default_slot) {
    				default_slot.m(modal_body, null);
    			}

    			append_dev(modal_1, t2);
    			append_dev(modal_1, modal_footer);

    			if (footer_slot) {
    				footer_slot.m(modal_footer, null);
    			}

    			/*modal_1_binding*/ ctx[5](modal_1);
    			current = true;

    			dispose = listen_dev(
    				window,
    				"keydown",
    				function () {
    					if (is_function(/*handle_keydown*/ ctx[1])) /*handle_keydown*/ ctx[1].apply(this, arguments);
    				},
    				false,
    				false,
    				false
    			);
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (header_slot && header_slot.p && dirty & /*$$scope*/ 8) {
    				header_slot.p(get_slot_context(header_slot_template, ctx, /*$$scope*/ ctx[3], get_header_slot_context), get_slot_changes(header_slot_template, /*$$scope*/ ctx[3], dirty, get_header_slot_changes));
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null));
    			}

    			if (footer_slot && footer_slot.p && dirty & /*$$scope*/ 8) {
    				footer_slot.p(get_slot_context(footer_slot_template, ctx, /*$$scope*/ ctx[3], get_footer_slot_context), get_slot_changes(footer_slot_template, /*$$scope*/ ctx[3], dirty, get_footer_slot_changes));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			transition_in(default_slot, local);
    			transition_in(footer_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header_slot, local);
    			transition_out(default_slot, local);
    			transition_out(footer_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(modal_background);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(modal_1);
    			if (header_slot) header_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (footer_slot) footer_slot.d(detaching);
    			/*modal_1_binding*/ ctx[5](null);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let modal;
    	var handle_keydown, previously_focused;

    	handle_keydown = function (e) {

    		if (e.key === "Escape") {
    			close();
    			return;
    		}
    	}; /*
    if (e.key === 'Tab') {
      nodes = modal.querySelectorAll('*');
      tabbable = Array.from(nodes).filter(n((function(_this) {
        return function() {
          return n.tabIndex >= 0;
        };
      })(this)));
      index = tabbable.indexOf(document.activeElement);
      if (index === -1 && e.shiftKey) {
        index = 0;
      }
      index += tabbable.length + ((ref = e.shiftKey) != null ? ref : -{
        1: 1
      });
      index %= tabbable.length;
      tabbable[index].focus();
      return e.preventDefault();
    } */

    	previously_focused = typeof document !== "undefined" && document.activeElement;

    	if (previously_focused) {
    		onDestroy(function () {
    			return previously_focused.focus();
    		});
    	}

    	let { $$slots = {}, $$scope } = $$props;

    	function modal_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(0, modal = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("modal" in $$props) $$invalidate(0, modal = $$props.modal);
    		if ("handle_keydown" in $$props) $$invalidate(1, handle_keydown = $$props.handle_keydown);
    		if ("previously_focused" in $$props) previously_focused = $$props.previously_focused;
    	};

    	return [modal, handle_keydown, previously_focused, $$scope, $$slots, modal_1_binding];
    }

    class ModalGeneric extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalGeneric",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* src\components\common\ModalFooterDelete.svelte generated by Svelte v3.18.2 */
    const file$m = "src\\components\\common\\ModalFooterDelete.svelte";

    function create_fragment$n(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let button0;
    	let t3;
    	let div2;
    	let button1;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = " ";
    			t1 = space();
    			div1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Cancel";
    			t3 = space();
    			div2 = element("div");
    			button1 = element("button");
    			button1.textContent = "Delete";
    			attr_dev(div0, "flex", "flex");
    			add_location(div0, file$m, 20, 4, 331);
    			add_location(button0, file$m, 21, 30, 392);
    			attr_dev(div1, "flex", "initial");
    			attr_dev(div1, "a", "r");
    			add_location(div1, file$m, 21, 4, 366);
    			attr_dev(button1, "bg", "darkest-red");
    			attr_dev(button1, "fg", "white");
    			attr_dev(button1, "ml", "12");
    			add_location(button1, file$m, 22, 24, 467);
    			attr_dev(div2, "flex", "initial");
    			add_location(div2, file$m, 22, 4, 447);
    			attr_dev(div3, "layout", "row");
    			add_location(div3, file$m, 19, 0, 307);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, button0);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, button1);

    			dispose = [
    				listen_dev(
    					button0,
    					"click",
    					function () {
    						if (is_function(/*cancel*/ ctx[0])) /*cancel*/ ctx[0].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button1,
    					"click",
    					function () {
    						if (is_function(/*destroy*/ ctx[1])) /*destroy*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	var cancel, destroy, dispatch;
    	dispatch = createEventDispatcher();

    	destroy = function () {
    		return dispatch("confirm-delete");
    	};

    	cancel = function () {
    		return dispatch("cancel");
    	};

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("cancel" in $$props) $$invalidate(0, cancel = $$props.cancel);
    		if ("destroy" in $$props) $$invalidate(1, destroy = $$props.destroy);
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    	};

    	return [cancel, destroy];
    }

    class ModalFooterDelete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalFooterDelete",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* src\pages\list\ListItem.svelte generated by Svelte v3.18.2 */

    const { Object: Object_1$1, console: console_1$5 } = globals;
    const file$n = "src\\pages\\list\\ListItem.svelte";

    // (162:12) {:else}
    function create_else_block_1$1(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$n, 162, 97, 4369);
    			attr_dev(path1, "d", "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z");
    			add_location(path1, file$n, 162, 136, 4408);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$n, 162, 14, 4286);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(162:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (151:12) {#if item.is_favorite}
    function create_if_block_9(ctx) {
    	let svg;
    	let g0;
    	let path0;
    	let path1;
    	let g1;
    	let path2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g0 = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			g1 = svg_element("g");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0,0h24v24H0V0z");
    			add_location(path0, file$n, 154, 15, 3942);
    			attr_dev(path1, "fill", "none");
    			attr_dev(path1, "d", "M0,0h24v24H0V0z");
    			add_location(path1, file$n, 155, 15, 3997);
    			attr_dev(g0, "id", "Bounding_Boxes");
    			add_location(g0, file$n, 153, 14, 3903);
    			attr_dev(path2, "d", "M12,17.27L18.18,21l-1.64-7.03L22,9.24l-7.19-0.61L12,2L9.19,8.63L2,9.24l5.46,4.73L5.82,21L12,17.27z");
    			add_location(path2, file$n, 158, 16, 4101);
    			attr_dev(g1, "id", "Sharp");
    			add_location(g1, file$n, 157, 14, 4070);
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "x", "0px");
    			attr_dev(svg, "y", "0px");
    			attr_dev(svg, "width", "24px");
    			attr_dev(svg, "height", "24px");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "enable-background", "new 0 0 24 24");
    			attr_dev(svg, "xml:space", "preserve");
    			add_location(svg, file$n, 151, 14, 3656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g0);
    			append_dev(g0, path0);
    			append_dev(g0, path1);
    			append_dev(svg, g1);
    			append_dev(g1, path2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(151:12) {#if item.is_favorite}",
    		ctx
    	});

    	return block;
    }

    // (165:12) <label slot="label">
    function create_label_slot_3(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Toggle Favorite";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$n, 164, 12, 4649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_3.name,
    		type: "slot",
    		source: "(165:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (150:10) <MenuRow on:clicked={toggleFavorite}>
    function create_default_slot_5(ctx) {
    	let t;

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[0].is_favorite) return create_if_block_9;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(150:10) <MenuRow on:clicked={toggleFavorite}>",
    		ctx
    	});

    	return block;
    }

    // (171:12) {:else}
    function create_else_block$2(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$n, 171, 97, 5285);
    			attr_dev(path1, "d", "M20 8h-3V6.21c0-2.61-1.91-4.94-4.51-5.19C9.51.74 7 3.08 7 6h2c0-1.13.6-2.24 1.64-2.7C12.85 2.31 15 3.9 15 6v2H4v14h16V8zm-2 12H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z");
    			add_location(path1, file$n, 171, 136, 5324);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$n, 171, 14, 5202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(171:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (169:12) {#if item.is_locked}
    function create_if_block_8(ctx) {
    	let svg;
    	let g;
    	let path0;
    	let path1;
    	let path2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$n, 169, 112, 4916);
    			attr_dev(path1, "d", "M0 0h24v24H0V0z");
    			attr_dev(path1, "opacity", ".87");
    			add_location(path1, file$n, 169, 139, 4943);
    			attr_dev(g, "fill", "none");
    			add_location(g, file$n, 169, 97, 4901);
    			attr_dev(path2, "d", "M20 8h-3V6.21c0-2.61-1.91-4.94-4.51-5.19C9.51.74 7 3.08 7 6v2H4v14h16V8zm-8 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM9 8V6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9z");
    			add_location(path2, file$n, 169, 184, 4988);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$n, 169, 14, 4818);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g);
    			append_dev(g, path0);
    			append_dev(g, path1);
    			append_dev(svg, path2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(169:12) {#if item.is_locked}",
    		ctx
    	});

    	return block;
    }

    // (174:12) <label slot="label">
    function create_label_slot_2(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Toggle Lock";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$n, 173, 12, 5560);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2.name,
    		type: "slot",
    		source: "(174:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (168:10) <MenuRow on:clicked={toggleLock}>
    function create_default_slot_4(ctx) {
    	let t;

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[0].is_locked) return create_if_block_8;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(168:10) <MenuRow on:clicked={toggleLock}>",
    		ctx
    	});

    	return block;
    }

    // (178:10) {#if !item.is_locked}
    function create_if_block_7(ctx) {
    	let current;

    	const menurow = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_3$1],
    					label: [create_label_slot_1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow.$on("clicked", function () {
    		if (is_function(/*deleteConfirm*/ ctx[3])) /*deleteConfirm*/ ctx[3].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			create_component(menurow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(menurow, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const menurow_changes = {};

    			if (dirty & /*$$scope*/ 131072) {
    				menurow_changes.$$scope = { dirty, ctx };
    			}

    			menurow.$set(menurow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menurow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menurow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(menurow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(178:10) {#if !item.is_locked}",
    		ctx
    	});

    	return block;
    }

    // (182:12) <label slot="label">
    function create_label_slot_1(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Delete";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$n, 181, 12, 5943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1.name,
    		type: "slot",
    		source: "(182:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (179:10) <MenuRow on:clicked={deleteConfirm}>
    function create_default_slot_3$1(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$n, 179, 95, 5823);
    			attr_dev(path1, "d", "M6 21h12V7H6v14zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z");
    			add_location(path1, file$n, 179, 134, 5862);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$n, 179, 12, 5740);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(179:10) <MenuRow on:clicked={deleteConfirm}>",
    		ctx
    	});

    	return block;
    }

    // (189:12) <label slot="label">
    function create_label_slot(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Clone";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$n, 188, 12, 6507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot.name,
    		type: "slot",
    		source: "(189:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (187:10) <MenuRow  on:clicked={clone}>
    function create_default_slot_2$1(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$n, 187, 95, 6178);
    			attr_dev(path1, "d", "M16 8h-2v3h-3v2h3v3h2v-3h3v-2h-3V8zM2 12c0-2.79 1.64-5.2 4.01-6.32V3.52C2.52 4.76 0 8.09 0 12s2.52 7.24 6.01 8.48v-2.16C3.64 17.2 2 14.79 2 12zm13-9c-4.96 0-9 4.04-9 9s4.04 9 9 9 9-4.04 9-9-4.04-9-9-9zm0 16c-3.86 0-7-3.14-7-7s3.14-7 7-7 7 3.14 7 7-3.14 7-7 7z");
    			add_location(path1, file$n, 187, 134, 6217);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$n, 187, 12, 6095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(187:10) <MenuRow  on:clicked={clone}>",
    		ctx
    	});

    	return block;
    }

    // (147:8) <div slot="menu">
    function create_menu_slot(ctx) {
    	let div;
    	let input0;
    	let t0;
    	let input1;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let current;
    	let dispose;

    	const menurow0 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_5],
    					label: [create_label_slot_3]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow0.$on("clicked", function () {
    		if (is_function(/*toggleFavorite*/ ctx[9])) /*toggleFavorite*/ ctx[9].apply(this, arguments);
    	});

    	const menurow1 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_4],
    					label: [create_label_slot_2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow1.$on("clicked", function () {
    		if (is_function(/*toggleLock*/ ctx[10])) /*toggleLock*/ ctx[10].apply(this, arguments);
    	});

    	let if_block = !/*item*/ ctx[0].is_locked && create_if_block_7(ctx);

    	const menurow2 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_2$1],
    					label: [create_label_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow2.$on("clicked", function () {
    		if (is_function(/*clone*/ ctx[2])) /*clone*/ ctx[2].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			input0 = element("input");
    			t0 = space();
    			input1 = element("input");
    			t1 = space();
    			create_component(menurow0.$$.fragment);
    			t2 = space();
    			create_component(menurow1.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			create_component(menurow2.$$.fragment);
    			attr_dev(input0, "type", "checkbox");
    			input0.hidden = true;
    			add_location(input0, file$n, 147, 10, 3387);
    			attr_dev(input1, "type", "checkbox");
    			input1.hidden = true;
    			add_location(input1, file$n, 148, 10, 3481);
    			attr_dev(div, "slot", "menu");
    			add_location(div, file$n, 146, 8, 3359);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input0);
    			input0.checked = /*item*/ ctx[0].is_favorite;
    			append_dev(div, t0);
    			append_dev(div, input1);
    			input1.checked = /*item*/ ctx[0].is_locked;
    			append_dev(div, t1);
    			mount_component(menurow0, div, null);
    			append_dev(div, t2);
    			mount_component(menurow1, div, null);
    			append_dev(div, t3);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t4);
    			mount_component(menurow2, div, null);
    			current = true;

    			dispose = [
    				listen_dev(input0, "change", /*input0_change_handler*/ ctx[15]),
    				listen_dev(
    					input0,
    					"change",
    					function () {
    						if (is_function(/*favorite*/ ctx[6])) /*favorite*/ ctx[6].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(input1, "change", /*input1_change_handler*/ ctx[16]),
    				listen_dev(
    					input1,
    					"change",
    					function () {
    						if (is_function(/*lock*/ ctx[7])) /*lock*/ ctx[7].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*item*/ 1) {
    				input0.checked = /*item*/ ctx[0].is_favorite;
    			}

    			if (dirty & /*item*/ 1) {
    				input1.checked = /*item*/ ctx[0].is_locked;
    			}

    			const menurow0_changes = {};

    			if (dirty & /*$$scope, item*/ 131073) {
    				menurow0_changes.$$scope = { dirty, ctx };
    			}

    			menurow0.$set(menurow0_changes);
    			const menurow1_changes = {};

    			if (dirty & /*$$scope, item*/ 131073) {
    				menurow1_changes.$$scope = { dirty, ctx };
    			}

    			menurow1.$set(menurow1_changes);

    			if (!/*item*/ ctx[0].is_locked) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block_7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t4);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const menurow2_changes = {};

    			if (dirty & /*$$scope*/ 131072) {
    				menurow2_changes.$$scope = { dirty, ctx };
    			}

    			menurow2.$set(menurow2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menurow0.$$.fragment, local);
    			transition_in(menurow1.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(menurow2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menurow0.$$.fragment, local);
    			transition_out(menurow1.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(menurow2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(menurow0);
    			destroy_component(menurow1);
    			if (if_block) if_block.d();
    			destroy_component(menurow2);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_menu_slot.name,
    		type: "slot",
    		source: "(147:8) <div slot=\\\"menu\\\">",
    		ctx
    	});

    	return block;
    }

    // (145:6) <Menu {item} placement="bottom-end">
    function create_default_slot_1$2(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$n, 145, 91, 3148);
    			attr_dev(path1, "d", "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z");
    			add_location(path1, file$n, 145, 130, 3187);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$n, 145, 8, 3065);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(145:6) <Menu {item} placement=\\\"bottom-end\\\">",
    		ctx
    	});

    	return block;
    }

    // (202:6) {#if item.type== "note"}
    function create_if_block_6(ctx) {
    	let current;

    	const note = new Note$2({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(note.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(note, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const note_changes = {};
    			if (dirty & /*item*/ 1) note_changes.item = /*item*/ ctx[0];
    			note.$set(note_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(note.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(note.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(note, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(202:6) {#if item.type== \\\"note\\\"}",
    		ctx
    	});

    	return block;
    }

    // (205:6) {#if item.type== "code"}
    function create_if_block_5(ctx) {
    	let current;

    	const code = new Code$2({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(code.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(code, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const code_changes = {};
    			if (dirty & /*item*/ 1) code_changes.item = /*item*/ ctx[0];
    			code.$set(code_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(code.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(code.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(code, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(205:6) {#if item.type== \\\"code\\\"}",
    		ctx
    	});

    	return block;
    }

    // (208:6) {#if item.type== "checklist"}
    function create_if_block_4(ctx) {
    	let current;

    	const checklist = new Checklist$2({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(checklist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(checklist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const checklist_changes = {};
    			if (dirty & /*item*/ 1) checklist_changes.item = /*item*/ ctx[0];
    			checklist.$set(checklist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(checklist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(checklist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(checklist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(208:6) {#if item.type== \\\"checklist\\\"}",
    		ctx
    	});

    	return block;
    }

    // (211:6) {#if item.type== "solver"}
    function create_if_block_3(ctx) {
    	let current;

    	const solver = new Solver_1({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(solver.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(solver, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const solver_changes = {};
    			if (dirty & /*item*/ 1) solver_changes.item = /*item*/ ctx[0];
    			solver.$set(solver_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(solver.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(solver.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(solver, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(211:6) {#if item.type== \\\"solver\\\"}",
    		ctx
    	});

    	return block;
    }

    // (214:6) {#if item.type== "timesheet"}
    function create_if_block_2$1(ctx) {
    	let current;

    	const timesheet = new Timesheet$2({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(timesheet.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(timesheet, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const timesheet_changes = {};
    			if (dirty & /*item*/ 1) timesheet_changes.item = /*item*/ ctx[0];
    			timesheet.$set(timesheet_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timesheet.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timesheet.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(timesheet, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(214:6) {#if item.type== \\\"timesheet\\\"}",
    		ctx
    	});

    	return block;
    }

    // (217:6) {#if item.type== "list"}
    function create_if_block_1$1(ctx) {
    	let current;

    	const keypair = new KeyPair_1({
    			props: { item: /*item*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(keypair.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(keypair, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const keypair_changes = {};
    			if (dirty & /*item*/ 1) keypair_changes.item = /*item*/ ctx[0];
    			keypair.$set(keypair_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(keypair.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(keypair.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(keypair, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(217:6) {#if item.type== \\\"list\\\"}",
    		ctx
    	});

    	return block;
    }

    // (226:0) {#if deleteModal}
    function create_if_block$9(ctx) {
    	let current;

    	const modal = new ModalGeneric({
    			props: {
    				$$slots: {
    					default: [create_default_slot$a],
    					footer: [create_footer_slot],
    					header: [create_header_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modal.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modal_changes = {};

    			if (dirty & /*$$scope, deleteItem, cancel*/ 131090) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			modal.$set(modal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(226:0) {#if deleteModal}",
    		ctx
    	});

    	return block;
    }

    // (228:2) <h1 slot="header" fg="darkest-red">
    function create_header_slot(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Delete this item?";
    			attr_dev(h1, "slot", "header");
    			attr_dev(h1, "fg", "darkest-red");
    			add_location(h1, file$n, 227, 2, 7264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_header_slot.name,
    		type: "slot",
    		source: "(228:2) <h1 slot=\\\"header\\\" fg=\\\"darkest-red\\\">",
    		ctx
    	});

    	return block;
    }

    // (233:2) <div slot="footer">
    function create_footer_slot(ctx) {
    	let div;
    	let current;
    	const modalfooterdelete = new ModalFooterDelete({ $$inline: true });

    	modalfooterdelete.$on("confirm-delete", function () {
    		if (is_function(/*deleteItem*/ ctx[4])) /*deleteItem*/ ctx[4].apply(this, arguments);
    	});

    	modalfooterdelete.$on("cancel", function () {
    		if (is_function(/*cancel*/ ctx[1])) /*cancel*/ ctx[1].apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(modalfooterdelete.$$.fragment);
    			attr_dev(div, "slot", "footer");
    			attr_dev(div, "class", "svelte-1etbjla");
    			add_location(div, file$n, 232, 2, 7379);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(modalfooterdelete, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalfooterdelete.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalfooterdelete.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(modalfooterdelete);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_footer_slot.name,
    		type: "slot",
    		source: "(233:2) <div slot=\\\"footer\\\">",
    		ctx
    	});

    	return block;
    }

    // (227:0) <Modal>
    function create_default_slot$a(ctx) {
    	let t0;
    	let p;
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = space();
    			p = element("p");
    			p.textContent = "This item will be permanently deleted.";
    			t2 = space();
    			add_location(p, file$n, 228, 2, 7324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(227:0) <Modal>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let article;
    	let header;
    	let div0;
    	let h1;
    	let t0;
    	let div1;
    	let t1;
    	let section;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let footer;
    	let div2;
    	let t8;
    	let t9_value = /*item*/ ctx[0].created_at.format("") + "";
    	let t9;
    	let t10;
    	let div3;
    	let t11;
    	let t12_value = /*item*/ ctx[0].modified_at.format("") + "";
    	let t12;
    	let t13;
    	let if_block6_anchor;
    	let current;

    	const inlineinput = new InlineInput({
    			props: { value: /*item*/ ctx[0].name },
    			$$inline: true
    		});

    	inlineinput.$on("update", function () {
    		if (is_function(/*nameChange*/ ctx[8])) /*nameChange*/ ctx[8].apply(this, arguments);
    	});

    	const menu = new Menu({
    			props: {
    				item: /*item*/ ctx[0],
    				placement: "bottom-end",
    				$$slots: {
    					default: [create_default_slot_1$2],
    					menu: [create_menu_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = /*item*/ ctx[0].type == "note" && create_if_block_6(ctx);
    	let if_block1 = /*item*/ ctx[0].type == "code" && create_if_block_5(ctx);
    	let if_block2 = /*item*/ ctx[0].type == "checklist" && create_if_block_4(ctx);
    	let if_block3 = /*item*/ ctx[0].type == "solver" && create_if_block_3(ctx);
    	let if_block4 = /*item*/ ctx[0].type == "timesheet" && create_if_block_2$1(ctx);
    	let if_block5 = /*item*/ ctx[0].type == "list" && create_if_block_1$1(ctx);
    	let if_block6 = /*deleteModal*/ ctx[5] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			article = element("article");
    			header = element("header");
    			div0 = element("div");
    			h1 = element("h1");
    			create_component(inlineinput.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(menu.$$.fragment);
    			t1 = space();
    			section = element("section");
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			t5 = space();
    			if (if_block4) if_block4.c();
    			t6 = space();
    			if (if_block5) if_block5.c();
    			t7 = space();
    			footer = element("footer");
    			div2 = element("div");
    			t8 = text("Created: ");
    			t9 = text(t9_value);
    			t10 = space();
    			div3 = element("div");
    			t11 = text("Modified: ");
    			t12 = text(t12_value);
    			t13 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty();
    			add_location(h1, file$n, 140, 6, 2904);
    			attr_dev(div0, "flex", "");
    			attr_dev(div0, "class", "svelte-1etbjla");
    			add_location(div0, file$n, 139, 4, 2887);
    			attr_dev(div1, "a", "r");
    			attr_dev(div1, "class", "actions svelte-1etbjla");
    			add_location(div1, file$n, 142, 4, 2984);
    			attr_dev(header, "layout", "row");
    			attr_dev(header, "class", "svelte-1etbjla");
    			add_location(header, file$n, 138, 2, 2861);
    			add_location(section, file$n, 200, 2, 6648);
    			attr_dev(div2, "class", "svelte-1etbjla");
    			add_location(div2, file$n, 221, 4, 7109);
    			attr_dev(div3, "class", "svelte-1etbjla");
    			add_location(div3, file$n, 222, 4, 7162);
    			attr_dev(footer, "class", "svelte-1etbjla");
    			add_location(footer, file$n, 220, 2, 7096);
    			attr_dev(article, "class", "svelte-1etbjla");
    			add_location(article, file$n, 137, 0, 2849);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, header);
    			append_dev(header, div0);
    			append_dev(div0, h1);
    			mount_component(inlineinput, h1, null);
    			append_dev(header, t0);
    			append_dev(header, div1);
    			mount_component(menu, div1, null);
    			append_dev(article, t1);
    			append_dev(article, section);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t2);
    			if (if_block1) if_block1.m(section, null);
    			append_dev(section, t3);
    			if (if_block2) if_block2.m(section, null);
    			append_dev(section, t4);
    			if (if_block3) if_block3.m(section, null);
    			append_dev(section, t5);
    			if (if_block4) if_block4.m(section, null);
    			append_dev(section, t6);
    			if (if_block5) if_block5.m(section, null);
    			append_dev(article, t7);
    			append_dev(article, footer);
    			append_dev(footer, div2);
    			append_dev(div2, t8);
    			append_dev(div2, t9);
    			append_dev(footer, t10);
    			append_dev(footer, div3);
    			append_dev(div3, t11);
    			append_dev(div3, t12);
    			insert_dev(target, t13, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const inlineinput_changes = {};
    			if (dirty & /*item*/ 1) inlineinput_changes.value = /*item*/ ctx[0].name;
    			inlineinput.$set(inlineinput_changes);
    			const menu_changes = {};
    			if (dirty & /*item*/ 1) menu_changes.item = /*item*/ ctx[0];

    			if (dirty & /*$$scope, clone, deleteConfirm, item, toggleLock, toggleFavorite, lock, favorite*/ 132813) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			menu.$set(menu_changes);

    			if (/*item*/ ctx[0].type == "note") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[0].type == "code") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[0].type == "checklist") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    					transition_in(if_block2, 1);
    				} else {
    					if_block2 = create_if_block_4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(section, t4);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[0].type == "solver") {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    					transition_in(if_block3, 1);
    				} else {
    					if_block3 = create_if_block_3(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(section, t5);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[0].type == "timesheet") {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    					transition_in(if_block4, 1);
    				} else {
    					if_block4 = create_if_block_2$1(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(section, t6);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[0].type == "list") {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    					transition_in(if_block5, 1);
    				} else {
    					if_block5 = create_if_block_1$1(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(section, null);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*item*/ 1) && t9_value !== (t9_value = /*item*/ ctx[0].created_at.format("") + "")) set_data_dev(t9, t9_value);
    			if ((!current || dirty & /*item*/ 1) && t12_value !== (t12_value = /*item*/ ctx[0].modified_at.format("") + "")) set_data_dev(t12, t12_value);

    			if (/*deleteModal*/ ctx[5]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    					transition_in(if_block6, 1);
    				} else {
    					if_block6 = create_if_block$9(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inlineinput.$$.fragment, local);
    			transition_in(menu.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block5);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inlineinput.$$.fragment, local);
    			transition_out(menu.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block5);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(article);
    			destroy_component(inlineinput);
    			destroy_component(menu);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (detaching) detach_dev(t13);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(if_block6_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { item } = $$props;

    	var cancel,
    		clone,
    		debouncedUpdate,
    		deleteConfirm,
    		deleteItem,
    		deleteModal,
    		favorite,
    		lock,
    		nameChange,
    		saveCb,
    		test,
    		toggleFavorite,
    		toggleLock,
    		update;

    	deleteModal = false;

    	saveCb = function (returnedObject) {
    		if (returnedObject != null) {
    			console.log("returnedObject");
    			console.log(returnedObject);
    			console.log("saved!");
    			Object.merge(item, returnedObject, { deep: true });
    			return console.log(item);
    		} else {
    			return console.log("Save error");
    		}
    	};

    	update = function (name) {
    		return collection.save({ id: item.id, name }, saveCb);
    	};

    	favorite = function () {
    		return collection.save(
    			{
    				id: item.id,
    				is_favorite: item.is_favorite
    			},
    			saveCb
    		);
    	};

    	lock = function () {
    		return collection.save({ id: item.id, is_locked: item.is_locked }, saveCb);
    	};

    	debouncedUpdate = update.debounce(250);

    	toggleFavorite = function () {
    		$$invalidate(0, item.is_favorite = !item.is_favorite, item);
    		return favorite();
    	};

    	toggleLock = function () {
    		$$invalidate(0, item.is_locked = !item.is_locked, item);
    		return lock();
    	};

    	clone = function () {
    		var cb, newItem;

    		cb = function (data) {
    			
    		};

    		newItem = Object.clone(item, true);
    		newItem.name = `${item.name} clone`;
    		delete newItem.id;
    		return collection.addStub(item.type, newItem, cb);
    	};

    	deleteItem = function () {
    		console.log("Delete confirmed");
    		return collection.delete(item, cancel);
    	};

    	deleteConfirm = function () {
    		return $$invalidate(5, deleteModal = true);
    	};

    	cancel = function () {
    		console.log(`${Date.create()}: List Item cancel callback`);
    		return $$invalidate(5, deleteModal = false);
    	};

    	nameChange = function (e) {
    		update(e.detail);
    		return $$invalidate(0, item.name = e.detail, item);
    	};

    	test = function () {
    		return console.log(item);
    	};

    	const writable_props = ["item"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$5.warn(`<ListItem> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		item.is_favorite = this.checked;
    		$$invalidate(0, item);
    	}

    	function input1_change_handler() {
    		item.is_locked = this.checked;
    		$$invalidate(0, item);
    	}

    	$$self.$set = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => {
    		return {
    			item,
    			cancel,
    			clone,
    			debouncedUpdate,
    			deleteConfirm,
    			deleteItem,
    			deleteModal,
    			favorite,
    			lock,
    			nameChange,
    			saveCb,
    			test,
    			toggleFavorite,
    			toggleLock,
    			update
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("item" in $$props) $$invalidate(0, item = $$props.item);
    		if ("cancel" in $$props) $$invalidate(1, cancel = $$props.cancel);
    		if ("clone" in $$props) $$invalidate(2, clone = $$props.clone);
    		if ("debouncedUpdate" in $$props) debouncedUpdate = $$props.debouncedUpdate;
    		if ("deleteConfirm" in $$props) $$invalidate(3, deleteConfirm = $$props.deleteConfirm);
    		if ("deleteItem" in $$props) $$invalidate(4, deleteItem = $$props.deleteItem);
    		if ("deleteModal" in $$props) $$invalidate(5, deleteModal = $$props.deleteModal);
    		if ("favorite" in $$props) $$invalidate(6, favorite = $$props.favorite);
    		if ("lock" in $$props) $$invalidate(7, lock = $$props.lock);
    		if ("nameChange" in $$props) $$invalidate(8, nameChange = $$props.nameChange);
    		if ("saveCb" in $$props) saveCb = $$props.saveCb;
    		if ("test" in $$props) test = $$props.test;
    		if ("toggleFavorite" in $$props) $$invalidate(9, toggleFavorite = $$props.toggleFavorite);
    		if ("toggleLock" in $$props) $$invalidate(10, toggleLock = $$props.toggleLock);
    		if ("update" in $$props) update = $$props.update;
    	};

    	return [
    		item,
    		cancel,
    		clone,
    		deleteConfirm,
    		deleteItem,
    		deleteModal,
    		favorite,
    		lock,
    		nameChange,
    		toggleFavorite,
    		toggleLock,
    		debouncedUpdate,
    		saveCb,
    		test,
    		update,
    		input0_change_handler,
    		input1_change_handler
    	];
    }

    class ListItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ListItem",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
    			console_1$5.warn("<ListItem> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\list\Navigator.svelte generated by Svelte v3.18.2 */
    const file$o = "src\\pages\\list\\Navigator.svelte";

    // (65:12) <label slot="label">
    function create_label_slot_5(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Note";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 64, 12, 1680);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_5.name,
    		type: "slot",
    		source: "(65:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (63:10) <MenuRow on:clicked={add('note')}>
    function create_default_slot_6(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$o, 63, 95, 1540);
    			attr_dev(path1, "d", "M14 2H4v20h16V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z");
    			add_location(path1, file$o, 63, 134, 1579);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$o, 63, 12, 1457);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(63:10) <MenuRow on:clicked={add('note')}>",
    		ctx
    	});

    	return block;
    }

    // (69:12) <label slot="label">
    function create_label_slot_4(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Checklist";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 68, 12, 2016);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_4.name,
    		type: "slot",
    		source: "(69:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (67:10) <MenuRow on:clicked={add('checklist')}>
    function create_default_slot_5$1(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$o, 67, 95, 1879);
    			attr_dev(path1, "d", "M21 3H3v18h18V3zM10 17l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z");
    			add_location(path1, file$o, 67, 134, 1918);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$o, 67, 12, 1796);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(67:10) <MenuRow on:clicked={add('checklist')}>",
    		ctx
    	});

    	return block;
    }

    // (73:12) <label slot="label">
    function create_label_slot_3$1(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Value List";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 72, 12, 2372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_3$1.name,
    		type: "slot",
    		source: "(73:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (71:10) <MenuRow on:clicked={add('list')}>
    function create_default_slot_4$1(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$o, 71, 95, 2215);
    			attr_dev(path1, "d", "M2 20h20v-4H2v4zm2-3h2v2H4v-2zM2 4v4h20V4H2zm4 3H4V5h2v2zm-4 7h20v-4H2v4zm2-3h2v2H4v-2z");
    			add_location(path1, file$o, 71, 134, 2254);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$o, 71, 12, 2132);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(71:10) <MenuRow on:clicked={add('list')}>",
    		ctx
    	});

    	return block;
    }

    // (77:12) <label slot="label">
    function create_label_slot_2$1(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Solver";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 76, 12, 2649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_2$1.name,
    		type: "slot",
    		source: "(77:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (75:10) <MenuRow on:clicked={add('solver')}>
    function create_default_slot_3$2(ctx) {
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = space();
    			attr_dev(path, "d", "M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7V4z");
    			add_location(path, file$o, 75, 95, 2574);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$o, 75, 12, 2491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(75:10) <MenuRow on:clicked={add('solver')}>",
    		ctx
    	});

    	return block;
    }

    // (81:12) <label slot="label">
    function create_label_slot_1$1(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Code Snippet";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 80, 12, 3005);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot_1$1.name,
    		type: "slot",
    		source: "(81:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:10) <MenuRow on:clicked={add('code')}>
    function create_default_slot_2$2(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$o, 79, 95, 2845);
    			attr_dev(path1, "d", "M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z");
    			add_location(path1, file$o, 79, 134, 2884);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$o, 79, 12, 2762);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(79:10) <MenuRow on:clicked={add('code')}>",
    		ctx
    	});

    	return block;
    }

    // (85:12) <label slot="label">
    function create_label_slot$1(ctx) {
    	let label;

    	const block = {
    		c: function create() {
    			label = element("label");
    			label.textContent = "Timesheet";
    			attr_dev(label, "slot", "label");
    			add_location(label, file$o, 84, 12, 3333);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_label_slot$1.name,
    		type: "slot",
    		source: "(85:12) <label slot=\\\"label\\\">",
    		ctx
    	});

    	return block;
    }

    // (83:10) <MenuRow on:clicked={add('timesheet')}>
    function create_default_slot_1$3(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$o, 83, 95, 3212);
    			attr_dev(path1, "d", "M22 3h-3V1h-2v2H7V1H5v2H2v20h20V3zm-2 18H4V8h16v13z");
    			add_location(path1, file$o, 83, 134, 3251);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "width", "24");
    			add_location(svg, file$o, 83, 12, 3129);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(83:10) <MenuRow on:clicked={add('timesheet')}>",
    		ctx
    	});

    	return block;
    }

    // (61:8) <div slot="menu">
    function create_menu_slot$1(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let current;

    	const menurow0 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_6],
    					label: [create_label_slot_5]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow0.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("note"))) /*add*/ ctx[0]("note").apply(this, arguments);
    	});

    	const menurow1 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_5$1],
    					label: [create_label_slot_4]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow1.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("checklist"))) /*add*/ ctx[0]("checklist").apply(this, arguments);
    	});

    	const menurow2 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_4$1],
    					label: [create_label_slot_3$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow2.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("list"))) /*add*/ ctx[0]("list").apply(this, arguments);
    	});

    	const menurow3 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_3$2],
    					label: [create_label_slot_2$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow3.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("solver"))) /*add*/ ctx[0]("solver").apply(this, arguments);
    	});

    	const menurow4 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_2$2],
    					label: [create_label_slot_1$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow4.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("code"))) /*add*/ ctx[0]("code").apply(this, arguments);
    	});

    	const menurow5 = new MenuRow({
    			props: {
    				$$slots: {
    					default: [create_default_slot_1$3],
    					label: [create_label_slot$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	menurow5.$on("clicked", function () {
    		if (is_function(/*add*/ ctx[0]("timesheet"))) /*add*/ ctx[0]("timesheet").apply(this, arguments);
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(menurow0.$$.fragment);
    			t0 = space();
    			create_component(menurow1.$$.fragment);
    			t1 = space();
    			create_component(menurow2.$$.fragment);
    			t2 = space();
    			create_component(menurow3.$$.fragment);
    			t3 = space();
    			create_component(menurow4.$$.fragment);
    			t4 = space();
    			create_component(menurow5.$$.fragment);
    			attr_dev(div, "slot", "menu");
    			add_location(div, file$o, 60, 8, 1381);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(menurow0, div, null);
    			append_dev(div, t0);
    			mount_component(menurow1, div, null);
    			append_dev(div, t1);
    			mount_component(menurow2, div, null);
    			append_dev(div, t2);
    			mount_component(menurow3, div, null);
    			append_dev(div, t3);
    			mount_component(menurow4, div, null);
    			append_dev(div, t4);
    			mount_component(menurow5, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const menurow0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow0_changes.$$scope = { dirty, ctx };
    			}

    			menurow0.$set(menurow0_changes);
    			const menurow1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow1_changes.$$scope = { dirty, ctx };
    			}

    			menurow1.$set(menurow1_changes);
    			const menurow2_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow2_changes.$$scope = { dirty, ctx };
    			}

    			menurow2.$set(menurow2_changes);
    			const menurow3_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow3_changes.$$scope = { dirty, ctx };
    			}

    			menurow3.$set(menurow3_changes);
    			const menurow4_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow4_changes.$$scope = { dirty, ctx };
    			}

    			menurow4.$set(menurow4_changes);
    			const menurow5_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				menurow5_changes.$$scope = { dirty, ctx };
    			}

    			menurow5.$set(menurow5_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menurow0.$$.fragment, local);
    			transition_in(menurow1.$$.fragment, local);
    			transition_in(menurow2.$$.fragment, local);
    			transition_in(menurow3.$$.fragment, local);
    			transition_in(menurow4.$$.fragment, local);
    			transition_in(menurow5.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menurow0.$$.fragment, local);
    			transition_out(menurow1.$$.fragment, local);
    			transition_out(menurow2.$$.fragment, local);
    			transition_out(menurow3.$$.fragment, local);
    			transition_out(menurow4.$$.fragment, local);
    			transition_out(menurow5.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(menurow0);
    			destroy_component(menurow1);
    			destroy_component(menurow2);
    			destroy_component(menurow3);
    			destroy_component(menurow4);
    			destroy_component(menurow5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_menu_slot$1.name,
    		type: "slot",
    		source: "(61:8) <div slot=\\\"menu\\\">",
    		ctx
    	});

    	return block;
    }

    // (59:6) <Menu placement="bottom-start" openstate={menustate}>
    function create_default_slot$b(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path1;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			add_location(path0, file$o, 59, 96, 1274);
    			attr_dev(path1, "d", "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z");
    			add_location(path1, file$o, 59, 135, 1313);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "24");
    			attr_dev(svg, "height", "24");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$o, 59, 13, 1191);
    			add_location(div, file$o, 59, 8, 1186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(59:6) <Menu placement=\\\"bottom-start\\\" openstate={menustate}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let nav;
    	let div0;
    	let t;
    	let div1;
    	let input;
    	let current;
    	let dispose;

    	const menu = new Menu({
    			props: {
    				placement: "bottom-start",
    				openstate: /*menustate*/ ctx[1],
    				$$slots: {
    					default: [create_default_slot$b],
    					menu: [create_menu_slot$1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div0 = element("div");
    			create_component(menu.$$.fragment);
    			t = space();
    			div1 = element("div");
    			input = element("input");
    			attr_dev(div0, "flex", "initial");
    			add_location(div0, file$o, 57, 2, 1097);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "search");
    			attr_dev(input, "class", "svelte-131nz2d");
    			add_location(input, file$o, 94, 12, 3447);
    			attr_dev(div1, "flex", "");
    			add_location(div1, file$o, 94, 2, 3437);
    			attr_dev(nav, "layout", "row");
    			attr_dev(nav, "bg", "light-gray");
    			attr_dev(nav, "class", "svelte-131nz2d");
    			add_location(nav, file$o, 56, 0, 1060);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div0);
    			mount_component(menu, div0, null);
    			append_dev(nav, t);
    			append_dev(nav, div1);
    			append_dev(div1, input);
    			set_input_value(input, collection.filter_string);
    			current = true;

    			dispose = [
    				listen_dev(input, "input", /*input_input_handler*/ ctx[6]),
    				listen_dev(
    					input,
    					"keyup",
    					function () {
    						if (is_function(/*update*/ ctx[2])) /*update*/ ctx[2].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const menu_changes = {};
    			if (dirty & /*menustate*/ 2) menu_changes.openstate = /*menustate*/ ctx[1];

    			if (dirty & /*$$scope, add*/ 129) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			menu.$set(menu_changes);

    			if (dirty & /*collection*/ 0 && input.value !== collection.filter_string) {
    				set_input_value(input, collection.filter_string);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(menu);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	var add, click, debouncedRefresh, menustate, refresh, update;
    	menustate = false;

    	click = function (target) {
    		console.log("location", location$1);
    		return replace(`/${target}`);
    	};

    	add = function (type) {
    		var cb;

    		cb = function (data) {
    			return $$invalidate(1, menustate = false);
    		};

    		return collection.addStub(type, null, cb);
    	};

    	refresh = function () {
    		return collection.refresh();
    	};

    	debouncedRefresh = refresh.debounce(100);

    	update = function () {
    		return debouncedRefresh();
    	};

    	function input_input_handler() {
    		collection.filter_string = this.value;
    	}

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("add" in $$props) $$invalidate(0, add = $$props.add);
    		if ("click" in $$props) click = $$props.click;
    		if ("debouncedRefresh" in $$props) debouncedRefresh = $$props.debouncedRefresh;
    		if ("menustate" in $$props) $$invalidate(1, menustate = $$props.menustate);
    		if ("refresh" in $$props) refresh = $$props.refresh;
    		if ("update" in $$props) $$invalidate(2, update = $$props.update);
    	};

    	return [add, menustate, update, click, debouncedRefresh, refresh, input_input_handler];
    }

    class Navigator extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navigator",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src\pages\list\List.svelte generated by Svelte v3.18.2 */
    const file$p = "src\\pages\\list\\List.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (52:6) {#each $collection as item}
    function create_each_block$2(ctx) {
    	let div;
    	let t;
    	let hr;
    	let current;

    	const listitem = new ListItem({
    			props: { item: /*item*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(listitem.$$.fragment);
    			t = space();
    			hr = element("hr");
    			attr_dev(div, "container", "");
    			attr_dev(div, "class", "svelte-fq6xt9");
    			add_location(div, file$p, 52, 8, 1038);
    			attr_dev(hr, "class", "svelte-fq6xt9");
    			add_location(hr, file$p, 55, 8, 1106);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(listitem, div, null);
    			insert_dev(target, t, anchor);
    			insert_dev(target, hr, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const listitem_changes = {};
    			if (dirty & /*$collection*/ 1) listitem_changes.item = /*item*/ ctx[1];
    			listitem.$set(listitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(listitem);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(52:6) {#each $collection as item}",
    		ctx
    	});

    	return block;
    }

    // (58:6) {#if (($collection.length == 0) && (collection.filter_string.length > 0)) }
    function create_if_block$a(ctx) {
    	let div1;
    	let article;
    	let header;
    	let div0;
    	let h1;
    	let t0;
    	let b;
    	let t2;
    	let hr;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			article = element("article");
    			header = element("header");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text("No items found containing ");
    			b = element("b");
    			b.textContent = `${collection.filter_string}`;
    			t2 = space();
    			hr = element("hr");
    			add_location(b, file$p, 62, 46, 1357);
    			add_location(h1, file$p, 62, 16, 1327);
    			attr_dev(div0, "flex", "");
    			attr_dev(div0, "class", "svelte-fq6xt9");
    			add_location(div0, file$p, 61, 14, 1300);
    			attr_dev(header, "layout", "row");
    			attr_dev(header, "class", "svelte-fq6xt9");
    			add_location(header, file$p, 60, 12, 1264);
    			attr_dev(article, "class", "svelte-fq6xt9");
    			add_location(article, file$p, 59, 10, 1242);
    			attr_dev(div1, "container", "");
    			attr_dev(div1, "class", "svelte-fq6xt9");
    			add_location(div1, file$p, 58, 8, 1216);
    			attr_dev(hr, "class", "svelte-fq6xt9");
    			add_location(hr, file$p, 67, 8, 1483);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, article);
    			append_dev(article, header);
    			append_dev(header, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(h1, b);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, hr, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(58:6) {#if (($collection.length == 0) && (collection.filter_string.length > 0)) }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let main;
    	let section0;
    	let t0;
    	let section2;
    	let section1;
    	let t1;
    	let current;
    	const navigator = new Navigator({ $$inline: true });
    	let each_value = /*$collection*/ ctx[0];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*$collection*/ ctx[0].length == 0 && collection.filter_string.length > 0 && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			section0 = element("section");
    			create_component(navigator.$$.fragment);
    			t0 = space();
    			section2 = element("section");
    			section1 = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(section0, "flex", "initial");
    			attr_dev(section0, "class", "svelte-fq6xt9");
    			add_location(section0, file$p, 46, 2, 910);
    			add_location(section1, file$p, 50, 4, 986);
    			attr_dev(section2, "flex", "");
    			attr_dev(section2, "class", "svelte-fq6xt9");
    			add_location(section2, file$p, 49, 2, 967);
    			attr_dev(main, "layout", "column");
    			attr_dev(main, "class", "svelte-fq6xt9");
    			add_location(main, file$p, 45, 0, 885);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, section0);
    			mount_component(navigator, section0, null);
    			append_dev(main, t0);
    			append_dev(main, section2);
    			append_dev(section2, section1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section1, null);
    			}

    			append_dev(section1, t1);
    			if (if_block) if_block.m(section1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$collection*/ 1) {
    				each_value = /*$collection*/ ctx[0];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section1, t1);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*$collection*/ ctx[0].length == 0 && collection.filter_string.length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(section1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigator.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigator.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(navigator);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $collection;
    	validate_store(collection, "collection");
    	component_subscribe($$self, collection, $$value => $$invalidate(0, $collection = $$value));

    	$$self.$capture_state = () => {
    		return {};
    	};

    	$$self.$inject_state = $$props => {
    		if ("$collection" in $$props) collection.set($collection = $$props.$collection);
    	};

    	return [$collection];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* src\pages\calendar\Calendar.svelte generated by Svelte v3.18.2 */

    const { console: console_1$6 } = globals;
    const file$q = "src\\pages\\calendar\\Calendar.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	child_ctx[14] = i;
    	return child_ctx;
    }

    // (147:10) {:else}
    function create_else_block_1$2(ctx) {
    	let td;
    	let t_value = /*day*/ ctx[15].format("{d}") + "";
    	let t;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t = text(t_value);
    			attr_dev(td, "month", "current");
    			attr_dev(td, "class", "svelte-14b26l0");
    			add_location(td, file$q, 147, 12, 3063);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*weeks*/ 128 && t_value !== (t_value = /*day*/ ctx[15].format("{d}") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(147:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (141:10) {#if (parseInt(day.format("{M}")) != parseInt(currentMonth)) }
    function create_if_block$b(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*weekIndex*/ ctx[14] < 1) return create_if_block_1$2;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(141:10) {#if (parseInt(day.format(\\\"{M}\\\")) != parseInt(currentMonth)) }",
    		ctx
    	});

    	return block;
    }

    // (144:12) {:else}
    function create_else_block$3(ctx) {
    	let td;
    	let t_value = /*day*/ ctx[15].format("{d}") + "";
    	let t;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t = text(t_value);
    			attr_dev(td, "month", "next");
    			attr_dev(td, "class", "svelte-14b26l0");
    			add_location(td, file$q, 144, 14, 2973);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*weeks*/ 128 && t_value !== (t_value = /*day*/ ctx[15].format("{d}") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(144:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (142:12) {#if (weekIndex < 1) }
    function create_if_block_1$2(ctx) {
    	let td;
    	let t_value = /*day*/ ctx[15].format("{d}") + "";
    	let t;

    	const block = {
    		c: function create() {
    			td = element("td");
    			t = text(t_value);
    			attr_dev(td, "month", "previous");
    			attr_dev(td, "class", "svelte-14b26l0");
    			add_location(td, file$q, 142, 14, 2893);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*weeks*/ 128 && t_value !== (t_value = /*day*/ ctx[15].format("{d}") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(142:12) {#if (weekIndex < 1) }",
    		ctx
    	});

    	return block;
    }

    // (140:8) {#each week as day, dayindex}
    function create_each_block_1(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*weeks, currentMonth*/ 132) show_if = !!(parseInt(/*day*/ ctx[15].format("{M}")) != parseInt(/*currentMonth*/ ctx[2]));
    		if (show_if) return create_if_block$b;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(140:8) {#each week as day, dayindex}",
    		ctx
    	});

    	return block;
    }

    // (138:4) {#each weeks as week, weekIndex}
    function create_each_block$3(ctx) {
    	let tr;
    	let t;
    	let each_value_1 = /*week*/ ctx[12];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			add_location(tr, file$q, 138, 6, 2728);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(tr, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*weeks, parseInt, currentMonth*/ 132) {
    				each_value_1 = /*week*/ ctx[12];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(138:4) {#each weeks as week, weekIndex}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let h1;
    	let t1;
    	let table;
    	let thead;
    	let tr0;
    	let td0;
    	let t2;
    	let t3;
    	let tr1;
    	let td1;
    	let t5;
    	let td2;
    	let t7;
    	let td3;
    	let t9;
    	let td4;
    	let t11;
    	let td5;
    	let t13;
    	let td6;
    	let t15;
    	let td7;
    	let t17;
    	let tbody;
    	let t18;
    	let tfoot;
    	let tr2;
    	let td8;
    	let button0;
    	let t20;
    	let td9;
    	let button1;
    	let t22;
    	let td10;
    	let t23;
    	let td11;
    	let button2;
    	let t25;
    	let td12;
    	let t26;
    	let td13;
    	let button3;
    	let t28;
    	let td14;
    	let button4;
    	let dispose;
    	let each_value = /*weeks*/ ctx[7];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Calendar";
    			t1 = space();
    			table = element("table");
    			thead = element("thead");
    			tr0 = element("tr");
    			td0 = element("td");
    			t2 = text(/*currentCalendarHeader*/ ctx[1]);
    			t3 = space();
    			tr1 = element("tr");
    			td1 = element("td");
    			td1.textContent = "S";
    			t5 = space();
    			td2 = element("td");
    			td2.textContent = "M";
    			t7 = space();
    			td3 = element("td");
    			td3.textContent = "T";
    			t9 = space();
    			td4 = element("td");
    			td4.textContent = "W";
    			t11 = space();
    			td5 = element("td");
    			td5.textContent = "T";
    			t13 = space();
    			td6 = element("td");
    			td6.textContent = "F";
    			t15 = space();
    			td7 = element("td");
    			td7.textContent = "S";
    			t17 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t18 = space();
    			tfoot = element("tfoot");
    			tr2 = element("tr");
    			td8 = element("td");
    			button0 = element("button");
    			button0.textContent = "«";
    			t20 = space();
    			td9 = element("td");
    			button1 = element("button");
    			button1.textContent = "<";
    			t22 = space();
    			td10 = element("td");
    			t23 = space();
    			td11 = element("td");
    			button2 = element("button");
    			button2.textContent = "•";
    			t25 = space();
    			td12 = element("td");
    			t26 = space();
    			td13 = element("td");
    			button3 = element("button");
    			button3.textContent = ">";
    			t28 = space();
    			td14 = element("td");
    			button4 = element("button");
    			button4.textContent = "»";
    			add_location(h1, file$q, 113, 0, 2385);
    			attr_dev(td0, "colspan", "7");
    			attr_dev(td0, "class", "svelte-14b26l0");
    			add_location(td0, file$q, 124, 6, 2462);
    			attr_dev(tr0, "monthname", "");
    			attr_dev(tr0, "class", "svelte-14b26l0");
    			add_location(tr0, file$q, 123, 4, 2441);
    			attr_dev(td1, "class", "svelte-14b26l0");
    			add_location(td1, file$q, 127, 6, 2541);
    			attr_dev(td2, "class", "svelte-14b26l0");
    			add_location(td2, file$q, 128, 6, 2558);
    			attr_dev(td3, "class", "svelte-14b26l0");
    			add_location(td3, file$q, 129, 6, 2575);
    			attr_dev(td4, "class", "svelte-14b26l0");
    			add_location(td4, file$q, 130, 6, 2592);
    			attr_dev(td5, "class", "svelte-14b26l0");
    			add_location(td5, file$q, 131, 6, 2609);
    			attr_dev(td6, "class", "svelte-14b26l0");
    			add_location(td6, file$q, 132, 6, 2626);
    			attr_dev(td7, "class", "svelte-14b26l0");
    			add_location(td7, file$q, 133, 6, 2643);
    			attr_dev(tr1, "weekdays", "");
    			attr_dev(tr1, "class", "svelte-14b26l0");
    			add_location(tr1, file$q, 126, 4, 2521);
    			add_location(thead, file$q, 122, 2, 2429);
    			attr_dev(tbody, "class", "svelte-14b26l0");
    			add_location(tbody, file$q, 136, 2, 2677);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "svelte-14b26l0");
    			add_location(button0, file$q, 155, 10, 3204);
    			add_location(td8, file$q, 155, 6, 3200);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "svelte-14b26l0");
    			add_location(button1, file$q, 156, 10, 3282);
    			add_location(td9, file$q, 156, 6, 3278);
    			add_location(td10, file$q, 157, 6, 3349);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "svelte-14b26l0");
    			add_location(button2, file$q, 158, 10, 3369);
    			add_location(td11, file$q, 158, 6, 3365);
    			add_location(td12, file$q, 159, 6, 3437);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "svelte-14b26l0");
    			add_location(button3, file$q, 160, 10, 3457);
    			add_location(td13, file$q, 160, 6, 3453);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "svelte-14b26l0");
    			add_location(button4, file$q, 161, 10, 3524);
    			add_location(td14, file$q, 161, 6, 3520);
    			add_location(tr2, file$q, 154, 4, 3189);
    			attr_dev(tfoot, "class", "svelte-14b26l0");
    			add_location(tfoot, file$q, 153, 2, 3177);
    			attr_dev(table, "calendar", "");
    			attr_dev(table, "class", "svelte-14b26l0");
    			add_location(table, file$q, 121, 0, 2410);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr0);
    			append_dev(tr0, td0);
    			append_dev(td0, t2);
    			append_dev(thead, t3);
    			append_dev(thead, tr1);
    			append_dev(tr1, td1);
    			append_dev(tr1, t5);
    			append_dev(tr1, td2);
    			append_dev(tr1, t7);
    			append_dev(tr1, td3);
    			append_dev(tr1, t9);
    			append_dev(tr1, td4);
    			append_dev(tr1, t11);
    			append_dev(tr1, td5);
    			append_dev(tr1, t13);
    			append_dev(tr1, td6);
    			append_dev(tr1, t15);
    			append_dev(tr1, td7);
    			append_dev(table, t17);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			append_dev(table, t18);
    			append_dev(table, tfoot);
    			append_dev(tfoot, tr2);
    			append_dev(tr2, td8);
    			append_dev(td8, button0);
    			append_dev(tr2, t20);
    			append_dev(tr2, td9);
    			append_dev(td9, button1);
    			append_dev(tr2, t22);
    			append_dev(tr2, td10);
    			append_dev(tr2, t23);
    			append_dev(tr2, td11);
    			append_dev(td11, button2);
    			append_dev(tr2, t25);
    			append_dev(tr2, td12);
    			append_dev(tr2, t26);
    			append_dev(tr2, td13);
    			append_dev(td13, button3);
    			append_dev(tr2, t28);
    			append_dev(tr2, td14);
    			append_dev(td14, button4);

    			dispose = [
    				listen_dev(
    					button0,
    					"click",
    					function () {
    						if (is_function(/*previousYear*/ ctx[6])) /*previousYear*/ ctx[6].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button1,
    					"click",
    					function () {
    						if (is_function(/*previous*/ ctx[5])) /*previous*/ ctx[5].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button2,
    					"click",
    					function () {
    						if (is_function(/*current*/ ctx[0])) /*current*/ ctx[0].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button3,
    					"click",
    					function () {
    						if (is_function(/*next*/ ctx[3])) /*next*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				),
    				listen_dev(
    					button4,
    					"click",
    					function () {
    						if (is_function(/*nextYear*/ ctx[4])) /*nextYear*/ ctx[4].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				)
    			];
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*currentCalendarHeader*/ 2) set_data_dev(t2, /*currentCalendarHeader*/ ctx[1]);

    			if (dirty & /*weeks, parseInt, currentMonth*/ 132) {
    				each_value = /*weeks*/ ctx[7];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks, detaching);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	var current,
    		currentCalendar,
    		currentCalendarHeader,
    		currentDate,
    		currentMonth,
    		generate,
    		next,
    		nextYear,
    		previous,
    		previousYear,
    		weeks;

    	sugar.extend();
    	let { relativeDate } = $$props;
    	weeks = [];
    	currentCalendar = [];
    	currentMonth = null;
    	currentCalendarHeader = null;
    	currentDate = null;

    	generate = function () {
    		var calendarEnd, calendarStart, count, currentWeek, results, runningDate;
    		$$invalidate(7, weeks = []);

    		if (currentDate != null) {
    			$$invalidate(1, currentCalendarHeader = currentDate.format("{Month} {yyyy}"));
    			$$invalidate(2, currentMonth = currentDate.format("{M}"));
    			calendarStart = currentDate.clone().beginningOfMonth().beginningOfWeek();
    			calendarEnd = currentDate.clone().endOfMonth().endOfWeek();
    			runningDate = calendarStart.clone();
    			currentWeek = [];
    			count = 0;
    			results = [];

    			while (runningDate.isBetween(calendarStart, calendarEnd)) {
    				currentWeek.push(runningDate.clone());
    				runningDate.addDays(1);
    				count++;

    				if (count === 7) {
    					weeks.push(currentWeek);
    					currentWeek = [];
    					results.push(count = 0);
    				} else {
    					results.push(void 0);
    				}
    			}

    			return results;
    		}
    	};

    	current = function () {
    		currentDate = Date.create().clone();
    		console.log(currentDate);
    		return generate();
    	};

    	next = function () {
    		currentDate.addMonths(1);
    		generate();
    		return console.log(`currentDate ${currentDate}`);
    	};

    	previous = function () {
    		currentDate.addMonths(-1);
    		generate();
    		return console.log(`currentDate ${currentDate}`);
    	};

    	nextYear = function () {
    		currentDate.addYears(1);
    		generate();
    		return console.log(`currentDate ${currentDate}`);
    	};

    	previousYear = function () {
    		currentDate.addYears(-1);
    		generate();
    		return console.log(`currentDate ${currentDate}`);
    	};

    	current();
    	const writable_props = ["relativeDate"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$6.warn(`<Calendar> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("relativeDate" in $$props) $$invalidate(8, relativeDate = $$props.relativeDate);
    	};

    	$$self.$capture_state = () => {
    		return {
    			current,
    			currentCalendar,
    			currentCalendarHeader,
    			currentDate,
    			currentMonth,
    			generate,
    			next,
    			nextYear,
    			previous,
    			previousYear,
    			weeks,
    			relativeDate
    		};
    	};

    	$$self.$inject_state = $$props => {
    		if ("current" in $$props) $$invalidate(0, current = $$props.current);
    		if ("currentCalendar" in $$props) currentCalendar = $$props.currentCalendar;
    		if ("currentCalendarHeader" in $$props) $$invalidate(1, currentCalendarHeader = $$props.currentCalendarHeader);
    		if ("currentDate" in $$props) currentDate = $$props.currentDate;
    		if ("currentMonth" in $$props) $$invalidate(2, currentMonth = $$props.currentMonth);
    		if ("generate" in $$props) generate = $$props.generate;
    		if ("next" in $$props) $$invalidate(3, next = $$props.next);
    		if ("nextYear" in $$props) $$invalidate(4, nextYear = $$props.nextYear);
    		if ("previous" in $$props) $$invalidate(5, previous = $$props.previous);
    		if ("previousYear" in $$props) $$invalidate(6, previousYear = $$props.previousYear);
    		if ("weeks" in $$props) $$invalidate(7, weeks = $$props.weeks);
    		if ("relativeDate" in $$props) $$invalidate(8, relativeDate = $$props.relativeDate);
    	};

    	return [
    		current,
    		currentCalendarHeader,
    		currentMonth,
    		next,
    		nextYear,
    		previous,
    		previousYear,
    		weeks,
    		relativeDate
    	];
    }

    class Calendar$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { relativeDate: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Calendar",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*relativeDate*/ ctx[8] === undefined && !("relativeDate" in props)) {
    			console_1$6.warn("<Calendar> was created without expected prop 'relativeDate'");
    		}
    	}

    	get relativeDate() {
    		throw new Error("<Calendar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set relativeDate(value) {
    		throw new Error("<Calendar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\pages\settings\Settings.svelte generated by Svelte v3.18.2 */

    const file$r = "src\\pages\\settings\\Settings.svelte";

    function create_fragment$s(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Settings";
    			add_location(h1, file$r, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    class Settings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, null, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Settings",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.18.2 */
    const file$s = "src\\App.svelte";

    function create_fragment$t(ctx) {
    	let title_value;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let link4;
    	let current;
    	document.title = title_value = /*appName*/ ctx[0];

    	const router = new Router({
    			props: { routes: /*routes*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			create_component(router.$$.fragment);
    			attr_dev(link0, "rel", "stylesheet");
    			attr_dev(link0, "href", "./css/fullcalendar/core/main.css");
    			attr_dev(link0, "lang", "css");
    			add_location(link0, file$s, 35, 39, 650);
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "href", "./css/fullcalendar/daygrid/main.css");
    			attr_dev(link1, "lang", "css");
    			add_location(link1, file$s, 35, 113, 724);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "./css/fullcalendar/timegrid/main.css");
    			attr_dev(link2, "lang", "css");
    			add_location(link2, file$s, 35, 190, 801);
    			attr_dev(link3, "rel", "stylesheet");
    			attr_dev(link3, "href", "./css/fullcalendar/list/main.css");
    			attr_dev(link3, "lang", "css");
    			add_location(link3, file$s, 35, 268, 879);
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "href", "./css/minimal.min.css");
    			attr_dev(link4, "lang", "css");
    			add_location(link4, file$s, 35, 342, 953);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*appName*/ 1) && title_value !== (title_value = /*appName*/ ctx[0])) {
    				document.title = title_value;
    			}

    			const router_changes = {};
    			if (dirty & /*routes*/ 2) router_changes.routes = /*routes*/ ctx[1];
    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { environment } = $$props;
    	var appName, routes;

    	routes = {
    		"/": List,
    		"/calendar": Calendar$1,
    		"/settings": Settings
    	};

    	appName = "Rollapp";
    	const writable_props = ["environment"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$set = $$props => {
    		if ("environment" in $$props) $$invalidate(2, environment = $$props.environment);
    	};

    	$$self.$capture_state = () => {
    		return { environment, appName, routes };
    	};

    	$$self.$inject_state = $$props => {
    		if ("environment" in $$props) $$invalidate(2, environment = $$props.environment);
    		if ("appName" in $$props) $$invalidate(0, appName = $$props.appName);
    		if ("routes" in $$props) $$invalidate(1, routes = $$props.routes);
    	};

    	return [appName, routes, environment];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$t, safe_not_equal, { environment: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*environment*/ ctx[2] === undefined && !("environment" in props)) {
    			console.warn("<App> was created without expected prop 'environment'");
    		}
    	}

    	get environment() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set environment(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
        environment: "environment"
    	}
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
